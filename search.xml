<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小米手机免 root 去除广告以及卸载系统应用</title>
    <url>/2019/09/MIUI-adb/</url>
    <content><![CDATA[<p>本文所介绍的操作，需在电脑上进行。</p>
<h2 id="手机打开-USB-调试"><a href="#手机打开-USB-调试" class="headerlink" title="手机打开 USB 调试"></a>手机打开 USB 调试</h2><p>以及 USB 调试（安全模式）</p>
<h2 id="下载-ADB-工具"><a href="#下载-ADB-工具" class="headerlink" title="下载 ADB 工具"></a>下载 ADB 工具</h2><p><a href="http://veger.ys168.com/">http://veger.ys168.com/</a><br>在电脑软件这个文件夹里</p>
<p>解压后把三个文件，解压到 <code>C:\Windows\</code>里面</p>
<h2 id="安装小米刷机工具（安装手机驱动）"><a href="#安装小米刷机工具（安装手机驱动）" class="headerlink" title="安装小米刷机工具（安装手机驱动）"></a>安装小米刷机工具（安装手机驱动）</h2><p><a href="http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip">http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip</a></p>
<h2 id="电脑打开-cmd"><a href="#电脑打开-cmd" class="headerlink" title="电脑打开 cmd"></a>电脑打开 cmd</h2><p>删除应用的 ADB 命令是：  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> 应用包名</span><br></pre></td></tr></table></figure>
<p>（MIUI 9、MIUI 10 测试删除后能正常开机使用）  </p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span>  com.miui.systemAdSolution <span class="comment">#（小米系统广告解决方案 必删）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span>  com.miui.analytics （小米广告分析，必删）  </span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.gamecenter.sdk.service <span class="comment">#（小米游戏中心服务）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.gamecenter <span class="comment">#（小米游戏中心）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.sohu.inputmethod.sogou.xiaomi <span class="comment">#（搜狗输入法）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.player <span class="comment">#（小米音乐）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.video <span class="comment">#（小米视频）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.notes <span class="comment">#（小米便签）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.translation.youdao <span class="comment">#（有道翻译）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.translation.kingsoft <span class="comment">#（金山翻译）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.email <span class="comment">#（邮件）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.scanner <span class="comment">#（小米扫描）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.hybrid <span class="comment">#（混合器）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.bugreport <span class="comment">#（bug 反馈）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.milink.service <span class="comment">#（米连服务）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.browser <span class="comment">#（浏览器）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.gallery <span class="comment">#（相册）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.yellowpage <span class="comment">#（黄页）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.midrop <span class="comment">#（小米快传）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.virtualsim <span class="comment">#（小米虚拟器）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.payment <span class="comment">#（小米支付）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.mipay.wallet <span class="comment">#（小米钱包）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.soundrecorder <span class="comment">#（录音机）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.screenrecorder <span class="comment">#（屏幕录制）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.wallpaper <span class="comment">#（壁纸）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.voiceassist <span class="comment">#（语音助手）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.fm <span class="comment">#（收音机）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.touchassistant <span class="comment">#（悬浮球）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.cellbroadcastreceiver <span class="comment">#（小米广播）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.mitunes <span class="comment">#（小米助手）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.xiaomi.pass <span class="comment">#（小米卡包）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.thememanager <span class="comment">#（个性主题管理）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.wallpaper <span class="comment">#（动态壁纸）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.android.wallpaper.livepicker <span class="comment">#（动态壁纸获取）  </span></span><br><span class="line">adb shell pm uninstall --<span class="keyword">user</span> <span class="title">0</span> com.miui.klo.bugreport <span class="comment">#（KLO bug 反馈）</span></span><br></pre></td></tr></table></figure>

<p>前面两个是 MIUI 系统支撑广告及精准化推送的应用，应第一时间删除，删除后不会出现无法开机的情况。这样 MIUI 系统的广告就会少很多——没有验证是否完全屏蔽。  </p>
<p><strong>【警告】以下系统自带应用删除后必定无法正常开机（来自网络），请避免误删：</strong>  </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.miui</span><span class="selector-class">.cloudservice</span> （小米云服务）  </span><br><span class="line">com<span class="selector-class">.xiaomi</span><span class="selector-class">.account</span> （小米账户）  </span><br><span class="line">com<span class="selector-class">.miui</span><span class="selector-class">.cloudbackup</span> （云备份）  </span><br><span class="line">com<span class="selector-class">.xiaomi</span><span class="selector-class">.market</span> （应用市场）</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>为签到平台添加获取 Cookie 功能 GetCookies</title>
    <url>/2020/09/GetCookies-for-qiandao/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前使用 qiandao.today 的时候，我就一直使用 GetCookies 这个浏览器插件，没用它之前，我需要去打开特定的网站，按 F12 查找 cookie ，复制粘贴。有了它，这整个过程将被简化为，在网页中点两下。</p>
<p>这是一个开源的 chrome 插件，原项目地址：<a href="https://github.com/acgotaku/GetCookies">https://github.com/acgotaku/GetCookies</a></p>
<p>现在这个插件已经被 chrome 下架，要使用只能手动安装。然而它默认情况下是只能给 qiandao.today 这个网站用的，我们自己的搭建的签到平台，是没法使用这个插件的。</p>
<p>如果你想让它可以在你的签到平台上面使用，需要做一些修改，我是通过 <a href="https://github.com/acgotaku/GetCookies/issues/2">Github Issues</a> 找到解决方案的。</p>
<p>更改后项目：<a href="https://github.com/powersee/GetCookies">https://github.com/powersee/GetCookies</a></p>
<h3 id="更改过程"><a href="#更改过程" class="headerlink" title="更改过程"></a>更改过程</h3><p>首先需要把插件下载到电脑，可以通过 git clone ，也可以直接 download 。之后需要修改两个地方：</p>
<p>·<strong>mainfest.json</strong></p>
<p>将第 8 行的</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;matches&quot;</span>: [ <span class="string">&quot;https://qiandao.today/*&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>修改为自己的网站，如果有多个的话，可以使用 <code>,</code> 区分，例如</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;matches&quot;</span>: [ <span class="string">&quot;https://qiandao.powersee.top/*&quot;</span>,<span class="string">&quot;http://192.168.123.242:9527/*&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>·<strong>background.js</strong></p>
<p>去掉第 3 行中判断网址是否包含 qiandao.today 的语句，即改为</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">if</span> (changeInfo.status === <span class="string">&#x27;loading&#x27;</span>) &#123;</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>修改完成后，在浏览器中选择【扩展程序】，【加载已解压的扩展程序】，选择插件所在的文件夹即可。</p>
<p>判断插件有没有成功加载，可以通过查看 console 中有没有打印出 onload 来判断。</p>
<p>网站中一键获取 Cookie 效果如图</p>
<p><img src="/img/2020/getCookies.png" alt="getCookies"></p>
<hr>
<p>这次的排查过程挺特别的，之前我尝试过，直接将网址改为 * ，这样所有网站都可以使用这个插件，但结果发现没效果。</p>
<p>于是尝试改为配置局域网的网站，即</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">192</span>.<span class="number">168</span>.*</span><br></pre></td></tr></table></figure>

<p>也没有效果……</p>
<p>想不出原因，就搁置了。今天装门下载了个 360 极速浏览器，来测试一下是不是修改后在 chrome 浏览器里面没效果，其它浏览器里就有呢？</p>
<p>一番折腾后发现，只有网址写完整，才有效果，可以在网址后用 * ，但是不能在网址中用。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">123.242</span>:<span class="number">9527</span>/*   <span class="comment"># 可</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">123</span>.*		   <span class="comment"># 不可</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>让一个服务器拥有多个网站</title>
    <url>/2018/05/Multiple-websites-in-one-server/</url>
    <content><![CDATA[<p>可以在一台机器上放置多个网站，若是静态网站的话，理论上可以放置无限多个。</p>
<h3 id="本操作基于Ubuntu"><a href="#本操作基于Ubuntu" class="headerlink" title="本操作基于Ubuntu"></a>本操作基于Ubuntu</h3><p>我的nginx访问的根目录 </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>wwwroot/<span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<p>创建一个”vhost”目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo mkdir <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/vhost</span><br></pre></td></tr></table></figure>
<hr>
<p><span style="color: #ff0000;">创建siteA的配置文件</span></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhost/</span>vhost_siteA.conf</span><br></pre></td></tr></table></figure>
<pre class="lang:default decode:true">    server {
    listen       80;                        # 监听端口
    server_name www.siteA.com siteA.com;    # 站点域名
    root  /home/wwwroot/default;              # 站点根目录
    index index.html index.htm index.php;   # 默认导航页

    location / {
        # WordPress固定链接URL重写
        if (!-e $request_filename) {
            rewrite (.*) /index.php;
        }
    }

    # PHP配置
    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
    }
}</pre>

<hr>
<p><span style="color: #ff0000;">创建siteB的配置文件</span></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>nginx<span class="regexp">/vhost/</span>vhost_siteB.conf</span><br></pre></td></tr></table></figure>
<pre class="lang:default decode:true ">    server {
    listen       80;                        # 监听端口
    server_name www.siteA.com siteA.com;    # 站点域名
    root  /home/wwwroot/old;              # 站点根目录
    index index.html index.htm index.php;   # 默认导航页

    location / {
        # WordPress固定链接URL重写
        if (!-e $request_filename) {
            rewrite (.*) /index.php;
        }
    }

    # PHP配置
    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
    }
}</pre>

<hr>
<p>修改nginx.conf</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>在http里加入这段</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhost/</span>*.conf;</span><br></pre></td></tr></table></figure>

<p>重启 nginx 即可。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>斐讯 N1、P1 安装 armbian 变身电脑主机</title>
    <url>/2019/12/N1-armbian/</url>
    <content><![CDATA[<p>斐讯 N1 这台设备，我之前一直是使用小钢炮这个系统。因为它非常强大了，可以下载，可以共享硬盘里的文件，还可以玩 docker。</p>
<p>不过其实这台设备还可以装 Debian 和 Ubuntu 系统的，装好之后就可以变成一台电脑主机了，这想想都兴奋。所以我一直想来尝试一下装 armbian 系统。</p>
<p>镜像下载地址：<a href="https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/">https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/</a></p>
<p>但是，其实我之前折腾过很久，一直没法进入启动界面，一次又一次的放弃。早上突然想到会不会是我的写入工具有问题？</p>
<p>所以改用另外一个将镜像写入 U盘的工具，再试一下。</p>
<p>结果，还是不行……</p>
<p>然后仔细看看教程，<a href="https://post.smzdm.com/p/aqnl5kz2/">这篇文章</a>，难不成得先修改 dtb 才可以启动？试一下，果然如此。需要修改 <strong>uEnv.ini</strong> 这个文件。将第一行的dtb_name后面的文字替换成dtb文件夹里斐讯N1的dtb文件名，保存后再来启动就可以了。</p>
<p>所以跟用什么工具将镜像写入U盘完全没有关系，用</p>
<ul>
<li>usb-image-tool</li>
<li>win32diskimager</li>
<li>balenaEtcher</li>
<li>……</li>
</ul>
<p>都是可以的，主要是修改那个文件之后再开机就行。</p>
<p>之后插入 U盘到机器上，启动，正常进入系统。输入账号 root ，密码 1234 。然后需要设置一个新的密码（至少 8 位数）。</p>
<p>然后需要再建立一个账号，用来登录桌面系统。主要是用户名和密码，其它可以不用填。之后就可以进入桌面。</p>
<p>进入桌面系统后，这就是一台电脑主机了，可以上网，看视频，听音乐，编程……</p>
<p>但是想要更好地使用它，我们还得进行一系列的配置。想折腾可以耗费不少的时间。</p>
<hr>
<p>不过，后来我发现恩山有位大佬，直接把他自己修改好的系统打包上传上来，这样我们就可以直接使用他的系统，不用自己去配置了。<a href="https://right.com.cn/forum/thread-1380140-1-1.html">帖子链接</a></p>
<p>2020年7月，原作者后来又更新了其它版本的镜像，现在 <a href="https://www.right.com.cn/forum/thread-3758513-1-1.html">最新的帖子</a></p>
<p>帖子里有百度网盘的链接，里面主要有三个版本，32G 16G 8G ，指的是用这个系统 U盘最少的容量，如果你 U盘大于或等于 32G，那三个版本都可以用。</p>
<p>16G 镜像下载下来只有八百多兆，因为里面的软件最少，没有 docker 这些软件。8G 的比较好，安装好了 docker，并且容量适中，3G 多。32G 版本我没有下。</p>
<p>而且，用官方系统会出现没有 WiFi 的问题，<a href="https://right.com.cn/forum/thread-995217-1-1.html">这个帖子</a> 有讲到，看来用比较老的系统就可以用 WiFi。而使用恩山大佬打包的系统可以使用 WiFi 👍</p>
<blockquote>
<p> 所以我个人的建议是直接使用打包的系统。</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>不管是使用原生的系统，还是打包的系统，都需要进行下面的配置。</p>
<h3 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h3><p>默认的软件源可以连接到，但是慢到怀疑人生。把它改为国内的源，这样我们安装或更新软件会快很多。</p>
<p><strong>改软件源</strong> <a href="https://www.jiayie.xyz/2019/06/26/N1%E5%88%B7%E5%85%A5Armbian%E5%90%8E%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E3%80%81%E5%AE%89%E8%A3%85Docker%E5%B9%B6%E6%8F%90%E9%80%9F/">文章链接</a></p>
<p>vim /etc/apt/sources.list</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.ustc.edu.cn/debian stretch main contrib non-free</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.ustc.edu.cn/debian stretch-updates main contrib non-free</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.ustc.edu.cn/debian stretch-backports main contrib non-free</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/debian-security/</span> stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<p><strong>改 armbian 源</strong></p>
<p>vim /etc/apt/sources.list.d/armbian.list</p>
<p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/armbian stretch main stretch-utils stretch-desktop</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx下修改WordPress固定链接导致无法访问</title>
    <url>/2019/03/Nginx-WordPress-link-error/</url>
    <content><![CDATA[<p>内容来自：<a href="https://blog.csdn.net/csdn1161851523/article/details/52942404">CSDN</a></p>
<p>先找到配置文件的位置，如我这里是</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>用 vim 来修改，在server{}  字段   中的  “root /websit/wwwroot/;”(这行就是指定网站所在目录的)  这一行的下面 ，添加下面的内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="operator">-f</span> <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">rewrite (.*) <span class="variable">$1</span>/index.html <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="operator">-f</span> <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">rewrite (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="operator">-f</span> <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">rewrite (.*) /index.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewrite /wp<span class="literal">-admin</span><span class="variable">$</span> <span class="variable">$scheme:</span>//<span class="variable">$host</span><span class="variable">$uri</span>/ permanent;</span><br></pre></td></tr></table></figure>
<p>然后重启 Nginx ，如果和我一样是用 lnmp 的，可以输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">lnmp nginx restart</span></span><br></pre></td></tr></table></figure>
<p>之后就可以访问了文章了。</p>
]]></content>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>在mac把系统固件写入U盘</title>
    <url>/2018/06/Write-system-firmware-to-u-disk-on-MAC/</url>
    <content><![CDATA[<p>苹果官方文章:<a href="https://support.apple.com/zh-cn/HT201372">如何创建可引导的 macOS 安装器</a></p>
<p>最终我执行的是这一段命令</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">sudo /Volumes/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/installMacOS --applicationpath /Volumes/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra/Install<span class="string">\</span> macOS<span class="string">\</span> High<span class="string">\</span> Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>

<p>分析：<code>（以下内容是在双击固件，将其挂载，在桌面看得到其快捷方式下进行的）</code></p>
<p>一，这一段为固件的位置（前面到.app这一段可以通过双击打开桌面的固件，然后将里面的安装程序拖进来，而来得到地址）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Volumes/</span>Install\macOS\High\Sierra<span class="regexp">/Install\macOS\High\Sierra.app/</span>Contents<span class="regexp">/Resources/</span>createinstallmedia</span><br></pre></td></tr></table></figure>

<p>二，这一段为写入的地址，即此时我命名为 installMacOS 的U盘</p>
<blockquote>
<p>/Volumes/installMacOS</p>
</blockquote>
<p>三，这又为固件地址</p>
<blockquote>
<p>/Volumes/Install\ macOS\ High\ Sierra/Install\ macOS\ High\ Sierra.app</p>
</blockquote>
<p>写入完成后会出现 done ，估计十几分钟，耐心等待即可。</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>装好 Mojave 之后要做的事</title>
    <url>/2020/03/Mojave/</url>
    <content><![CDATA[<p>最近越来越觉得 macOS 的 10.15 版本很不好用，刚好手边也有一块闲置的硬盘，于是我想用它装 10.14 的 macOS 。</p>
<p>重新下载镜像，写入 U 盘，修改 config ，重启写入硬盘，完成。由于装过很多次，对此也算是轻车熟路。麻烦的是之后的驱动，以及常用软件的下载。</p>
<h2 id="0，声卡驱动"><a href="#0，声卡驱动" class="headerlink" title="0，声卡驱动"></a>0，声卡驱动</h2><p>github 下载最新的 applealc ，放入 kexts 里的 other ，把里面的万能声卡移出来。clover configurator 里注入 id，重启完成。</p>
<h2 id="1，调整按键"><a href="#1，调整按键" class="headerlink" title="1，调整按键"></a>1，调整按键</h2><p>由于使用 macOS 时，最主要用到的按键是 command ，在普通键盘上就是 Windows 键。为了能够和平时一样使用 ctrl + c , ctrl + v 来复制粘贴。可以在【系统偏好设置】–【键盘】–【修饰键…】里面将两者的位置换一下。</p>
<h2 id="2，开启-hidpi"><a href="#2，开启-hidpi" class="headerlink" title="2，开启 hidpi"></a>2，开启 hidpi</h2><p>如果使用原生的分辨率，字体会非常的小，而且还会模糊。这种情况在 Windows 上面也有，不过 Windows 上我们可以开启屏幕缩放，比如我的 1080P 显示器，我就比较喜欢开启 115% 的缩放。但是在 macOS 上，官方的设定是用 4K 的显示器时，就可以在【系统偏好设置】–【显示器】开启。然而我并没有 4K 的显示器……<br>这时就只能自己来手动开启了。</p>
<p><a href="https://github.com/xzhih/one-key-hidpi">https://github.com/xzhih/one-key-hidpi</a></p>
<p>用 GitHub 上的这个脚本很容易就可以开启。（在 Catalina 里面的会复杂一些，因为一些权限的问题）<br>然后，此时在【系统偏好设置】–【显示器】的缩放里面就能看到选项了。但是能选的并不多，这时可以下载一个工具，RDM</p>
<p><a href="http://www.pc6.com/mac/441275.html">http://www.pc6.com/mac/441275.html</a></p>
<p>这个工具提供更多的选择，比如我的显示器是 1920 × 1200 的，在系统里有 1280 × 800 和 1650 × 1050 的选项，但是用这个工具后，我可以选择 1440 × 900 。这个分辨率我个人觉得更加合适。</p>
<h2 id="3，oh-my-zsh-与-iterm2"><a href="#3，oh-my-zsh-与-iterm2" class="headerlink" title="3，oh my zsh 与 iterm2"></a>3，oh my zsh 与 iterm2</h2><p>由于系统本身就自带有 zsh 这个 shell 了，所以我只需要再装一下 oh-my-zsh ，然后在其装好时会询问【是否将 zsh 设置为默认的 shell】，选择是即可。<br>之后安装 iterm2 替代 terminal 。</p>
<p>然后我还可以把之前系统的用户目录下的【.zshrc】和【.zsh_history】复制过来。</p>
<h2 id="4，复制-ssh-文件夹"><a href="#4，复制-ssh-文件夹" class="headerlink" title="4，复制 .ssh 文件夹"></a>4，复制 .ssh 文件夹</h2><p>这个文件夹里存放着私钥，直接复制过来我就可以 ssh 连接其它终端，以及 GitHub 之类。</p>
<h2 id="5，导入-fcpx-的设定"><a href="#5，导入-fcpx-的设定" class="headerlink" title="5，导入 fcpx 的设定"></a>5，导入 fcpx 的设定</h2><p>主要是自定义的键盘设置，还有 compressor 中的自定义的预设。</p>
<blockquote>
<p>暂时写到这……</p>
</blockquote>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 docker 一些事</title>
    <url>/2020/04/about-docker/</url>
    <content><![CDATA[<p>有些小伙伴反映 armbian 的 docker，按照小钢炮那篇文章的方法，有一些容器老是无法启动成功。在此开一篇帖子记录一下。当然帖子的内容肯定不仅限于 armbian 。</p>
<h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> docker.io</span><br></pre></td></tr></table></figure>

<p>判断安装是否成功可以通过 <code>docker info</code> 这个命令查看。</p>
<h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h2><p>默认情况下 docker 镜像很难拉取，最简单的方案是路由器挂梯子，速度还是挺可以的。没有这个条件的话，就多准备几个镜像源吧。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">七牛</span><br><span class="line">https:<span class="regexp">//</span>reg-mirror.qiniu.com</span><br><span class="line">中科大</span><br><span class="line">https:<span class="regexp">//</span>docker.mirrors.ustc.edu.cn</span><br><span class="line">腾讯云</span><br><span class="line">https:<span class="regexp">//mi</span>rror.ccs.tencentyun.com/</span><br><span class="line">网易</span><br><span class="line">http:<span class="regexp">//</span>hub-mirror.c.<span class="number">163</span>.com/</span><br><span class="line">daocloud</span><br><span class="line">http:<span class="regexp">//</span>f1361db2.m.daocloud.io/</span><br><span class="line">华为云</span><br><span class="line">https:<span class="regexp">//</span><span class="number">05</span>f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com/</span><br></pre></td></tr></table></figure>

<p>阿里云私有镜像加速。<br>（自己进入<br><a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors">https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</a> 用自己的账号登陆，获取属于自己的加速镜像）</p>
<p>得到的格式是这样的：<a href="https://xxxxxxxx.mirror.aliyuncs.com/">https://xxxxxxxx.mirror.aliyuncs.com/</a></p>
<h2 id="关于-qb"><a href="#关于-qb" class="headerlink" title="关于 qb"></a>关于 qb</h2><p>armbian 用小钢炮的配置来建立 qb 容器的话，有一堆的问题，这里我改了一些内容，自己试了几次，应该没什么大问题了。使用的是 4.2.1，想用新的可以去 dockerhub 看→<a href="https://hub.docker.com/r/80x86/qbittorrent/tags">传送门</a></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=<span class="number">80</span>x86/qbittorrent:<span class="number">4.2</span>.<span class="number">1</span>-arm64</span><br><span class="line">#下面我是将 <span class="regexp">/media/</span>one 作为下载路径，你自己修改</span><br><span class="line">DOWNLOAD_PATH=<span class="regexp">/media/</span>one/</span><br><span class="line">QBT_AUTH_SERVER_ADDR=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">#下面我是将 <span class="regexp">/media/</span>one<span class="regexp">/lib/</span>qb 作为配置文件的路径，你自己修改</span><br><span class="line">QBCONF=<span class="regexp">/media/</span>one<span class="regexp">/lib/</span>qb</span><br></pre></td></tr></table></figure>

<p>对上面的部分修改，然后粘贴到 shell 中。</p>
<p>下面的不用修改，直接复制粘贴就行。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name qbittorrent \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=8080 \</span><br><span class="line">        -e <span class="attribute">BT_PORT</span>=8998 \</span><br><span class="line">        -e <span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="variable">$QBT_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v <span class="variable">$QBCONF</span>/.config/qBittorrent:<span class="built_in">/config </span>\</span><br><span class="line">        -v <span class="variable">$QBCONF</span>/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v <span class="string">&quot;<span class="variable">$DOWNLOAD_PATH</span>&quot;</span>:/downloads \</span><br><span class="line">        -v <span class="string">&quot;<span class="variable">$DOWNLOAD_PATH</span>&quot;</span>:<span class="string">&quot;<span class="variable">$DOWNLOAD_PATH</span>&quot;</span> \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure>

<p>将上面这堆在终端中输入后，到 portainer 中查看日志。</p>
<p><img src="/img/2020/container.jpg" alt="container"></p>
<p>如果启动成功，最后会出现一个地址，如果不成功，也可以看看具体出现什么问题。</p>
<p><img src="/img/2020/qb%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.jpg" alt="qb启动成功"></p>
<p>比较常见的问题是，docker 对文件夹没有读写权限。简单粗暴解决方案，给予 777 权限。先在 portainer 中停止 qb 容器，然后在终端执行下面的命令。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chmod</span> <span class="number">777</span> -R $QBCONF</span><br><span class="line"><span class="keyword">chmod</span> <span class="number">777</span> -R $DOWNLOAD_PATH</span><br></pre></td></tr></table></figure>

<p>然后再去启动容器。按理应该就可以了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>N1 小钢炮系统相关</title>
    <url>/2020/02/about-N1-nano/</url>
    <content><![CDATA[<p>本文记录一些跟小钢炮系统相关的网址、docker 命令等。</p>
<blockquote>
<p>建议搭配视频使用：<a href="https://www.bilibili.com/video/av88448594">小钢炮系统使用指南</a></p>
</blockquote>
<h2 id="系统固件下载"><a href="#系统固件下载" class="headerlink" title="系统固件下载"></a>系统固件下载</h2><p><a href="https://rom.nanodm.net/">https://rom.nanodm.net/</a></p>
<h2 id="docker-国内源"><a href="#docker-国内源" class="headerlink" title="docker 国内源"></a>docker 国内源</h2><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>将里面的内容改为这样</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改完去 system 里的 Startup 将 docker 停止，再启动。</p>
<p>之后我们安装 docker UI 应该就可以成功了。</p>
<h2 id="filebrowser"><a href="#filebrowser" class="headerlink" title="filebrowser"></a>filebrowser</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull <span class="number">80</span>x<span class="number">86</span>/filebrowser:arm<span class="number">64</span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IMAGE_NAME</span>=80x86/filebrowser</span><br><span class="line"></span><br><span class="line"><span class="attribute">WEB_PORT</span>=8082</span><br><span class="line"><span class="attribute">FB_AUTH_SERVER_ADDR</span>=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">docker <span class="builtin-name">run</span> -d \</span><br><span class="line">        -e <span class="attribute">PUID</span>=<span class="variable">$UID</span> \</span><br><span class="line">        -e <span class="attribute">PGID</span>=<span class="variable">$GID</span> \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=<span class="variable">$WEB_PORT</span> \</span><br><span class="line">        -e <span class="attribute">FB_AUTH_SERVER_ADDR</span>=<span class="variable">$FB_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        -p <span class="variable">$WEB_PORT</span>:<span class="variable">$WEB_PORT</span> \</span><br><span class="line">        -v /media:/myfiles \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span>:arm64</span><br></pre></td></tr></table></figure>

<p>这个应该大家都可以通用的。</p>
<p>接下来到浏览器打开<code>IP:8082</code>来访问，看看是否能正常使用。</p>
<h2 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h2><p>要先停止自带的 qb ，去 system 里的 Startup 将 qbittorrent 停止，然后将 Yes 改为 No ，这样就不会开机自启了。</p>
<blockquote>
<p>勘误，视频中讲将S92qbittorrent改个名字，这种方法并不行。得将其移动到其它位置。</p>
</blockquote>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/init.d/</span></span><br><span class="line">mv S92qbittorrent <span class="string">..</span></span><br></pre></td></tr></table></figure>

<p>这样S92qbittorrent就会待在 /etc 这个目录下了。</p>
<p>拉去镜像</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull <span class="number">80</span>x<span class="number">86</span>/qbittorrent:<span class="number">4</span>.<span class="number">2</span>.<span class="number">1</span>-arm<span class="number">64</span></span><br></pre></td></tr></table></figure>

<p>建立容器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=<span class="number">80</span>x86/qbittorrent:<span class="number">4.2</span>.<span class="number">1</span>-arm64</span><br><span class="line"><span class="comment">#WEB_PORT=$(nvram get app.qb.listen_port)</span></span><br><span class="line"><span class="comment">#这里我原本的默认下载路径是 /media/one/qb 你应该改成自己的</span></span><br><span class="line">DOWNLOAD_PATH=<span class="regexp">/media/</span>one/qb</span><br><span class="line">BT_PORT=$(cat <span class="regexp">/var/</span>lib<span class="regexp">/qbittorrent/</span>.config<span class="regexp">/qBittorrent/</span>qBittorrent.conf | grep -i <span class="string">&#x27;Connection\\PortRangeMin&#x27;</span> | cut -d<span class="string">&#x27;=&#x27;</span> -f2)</span><br><span class="line">QBT_AUTH_SERVER_ADDR=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;$DOWNLOAD_PATH&quot;</span> = <span class="string">&quot;/downloads&quot;</span> ] || [ <span class="string">&quot;$DOWNLOAD_PATH&quot;</span> = <span class="string">&quot;/downloads/&quot;</span> ]; then</span><br><span class="line">    echo <span class="string">&quot;please set correct DOWNLOAD_PATH&quot;</span></span><br><span class="line">    <span class="keyword">exit</span> -<span class="number">1</span></span><br><span class="line">fi</span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -e PUID=$(id -u qbittorrent) \</span><br><span class="line">        -e PGID=$(cat <span class="regexp">/etc/g</span>roup | grep -e <span class="string">&#x27;^users&#x27;</span> | cut -d<span class="string">&#x27;:&#x27;</span> -f3) \</span><br><span class="line">        -e WEB_PORT=<span class="number">8088</span> \</span><br><span class="line">        -e BT_PORT=<span class="variable">$BT_PORT</span> \</span><br><span class="line">        -e QBT_AUTH_SERVER_ADDR=<span class="variable">$QBT_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v <span class="regexp">/var/</span>lib<span class="regexp">/qbittorrent/</span>.config<span class="regexp">/qBittorrent:/</span>config \</span><br><span class="line">        -v <span class="regexp">/var/</span>lib<span class="regexp">/qbittorrent/</span>.local<span class="regexp">/share/</span>data<span class="regexp">/qBittorrent:/</span>data \</span><br><span class="line">        -v <span class="string">&quot;$DOWNLOAD_PATH&quot;</span>:/downloads \</span><br><span class="line">        -v <span class="string">&quot;$DOWNLOAD_PATH&quot;</span>:<span class="string">&quot;$DOWNLOAD_PATH&quot;</span> \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里的端口我改为 8088 ，也可以改为和原来一样的 8083</p>
<p>之后就可以通过 <code>IP:8088</code>来访问 qb 了。设置没错的话，应该可以看到之前的种子信息的。</p>
<h2 id="微力同步-verysync"><a href="#微力同步-verysync" class="headerlink" title="微力同步 verysync"></a>微力同步 verysync</h2><p>这是一款和 syncthing 类似的同步工具。<code>/media/one/verysync</code>是我自己的路径，其它人使用前需要更改一下。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run -d <span class="string">\</span></span><br><span class="line">  --name verysync <span class="string">\</span></span><br><span class="line">  --restart=always <span class="string">\</span></span><br><span class="line">  -p <span class="number">8886</span>:<span class="number">8886</span> <span class="string">\</span></span><br><span class="line">  -v /media/one/verysync:/media <span class="string">\</span></span><br><span class="line">  lstcml/n1_verysync</span><br></pre></td></tr></table></figure>

<p>这个应用的功能是，可以把一个文件夹，在多台设备之间保持内容同步。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 ireader 阅读器无法连接电脑问题</title>
    <url>/2018/10/Solve-the-problem-that-the-ireader-cannot-connect-to-the-computer/</url>
    <content><![CDATA[<p>今晚把阅读器用 USB 连接电脑，想传些文件。发现连接后，资源管理器无法读到盘符。</p>
<p>由于平时我主要用 Mac 系统，无法用 usb 线与阅读器互传文件的，因此都是用 WIFI 传输。不过之前曾经在虚拟机里运行 XP 系统，可以与阅读器连接并且传输文件，因此硬件是没问题的。</p>
<p>现在 win10 状态下却无法连接，折腾一番后，没法，联系客服。在掌阅的微信公众号【掌阅iReader】里面，右下角，服务，人工服务。</p>
<p>一大段话确认我硬件和操作没有问题后，回复我：</p>
<blockquote>
<p>若是您的电脑没有识别：请您这边电子书阅读器插上USB连接电脑后右击–我的电脑–属性–点击打开设备管理器截图提供这边帮您查看一下</p>
</blockquote>
<p>当阅读器插入后这里面会多出一个设备【Android Phone】，展开它，里面是【Android ADB Interface】。右键，更新驱动。</p>
<p><strong>重点来了</strong></p>
<p>不要点【自动搜索……】，而是点下面的【浏览我的计算机以查找驱动程序软件】。</p>
<p>然后这时会有两个选项，选择下面那个带有【MTP】的，安装这个，然后就完了。资源管理器里可以识别到了。</p>
<p><img src="/img/2018/ireader.jpg" alt="IMG_20181002_202702.jpg"></p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>修复 next 主题无法提交到 git 仓库</title>
    <url>/2018/08/about-git-cache/</url>
    <content><![CDATA[<p>修复 git 仓库内，有另一个仓库，而产生冲突的问题。</p>
<p>用 hexo 来部署博客，只是把生成的静态网页给发布上去。但完整的备份是需要备份博客源码的，很多人会新建一个项目来放置博客源码。这样每次写好文章更新博客后，再把源码更新到远程仓库，例如 github 就行。完美备份。</p>
<p>但是，我发现我的 Next 主题下的文件全部无法上传，官方自带的主题就行。于是想到，当前这整个博客文件夹都是一个 git 仓库，而 next 主题是从 github 上克隆下来的，也是一个仓库，估计是会产生冲突。</p>
<p>于是，进入到 next 目录下，用命令行</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">rm -rf <span class="string">.git</span></span><br></pre></td></tr></table></figure>
<p>删除掉 <code>.git</code> 这个文件夹。这样应该就把这个仓库变成一个普通的文件夹了吧。于是再来把它添加到博客源码这个项目里吧</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git <span class="builtin-name">add</span> .</span><br></pre></td></tr></table></figure>
<p>结果不行，报错了，显示：</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">fatal: <span class="keyword">in</span> unpopulated subnodule <span class="symbol">&#x27;themes</span>/next&#x27;</span><br></pre></td></tr></table></figure>
<p>看来不只是删除一个文件夹就行。好像还得再清除下，先返回上一级目录，<code>cd ..</code> 后就是在 themes 这个目录下咯，再执行</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">git rm -r –cached /<span class="keyword">next</span></span><br></pre></td></tr></table></figure>
<p>去掉已经托管的文件，然后提交即可。</p>
<p>此时再输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git <span class="builtin-name">add</span> .</span><br></pre></td></tr></table></figure>
<p>就可以了。<br>之后再 commit，并成功同步到远程仓库。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>关于斐讯 R1 智能音响</title>
    <url>/2020/05/about-R1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这款产品是 燕飞利仕 和斐讯合作的产品，应该是2018年推出的。</p>
<p>这是一款智能音响，可以搭配【斐讯ai】这个 app 来使用，不过，由于斐讯后来翻车了，至今也快两年了。所谓智能音响，也就是可以用语音来控制罢了。但是由于斐讯服务器那边不能用（或者说不稳定）。账号现在没法正常注册，看论坛有人说每天 0 点会开放注册一段时间，由于本人 2017 年时就有了斐讯的账号，也没去尝试能否注册。</p>
<p>所以很多人就只能把这音响当普通音响来用，音响开机后按三下顶部的按键，就可以打开蓝牙，之后用手机或者电脑连接，听歌或者听有声小说还是不错的。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>不过最近我在拼多多买了这台设备，发现斐讯的服务器还是可以连接的嘛，而且网上有大佬修改了 app ，使得现在没有账号的情况下，也能配置音响的网络，使其连接家中的WIFI。修改版APP下载：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>但是有些时候，配置网络好了，喊【小讯小讯】，却会提示，未绑定。。。</p>
<h2 id="这时候有两种解决方案"><a href="#这时候有两种解决方案" class="headerlink" title="这时候有两种解决方案"></a>这时候有两种解决方案</h2><p>一，修改路由器的 dns</p>
<p>将路由器的 DNS 改为 47.240.76.176</p>
<p><img src="/img/2020/padavan-dns.jpg" alt="padavan-dns"></p>
<p>二，自定义 hosts</p>
<p>在路由器的 hosts 中添加 118.24.249.189  aios-home.hivoice.cn</p>
<p>在老毛子路由器中</p>
<p><img src="/img/2020/padavan-hosts.jpg" alt="padavan-hosts"></p>
<p>在 openwrt 路由器中</p>
<p><img src="/img/2020/openwrt-hosts.jpg" alt="openwrt-hosts"></p>
<p>这样做音响才能完成绑定，之后我们就可以使用语音来控制它了。</p>
<blockquote>
<p>如果你用的是普通的路由器，那看看哪个地方可以修改 hosts，实在找不到就修改 DNS 吧。  </p>
</blockquote>
<hr>
<p><strong>如果你实在太小白，不会修改 dns 和 hosts ，那就放弃语音控制吧，反正作用也不是那么大。还有很多其它的东西可以折腾的。</strong></p>
<h2 id="使用-dlna-享受更好的音质"><a href="#使用-dlna-享受更好的音质" class="headerlink" title="使用 dlna 享受更好的音质"></a>使用 dlna 享受更好的音质</h2><p>前段时间，在网上看到这样的话</p>
<blockquote>
<p>蓝牙连接是sbc，音效很浑浊，发闷。dlan 才能发挥它真正的音质</p>
</blockquote>
<p>为了用上 dlna ，我在论坛中找到在 R1 上面安装 dlna 的方法，同样将资源放在网盘中了：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>装好后，在电脑中就可以选中歌曲，然后将其推送到 R1 上面播放了。</p>
<p><img src="/img/2020/dlna1.jpg" alt="dlna1"></p>
<p>后来，有网友提示，其实系统也自带有 dlna 的，不过需要蓝牙打开的状态下才可以用。所以我打开蓝牙后，再来右键歌曲，就可以看到有两个 dlna 了。</p>
<p><img src="/img/2020/dlna2.jpg" alt="dlna2"></p>
<p>据说还可以装一个【乐播投屏】也同样有 dlna ，论坛有个帖子分析了各自的优缺点。<a href="https://www.right.com.cn/forum/thread-4017780-1-1.html">R1音响三大dlna软件对比</a> 不过这个我自己没用，我最多使用的还是 从n1提取的dlna ，因为这个一直保持开启状态，用起来比较方便。</p>
<h2 id="电脑端-dlna"><a href="#电脑端-dlna" class="headerlink" title="电脑端 dlna"></a>电脑端 dlna</h2><p>用系统自带的播放器固然方便，但是不怎么好用，只能自己把歌曲添加进去，而且还不支持播放 FLAC 的歌曲。</p>
<p>我想要播放网易云音乐里的歌曲，有没有什么好方法呢？</p>
<p>那最简单的还是属用蓝牙连接。不过我这里讨论的是 dlna ，那就得用一个第三方软件了，名字是 airfoil ，这是一款付费软件，大家自己网上找吧。在电脑上安装好后，打开时就会搜索你的网络中有哪些 dlna 设备。</p>
<p><img src="/img/2020/Airfoil.jpg" alt="Airfoil"></p>
<p>下方可以选择那个设备作为音响，点亮其右侧的图标即可。上方可以选择声音来源，可以像上图那样，将整个系统的声音都输出。也可以像下图这样，只选择将网易云音乐的声音输出。</p>
<p><img src="/img/2020/Airfoil-netease.jpg" alt="Airfoil-netease"></p>
<p><strong>注意</strong> 通过 dlna 将声音输出到音响，大概有两秒的延迟，所以……只适合用来听歌，看视频和打游戏是完全没法用的。</p>
<h2 id="手机端-dlna"><a href="#手机端-dlna" class="headerlink" title="手机端 dlna"></a>手机端 dlna</h2><p>手机这边我一开始只知道小米系统自带的音乐播放器，可以通过 dlna 推送到 R1。不过它有很多缺陷，一次只能播放一首歌，然后就暂停了。而且没法显示播放进度。</p>
<p>然后我想去找其它支持 dlna 播放的 APP ，谷歌商店试了好几个，没好用的。</p>
<p>今天下载了个 咪咕音乐 ，想来听听周杰伦的歌，发现它居然可以把歌曲通过 dlna 推送到 R1 上面，而且切歌之后，播放进度就会同步。非常的意外，不过，它也有缺点，就是有时候没法调节 R1 的音量，有时候却可以……</p>
<p>后来，我发现，在网易云音乐的设置中，将 dlna 功能打开，也可以把歌曲通过 dlna 推送到 R1 上面。这个应该是现在手机端比较好用的了，可以连续播放，可以同步播放进度，还可以通过手机调节 R1 的音量。</p>
<h2 id="天线"><a href="#天线" class="headerlink" title="天线"></a>天线</h2><p>由于拆机时不小心，把天线弄断了。</p>
<p><img src="/img/2020/%E5%A4%A9%E7%BA%BF%E6%96%AD.jpg" alt="天线断"></p>
<p>导致音响只有放在路由器旁边才能连接到 WiFi ，蓝牙连接距离只有一米左右……于是到淘宝买了条天线，1块4包邮，买来连接上，满血复活。</p>
<p><img src="/img/2020/tb%E5%A4%A9%E7%BA%BF.jpg" alt="tb天线"></p>
<p>由于不知道到底要买哪一款，我就买了几个，最终发现这个【IPEX 1代】在 R1 上用就刚好适合。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://www.right.com.cn/forum/thread-4013529-1-1.html">R1音箱 小白入门 和目前现状</a></p>
<p>这篇文章作者用自己的服务器提供绑定服务。</p>
<p><a href="https://www.cnblogs.com/lome/p/12465328.html#4548078">https://www.cnblogs.com/lome/p/12465328.html#4548078</a></p>
<p>这篇教自建服务</p>
<p><a href="http://www.mz6.net/news/android/12911.html">http://www.mz6.net/news/android/12911.html</a></p>
<p>另外一个自建服务的帖子</p>
<p><a href="https://www.right.com.cn/forum/thread-3285422-1-1.html">https://www.right.com.cn/forum/thread-3285422-1-1.html</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透工具 nps</title>
    <url>/2020/03/about-nps/</url>
    <content><![CDATA[<p>nps 是一款内网穿透工具，在 Github 上面有一万多个 star ：<a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p>
<p>这个的原理和 frp 是一样的，都是用服务器来中转，不过用起来会简单一点。</p>
<blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a></p>
</blockquote>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器开好后，先下载 nps ，解压，安装，启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_amd64_server.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br><span class="line">./nps install</span><br><span class="line">nps start</span><br></pre></td></tr></table></figure>

<p>这样服务器就启动 nps 这个服务了，在浏览器输入 ip:8080 就可以进行管理。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>像 N1 ，我家云，猫盘 这些设备，都是 arm64 ，因此它的使用方法都是一样的。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ehang-io/</span>nps<span class="regexp">/releases/</span>download<span class="regexp">/v0.26.6/</span>linux_arm64_client.tar.gz</span><br><span class="line">tar -zxvf linux_arm64_client.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后需要到管理面板，添加客户端，这样会生成一个密钥。有了这个才能和服务器建立连接。</p>
<p>建立的命令是这样的。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./npc <span class="attribute">-server</span>=ip:port <span class="attribute">-vkey</span>=web界面中显示的密钥</span><br></pre></td></tr></table></figure>

<p>例如我的就是这样</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./npc <span class="attribute">-server</span>=45.32.126.224:8024 <span class="attribute">-vkey</span>=4vv7n1p7u584an64</span><br></pre></td></tr></table></figure>

<p>此时就与服务器建立好连接了，之后的操作只需在管理面板，进行端口映射即可。</p>
<h2 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h2><p>点击左边的【TCP 隧道】，【新增】，填写【ID】，服务器访问端口，目标端口。</p>
<p>比如我服务器端口设置为 1234 ，目标端口为 80 ，建立好后，我只要访问服务器的1234端口，就可以看到内网设备 80 端口的内容。想要访问其它的端口，就再建立隧道。内网的端口和服务器的端口是可以保持一致的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本以为，它只是用起来比 frp 简单。但现在发现不止于此，还有其它很多功能。</p>
<p>首先作为内网穿透工具，它用起来确实简单，点几下就可以建立好连接。</p>
<p>然后里面的域名解析功能，用起来也非常的简单。事先把 <code>*.xxx.com</code> 解析到服务器，之后就可以实现不同的子域名，访问不同的页面了。</p>
<p>然后我发现，用 nps 也是可以套 CDN 的，这样就不用担心自己的 IP 暴露了，不过速度会变慢一些。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用Python创建HTTP服务</title>
    <url>/2018/05/Python-HTTP-server/</url>
    <content><![CDATA[<p>一般的Linux都带有python</p>
<p>有时我们想要把文件，通过网页的方式来共享，但是又不想去搭建像 Nginx 或者 caddy 这样的 web 服务器，此时用 Python 一行命令即可解决。</p>
<p>通过命令进入所要共享的文件夹</p>
<p>输入这个命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>后面的80为端口，这种适合没有搭建其它web服务的</p>
<p>如果是 Python3 的话，是用这个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>

<p>这时我后面并没有加端口，默认会使用 8000 端口</p>
<p>若已经有搭建类似 nginx 的服务 可以通过修改端口数字，例如改为88，或者不输入端口，则会默认采用8000端口</p>
<p>此时输入 <span style="color: #000000;"><strong>IP:8000</strong></span> 或者 <strong>域名:8000</strong></p>
<p>即可访问当前目录下的文件，如果有 **index.html **则会默认加载。</p>
<p>然后想要停止时，按<code>CTRL + C</code> 取消。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>kindle 漫画制作软件 kindle comic converter 汉化版</title>
    <url>/2021/12/about-kcc/</url>
    <content><![CDATA[<p>Kindle Comic Converter 是漫画制作软件，主要是用来讲图片转换为 epub 或者 mobi 格式的文件，方便墨水屏设备阅读。</p>
<p>项目地址：<a href="https://github.com/ciromattia/kcc">ciromattia/kcc: KCC (a.k.a. Kindle Comic Converter) is a comic and manga converter for ebook readers. (github.com)</a></p>
<p>最后的更新停留在 2019 年 10 月，最近我也是花了很多的时间在研究这款软件上。最终的成果是在自己的机器上，编译出了新的软件版本。</p>
<p>目前编译出的有</p>
<ul>
<li>Windows 64 位版（win10 和 win7 上都可以用）</li>
<li>Macos ARM 版（在 M1 芯片的 Mac mini 上可以使用，不需要转译）</li>
</ul>
<p><img src="/img/2021/Mac_M1_kcc.png" alt="Mac_M1_kcc"></p>
<blockquote>
<p>软件链接：</p>
<p>蓝奏云：<a href="https://pan.lanzou.com/b0bg5lrub">https://pan.lanzou.com/b0bg5lrub</a> 密码:2ebz</p>
<p>百度网盘：链接：<a href="https://pan.baidu.com/s/1NWci0kT5NN_XFfv3HETVJw">https://pan.baidu.com/s/1NWci0kT5NN_XFfv3HETVJw</a><br>提取码：psee</p>
<p>个人下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a> </p>
<p>在【Windows 应用】和【Mac 应用】文件夹中</p>
<p>阿里云盘分享不了压缩包，mac 的 dmg 安装包居然也不行。。。</p>
</blockquote>
<p><img src="/img/2021/profiles_kcc.png" alt="profiles_kcc"></p>
<p>并且我还对软件进行了汉化。并且添加多几个预设，如果你们的设备没有在列表里面，其实也没有关系的，选择同样分辨率的设备就行。例如里面的 Boox，我就只添加一个，因为我发现 7.8 英寸的 nova air 和 10.3 英寸的 note X 其实它们的分辨率是一样的，都是1404 * 1872，和 kobo auro ONE 其实也一样，本来是不需要添加进去的。</p>
<p>但是我发现如果预设选择 kobo 系列的，那么转换出来的文件，后缀是 kepub.epub，看着有点别扭，所以我就添加多一个预设进去了。这样转换出来的 epub 就不会带 kepub。</p>
<p><img src="/img/2021/kcc-other.jpg" alt="kcc-other"></p>
<p>如果自己的设备在里面没有相同分辨率的机器，那么可以选择 other，然后自己添加分辨率。</p>
<p>这里我也把里面的预设的分辨率放出来给大家参考</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;K1&#x27;: (<span class="string">&quot;Kindle 1&quot;</span>, (<span class="number">600</span>, <span class="number">670</span>), Palette4, <span class="number">1.8</span>),</span><br><span class="line">&#x27;K2&#x27;: (<span class="string">&quot;Kindle 2&quot;</span>, (<span class="number">600</span>, <span class="number">670</span>), Palette15, <span class="number">1.8</span>),</span><br><span class="line">&#x27;K34&#x27;: (<span class="string">&quot;Kindle Keyboard/Touch&quot;</span>, (<span class="number">600</span>, <span class="number">800</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;K578&#x27;: (<span class="string">&quot;Kindle&quot;</span>, (<span class="number">600</span>, <span class="number">800</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KDX&#x27;: (<span class="string">&quot;Kindle DX/DXG&quot;</span>, (<span class="number">824</span>, <span class="number">1000</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KPW&#x27;: (<span class="string">&quot;Kindle Paperwhite 1/2&quot;</span>, (<span class="number">758</span>, <span class="number">1024</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KV&#x27;: (<span class="string">&quot;Kindle Paperwhite 3/4/Voyage/Oasis&quot;</span>, (<span class="number">1072</span>, <span class="number">1448</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KPW5&#x27;: (<span class="string">&quot;Kindle Paperwhite 5/Signature Edition&quot;</span>, (<span class="number">1236</span>, <span class="number">1648</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KO&#x27;: (<span class="string">&quot;Kindle Oasis 2/3&quot;</span>, (<span class="number">1264</span>, <span class="number">1680</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;MIX7&#x27;: (<span class="string">&quot;Kindle Oasis 2/3&quot;</span>, (<span class="number">1264</span>, <span class="number">1680</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoMT&#x27;: (<span class="string">&quot;Kobo Mini/Touch&quot;</span>, (<span class="number">600</span>, <span class="number">800</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoG&#x27;: (<span class="string">&quot;Kobo Glo&quot;</span>, (<span class="number">768</span>, <span class="number">1024</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoGHD&#x27;: (<span class="string">&quot;Kobo Glo HD&quot;</span>, (<span class="number">1072</span>, <span class="number">1448</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoA&#x27;: (<span class="string">&quot;Kobo Aura&quot;</span>, (<span class="number">758</span>, <span class="number">1024</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoAHD&#x27;: (<span class="string">&quot;Kobo Aura HD&quot;</span>, (<span class="number">1080</span>, <span class="number">1440</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoAH2O&#x27;: (<span class="string">&quot;Kobo Aura H2O&quot;</span>, (<span class="number">1080</span>, <span class="number">1430</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoAO&#x27;: (<span class="string">&quot;Kobo Aura ONE&quot;</span>, (<span class="number">1404</span>, <span class="number">1872</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;BOOX&#x27;: (<span class="string">&quot;BOOX nova air / note X&quot;</span>, (<span class="number">1404</span>, <span class="number">1872</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoC&#x27;: (<span class="string">&quot;Kobo Clara HD&quot;</span>, (<span class="number">1072</span>, <span class="number">1448</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoL&#x27;: (<span class="string">&quot;Kobo Libra H2O&quot;</span>, (<span class="number">1264</span>, <span class="number">1680</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoF&#x27;: (<span class="string">&quot;Kobo Forma&quot;</span>, (<span class="number">1440</span>, <span class="number">1920</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;OTHER&#x27;: (<span class="string">&quot;Other&quot;</span>, (<span class="number">0</span>, <span class="number">0</span>), Palette16, <span class="number">1.8</span>),</span><br></pre></td></tr></table></figure>



<p>其实选择不同的预设，只是转换出来的图片分辨率不用而已，但是，好像都是可以正常全屏阅读的，例如我同一本漫画，转为为 ko2 和 kindle（也就是上面的 K578，分辨率为 600 X 800），那么结果在我的 kindle 499 上面都是可以正常阅读，而且明显用 ko2 预设转换出来的漫画，分辨率更高，在 kindle 499 上面看也比较清晰一些。因为选 ko2 转换出来的 mobi 文档，里面的图片分辨率是 1680 X 1264 ，而选择 kindle 转换出来的分辨率则为 600 X 800，所以不管在那台设备，都是高分辨率的图片看起来清晰。</p>
<p>所以个人感觉，如果可以，尽可能的使用较高分辨率的预设，这样转换出来的图片分辨率比较高，画质更好更清晰，而且可能以后的设备也可以阅读（例如现在有时从网上下载的 kindle 漫画，有些是比较旧的，是当年网友制作给 600 X 800 的设备阅读的，放到 ko2 这个分辨率为 1680 X 1264 的设备看就挺模糊的）。</p>
<p>当然也不是说分辨率调高就好，现在比较高清的日本漫画资源，分辨率高度方面好像就 2000 多而已，你调个 3、4000 肯定也没用。</p>
<p><img src="/img/2021/tieba-img-download.jpg" alt="tieba-img-download"></p>
<p>然后我发现贴吧还是可以下载到挺多漫画图片的，所以我也写了个程序来下载贴吧的高清图片，用着也还不错，图片会按照顺序重命名，所以下载完后，直接把文件夹拖到 kcc 里面就可以转换为 epub 或者 mobi 了，两者可以配合使用。</p>
<p>对了，kcc 这个软件也是可以将 PDF 漫画，转换为 epub 或者 mobi 的，我之前就有尝试过，将 700 多 M 的 PDF 漫画，拖进去，转换为 mobi 漫画，放到 kindle 上面来阅读。结果会变成两个文件，因为这个软件限制 mobi 格式的文档，最大只能 400M，据说是太大了 kindle 用起来会卡。（作者在论坛说的）</p>
<p>EPUB 就没有这方面的限制，所以我尝试过把整本漫画转换为 epub，结果生成了一个 1G 多的文档，放到墨案 mix7 上面阅读还挺流畅的。</p>
<h3 id="12-21-版"><a href="#12-21-版" class="headerlink" title="12.21 版"></a>12.21 版</h3><p><img src="/img/2021/kcc-2021-12-21.jpg" alt="kcc-2021-12-21"></p>
<p>添加了两个选择框</p>
<ul>
<li>禁删 epub</li>
<li>保持原图</li>
</ul>
<p>当我们制作 mobi 漫画时，其实软件是先将图片制作为 epub，然后再使用 kindlegen 将 epub 转换为 mobi，转换完成就把 epub 删除掉。</p>
<p>如果我们制作的漫画是想要放到网上进行分享的，那么两种格式都保存可能比较好，这样受众会更多一些。所以我添加了一个选项，勾选上就不会删除 epub 了。</p>
<p>保持原图，就是不对图片进行处理，仅仅是把图片放到 epub 或者 mobi 里面而已，所以不管你的图片是双页，还是留有巨大的白边，它都不管了，直接放进去就行。一些高分辨率图片也可以使用这个功能。</p>
<h3 id="另类的用法——将-PPT-课件转为-mobi"><a href="#另类的用法——将-PPT-课件转为-mobi" class="headerlink" title="另类的用法——将 PPT 课件转为 mobi"></a>另类的用法——将 PPT 课件转为 mobi</h3><p>这个是网友 @<a href="https://space.bilibili.com/11372531">芊里阿</a>  分享的方法</p>
<blockquote>
<p>之前用kindle把ppt转成pdf看，又卡，每一页还显示不全。 用up分享的软件，先把ppt转成图片，然后再转mobi格式的就方便多了（要点那个旋转不切割，不缩放）大家有需要的也可以试试 </p>
</blockquote>
<p>如果是直接将 PPT 导出为 PDF，放到 kindle 上面也可以看，但是不能横屏吧。而且 PDF 在 kindle 上面观看，应该是每一页都会全刷，屏闪非常严重。用 mobi 就不会，而且用这个软件可以让图片进行旋转，也就可以全屏观看了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器的端口映射和内网穿透</title>
    <url>/2018/06/about-router/</url>
    <content><![CDATA[<p>如果我的路由器的管理地址为 <code>192.168.1.1</code> 如果我开放外网访问，当在外网输入我的公网IP，那么默认是访问 公网IP:80 然后进入路由器的管理界面 <code>192.168.1.1</code></p>
<p><strong>端口映射</strong></p>
<p>端口映射，可以设置不同的端口来访问路由器内不同的设备。例如我的电脑连接路由器，然后分配的IP是<code>192.168.1.2</code>，此时我可以通过设置一个端口（8888）来映射到电脑，设置完成后输入公网IP:8888 访问的就是电脑了而不是路由器。通过这种方法,可以让电脑开启web服务，然后从外网访问。此处必须输入外网ip来访问，通过内网像 <code>192.168.1.1:8888</code> 这样是没用的。</p>
<p><strong>内网穿透</strong></p>
<p>当然上面的那样明显只适合有公网IP的情况，像我的话就没有公网IP。所以外网访问内网就需要内网穿透了，这里使用 ngrok 和<code>老毛子固件</code>。</p>
<p>我使用的路由器固件为恩山的hiboyhiboy大神的固件，路由器为斐讯K2。</p>
<p>打开路由器的ngrok穿透界面，去 Server.ngrok.cc 注册帐号，然后得到一个 token 码，复制它，之后开通隧道，可以选择免费的。设置域名前缀，如123，那么最后你的域名就是 <span style="background-color: #ffff00;">123.free.ngrok.cc</span></p>
<p>之后设置一个端口，用默认的4443也可以。</p>
<p>开通隧道完成后，再回到路由器这里，然后把信息填进去，</p>
<p><a href="/img/2018/ngrok.png"><img src="/img/2018/ngrok.png"></a></p>
<p>之后再把启动 【ngrok 内网穿透】的的开关打开，再应用本页面设置，此时通过访问域名</p>
<p>如上面的<span style="background-color: #ffff00;">123.free.ngrok.cc</span></p>
<p>应该就可以进入路由器管理界面了。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 s905 盒子数码Q5刷 armbian Ubuntu</title>
    <url>/2020/07/about-s905/</url>
    <content><![CDATA[<p>闲鱼上面 s905 的电视盒子有很多，我买的是 北京数码视讯 Q5 ，这款算是比较出名的了，网上搜也可以找到很多帖子。</p>
<p>我买来时里面就是破解好的安卓系统了，当成一个普通播放器是没什么问题的。如果你是家里本身就有这台设备的，可以网上查一下怎么破解，其实不能算破解吧，应该叫刷机才对。</p>
<p>比如我这台后面写的是江苏移动，那它应该是江苏那边的用户办理宽带送的，然后如果宽带到期了，这台设备也就没法用了。因为里面的系统是移动定制的。网上有方案可以把它刷成其它系统，做到废物利用。</p>
<p>虽然我现在可以正常使用里面的安卓系统，不过我好奇的是怎么把它刷成 Linux 系统。研究之后发现挺简单的。</p>
<hr>
<p><strong>需要东西</strong>（在网盘 <a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 的【不仅限于盒子】文件夹中）</p>
<ol>
<li>Linux 系统镜像（这里使用 Ubuntu 18.04）</li>
<li>将 img 镜像写入 U 盘或者 tf 卡的工具——usb burning tool</li>
<li>从安卓系统重启到 Linux 系统软件—— Reboot to libreELEC</li>
</ol>
<p>将三样东西准备好，然后用 usb burning tool 将 img 镜像写入 U 盘或者 tf 卡。写入好后，需要修改 dtb ，我们更改  U 盘或者 tf 卡的 <code>uEnv.ini</code> 文件，将里面的第一行修改为</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">dtb_name=<span class="regexp">/dtb/m</span>eson-gxbb-p201.dtb</span><br></pre></td></tr></table></figure>

<p>保存文件，将 U 盘或者 tf 卡插入机器，开机。</p>
<p>如果依然是进入到安卓系统的话，那就安装一个上面提到的 <code>Reboot to libreELEC</code> 这个软件，自己想办法把这个 apk 安装包弄到盒子上面装。</p>
<p>装好打开这个软件，确认，就可以重启进入 Linux 系统。后面的教程和之前的 N1 教程一模一样的，可以去看之前的文章就行。</p>
<p><a href="/2020/03/n1-armbian-server/">打造最具性价比服务器 N1-armbian</a></p>
<p>有一个缺点就是，没法驱动 wifi ，我试过里面好几个 dtb ，都没法，尝试用其它版本的固件，也不行，暂时无解，如果有朋友知道怎么解决欢迎告知我一下，可以用下方的邮箱，或者其它平台的私信、留言都可以，感谢。</p>
<p>视频发出后，感谢网友 @<a href="https://space.bilibili.com/53153092">栾__</a> 的回复</p>
<blockquote>
<p>wifi可以用544的镜像，后来的都没有驱动</p>
</blockquote>
<p>于是我通过搜索找到了这篇帖子</p>
<p><a href="https://www.cnblogs.com/jzgw/p/S905_8189ETV_8189ES_wifi-config.html">S905/S905X Armbian安装WiFi驱动8189ETV的解决方法</a></p>
<p>在里面下载了 5.44 的镜像，将 dtb 文件夹里面的 meson-gxbb-p201.dtb 复制到根目录，改名为 dtb.img。</p>
<p>使用这个镜像不能从 sd 卡启动，只能从 U 盘启动。然后 wifi 我没有成功驱动……</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于乐橙 SN1 一些记录</title>
    <url>/2021/03/about-sn1/</url>
    <content><![CDATA[<p>简书刷机教程</p>
<p><a href="https://www.jianshu.com/p/695fa3b0dab5">https://www.jianshu.com/p/695fa3b0dab5</a></p>
<p>拆解与介绍</p>
<p><a href="https://www.mydigit.cn/forum.php?mod=viewthread&amp;tid=139874">https://www.mydigit.cn/forum.php?mod=viewthread&amp;tid=139874</a></p>
<p>扩展玩法</p>
<p><a href="https://www.right.com.cn/forum/thread-3773109-1-1.html">乐橙SN1破解补丁包-机顶盒桌面-去限制-开ADB-ROOT-安装未知来源软件</a></p>
<p><a href="https://post.smzdm.com/p/aoo8oqzn/">乐橙SN1 扩展 Transmission插件， 内置硬盘充分利用 PT必备</a></p>
<p>由于我依然还是无法刷机，所以只能改为研究怎么折腾原生系统了。</p>
<h4 id="自带的远程下载软件"><a href="#自带的远程下载软件" class="headerlink" title="自带的远程下载软件"></a>自带的远程下载软件</h4><p>与其它 bt 软件连接的端口，似乎每次都变化。我通过在电脑使用 qb 做种，然后 sn1 下载这个种子资源，了解到 sn1 在 qb 中显示的 客户端 信息为 client_test/1.1.1.0，估计是他们自己搞的一个 BT 软件吧。</p>
<h4 id="硬盘的路径"><a href="#硬盘的路径" class="headerlink" title="硬盘的路径"></a>硬盘的路径</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/linux/m</span>nt<span class="regexp">/lv/</span></span><br></pre></td></tr></table></figure>

<h4 id="web-网页的路径"><a href="#web-网页的路径" class="headerlink" title="web 网页的路径"></a>web 网页的路径</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/linux/m</span>nt/web</span><br></pre></td></tr></table></figure>

<p>我是先 root ，然后通过 ttl 备份原本的系统。再来折腾其它的，建议大家也这么做，这个非常重要，因为这机器现在是没有线刷包的，要是自己搞坏了系统，估计就变砖了。</p>
<p>root 后是可以恢复出厂设置的，不用担心，而且恢复之后功能都还能用，远程访问、下载这些都在，并且 root 权限依旧，不会因为恢复出厂而丢失。</p>
<p>折腾主要就是安装 entware ，他人已经写好教程了，大家可以根据超链接跳转过去学习，建议有科学上网环境再来折腾这个，不然很可能安装失败。</p>
<p><a href="https://post.smzdm.com/p/aoo8oqzn/">乐橙SN1 扩展 Transmission插件， 内置硬盘充分利用 PT必备</a></p>
<p>这个过程中，需要安装 <strong>busybox</strong> ，我这里安装的是 1.20.2，使用这个版本才可以用 wget 。安装包我上传到网盘里 <a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 在 【手机软件】里面。</p>
<p>代理可以参考这样</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//192.168.123.69:7890</span></span><br><span class="line">alias pon=<span class="string">&#x27;export http_proxy=<span class="subst">$url</span>; export https_proxy=<span class="subst">$url</span>&#x27;</span></span><br><span class="line">pon</span><br></pre></td></tr></table></figure>

<p>192.168.123.69 是我电脑的 ip ，不细讲了。</p>
<p>配置好 entware 之后，还可以装 qb</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">opkg <span class="keyword">install</span> qbittorrent</span><br></pre></td></tr></table></figure>

<p>安装完成应用在 /opt/bin 里面，可以通过 /opt/bin/qbittorrent-nox 来运行。</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">/opt/bin # qbittorrent-nox </span><br><span class="line">QtSingleCoreApplication: listen <span class="keyword">on</span> <span class="keyword">local</span> socket failed, QLocalServer::listen: <span class="keyword">Name</span> error</span><br><span class="line"></span><br><span class="line">*** Legal Notice ***</span><br><span class="line">qBittorrent <span class="keyword">is</span> a <span class="keyword">file</span> sharing <span class="keyword">program</span>. When you run a torrent, its data will be made available <span class="keyword">to</span> others by means <span class="keyword">of</span> upload. Any content you share <span class="keyword">is</span> your sole responsibility.</span><br><span class="line"></span><br><span class="line">No further notices will be issued.</span><br><span class="line"></span><br><span class="line">Press <span class="string">&#x27;y&#x27;</span> key <span class="keyword">to</span> accept <span class="keyword">and</span> <span class="keyword">continue</span>...</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">******** Information ********</span><br><span class="line"><span class="keyword">To</span> control qBittorrent, access the Web UI at http:<span class="comment">//localhost:8080</span></span><br><span class="line">The Web UI administrator username <span class="keyword">is</span>: admin</span><br><span class="line">The Web UI administrator password <span class="keyword">is</span> still the <span class="keyword">default</span> one: adminadmin</span><br><span class="line">This <span class="keyword">is</span> a security risk, please consider changing your password from <span class="keyword">program</span> preferences.</span><br></pre></td></tr></table></figure>

<p>第一次运行需要按 y 同意一下。</p>
<p>想知道能装什么，可以浏览器访问 <a href="http://bin.entware.net/armv7sf-k3.2/">http://bin.entware.net/armv7sf-k3.2/</a></p>
<p>然后通过查找来查询自己想装的应用。</p>
<p>不过装好这些应用后，机器重启，自身的 launcher 就打不开了。也就是自身的 nas 功能丢失了。估计是哪里冲突了，暂时还没找到原因。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于玩客云的一些资料</title>
    <url>/2019/10/about-wankeyun/</url>
    <content><![CDATA[<h3 id="玩客云能做什么？"><a href="#玩客云能做什么？" class="headerlink" title="玩客云能做什么？"></a>玩客云能做什么？</h3><ul>
<li><p>下载迅雷可以下载的内容。</p>
</li>
<li><p>当私人网盘来使用，出门在外时，也可访问家中硬盘中的文件。</p>
</li>
</ul>
<p>那它有什么缺点？最大的缺点是，会不停往硬盘存东西。因此会加大硬盘损耗，以及占用带宽。</p>
<p>下面是关于玩客云，个人收集的一些资料。</p>
<h2 id="问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）"><a href="#问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）" class="headerlink" title="问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）"></a>问：现在入手什么版本最好啊？（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）</h2><ul>
<li><p>看你的用途吧。。。想要挖矿的就去买开了挖矿的，不需要挖矿、只想下载和当网盘用的买退出挖矿的或者未拆封的，要刷机或者装组件(如transmission、apache、nginx、php、mysql等)玩的买root的。</p>
</li>
<li><p>之前买了一个全新未拆封的，没有开通链克计划，硬盘是可以休眠的</p>
</li>
</ul>
<h2 id="玩客云限制上传的方法（最好电脑上操作）"><a href="#玩客云限制上传的方法（最好电脑上操作）" class="headerlink" title="玩客云限制上传的方法（最好电脑上操作）"></a>玩客云限制上传的方法（最好电脑上操作）</h2><ul>
<li><p>1、显示隐藏的文件，看到一个.onething_data的文件夹，删除了。</p>
</li>
<li><p>2、打开记事本，什么都不需要，直接另存为—保存类型选择为所有文件，文件名为.onething_data</p>
</li>
<li><p>丢到玩客云硬盘的根目录上，设置为只读的属性，完事。</p>
</li>
<li><p>反正我这么搞，不会上班，远程访问也没毛病，一天还有0.几个蛋。大不了被绝育，能下载，能当家庭云用就行！</p>
</li>
</ul>
<hr>
<p>很多人不满玩客云一直读写硬盘的这种行为，于是申请退出玩客链计划，当时想退出却没那么容易。因为迅雷要求你必须手持身份证，拍一张照片给他们，才愿意帮你退出计划。这想想还是挺可怕，谁知道照片会被拿去干什么事啊。但是在 张大妈 有这样一个有趣的例子。</p>
<p>与客服互怼成功拒绝提供身份证</p>
<p><a href="https://post.smzdm.com/p/az59706n/">https://post.smzdm.com/p/az59706n/</a></p>
<p>同时这上面还有一篇非常详细的评测</p>
<p><a href="https://post.smzdm.com/p/aw3np922/">https://post.smzdm.com/p/aw3np922/</a></p>
<p>B 站上面也有教</p>
<p><span style="color: rgb(34, 34, 34);">不让其不停读取硬盘的四种方案（</span><a href="https://www.bilibili.com/video/av53589623">https://www.bilibili.com/video/av53589623</a><span style="color: rgb(34, 34, 34);">）</span></p>
<ul>
<li><p><span style="color: rgb(34, 34, 34);">① .onething_data文件夹封闭 具体操作看之前视频</span></p>
</li>
<li><p><span style="color: rgb(34, 34, 34);">② 发邮件退出玩客云奖励计划</span></p>
</li>
<li><p><span style="color: rgb(34, 34, 34);">③ 用闲置U盘或TF卡做主盘避免写入机械硬盘</span></p>
</li>
<li><p><span style="color: rgb(34, 34, 34);">④ 不用时弹出硬盘 使用时远程重启</span></p>
</li>
</ul>
<h2 id="用-Linux-禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别-ext4-格式的硬盘）"><a href="#用-Linux-禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别-ext4-格式的硬盘）" class="headerlink" title="用 Linux 禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）"></a>用 Linux 禁止其读写的方法：（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）</h2><ul>
<li><span style="color: rgb(34, 34, 34);">直接第一种覆盖就行 而且他不会改回来 但是需要把硬盘搞成ext4 同时设置该文件的用户组为root 再修改文件属性不可修改 以上操作在linux下进行</span></li>
</ul>
<h2 id="挂载到电脑的方法："><a href="#挂载到电脑的方法：" class="headerlink" title="挂载到电脑的方法："></a>挂载到电脑的方法：</h2><ul>
<li>Win + r 输入 //ip</li>
</ul>
<h2 id="我个人对于这台设备的评价"><a href="#我个人对于这台设备的评价" class="headerlink" title="我个人对于这台设备的评价"></a>我个人对于这台设备的评价</h2><p>我认为，对于下载，有这台设备还是不错的，因为它让我们在没有迅雷会员的情况下，也可以高速下载。当然前提是你下载的资源迅雷的服务器里面有。不过随着现在版权管理越来越严，迅雷能下载的东西也越来越少了。</p>
<p>对于当私人云盘，我看有人专门买两台这个来当私人云盘，不过买的硬盘盒都比机器贵。我个人是不会把手机的图片、视频放这的，不太敢，也没必要。</p>
<p>所以这台机器对我确实没多大用处，大多数情况下都是出于吃灰状态。不过也无所谓了，五六十块钱的东西，买来折腾折腾过过瘾也就值得了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于迅雷赚钱宝二代一些小记录</title>
    <url>/2021/03/about-zhuanqianbao2/</url>
    <content><![CDATA[<p>最近买了台 赚钱宝2代，闲鱼买的，30块包邮，有包装，电源适配器，网线。</p>
<p><img src="/img/2021/2021-03-01_21-01-42.jpg" alt="2021-03-01_21-01-42"></p>
<p>买这个干什么呢？拿它来赚钱吗？并不是，现在这个好像赚不了钱了吧，不然别人也不会卖。主要是看到恩山上面有刷机的帖子，想买来刷机玩玩。</p>
<p>论坛帖子：<a href="https://www.right.com.cn/forum/thread-4063295-1-1.html">https://www.right.com.cn/forum/thread-4063295-1-1.html</a></p>
<p>刷机很简单，下载镜像——<strong>二代线刷无需算号只需改mac后插盘就用.img</strong></p>
<p>然后使用 usb burning tool 导入，赚钱宝先用双公头 usb 线连接电脑，然后用卡针或者牙签，捅住复位键，再插电源。软件应该就能识别到了，然后就可以点【开始】刷机</p>
<p><img src="/img/2021/2021-03-01_23-17-35.jpg" alt="2021-03-01_23-17-35"></p>
<p>完成后拔电源、双公头 usb，再插上网线、电源开机。等待路由器出现 IP，然后就可以通过 ssh 连接上去。</p>
<p><img src="/img/2021/2021-03-01_21-05-16.jpg" alt="2021-03-01_21-05-16"></p>
<p>原本以为是 armbian ，刷完才发现，原来是 openwrt，而且精简得不能再精简的，很多命令行工具都没有。里面自带有甜糖，一开机就跑，有兴趣可以去原帖看看。</p>
<p>我对这个是没什么兴趣，那就把它拆开看看吧。网上一搜好像没有拆机的文章，那只能自己研究了。耗费很长很长的时间，终于把机器拆开了，也拆坏了。</p>
<p><img src="/img/2021/2021-03-01_23-23-40.jpg" alt="2021-03-01_23-23-40"></p>
<p>通过这伤痕累累的外壳，也可以想象我拆得好辛苦。</p>
<p><img src="/img/2021/2021-03-01_23-24-19.jpg" alt="2021-03-01_23-24-19"></p>
<p>而且主板上的一颗电容也被我弄掉下来了，现在机器无法开机了。</p>
<p><img src="/img/2021/2021-03-01_23-24-24.jpg" alt="2021-03-01_23-24-24"></p>
<p>背面长这样，可以焊接排针，用于 ttl 。</p>
<p><img src="/img/2021/2021-03-01_23-24-31.jpg" alt="2021-03-01_23-24-31"></p>
<p>正确的拆法应该是，用吹风筒吹机器的正面加热，然后取下上面比较薄的一层壳，应该就能看到 4 颗螺丝，拧开才能取下外壳。而我这种拆法是直接大力出奇迹，在 4 颗螺丝拧紧的情况下，强行将外壳掰开。</p>
<p>希望后人引以为戒。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>对于掌阅精选的一些研究</title>
    <url>/2020/08/about-zyjx/</url>
    <content><![CDATA[<p>由于我购买了两台掌阅F1手机，来参加阅读 180 天，购买金额全返回的活动。所以最近也就接触了 掌阅精选 这款app，使用了也有一段时间了，也算有了一些了解。</p>
<p>首先，它的账号和掌阅的账号是不通用的，不过如果你之前的手机号注册过掌阅，现在注册掌阅精选，系统监测到你是掌阅老用户，会赠送一些虚拟币给你购买书籍。像我的话是赠送了 50 个，相当于人民币 50 块。加上新用户福利，有 10 个币，一共就 60 个了。我用它买了好几本书。</p>
<p>新用户刚注册的前七天，每天登录可以领取虚拟币，七天一共能领 10 个。而且新人还有购书优惠，第一本书不用钱，所以很多人都去挑选那些很贵的书，卖三四百的那种。像我就有买《世界名著合集》、《银河帝国》。然后第二本书还是有优惠，只需要一分钱，所以感觉掌阅精选为了拉取新用户，下的力度还是挺大的。</p>
<p>我之前以为掌阅精选也可以每天签到，靠签到得到的赠送币来购买书，这样不就可以一直不花钱来看书了吗？不过。。。只有新人的前七天才有，七天后就只剩下一种方式来获取赠送币了– <strong>阅读时长</strong>。每个星期，星期一开始、星期日结束，只要你阅读30分钟，就可以兑换一个赠送币，<strong>每周最多10个</strong>，也就是阅读5个小时。</p>
<p>而兑换来的赠送币的有效期是<strong>一个月</strong>，我8月2日兑换了10个，从【账户】里面查到有效期是到 9 月 1 日。所以这样算，一个月最多可以积累50个，购买那些非合集的书一般是够的。</p>
<blockquote>
<p>掌阅精选领取赠送币之后，分享到微信，让账号和小程序绑定，赠送币还能翻倍。本来这星期阅读满5个小时，领取了十个赠送币，分享之后，又领取了10个。经过测试，第二个星期继续分享，还能再领另外10个。这也就意味着，每个星期可以领取20个赠送币，单靠这些，账号里一个月可以积累100个赠送币。</p>
</blockquote>
<p>刚才我把 app 升级了一下，现在也有了每天签到的入口了，不过签到得的币很少，连续七天下来也就2.8个。</p>
<p>有一点我是觉得挺有意思的，掌阅精选里面的书，购买的时候如果不用赠送币，而用真金白银购买，是支持七天内退款的。这就简直不知怎么夸好了，对于大部分书，我相信自己还是能够在七天内看完的， 而且之后打卡活动开始之后，每天都得阅读 30 分钟，七天就是 3 个半小时，或许看一些字数比较多的书，看不完，但是我想，是否能够利用这个规定，我在第六天就退款，然后再买呢？感觉掌阅这样搞很容易被薅羊毛嘛。</p>
<p>不过我觉得还是不要轻易去尝试比较好，谁知道它会不会也像京东那样，搞一个黑号系统，退款多几次就把你拉进黑号名单。</p>
<p>也有可能只是因为掌阅精选现在需要拉人头，所以才有这么大的优惠和福利，就像几年前，掌阅那时通过每天的签到，也可以购买很多书的，后来不也不行了。签到给的阅饼变少了，阅饼的使用期限也缩短了，就导致【不花钱也能一直看书】这种现象减少了。</p>
<p>不过也有可能优惠会一直持续下去吧，毕竟现在竞争这么激烈，想想今年搞【阅读打卡】的，有 京东阅读、咪咕阅读、QQ阅读、国文和当当合作的阅读器、以及本文讲的掌阅，这些都是国内的阅读平台，而用户一共就那么多。你不搞优惠的话，用户可能就被其它平台抢去了。</p>
<p>刚才去查了一下，阅读时长兑换书币这种活动，谁是最先发明的不知道，但是搞得最火热的应该是微信读书。现在好像是变成时长兑换无限卡了吧，所以感觉这种模式是有可能一直持续下去的。</p>
<p>而且我还了解到其它两个平台，网易蜗牛和藏书馆。前者每天的第一个小时可以免费阅读，后者的书是通过借阅的，和图书馆一样，书被别人借了，你就没法读，挺有意思的。</p>
<hr>
<p>不过这些我都没有多大的兴趣的去注册，我购买了两台掌阅 F1 ，每台需要打卡 180 天，每天半个小时，我接下来将会花费很多时间，在掌阅精选这个 app 上面。所以利用好时长兑换赠书币这个活动，一般也就够用了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>文章中插入服务器的视频</title>
    <url>/2018/09/add-video-in-post/</url>
    <content><![CDATA[<p>在博客上可以用嵌入的方式，引用优酷和 YouTube 的视频，那么可以播放放在网站（服务器）的视频吗？</p>
<p>下面依然用这串代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">315</span> <span class="attr">width</span>=<span class="string">560</span> <span class="attr">src</span>=<span class="string">&#x27;视频的相对路径&#x27;</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在本地的启动 web 服务，然后在浏览器打开，视频可以播放。不错，手机端也可以正常访问。此时将网页和视频文件放置在 GitHub 上，同样可以播放。但是有个缺点，一打开就自动播放，不知道怎么关闭。</p>
<p>后来了解到用 video 标签的话，就可以设置它不自动播放，并且如果想让视频能够自动适应大小，只需要加上 div 标签就行。如下面这样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;视频路径&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div  width="100%">
<video height="100%" width="100%" src="/misc/1.mp4" controls="controls"></video>
</div>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>分析网络兼职诈骗过程</title>
    <url>/2018/07/analysis-cheating-process/</url>
    <content><![CDATA[<p>此类消息一般多见于 QQ 群，毕竟对于个人来说，这个应该算是最大的曝光率了。可见其宣传手段以 QQ 群为主。（后面我去加入，管理员的要求也印证了这一点）</p>
<p>从网络得知了一个 QQ 群号，我去加入。之后联系管理员了解工作。这时她的 QQ 性别一般都是女性，美女头像，20 多岁。（至于真假呢，呵呵。）然后她就会开始介绍工作，例如刷单、打字或者快递单录入，都会强调其简单、时间自由、收益不错等。之后问你要不要加入？回答要，然后就说需要帮她宣传，自然就是转发 QQ 群了。而我昨天的尝试，发现现在还得发空间说说和微信朋友圈了。</p>
<p>很不容易宣传完了，再联系她。这时就会说可以了，得去听一个老师的课，培训完才能工作。以前是 QT 语音和 YY 语音，现在可能这些不能用了吧，改成了第三方软件，估计是自己专门开发的。（应该是，我后来又去登录一次，这个软件连自己名称都不能改，只有那些‘老师’才能改你的名称。）注册好帐号之后，登录上去，等人差不多了，就开始讲了。先装模作样地介绍怎么工作，balabala 一堆之后。就开始要钱了，说需要花一百块左右买一个激活码，然后才能有一个工号，才可以接任务。然后就是各种游说。</p>
<p>这个时候，大多数人会在这放弃，但是此时想起之前转发这些也很不容易，甚至因为这个而被很多个 QQ 群踢了。此时放弃，岂不是前功尽弃了？或许有人就因此而选择了去交钱。而有的就还有些犹豫，于是去问之前那个介绍人。（例如我就去问，之前不是说不用交钱吗？）此时介绍人就会说，你放心啦，这个每个人都交的，我也交了，待会做几个任务就拿回来了。然后就发一些截图过来，证明她的话。这时就又增加了交钱的可能性。</p>
<p>那么，有人也许会想，交就交嘛，反正一会就拿回来了。然而，呵呵→_→。等交了钱，准备去完成那几个新手任务，这时这个老师就会让你去另一个老师那。来到新老师这，你以为可以开始了吗？不行的，接下来会说，你这是普通会员，只能接普通任务，要再交 298 成为钻石会员……又 balabala 之类，这时我相信大多数人会发现自己被骗了的。</p>
<p>但是，还是会有人想着，唉，前面都交钱了，这是放弃那钱不就打水漂了吗？所以还真有人又交了。这时据说就真的完成了，（只是据说，我并不清楚，好像也有继续要求交很多钱的。）可以接任务了。然后就准备大干一场吧。……过了不久，就会发现，一天耗费不少的精力，最后大概能赚个几块钱。又或者得经常去注册什么什么帐号，绑定银行卡身份证之类的。要把本钱赚回来基本不可能。</p>
<p>之后有人估计就算了，当作花钱买教训吧。而有的人呢，发现唯一能赚回本的方式，就是去拉人，据说拉人那人交的钱，有 70%能归拉人者，也就是客服。于是，一个新的客服就此诞生……</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>bilibili 粉丝数量展示器 app</title>
    <url>/2021/02/bilibili-fans/</url>
    <content><![CDATA[<p>去年搞了好几台墨水屏手机，平时除了阅读，就是放在桌面上当时钟用。</p>
<p><img src="/img/2021/f1_time.jpg" alt="f1_time"></p>
<p>后来突发奇想，要不拿它来当粉丝计数器吧。放在桌面上展示当前的粉丝数量，反正墨水屏屏幕不刷新的话，也不怎么耗电。</p>
<p>于是花费了一些时间，写了这个 app —— B站粉丝展示器</p>
<p><img src="/img/2021/Bili_fans_app.jpg" alt="Bili_fans_app"></p>
<p>app 只申请网络权限而已，其它的权限都不需要</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:<span class="built_in">name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>当然这个权限申请不会弹出选项，所以直接安装就可以使用。打开 app 后会显示 </p>
<blockquote>
<p>waiting for update</p>
</blockquote>
<p>需要点击文字，进入设置页面</p>
<p><img src="/img/2021/bili_fans_settings.jpg" alt="bili_fans_settings"></p>
<p>填写 mid ，在电脑网页上，点击用户头像，就可以在地址栏看到 mid 了。例如这样</p>
<blockquote>
<p><a href="https://space.bilibili.com/254479550">https://space.bilibili.com/254479550</a></p>
<p>254479550 就是 mid</p>
</blockquote>
<p>填完退出 app，再重新打开。就可以刷新出粉丝数量了。手机如果有打开自动旋转屏幕，可以横屏展示。</p>
<p><img src="/img/2021/phones_bili_fans.jpg" alt="phones_bili_fans"></p>
<p>默认设置每 60 秒请求一次粉丝数量，并且屏幕永不熄屏，比较适合在墨水屏设备上面使用。</p>
<p>下载地址：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>在【手机软件】文件夹里</p>
<p>其它信息</p>
<blockquote>
<p>compileSdkVersion 30<br>minSdkVersion 16<br>targetSdkVersion 30</p>
</blockquote>
]]></content>
      <tags>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>贝壳云、我家云以太网口自动从千兆变为百兆</title>
    <url>/2020/11/bky-wjy-eth-100/</url>
    <content><![CDATA[<p>偶然间发现，怎么通过 smb 方式从贝壳云上面读取文件，速度只有 11MB/s 左右，上传文件到里面去也是如此。明明前几天从里面复制文件还有 60 多的速度的，怎么无缘无故变慢了？难道现在网口变百兆速度了？</p>
<p>于是我通过 <code>ifconfig</code> 命令，查看到 eth0 里显示</p>
<blockquote>
<p>collisions:0 txqueuelen:100</p>
</blockquote>
<p>以及通过 <code>dmesg</code> 命令查到这个</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[687120.156847]</span> rk_gmac-dwmac ff540000.ethernet eth0: Link <span class="keyword">is</span> Down</span><br><span class="line"><span class="string">[687122.156839]</span> rk_gmac-dwmac ff540000.ethernet eth0: Link <span class="keyword">is</span> Up - <span class="number">1</span>Gbps/Full - flow control rx/tx</span><br><span class="line"><span class="string">[687126.156737]</span> rk_gmac-dwmac ff540000.ethernet eth0: Link <span class="keyword">is</span> Down</span><br><span class="line"><span class="string">[687139.156393]</span> rk_gmac-dwmac ff540000.ethernet eth0: Link <span class="keyword">is</span> Up - <span class="number">100</span>Mbps/Full - flow control rx/tx</span><br></pre></td></tr></table></figure>

<p>看来确实是在某一时刻，以太网的网速从千兆降为百兆了。</p>
<p>解决方案是，拔网线重插。速度就又恢复千兆了。<code>dmesg</code> 里面也有显示新的日志。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[1736677.257293]</span> rk_gmac-dwmac ff540000.ethernet eth0: Link <span class="keyword">is</span> Down</span><br><span class="line"><span class="string">[1736681.257229]</span> rk_gmac-dwmac ff540000.ethernet eth0: Link <span class="keyword">is</span> Up - <span class="number">1</span>Gbps/Full - flow control rx/tx</span><br></pre></td></tr></table></figure>

<p>我拔下两秒后插回去，ssh 连接没断，smb 也可以继续访问。因此也没什么影响。</p>
<p>这个问题好像在我家云上面更为明显，我记得之前用我家云的时候也碰到几次，当时还在论坛找到可以恢复千兆的命令，不过现在找不到了。</p>
<p>因为贝壳云和我家云用的是同样的处理器，可能是硬件的通病吧，暂时也没什么更好的方法，只能发现降为百兆后就去重插一下网线就是了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>更改hosts文件</title>
    <url>/2018/06/change-hosts/</url>
    <content><![CDATA[<p>原理：我们上网的时候,输入网址,浏览器先检查 hosts 文件中是否有对应的IP地址,如果没有,就连接到DNS服务器,查找这个网址对应的 IP 地址。</p>
<p>我联想到域名绑定IP后是提交到DNS服务器的，那么按理说我去弄一个域名，比如：<code>sb.com</code> 然后将解析到我局域网的IP，比如：<code>192.168.1.8</code> ，那么我在局域网中就不用输入那么长的IP地址了。哈哈，不过这显然很麻烦，而且也有点浪费，一个域名居然只用在局域网中。</p>
<p>于是就想到之前的更改 hosts 文件来访问一些被墙的网站，还有来屏蔽一些网站。于是通过此，我就把 39.io 给解析到 192.168.1.39 ，因为我平时还是挺常开虚拟机的，所以只是IP最后这个不同而已 ，例如其它的为 <code>192.168.1.88</code> ，那么我也可以把它绑定为 <code>88.io</code></p>
<p>这样，我通过这个短网址就能访问虚拟机了，而不用去输入那一大串的IP。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>克隆 WordPress 网站</title>
    <url>/2018/06/clone-WordPress/</url>
    <content><![CDATA[<p>我现在的网站是放在美国的一个 vps 里的，之前一直想要怎么备份，万一这台服务器被墙了（毕竟真的发生过），或者将来换服务器了，那我怎么转移。当时找了好多方法。</p>
<h3 id="一-自带的导出导入"><a href="#一-自带的导出导入" class="headerlink" title="一 自带的导出导入"></a>一 自带的导出导入</h3><p>这是最简单的了，WordPress 本身就有这功能。登录后台，工具，就有导入和导出。把旧的导出，然后在一台新的服务器上导入，这样所有的文章就都过去了。确实方便，然而，只能导出文章，主题、插件是没法的。</p>
<h3 id="二-All-in-One-WP-Migration"><a href="#二-All-in-One-WP-Migration" class="headerlink" title="二 All-in-One WP Migration"></a>二 All-in-One WP Migration</h3><p>这是一个插件，在添加插件里搜索就能找到。安装后会出现在后台面板的左侧。点导出，会生成一个文件，可以下载。然后在一台新的服务器也安装这个插件，就能导入刚才下载的这个文件，这样就能把整个网站完整的克隆。这样也可以当做备份，不过免费版最多只能备份 500M 的网站，而且只能备份到本地。</p>
<h3 id="三-UpdraftPlus"><a href="#三-UpdraftPlus" class="headerlink" title="三 UpdraftPlus"></a>三 UpdraftPlus</h3><p>在添加插件里搜索 back 排第一的就是它。支持定时备份，既可以备份在本地，也可以备份在网盘、邮箱、FTP 这些，而且还是免费的。果然厉害，于是我设置它每天备份到 Dropbox ，只保留两份备份，这样就不会一下子就把网盘给塞满了。</p>
<p><strong>缺点：</strong>不能像上面那个插件那样，克隆网站，它只是支持数据丢失后的恢复。如果要实现网站克隆，需要花钱购买它的专业版。</p>
<h3 id="四-免费让-UpdraftPlus-支持网站克隆"><a href="#四-免费让-UpdraftPlus-支持网站克隆" class="headerlink" title="四 免费让 UpdraftPlus 支持网站克隆"></a>四 免费让 UpdraftPlus 支持网站克隆</h3><p>这是我无意发现的。那天是在查让 WordPress 绑定多个域名。</p>
<p>在 WordPress 程序根目录 wp-config.php 文件中加上下面代码</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">define(&#x27;WP_SITEURL&#x27;, &#x27;http<span class="symbol">://</span>&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;])<span class="comment">;</span></span><br><span class="line">define(&#x27;WP_HOME&#x27;, &#x27;http<span class="symbol">://</span>&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;])<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>这样只要是解析进来的域名都可以打开且不会看到串联到其他域名</p>
<p>这样修改后再就可以用 UpdraftPlus 来克隆网站了</p>
<p>我只是想多备份而已，不然这么久的努力忽然消失了，岂不是很心疼。</p>
]]></content>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>在 N1、我家云搭建 discuz 论坛</title>
    <url>/2020/09/discuz-in-N1/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了更好地讲解，如何为 qiandao 这个全自动签到平台，制作签到模板，我打算搭建一个 discuz 论坛来演示。本次使用的设备是 斐讯N1，因为之前把它刷成 Ubuntu 系统，再装上 乘风大佬 制作的导航（详情请看：<a href="/2020/03/n1-armbian-server">打造最具性价比服务器 N1-armbian</a>），所以现在它是一个 lnmp 环境，添加多一个网站也很容易。</p>
<p>当然，用 <code>我家云</code>、<code>S905电视盒子</code> 也可以，这两个我之前也介绍过怎么在上面安装 armbian 并使用 乘风大佬 制作的导航。</p>
<p>下面开始具体操作流程</p>
<h3 id="一、下载网站源码"><a href="#一、下载网站源码" class="headerlink" title="一、下载网站源码"></a>一、下载网站源码</h3><p><a href="https://gitee.com/3dming/DiscuzL/attach_files">https://gitee.com/3dming/DiscuzL/attach_files</a></p>
<p>官方的源码放在 gitee 上面，下载需要有账号。为了方便其他人下载，我将最新版的下载后传到网盘中了。网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> </p>
<blockquote>
<p>在【Web相关】文件夹中</p>
</blockquote>
<h3 id="二、上传到设备内"><a href="#二、上传到设备内" class="headerlink" title="二、上传到设备内"></a>二、上传到设备内</h3><p>需要用到的是压缩包中的 upload 文件夹，你可以选择在电脑上解压，然后再传入 N1，可以用 smb 、ftp、scp 等方式传输。</p>
<p>也可以直接将压缩包先传到 N1 里面。然后使用 unzip 命令解压（建议先建立一个空文件夹，将压缩包放里面），之前再用 mv 命令将 upload 文件夹移动到你想要放的位置。这里顺便改一下文件夹名。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv upload <span class="regexp">/opt/</span>wwwroot/discuz</span><br></pre></td></tr></table></figure>

<h3 id="三、修改-nginx-的配置文件"><a href="#三、修改-nginx-的配置文件" class="headerlink" title="三、修改 nginx 的配置文件"></a>三、修改 nginx 的配置文件</h3><p>先进入配置所在的位置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>etc<span class="regexp">/nginx/</span>vhost</span><br></pre></td></tr></table></figure>

<p>把 h5ai 的配置文件复制一份给 discuz 用，然后手动编辑这份配置</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cp</span> h5ai.<span class="keyword">conf</span> discuz.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">vim</span> discuz.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>我将它修改为这样</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen <span class="number">8188</span>;</span><br><span class="line">     server_name localhost;</span><br><span class="line">     root <span class="regexp">/opt/</span>wwwroot<span class="regexp">/discuz/</span>;</span><br><span class="line">     index  index.html  index.php  <span class="regexp">/_h5ai/</span><span class="keyword">public</span>/index.php;</span><br><span class="line">     <span class="keyword">include</span> <span class="regexp">/opt/</span>etc<span class="regexp">/nginx/</span>conf/php-fpm.conf;</span><br><span class="line">    #otherconf</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>主要就是修改第二和第四行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">listen <span class="number">8188</span>; <span class="comment">#端口可以自己设置，但是不能和其它重复</span></span><br><span class="line">server_name localhost; <span class="comment">#有域名的话是在这里设置</span></span><br><span class="line">root <span class="regexp">/opt/</span>wwwroot<span class="regexp">/discuz/</span>; <span class="comment"># 网站源码所在的文件夹路径</span></span><br></pre></td></tr></table></figure>

<p>改好后，让 Nginx 重新读取一下配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h3><p>然后你到浏览器打开 N1 的 IP:8188</p>
<p>就可以看到 discuz 的安装界面。</p>
<p><img src="/img/2020/discuz-install.png" alt="discuz-install"></p>
<p>但是你有可能会碰到提示不可写的情况</p>
<p><img src="/img/2020/%E4%B8%8D%E5%8F%AF%E5%86%99.png" alt="不可写"></p>
<p>这时就需要修改权限了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">777</span> <span class="regexp">/opt/</span>wwwroot/discuz</span><br></pre></td></tr></table></figure>

<p>然后再刷新一下网页应该就可以了</p>
<p>接着来到这一步，数据库密码改为 <code>123456</code></p>
<p><img src="/img/2020/discuz-database.png" alt="discuz-database"></p>
<p>然后就可以按下一步安装了。</p>
<p>这样应该就可以顺利使用了。</p>
<h3 id="五、卸载"><a href="#五、卸载" class="headerlink" title="五、卸载"></a>五、卸载</h3><p>删除 nginx 配置和网站源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm <span class="regexp">/opt/</span>etc<span class="regexp">/nginx/</span>vhost/discuz.conf</span><br><span class="line">rm -rf <span class="regexp">/opt/</span>wwwroot/discuz</span><br></pre></td></tr></table></figure>

<p>删除数据库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>bin/mysql -uroot -p</span><br><span class="line"><span class="comment"># 输入密码 123456</span></span><br><span class="line">drop database ultrax;</span><br></pre></td></tr></table></figure>

<p>完成。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>Linux</tag>
        <tag>网络</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Docker 将服务器打造成全能下载机</title>
    <url>/2021/05/docker-download-server/</url>
    <content><![CDATA[<p>本文建议搭配视频观看：</p>
<p><a href="https://www.bilibili.com/video/BV1xv411573B/">https://www.bilibili.com/video/BV1xv411573B/</a></p>
<p>两个 Docker 容器的搭建</p>
<p>transmission</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run <span class="string">\</span></span><br><span class="line">    -d <span class="string">\</span></span><br><span class="line">    --name transmission <span class="string">\</span></span><br><span class="line">    -p <span class="number">9091</span>:<span class="number">9091</span> <span class="string">\</span></span><br><span class="line">    -p <span class="number">51413</span>:<span class="number">51413</span> <span class="string">\</span></span><br><span class="line">    -v /mnt/tr_data:/data <span class="string">\</span></span><br><span class="line">    -e USERNAME=admin <span class="string">\</span></span><br><span class="line">    -e PASSWORD=admin <span class="string">\</span></span><br><span class="line">    gists/transmission</span><br></pre></td></tr></table></figure>

<p>aria2</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -<span class="ruby">-name aria2-pro \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-network host \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e PUID=<span class="variable">$UID</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e PGID=<span class="variable">$GID</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e RPC_SECRET=<span class="number">12345</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e RPC_PORT=<span class="number">6800</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e LISTEN_PORT=<span class="number">6888</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">v ~<span class="regexp">/aria2-config:/config</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">v /mnt/<span class="symbol">aria2:</span>/downloads \</span></span><br><span class="line"><span class="ruby"></span>    p3terx/aria2-pro</span><br></pre></td></tr></table></figure>

<p>使用 python 开启一个简单的文件分享服务</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">python3 -m http.<span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>此时默认使用 8000 端口</p>
<p>更好的文件展示服务—— h5ai</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">5555</span>:<span class="number">80</span> -v /mnt:/h<span class="number">5</span>ai --name h<span class="number">5</span>ai ilemonrain/h<span class="number">5</span>ai:full</span><br></pre></td></tr></table></figure>

<p>最后记得防火墙放行。</p>
<p>如果你有购买腾讯云轻量服务器的需求，可以点击我的链接进行购买</p>
<p><a href="https://curl.qcloud.com/i4FBqtLH">https://curl.qcloud.com/i4FBqtLH</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>github 拉取项目出错</title>
    <url>/2021/06/github-clone-error/</url>
    <content><![CDATA[<p>今天拉取 GitHub 上面的项目时，发现一直出错。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="symbol">&#x27;https</span>://github.com/xxxx/xxxxx/&#x27;: gnutls_handshake() failed: <span class="literal">Error</span> <span class="keyword">in</span> the pull <span class="keyword">function</span>.</span><br></pre></td></tr></table></figure>

<p>最终发现，开代理就行，唉</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//192.168.123.69:7890</span></span><br><span class="line">alias pon=<span class="string">&#x27;export http_proxy=<span class="subst">$url</span>; export https_proxy=<span class="subst">$url</span>&#x27;</span></span><br><span class="line">pon</span><br></pre></td></tr></table></figure>

<p>我电脑的 ip 是 192.168.123.69 ，使用的代理软件是 clash ，把 allow lan 的开关打开后，局域网的其它设备就能使用电脑的代理。7890 是 clash 默认的端口，如果使用 ssr 默认是 1080。</p>
<p>另外一种方法</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> http<span class="variable">.proxy</span> http:<span class="comment">//127.0.0.1:10809</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> https<span class="variable">.proxy</span> https:<span class="comment">//127.0.0.1:10809</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>用服务器来离线下载 BT 种子，体验千兆网络的魅力——docker 安装 qBittorrent，以及把文件取回手机</title>
    <url>/2019/08/docker-qb/</url>
    <content><![CDATA[<p><strong>此教程并不难，只要你会复制粘贴即可。</strong></p>
<p>🌟🌟🌟搭配视频：</p>
<p><a href="https://www.bilibili.com/video/av65923774">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p>
<p><a href="https://www.bilibili.com/video/av84585591/">利用免费CDN加速取回BT资源</a></p>
<blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p>
</blockquote>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote>
<p>使用这家的服务器，是因为它可以随时的删除，不像其它的，一买就得一年。而且，这家还可以选择自动安装 docker ，又节省了一些时间。</p>
</blockquote>
<ol>
<li>点击左边的 billing</li>
<li>充值方式支持 <strong>支付宝</strong> <strong>微信</strong>（但最少 10 美元）</li>
<li>充值好后 ，点右边那个 <strong>+</strong> 的圆圈</li>
<li>然后选择服务器的<strong>地区</strong>（日本和新加坡会比较快，不过有可能连接不上，选美国也可以）</li>
<li> <strong>Server Type</strong>点 <strong>application</strong> ，里面就有 <strong>docker</strong></li>
<li> <strong>Server Size</strong> 就是服务器的配置，越高就越贵。（如果有赠送的 50 美元，那就选那个 40 美元的吧，反正你不花，下个月也没了）</li>
<li>把下面的 <strong>Enable IPv6</strong> 前面的 框 打钩✅（可以使我们下载时连接到更多的用户）</li>
<li>然后点击右下角的 deploy now</li>
<li>等待几分钟……</li>
<li>就可以看到服务器部署好了，给了一个 ip 地址。</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> 我们要控制这台服务器，需要用 ssh 工具，这里我用 putty 来演示。</p>
<blockquote>
<p>如果用安卓手机的话，可以下载个 <strong>JuiceSSH</strong></p>
</blockquote>
<p>有能力的可以去 GitHub 下载：<a href="https://github.com/larryli/PuTTY/releases">地址</a><br>无法在 GitHub 下载的，可以到我的网盘里下载：<a href="http://veger.ys168.com/">地址</a>（在『电脑软件』里）</p>
<p>下载后解压，打开 putty<br><img src="/img/2019/putty-config.webp" alt="putty 连接.png"><br>填上 IP 地址连接</p>
<p>接着输入用户名和密码。（密码输入时不会显示的）</p>
<p>连接后输入</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull linuxserver/qbittorrent</span><br></pre></td></tr></table></figure>
<p>完成后输入</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker create <span class="string">\</span></span><br><span class="line">  --name=qbittorrent <span class="string">\</span></span><br><span class="line">  -e PUID=<span class="number">1000</span> <span class="string">\</span></span><br><span class="line">  -e PGID=<span class="number">1000</span> <span class="string">\</span></span><br><span class="line">  -e TZ=Aisa/Shanghai <span class="string">\</span></span><br><span class="line">  -e UMASK_SET=<span class="number">022</span> <span class="string">\</span></span><br><span class="line">  -e WEBUI_PORT=<span class="number">8080</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">8999</span>:<span class="number">8999</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">8999</span>:<span class="number">8999</span>/udp <span class="string">\</span></span><br><span class="line">  -p <span class="number">8080</span>:<span class="number">8080</span> <span class="string">\</span></span><br><span class="line">  -v /path/<span class="keyword">to</span>/appdata/config:/config <span class="string">\</span></span><br><span class="line">  -v /path/<span class="keyword">to</span>/downloads:/downloads <span class="string">\</span></span><br><span class="line">  --restart <span class="keyword">unless</span>-stopped <span class="string">\</span></span><br><span class="line">  linuxserver/qbittorrent</span><br></pre></td></tr></table></figure>
<p>创建好后再启动</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="literal">start</span> qbittorrent</span><br></pre></td></tr></table></figure>
<p>完成后就可以在浏览器里，输入 <code>IP:8080</code> 来访问 qB 了。</p>
<blockquote>
<p>补充，还需要到设置里面，在【连接】中，将【监听端口】改为 8999 才行。如图</p>
</blockquote>
<p><img src="/img/2020/qb%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png" alt="qb监听端口"></p>
<h2 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h2><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。</p>
<p>我在后期还写了这篇文章：<a href="/2020/01/three-ways-to-retrieve-the-file/">关于服务器资源取回本地的几种方法</a> 想通过浏览器将文件取回本地的朋友，可以了解一下。</p>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>看到有些人评论说用服务器下载会有风险，这个我也是知道的。因为国外的版权保护比较严格，所以有时会监控到你在下载 BT ，如果发现你下载的内容是盗版视频之类的，有可能会对你发出警告⚠️！</p>
<p>但是，我已经用了两年多了，没有碰到过，所以才敢出这个教程。我认为可能和上传有关吧，不用上传太多应该就不太容易被查水表吧。所以我的分享率就设置为 2 而已。</p>
<blockquote>
<p>就算你真的被警告了，一般也就是叫你把视频删了而已。如果再严重点，我大不了就把这台服务器删了，然后重新开一台。（就跟我们在网吧里一样，这也是用 vultr 的好处。）</p>
</blockquote>
<p>而且，有的人问这个流量的问题，像视频中演示的，最便宜的套餐都有 1000G 流量，而且是上传 1000G，下载也 1000G ，正常使用一般是用不完的，只要设置一下这个分享率，按理是不会用超过的。</p>
<p><img src="/img/2019/bandwidth.png" alt="bandi.png"><br>像我这一个月才用 200G ……</p>
<p>总之一般用户下载是用不完的。</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>下载</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客2022年瞎折腾</title>
    <url>/2022/01/hexo-2022/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我的博客一直使用 hexo 部署的，之前还有同步到 gitee 上，后来 gitee 提示我说有内容违规，把 gitee page 给我关了，还要我自己去审查我哪里违规。。。</p>
<p>那就算了，不用 gitee 了，现在主要部署在 GitHub 上面。</p>
<h3 id="为什么使用-hexo？"><a href="#为什么使用-hexo？" class="headerlink" title="为什么使用 hexo？"></a>为什么使用 hexo？</h3><p>主要原因有，文档可以使用 Markdown，博客可以部署到 GitHub pages（免费），迁移不难（相对于 WordPress 来说）。说起来我这博客还真的迁移了好几次了，之前在黑苹果上，后来迁移到 win7，之后到 win10，现在迁移到 Mac mini M1</p>
<p>前段时间也了解到有一个和 hexo 差不多的，可以将 Markdown 渲染为 HTML，然后可以部署到 GitHub pages 的项目——<a href="https://vuepress.vuejs.org/zh/">VuePress (vuejs.org)</a></p>
<p>不过我还没去深入了解，毕竟 hexo 我也用了好几年了，其实主题方面也花了不少时间去折腾，才达到了自己勉强满意的效果，如果换其它的，之前的时间感觉就白费了，而且可以又得花时间去了解、去调整到自己满意的效果。</p>
<p>所以既然现在 hexo 还能用，就继续用就行了。</p>
<h3 id="本次迁移过程中遇到的问题"><a href="#本次迁移过程中遇到的问题" class="headerlink" title="本次迁移过程中遇到的问题"></a>本次迁移过程中遇到的问题</h3><p>步骤是安装 nodejs 先，我是直接下载 tar 压缩包，解压后将 bin 文件夹路径添加到环境变量中的，执行 node -v 和 npm -v 查看版本，成功显示既可。</p>
<p>之后参考 hexo 官网安装，然后把之前备份的 hexo 博客项目拉取回来，进入博客根目录，执行 npm install 安装依赖。</p>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>完成后就碰到问题了，执行 hexo d 无法将内容部署到 GitHub 上面。显示</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Copying <span class="built_in">files</span> <span class="built_in">from</span> public <span class="built_in">folder</span></span><br></pre></td></tr></table></figure>

<p>后就报错了</p>
<p>那么就网上搜搜看别人的解决方法，于是找到了。</p>
<p><a href="https://www.zhihu.com/question/443396119">求解hexo d把文件复制到deploy文件夹就没用然后了？ - 知乎 (zhihu.com)</a></p>
<blockquote>
<p>我也遇到了这个问题，这是我在GitHub上看到的某位大佬的办法，先把原来的hexo-deployer-git插件卸载了，然后直接从 master 分支安装<br>npm un hexo-deployer-git<br>npm i hexojs/hexo-deployer-git</p>
<p>作者：cc666<br>链接：<a href="https://www.zhihu.com/question/443396119/answer/1721530396">https://www.zhihu.com/question/443396119/answer/1721530396</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>接着遇到了第二个问题，就是 public 文件夹内的 html 文件，内容都是空白的。</p>
<p>那么这个具体是怎么解决的呢？其实我也不太清楚，我的操作过程是，升级看看。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> audit fix</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> audit fix --force</span><br></pre></td></tr></table></figure>

<p>然后查看 <code>package.json</code> 发现里的 hexo 版本是 3.7，对比一下 hexo 官网，最新的好像已经是 6 点几了，于是我执行一下</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>然后它就自动变为 6.0.0 了</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;6.0.0&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>那么看来已经把 hexo 升级了，于是再来试试 <code>hexo g</code></p>
<p>这一次生成的 html 文件就又内容了，在执行 <code>hexo d</code> 部署到 GitHub pages，就完成了。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>然后部署到 GitHub pages 的内容，打开后发现图片没法加载。</p>
<p>原因是我的博客文章里，图片链接都是以这种方式</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">![Mac_M1_kcc](<span class="symbol">\i</span>mg<span class="symbol">\2</span>021<span class="symbol">\M</span>ac_M1_kcc.png)</span><br></pre></td></tr></table></figure>

<p>之所以是反斜杠 <code>\</code> ，是因为我之前用的是 win10 ，Windows 里面文件的路径就是用反斜杠的，而在 Linux 或者 macOS 里面，文件路径则是 <code>/</code> ，所以导致现在在浏览器里面，图片的加载路径变为像</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>powersee.github.io<span class="regexp">/2021/</span><span class="number">07</span><span class="regexp">/zte-e8820s/</span>\img\<span class="number">2021</span>\e8820s-ttl.jpg</span><br></pre></td></tr></table></figure>

<p>这样的了，自然就没法加载出来图片。不过也是很奇怪，我刚才没有升级 hexo 的时候，明明图片是可以加载出来的（刚才在电脑里通过 hexo s 访问 localhost:4000 的时候，图片什么的都是正常的……）</p>
<p>然后我又查看了一下我的备份博客，我设置它每天凌晨同步 GitHub 上的网页，所以刚才更新的内容，它还没同步过去。然后我发现，其实之前的图片也是有反斜杠的，并且图片可以正常加载。</p>
<p><img src="/img/2022/%E4%BD%BF%E7%94%A8%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5.jpg"></p>
<p>等了一会之后，我再去刷新 GitHub pages 搭建的博客，图片大多数也可以加载了。有点莫名其妙。不过我还是使用 vscode 里的查找替换功能，将 <code>\img\2021\</code> 全部替换为 <code>/img/2021/</code> ，以及 2020 年的。</p>
<p>其实想想也不怎么省心呀，不过还好问题能够解决。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器搭建全能下载器 Aria2 以及私人网盘，只需一行命令（docker）</title>
    <url>/2019/09/docker-aria2/</url>
    <content><![CDATA[<p>本文将利用 docker 一键安装 Aria2 和 filebrowser。</p>
<p>建议搭配之前的文章来观看：<a href="/2019/08/docker-qb">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p>
<p><a href="https://github.com/wahyd4/aria2-ariang-docker/blob/master/README.CN.md">项目 GitHub 地址</a></p>
<h3 id="安装-docker-如果机器没有的话）"><a href="#安装-docker-如果机器没有的话）" class="headerlink" title="安装 docker(如果机器没有的话）"></a>安装 docker(如果机器没有的话）</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<h3 id="最快速启动"><a href="#最快速启动" class="headerlink" title="最快速启动"></a>最快速启动</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d --name aria<span class="number">2</span>-ui -v /home/down:/data -p <span class="number">80</span>:<span class="number">80</span> wahyd<span class="number">4</span>/aria<span class="number">2</span>-ui</span><br></pre></td></tr></table></figure>

<ul>
<li>Aria2: <a href="http://yourip/ui/">http://yourip/ui/</a><ul>
<li>假如你的 IP 是 123.123.123.123 ，这里你可以在浏览器输入 <a href="http://123.123.123.123/ui/">http://123.123.123.123/ui/</a></li>
</ul>
</li>
<li>FileManger: <a href="http://yourip/">http://yourip</a><ul>
<li>假如你的 IP 是 123.123.123.123 ，这里你可以在浏览器输入 <a href="http://123.123.123.123/">http://123.123.123.123</a></li>
</ul>
</li>
<li>访问文件管理器的默认账号和密码都是 admin</li>
</ul>
<p>这样下载的文件都放在 <code>/home/down</code> 这个文件夹里面</p>
<p>文件夹没有写入权限，有兴趣看这篇文章了解 <a href="https://note.qidong.name/2018/01/docker-volume-permission/">文章链接</a><br>不管原理，无脑给予 777</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">777</span> <span class="regexp">/home/</span>down</span><br></pre></td></tr></table></figure>

<p>强制删除容器</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> aria2<span class="literal">-ui</span></span><br></pre></td></tr></table></figure>
<h3 id="加密下载界面"><a href="#加密下载界面" class="headerlink" title="加密下载界面"></a>加密下载界面</h3><p>由于前面的容器使用了 80 端口，所以想创建下面这个容器的话，要把前面的容器先删除了，有的小伙伴忘记删除前面的容器，导致下面这个容器一直无法建立。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d --name ariang \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -e <span class="attribute">PUID</span>=1000 \</span><br><span class="line">  -e <span class="attribute">PGID</span>=1000 \</span><br><span class="line">  -e <span class="attribute">ENABLE_AUTH</span>=<span class="literal">true</span> \</span><br><span class="line">  -e <span class="attribute">RPC_SECRET</span>=Hello \</span><br><span class="line">  -e <span class="attribute">ARIA2_SSL</span>=<span class="literal">false</span> \</span><br><span class="line">  -e <span class="attribute">ARIA2_USER</span>=user \</span><br><span class="line">  -e <span class="attribute">ARIA2_PWD</span>=pwd \</span><br><span class="line">  -v /home/down:/data \</span><br><span class="line">  wahyd4/aria2-ui</span><br></pre></td></tr></table></figure>

<ul>
<li>用户名：user</li>
<li>密码：pwd</li>
</ul>
<h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><p>根据个人的需求来选择，如果觉得不需要加密 Aria2 的管理界面的，其实用第一种方式就行了。非常简单，一行命令即可。</p>
<p>同时也可以结合 APP ：Transdrone_2.5.17.apk 来使用，这个我放在网盘里（在【手机软件】文件夹中），使用它来管理多个下载工具也是比较方便的。</p>
<p><a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p><img src="/img/2019/transdrone.jpg" alt="transdrone"></p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>下载</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 换电脑方案</title>
    <url>/2018/09/hexo-change-computer/</url>
    <content><![CDATA[<p>hexo 搭建博客容易。但是搭建好后只能在这一台电脑上用，这就有点麻烦了。而且要是电脑坏了那且不是完了？所以备份以及恢复很重要。</p>
<p>（当然，windows 下能下载个便携版的 hexo 环境，(<a href="https://portablehexo.bitmoe.cn/">https://portablehexo.bitmoe.cn/</a>) ，放在 U 盘里面，这样随便到哪里都可以用。这种这里不讨论。）</p>
<h2 id="备份哪"><a href="#备份哪" class="headerlink" title="备份哪"></a>备份哪</h2><p>用 hexo 搭建博客好后，生成的静态网页是放在（public）这个文件夹里的。正常流程就是把这个文件夹里的内容发布到 github 或者自己的服务器上。而我们要备份的，不是这个，而是整个博客源码，就是（public）的上一层的这整个文件夹。</p>
<h2 id="如何备份"><a href="#如何备份" class="headerlink" title="如何备份"></a>如何备份</h2><p>那么可以手动复制吗？额，有点难。因为小文件太多，接近一万个，复制要很久。而且文件经常变动，每次变动都再重新复制一份？不现实。</p>
<p>因此用 <strong>git</strong> 用管理是最好的方法。在博客项目根目录，比如我的博客源码放在 blog 这个文件夹里，那么就用命令行进入这个文件夹，git init 初始化这个项目，将它变成一个仓库，然后就可以把备份到网上了。</p>
<h2 id="准备新环境"><a href="#准备新环境" class="headerlink" title="准备新环境"></a>准备新环境</h2><p>比如说电脑坏了，或者换了新电脑。要怎么在新的新电脑上继续写博客呢？</p>
<p>首先得先在新的电脑上安装好运行 hexo 的环境，比如 windows 就得先安装 node.js 和 git，然后再安装 hexo。等可以运行 hexo 并在浏览器显示了，再把刚才备份到网上的博客源码克隆下来。</p>
<h2 id="克隆之后"><a href="#克隆之后" class="headerlink" title="克隆之后"></a>克隆之后</h2><p>如果顺利的话，此时进入克隆下来的文件夹，再 npm install 一下，应该就可以用了。如果像我这样，发现可以启动，但是打开链接后什么都没显示。那么应该是主题缺失的原因。可以选择重新下载主题，或者在备份的时候把主题也备份到网络。可以参考这篇文章：<a href="https://powersee.github.io/2018/08/about-git-cache/">修复 next 主题无法提交到 git 仓库</a></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>利用lnmp搭建wordpress</title>
    <url>/2018/06/install-wordpress-with-lnmp/</url>
    <content><![CDATA[<p>#发现1.5正式版更新了，我自己也试了，所以现在把原来命令行里的 1.4 全部都换成 1.5 了</p>
<h3 id="一，安装lnmp-Nginx-MySQL-PHP-环境"><a href="#一，安装lnmp-Nginx-MySQL-PHP-环境" class="headerlink" title="一，安装lnmp(Nginx/MySQL/PHP)环境"></a>一，安装lnmp(Nginx/MySQL/PHP)环境</h3><blockquote>
<p>wget <a href="http://soft2.vpser.net/lnmp/lnmp1.5-full.tar.gz">http://soft2.vpser.net/lnmp/lnmp1.5-full.tar.gz</a></p>
</blockquote>
<blockquote>
<p>tar -zxvf lnmp1.5-full.tar.gz</p>
</blockquote>
<blockquote>
<p>cd lnmp1.5-full</p>
</blockquote>
<blockquote>
<p>./install.sh</p>
</blockquote>
<p>一路默认，虚拟机一个小时应该能安装好 之后就可以访问IP了</p>
<p>默认的访问目录为这个</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>wwwroot/<span class="keyword">default</span></span><br></pre></td></tr></table></figure>


<h3 id="二，安装wordpress"><a href="#二，安装wordpress" class="headerlink" title="二，安装wordpress"></a>二，安装wordpress</h3><p>此时进入默认的访问目录的上一级</p>
<blockquote>
<p>cd /home/wwwroot/</p>
</blockquote>
<blockquote>
<p>wget <a href="https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz">https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz</a></p>
</blockquote>
<blockquote>
<p>tar -zxvf wordpress-4.9.4-zh_CN.tar.gz</p>
</blockquote>
<blockquote>
<p>mv default old</p>
</blockquote>
<blockquote>
<p>mv wordpress default</p>
</blockquote>
<p>此时应该就可以访问wordpress了</p>
<h3 id="三，创建数据库"><a href="#三，创建数据库" class="headerlink" title="三，创建数据库"></a>三，创建数据库</h3><blockquote>
<p>mysql -u root -p</p>
</blockquote>
<p>输入密码，默认的话就是root</p>
<blockquote>
<p>create database wordpress;</p>
</blockquote>
<blockquote>
<p>exit</p>
</blockquote>
<h3 id="四，给权限"><a href="#四，给权限" class="headerlink" title="四，给权限"></a>四，给权限</h3><blockquote>
<p>chown -R 755 /home/wwwroot/</p>
</blockquote>
<blockquote>
<p>chown -R www:www /home/wwwroot/</p>
</blockquote>
<hr>
<p>此时输入IP即可访问配置 wordpress</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS 设备备份相册与文件到 NAS</title>
    <url>/2020/12/ios-backup-photos/</url>
    <content><![CDATA[<p>一直以来，我都是用安卓手机，特别是小米的手机，已经用了很多年了。一开始的照片也不多，用小米自带的云服务备份即可。后来照片有点多了，小米云服务免费的 5G 空间已经不够用了。</p>
<p>我开始尝试其它的备份方案，比如电脑和手机都安装 handshaker 这个软件，可以自动将图片备份到电脑里。电脑里现在还存放着两年多前备份的手机图片。</p>
<p><img src="/img/2020/handshaker-photos.png" alt="handshaker-photos"></p>
<p>好像备份了一两次我就不用了，不是我想要的备份方案。后来我还尝试使用 Google photos 备份，也觉得不好用。都不是我想要的。</p>
<p>后来我接触到 syncthing 这个开源软件。感觉它才是最符合我需求的，它其实是一个同步软件，网上有很多人称它为网盘并不准确。其原理是这样，我手机上面选中一个文件夹，通过这个软件，就可以把里面的文件备份到其它的设备，比如其它的手机、电脑或者 NAS。</p>
<p>所以在安卓手机上，我只要选中 DCIM 这个文件夹，就可以把手机里面拍摄的图片、视频以及截图备份到其它设备。但是有一些图片，是通过微信保存到手机里的，并不在 DCIM 这个文件夹中。这也不难解决，再选中一个文件夹即可 <code>tencent\MircoMsg\WeiXin</code> 。但是，这款应用并没有 IOS 版……</p>
<p>所以当我买了台二手的 ipad 后，我发现没法用 syncthing 来备份里面文件，我只能去寻找替代品。于是我找到了这么一款——微力同步（verysync）。这是一款国产的应用，也是支持多平台的同步应用。当我第一次接触它时，我严重怀疑它是拿开源的 syncthing 去换皮的。</p>
<p><img src="/img/2020/syncthing-and-verysync.png" alt="syncthing-and-verysync"></p>
<p>它的使用方法和 syncthing 差不多，不过它有一个不错的地方，就是它分享文件夹，不需要像 syncthing 那样先让两台设备建立关系（有点像微信互相添加好友），微力同步可以将要分享的文件夹通过密钥或者链接分享出去。比如我手机里想将相册这个文件夹同步到电脑，那么我只要让它生成一个链接，将链接发到电脑，电脑点击后就可以将文件同步过来了。</p>
<p>如果是电脑想分享给手机，除了上述的链接和密钥，还可以通过二维码分享，只要扫这个二维码，就可以将电脑的文件同步到手机里。</p>
<p><img src="/img/2020/verysync-share.png" alt="verysync-share"></p>
<p>所以我后来就慢慢的使用微力同步代替 syncthing 了，感觉它用起来方便点，而且也都是免费的。然后我还了解到它还有 IOS 版，就想用它来备份 iPad 的相册到 NAS 里。结果却发现，它在其它所有平台都是免费的，唯独在 ios 上是收费的，价格 12 块。</p>
<p>抱着价格也不贵的心态，而我也使用了有一段时间了，我也就买一份支持一下。</p>
<p><img src="/img/2020/ios-appstore-verysync.PNG" alt="ios-appstore-verysync"></p>
<p>不过后来我又发现了一款功能差不多，而且可以免费用的 app —— resilio sync 。并且我这时才知道，原来微力同步的那些功能都是从这里学来的。</p>
<p><img src="/img/2020/resilio-option.png" alt="resilio-option"></p>
<p>这软件以前叫 btsync ，感觉像是 BT 的变种。最早的 BT 是，比如我有一部电影想分享给朋友，我可以为这部电影制作一个种子（torrent 文件），我只要电脑不关，保持做种状态，并把这个种子文件发给其他人。其他人只要能连接到我的电脑，就能下载我电脑里的这部电影。</p>
<p>而这个 btsync 可以省去制作种子和传播种子文件的过程，直接发给别人一个链接或一个密钥就行。但其实 BT 也可以省去传播种子文件的过程，发磁力链接就行呗。但是有一点 BT 就做不到了，那就是更新，btsync 可以分享一个文件夹，比如现在里面是一个文件 <code>xxxS01E01.mp4</code> ，是某部电视剧的第一集，其他人得到这个分享链接或密钥，就可以下载到。但如果下个星期出第二集了，其他人不需要进行任何操作，就可以下载到第二集 <code>xxxS01E02.mp4</code> ，因为这个分享文件夹更新了。</p>
<p>但是用 BT 就做不到，只能等出第二集了，再做一个 BT 种子，分享给其他人才行。所以听说以前这个 btsync 挺火的，那后来怎么不火的呢？因为官方觉得使用 dht 技术自己管控不了这个软件，所以在 1.4.111 版本后，就把 dht 功能去掉了。之后的版本如果想通过 bysync 下载资源的话，就得通过官方的服务器，才可以查询到其他用户 IP ，从而进行下载。而再之后，它的服务器在国内被墙了，因此在国内也就基本凉了。</p>
<p>不过它只是作为资源下载这方面凉了，用来局域网同步还是可以用的，使用的方法都一样，因为这三个软件的关系很微妙。我在 <a href="https://www.appinn.com/verysync/">小众软件</a> 看到了网友 <strong>哆哆爱焱垚</strong> 的这样一段留言</p>
<blockquote>
<p><strong>这个软件我知道，在Resilio Sync时代，发现不能使用时，微力同步的作者一直以小资源站的形式进行着Resilio Sync再度能用的努力，但是后来实在经不住这么折腾就在开源软件Syncthing的基础上自己开发了这款微力同步，而界面的相似真的是为了让当初一批Resilio Sync用户减少适应的难度而高度相似。后来，也是看着作者一步步因为论坛及QQ群网友的要求开发出了适应各个平台的版本。作者一路走来也真的是不容易，也挺高兴他的软件被小编收录到了主站！</strong></p>
</blockquote>
<p>这三款应用，简单的同步功能，都可以免费使用。</p>
<ul>
<li>syncthing 由于是开源软件，完全免费，但是它没有 IOS 端，而且同步之前需要设备互相添加好友，感觉有点不方便。</li>
<li>verysync 基于 syncthing 开发的国产闭源软件，IOS 端需要付费购买才可以使用，现在的价格是 ￥12。其它平台可以免费使用，但是有些高级功能，如电脑和 Linux 端的选择同步，需要 Pro 才可以使用，想拥有 Pro 资格，需要 ￥99.</li>
<li>resilio sync 是闭源商业软件，除了同步功能之外，还可以下载资源。免费版对于个人使用应该也是足够的。</li>
</ul>
<p>为了写这篇文章，我把三款应用都通过 docker 装在 N1 上了。</p>
<p><img src="/img/2020/3-sync-app.png" alt="3-sync-app"></p>
<p>体验下来还是觉得 verysync 用着比较顺手。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>即使是使用 ipv6 也最好做好防范，ip6tables 与 ss</title>
    <url>/2019/11/ip6tables-and-ss/</url>
    <content><![CDATA[<p>最近看到好多个人，因为开放群晖的端口号，导致宽带被封，运营商给出的原因是：未备案个人宽带不允许提供 web 服务……</p>
<p>这里有一个案例：<a href="https://koolshare.cn/thread-170517-1-1.html">重要消息：上海电信对于绑定域名用于WEB服务的 直接封宽带</a></p>
<p>所以现在哪怕我只是开放给自己使用而已，也不行了。其实之前也是不允许的，不过运营商会把 80 端口和 443 端口给封了，这样我们就无法在家里搭建网站了。不过严格来讲还是可以的，只不过得在域名后面加个端口号，例如这样</p>
<blockquote>
<p><a href="http://www.baidu.com:12345/">www.baidu.com:12345</a></p>
</blockquote>
<p>但是现在这种也不允许了，而且一经发现，直接封了你的宽带。除非你自己去电信询问，否则都不知道为什么封的。没错，现在只有电信会封，而且看网友的讨论，好像只有 <strong>上海、深圳</strong> 这两个地方的<strong>电信宽带</strong>才会。</p>
<p>那么我是用 移动宽带 的，我需要担心吗？之前我是觉得不需要担心的，毕竟等网上别人出事的时候，我在网上看到别人的帖子，我再来开启防火墙就行了。</p>
<p>然而，我又一想，我怎么知道我不会是，移动用户中第一批遭殃的呢？所以我赶紧又打开我路由器的防火墙。</p>
<p>但我还是想享受外网访问的便捷性，所以我得来想想对策。</p>
<h3 id="之前的"><a href="#之前的" class="headerlink" title="之前的"></a>之前的</h3><p>我之前的话，是直接关闭防火墙，这样我就可以通过 ipv6 ，在外面访问宿舍的设备，主要有：</p>
<ol>
<li>进入路由器查看一下情况</li>
<li>访问刷了小钢炮系统的斐讯 N1 盒子，查看系统的负载，管理里面 qbittorrent 的下载</li>
<li>有时候电脑用虚拟机开着一台 Ubuntu 服务器，需要外网 ssh 连接</li>
</ol>
<p>所以这上面三台主机里面，我都有运行 ddns 脚本，让它们把自身的 ipv6 地址与我在阿里云申请的域名进行绑定。这样我就可以通过三个不同的域名访问这些主机。但是也麻烦，再添加机器我就得再去添加脚本，并且记住域名，所以我更改了方案。</p>
<h3 id="现在的"><a href="#现在的" class="headerlink" title="现在的"></a>现在的</h3><p>我直接开启 padavan 系统的路由器里面的 ss_server ，之后我在外面要访问内网的设备时，就用 ss 连接我的路由器，这时就相当于把它当 VPN 来使用。我想要管理路由器，可以直接在浏览器输入 <code>192.168.123.1</code> 而不用去输入域名，管理其它设备也一样，直接输入局域网 IP 即可。</p>
<p>但是，这一切，还是建立在我把防火墙关闭了的情景下，这样我的宽带还是有被封的风险。我想要开启防火墙，但同时我还可以连接到内网的设备。所以，我了解了一下 <code>ip6tables</code> ，这个是管理 ipv6 的防火墙软件，详情可以看这里 <a href="https://man.linuxde.net/ip6tables">ip6tables详细使用说明</a></p>
<p>但我用到不多，现在外界访问只通过一个端口，就是 ss_server 开放的那个端口，默认为 8388 ，所以我只需要开放这个端口即可。需要做的，是通过 ssh 连接路由器，或者直接在 高级设置，系统管理，控制台 输入这 3 条命令。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">ip6tables -<span class="selector-tag">A</span> FORWARD -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br><span class="line">ip6tables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br><span class="line">ip6tables -<span class="selector-tag">A</span> OUTPUT -<span class="selector-tag">p</span> tcp --dport <span class="number">8388</span> -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>这样外网就只能通过 8388 这个端口来访问内网，而且只能用 ss 连接才行，直接在浏览器输入我 IP 加 8388 肯定不行，因为我根本没有开启 web 服务。所以应该是不会有宽带被封的风险。</p>
<p>但是这样有一个问题，就是当我路由器重启之后，就失效了，只能重新到控制台再输入一次。能否让它开机后自动执行呢？</p>
<p>可以的，需要到【高级设置】——【自定义设置】——【脚本】里添加。由于我使用的是 hiboy 大佬修改的 padavan 系统，所以里面有好几个脚本。如果是其他人的固件估计没这个功能。</p>
<p>那么这里我可以把上面的三条命令，放在【在路由器启动后执行】这个脚本里，也可以放在【在防火墙规则启动后执行】里。我个人是选择后者。</p>
<p>将命令粘贴进去后，点击下方的【应用本页设置】即可。这样以后重启路由器后，就会自动执行这三条命令。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>jekyll 与 hexo 的对比</title>
    <url>/2018/08/jekyll-vs-hexo/</url>
    <content><![CDATA[<p>jekyll 和 hexo 的差别呢，就是 jekyll 可以直接在 GitHub 上面写文章，而 hexo 则需要在电脑里面写好再上传上来。</p>
<p>前面平台搭建的部分可以说是差不多的，搭建好同样传到 GitHub 上，jekyll 是把博客源码传上来，而 hexo 则是先在电脑里生成 html 的静态文件，再将这些传上来。</p>
<p>也因为这样，hexo 的备份会比较麻烦一点。而 jekyll 则可以说本来就自带备份（针对于像我这种使用 git pages 的人来说）。因为 jekyll 本身就是把整个博客都上传的。</p>
<p>不仅备份方便，编辑修改也方便，因为文件都在 GitHub 上，可以直接用浏览器登录 GitHub ，直接更改文章源文件就能修改博客文章，在上面新增 Markdown 文件就能往博客添加新文章。</p>
<p>但是呢，jekyll 不能像 hexo 一样使用命令行 <code>hexo new &#39;title&#39;</code> 来生成文章模板。因此用这个来写文章的话，就得自己打文章开头的那些设置，如这些</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">jekyll</span> <span class="string">与</span> <span class="string">hexo</span> <span class="string">的对比</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-08-05 21:02:07</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>因此这个感觉也算是劣势吧。当然复制粘贴上一篇文章的，然后修改一下也不会用太久的时间。但还是能自动生成方便啊。</p>
<p>因此在这上面写好像也没见得有多爽……</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>猫盘群晖折腾记录</title>
    <url>/2020/03/maopan/</url>
    <content><![CDATA[<p>最近研究猫盘这台设备，恩山上面谈论这个好像不多。所以我找到了其它几个好去处。</p>
<ol>
<li><a href="https://www.huakings.cn/category/maopan/">花王网络</a></li>
<li><a href="http://bbs.nas66.com/forum-38-1.html">矿渣论坛</a></li>
</ol>
<p>这两个地方可以学到很多东西，感谢各位大佬的付出。</p>
<p>记录一些教程文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/104139410">将猫盘固件从 DS119J 升级为 DS120J</a></p>
<p><a href="https://www.cnblogs.com/housestudy/p/11968726.html">猫盘群辉装qbittorrent和aria2</a></p>
<hr>
<p>由于我的机器是卖家帮我刷好群晖系统，再给我发过来的，所以我没有去折腾刷机这些东西。</p>
<h2 id="一、开启LED灯"><a href="#一、开启LED灯" class="headerlink" title="一、开启LED灯"></a>一、开启LED灯</h2><p>上面的花王网络的博主，写了一个脚本可以控制 LED 灯的颜色，有人把它转载到 什么值得买 上面了。<a href="https://post.smzdm.com/p/aqn96mx2/">万能的脚本让猫盘变完美</a> ，通过添加任务计划，我们就可以实现开机后，显示绿灯，关机后显示红灯。（因为猫盘关机只是系统关了而已，风扇其实还是在转的……所以有时不知道机器，是处于开机还是关机状态）</p>
<p>脚本的下载链接是这个</p>
<p><a href="https://www.huakings.cn/mp202003/aw2013_led_syno.sh">https://www.huakings.cn/mp202003/aw2013_led_syno.sh</a></p>
<p><a href="/misc/2020/aw2013_led_syno.sh">本人备份</a></p>
<h2 id="二、关于掉-ip-的问题"><a href="#二、关于掉-ip-的问题" class="headerlink" title="二、关于掉 ip 的问题"></a>二、关于掉 ip 的问题</h2><p>这台机器掉 ip 严重。指的是，机器启动后，有时候会获取不到 ip，这个是硬件问题，所以有些设备用得一直很稳，有的就频频掉 ip 。例如论坛中有人说，机器启动五次，只有一次可以获取到 ip 。</p>
<p>我自己的也有这个问题，有时候也获取不到 ip 。解决的方法只有重启，还是获取不到，那就等断电等十分钟，再启动一般就可以获取到了。</p>
<h2 id="三、掉盘"><a href="#三、掉盘" class="headerlink" title="三、掉盘"></a>三、掉盘</h2><p>机器刚到手时，急切想了解它。于是把 N1 上面的硬盘拆下来，放到里面安装群晖系统。进入系统后发现，硬盘有坏道，时不时地就发出 “ 吱、吱、吱 ” 的异响。再过一会就发现掉盘了，就是硬盘明明连接着，却显示找不到硬盘，重启也没用。而我拿连接电脑却可以识别……</p>
<p>那估计群晖对硬盘的要求比较高吧，而我这块硬盘已经买了好几年了，而且有坏道，估计它被群晖嫌弃了。没法，就到闲鱼再买一块。</p>
<p>小猫盘只能用 2.5 寸的硬盘，这个在闲鱼比较贵，500G 的要一百块，唉，买不起。最终找了一款 320G 的，59 块包邮。卖家写全新零通电。</p>
<p>买来就可以愉快地使用群晖系统了。下载、共享、备份相册、安装 Python ……</p>
<p>然而第二天就发生悲剧了，开机几分钟后，就会掉盘。硬盘又时不时地就发出 “ 吱、吱、吱 ” 的异响。然而我这硬盘是新买的啊，难到闲鱼卖家坑我？于是我把硬盘拿到电脑扫一下。</p>
<p><img src="/img/2020/%E7%A1%AC%E7%9B%98%E5%85%A8%E7%BB%BF.jpg" alt="硬盘全绿"></p>
<p>发现并没法坏道啊，怎么昨天还好好的，今天就不能用了呢？郁闷。难道这硬盘不够高档，又被群晖嫌弃了？那这群晖系统也太难伺候了吧。</p>
<h2 id="四、九曲十八弯的拯救大行动"><a href="#四、九曲十八弯的拯救大行动" class="headerlink" title="四、九曲十八弯的拯救大行动"></a>四、九曲十八弯的拯救大行动</h2><p>本打算把系统充 119j 升级 120j ，看看能否解决这个问题。如果不行再试试把系统刷程 one space XP3 ，如果刷成这个系统也有问题，就证明是硬件的问题，估计就没救了。</p>
<p>正当我准备刷机的时候，突然想到，有时候我打开插排的电源，猫盘这个机器并没有启动，风扇并没有转，需要我碰一下猫盘的电线才会转，那难道是电线接触不良的问题？</p>
<p>于是我把之前淘宝 1.5 包邮买的 USB 转 DC 5.5 拿出来，想用这条线试一下。（之前买这条线是想试一下能否用这来给 N1 供电，结果发现机器的灯会亮，但是无法进入系统。）结果发现，这条线无法插入猫盘……明明可以插入 N1 的……</p>
<p>不过我还有另外一条线，是淘宝 9.9 包邮买的，叫【诱骗激活线9-12V充电宝移动电源路由器USB供电】，输出12V的，我用这个加我那个12V的小米手机充电头，就可以给 N1 供电，并正常使用，不过这成本太高了。9.9 + 19.9 = 29.8 ，还是老实用斐讯自身的电源适配器吧。</p>
<p>那么这条用不到的线，拿来给猫盘供电，配合猫盘自带的 5V3A 的充电头。就发现机器可以正常使用了。</p>
<p>其实真的很意外的，因为一开始线接触不良，机器是无法启动的，我轻轻碰一下线就可以启动了。但是使用中电线如果接触不良，不应该是整台机器断电吗？怎么只是硬盘异响，然后掉盘而已呢？机器风扇依然转动着，如果不是刚好手上有这台多余的电线，估计我还得为刷机去折腾很久吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>玩矿渣很废时间。</p>
<h2 id="折腾升级-120j"><a href="#折腾升级-120j" class="headerlink" title="折腾升级 120j"></a>折腾升级 120j</h2><p>群晖的 119j 这台机器，是 256M 内存。我们的猫盘是 512M ，所以有些人觉得，刷 119j 的固件，可能只能用一半的内存而已。而 120j 就和猫盘一样是 512M 的内存，那把固件升级到 120j 是否就可以，发挥猫盘真正的性能呢？</p>
<p>没升级前，内存最高只能用到 53%，平时大多维持在 48%</p>
<p><img src="/img/2020/%E6%9C%80%E9%AB%9853.jpg" alt="最高53%"></p>
<p>于是根据这篇文章：<a href="https://zhuanlan.zhihu.com/p/104139410">将猫盘固件从 DS119J 升级为 DS120J</a> 升级一下 ，升级后内容不会丢失，可以放心升级。</p>
<p>然后我发现最高能到 60%，但是平时大多也是维持在 48%</p>
<p>所以，我认为升不升级，应该是一样的。原先的 119j 应该是没有限制内存的，因为白群晖本来就是可以升级内存的。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li><p>群晖里面的下载器，ds station 是可以用 transdroid 来控制的。</p>
</li>
<li><p>使用 ipv6 来远程访问群晖效果还不错。</p>
</li>
<li><p>moments 来管理相册感觉不习惯，还是 photo station 好。</p>
</li>
<li><p>刚才又把 k2p 拿过来了，然后我就顺便测试一下 smb 的读写速度。</p>
<ul>
<li>读取在 65 M/S 左右</li>
</ul>
<p><img src="/img/2020/cat-read.jpg" alt="cat-read"></p>
<ul>
<li>写入在 7 M/S 左右……</li>
</ul>
<p><img src="/img/2020/cat-write.jpg" alt="cat-write"></p>
<p>直接把文件拖浏览器中，也差不多是这个速度，不太懂……</p>
</li>
</ol>
<h3 id="USB-扩展"><a href="#USB-扩展" class="headerlink" title="USB 扩展"></a>USB 扩展</h3><p>后来又在淘宝买了个USB扩展版，直接套在主板的 TTL 线上面，就可以连接USB设备了。如果长期使用，就得自己把猫盘的后壳打孔了。</p>
<p>东西我拿到手后，插上猫盘带主板，然后接一个U盘，确实可以识别到。但是，一下子就出问题了。一两分钟就断开一次，感觉像是接触不良，检查一下发现我插得挺紧的。问了一下淘宝客服，直接回复，东西接触上能显示，就是能用，要是不能用就是不能用……</p>
<p>总之也没给出这问题怎么解决，估计他也不知道吧，想想还挺气的，想给他个中评，看他小店只卖出过几样东西，还是于心不忍，算了算了，确认收货等系统自动好评就是了，这东西就当丢了吧。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>ireader阅读器与掌阅APP对比</title>
    <url>/2018/08/ireader-vs-APP/</url>
    <content><![CDATA[<p>近日买了个 ireader light 青春版。是一款类似 kindle 的电子阅读器，不过性价比高，功能体验也比较好。所以综合了解后我选择了它。</p>
<p>因为是掌阅出的，那么功能就和在手机下载个 掌阅APP 差不多。主要还是看中它的墨水屏，据说墨水屏看久不易伤眼睛。其它的也是有些不同的。</p>
<h2 id="阅读器独有的"><a href="#阅读器独有的" class="headerlink" title="阅读器独有的"></a>阅读器独有的</h2><ul>
<li><p>阅读器书城的图书价格和掌阅APP价格，总体价格保持一致。阅读器书城为回馈书友，每周会有特价书目，仅限阅读器书友享有。</p>
</li>
<li><p>无广告。这点其实不怎么值得提，因为手机有些定制版的也是无广告的。比如 OPPO vivo 这两个牌子的手机，自带的定制版的掌阅好像就是无广告的。而阅读器其实也就是一个定制版的掌阅APP，装在一个墨水屏平板里面罢了。况且我花了几百块买了这个只能阅读的机器，倘若得和手机免费下载一个APP一样，忍受着广告，这说得过去吗？</p>
</li>
<li><p>传送资料。这个功能说是主打微信文章推送，就是可以把公众号文章，弄到阅读器里面来阅读。流程是先关注它的公众号，绑定手机，然后再来阅读器用手机号登录。之后看到文章，复制它的链接，发送给公众号，阅读器就能收到这条链接。可见只是把文章网址发过去罢了，因此其它链接应该也是可以的。我试了一些博客文章，有英文的和中文的，发现有时候图片会加载不出来，全英文排版也还可以，故没图片或者图片少的文章，推送到阅读器里面再来观看，体验还是不错的。然后知乎的回答也可以推送到此。这个功能体验几次后我还是挺喜欢的。</p>
</li>
<li><p>阅读时长奖励代金券。这个并非手机端同有的 『阅读30分钟奖励5代金券』，而是阅读器里『我的，福利，时长福利』，（手机端我找不到这个，所以应该是阅读器特权吧）。这个一个星期算一次，阅读不同时间领取不同代金券，888分钟为最高，达到的话，全部领取有几百代金券。</p>
</li>
</ul>
<h2 id="手机独有的（或者说阅读器还没有的）"><a href="#手机独有的（或者说阅读器还没有的）" class="headerlink" title="手机独有的（或者说阅读器还没有的）"></a>手机独有的（或者说阅读器还没有的）</h2><ul>
<li><p>读完写评论。手机端看完一本书，可以给它评星级和写评论，而阅读器看完了就只出现：全书完。因此在阅读器看完，我得回到手机，翻到最后一页，再点一下，出现写书评的界面再来写。不写过段时间都不知道这本书有没有看完……</p>
</li>
<li><p>杂志往期。手机端打开一本杂志，右上角有个『往期』，这个非常方便，看完就能继续下载下一本。阅读器应该只能去书城里面搜索吧。</p>
</li>
</ul>
<p>阅读器的系统是可以升级的，所以我觉得未来应该会有越来越多的功能加进来。不过现在有些功能只有手机有，阅读器没有，有些不太方便。其它的暂时对我好像没多大影响。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>进阶了解 hexo 博客</title>
    <url>/2020/02/more-about-hexo/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>个人使用 hexo 搭建博客已经有一年多的时间了。但是说实在，对其了解并不多，我只知道用它，可以把我的 markdown 文档渲染成 html 文件，之后放到 GitHub 上就可以搭建博客。</p>
<p>一开始的使用是看别人的教程，网上一堆人写了用 hexo 来搭建免费博客的文章。其官网 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 上面也有教程，几条命令就可以在电脑上弄好一个博客。</p>
<p>之后便是将文章推送到 GitHub 上面，进行设置，使用 GitHub page 建立博客网站。在这时我了解到，我们还可以搭建在国内的网站上面，如 gitee ，coding 。可以让我们的访问速度更快。而且之前还了解到有位老哥有一个不错的方法，可以让国外的 ip 就访问 github 的博客，国内的 ip 就访问 gitee 或者 coding 的博客。好像是利用域名解析来达到目的的，具体我没有去尝试。</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>不像　wordpress ，所有文件都是在服务器上。hexo 的博客源文件都是在我们自己的电脑上面的，如果我们的电脑出问题，如硬盘坏了，被偷了，那么我们的博客就没法更新和修改。因此我们需要自己来备份这些文件。</p>
<p>如果只是想备份文章而已，那么同步网盘如 onedrive 、坚果云 也足够的。当然你想同步整个博客文件夹也可以，不过我不建议这么做，因为里面的文件实在太多了，之前　git push　的时候看到，好像有几万个文件。而且，这样也太 low 了。</p>
<p>正确的备份方法应该是使用 git 来备份。</p>
<h3 id="备份前准备"><a href="#备份前准备" class="headerlink" title="备份前准备"></a>备份前准备</h3><p>我们得知道我们备份的目的，像我的话，我最主要的目的是备份文章，其次是博客主题，再来是博客的一些配置。<strong>目的明确</strong>之后，就来分析博客根目录下的文件。</p>
<p>需要备份的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source //文件夹放置着博客文章，最最重要的一个文件夹</span><br><span class="line">themes //放置着主题，我个人喜欢一起备份</span><br><span class="line">scaffolds //页面模板位置</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>

<p>不需要备份的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.deploy_git   //里面的文件除了多一个 .git 其它和 public 里面一样</span><br><span class="line">node_modules  //在根目录下 npm i 就会读取 package.json 来安装模块，没必要备份</span><br><span class="line">public    	  // hexo 生成 html 页面后所放的地方，hexo g 就可以生成，没必要备份</span><br><span class="line">db.json       //执行 hexo s 启动本地服务器的时候就会自动生成，没必要备份</span><br></pre></td></tr></table></figure>

<p>了解这些之后，我们就可以只备份必要的文件。</p>
<h3 id="以前的备份方案"><a href="#以前的备份方案" class="headerlink" title="以前的备份方案"></a>以前的备份方案</h3><p>我之前是根据这篇文章　<a href="https://www.jianshu.com/p/beb8d611340a">Hexo博客从一台电脑迁移到其他电脑</a>　将博客源文件备份到 GitHub 上面。这个方法是让渲染文件和博客源文件，都放在同一个仓库里面的不同分支。但我个人觉得到不如放两个仓库好。</p>
<h3 id="现在的备份方案"><a href="#现在的备份方案" class="headerlink" title="现在的备份方案"></a>现在的备份方案</h3><p>首先我们如果想备份主题的话，需要把主题文件夹里的 <code>.git</code> 给删除了，让它变成一个普通的文件夹。比如很多人使用的 <code>next</code> 主题，就进入 <code>themes/next</code> 里面将 .git 文件夹给删除了就行。</p>
<p>在博客根目录下 <code>git init</code> ,让其变成一个 git 仓库。将那些不需要备份的文件和文件夹添加到 <code>.gitignore</code> 中，我的里面有这些内容。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">public</span></span><br><span class="line"><span class="built_in">db</span><span class="number">.</span>json</span><br><span class="line"><span class="meta">.deploy_git</span></span><br><span class="line"><span class="meta">.DS_Store</span></span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure>

<p>之后 <code>git add .</code> ，再 commit ，然后将其推送到远程仓库即可。之后换电脑，只需把这个仓库 clone 到电脑，进入仓库， <code>npm i</code> 一下，npm 就会根据两个 package 开头的文件，去帮我们安装相对应的模块，之后我们便可以看到 <code>node_modules</code> 文件夹又回来了。此时我们的博客便已搭建成功，可以继续写博客了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止 mac 在U盘产生隐藏文件</title>
    <url>/2018/10/mac-hide-file/</url>
    <content><![CDATA[<p>自从 U 盘在 mac 上使用一段时间后，我发现里面有好多隐藏文件。</p>
<p>每个都是 4KB。基本上 U 盘里每个文件，都有一个跟它对应的隐藏文件。看来是 Mac 自动生成的，但不知道是用来干什么的，而且平时也没什么影响，毕竟隐藏文件不管在 win 还是 Mac，默认情况下都是不显示的，所以也就没去管它。</p>
<p>直到，那天 U 盘插别人的电脑，居然被安全软件检测到这些隐藏文件，弹窗说有安全隐患……</p>
<p>再接着，拿 U 盘去自助打印机，这一堆隐藏文件显示在那里，严重影响我查找要打印的文件的效率。这不能忍。</p>
<p>于是我百度一下，没有找到方法。再谷歌，就找到了。</p>
<p>是 Mac 上【聚焦搜索】（spotlight）这个软件造成的，这是一个全局搜索软件。应该是它为了能快速搜索到 U 盘里的文件，所以，当我们在 mac 上往 U 盘传文件的时候，同时会在文件旁边创建一个 4KB 的隐藏文件。</p>
<h2 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h2><p>打开【系统偏好设置】，第一行倒数第二个的【聚焦】，进去后点【隐私】，然后左下角的【+】，之后选中 U 盘，确认就好了。以后再往 U 盘写入文件就不会有这些隐藏文件了，之前产生的那些可以在 win 下将之删除。（Mac 下在访达里根本无法显示这些文件）</p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 上挂载 NFS</title>
    <url>/2020/10/mount-nfs-in-linux/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NFS 是 Network File System 的缩写。和 smb 相似，可以将服务器中的某个文件夹共享出来，让其它设备可以访问里面的内容。</p>
<p>我们知道 smb 共享可以挂载在 Windows 电脑上，当一块网络硬盘来使用。</p>
<p><img src="/img/2020/smb-mount.png" alt="smb-mount"></p>
<p>NFS 也同样可以，于是我想把 贝壳云 上面连接的 10T 硬盘，通过 NFS 共享，挂载在刷了 armbian 的 N1 上面，这样我两台设备都可以使用这块硬盘，提高利用效率。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>贝壳云上我刷的是小钢炮系统，里面可以直接开启 NFS ，需要先设置共享。</p>
<ul>
<li>export dir 想要共享的目录</li>
<li>hosts allow 允许访问的 IP 地址，这里我填 N1 的 IP 地址</li>
<li>nfs option 使用默认 <code>rw,sync,root_squash,all_squash,insecure,no_subtree_check</code></li>
</ul>
<p>nfs 和 smb 不同，不能设置用账号密码访问，只能设置让某个 IP 访问。如果想让局域网的所有人都可以访问，假设路由器的 IP 是 <code>192.168.1.1</code>，那么这里可以填 <code>192.168.1.0/24</code>，指的是 IP 地址以 <code>192.168.1</code> 开头的用户都可以访问。</p>
<p>设置好后，切换的 armbian ，用 ssh 连接设备，查看一下 贝壳云 nfs 的共享权限</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">showmount -e beikeyun</span></span><br></pre></td></tr></table></figure>

<p>这里的 <code>beikeyun</code> 也可以使用内网 IP</p>
<p>确定 N1 拥有访问权限之后，便可以开始挂载了。此时我想把 贝壳云 上的 <code>/media/x</code> 挂载到 N1 的 <code>/media/x</code> 上，我需要先在 N1 上创建这个文件夹</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/media/</span>x</span><br></pre></td></tr></table></figure>

<p>之后在 N1 上安装 nfs 客户端</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sudo</span> apt install nfs-<span class="meta">common</span></span><br></pre></td></tr></table></figure>

<p>之后挂载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount -t nfs beikeyun:<span class="regexp">/media/</span>x <span class="regexp">/media/</span>x</span><br></pre></td></tr></table></figure>

<p>没有报错便是挂载成功。此时已经可以查看 10T 硬盘里面的内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ls <span class="regexp">/media/</span>x</span><br></pre></td></tr></table></figure>

<p>完</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nds 游戏存档导入到电脑的模拟器玩</title>
    <url>/2019/11/nds2desmume/</url>
    <content><![CDATA[<p>我有这么个需求，之前在 nds 上面用 R4 卡玩的游戏存档，想把它复制到电脑上，然后在电脑上用模拟器继承存档，继续玩之前的进度。但它并不是直接复制过来就可以用的。</p>
<p>用 desmume 这个 nds 游戏模拟器，它在游戏中正常保存后的存档格式为 .dsv</p>
<p>而用 nds 加 R4 卡来玩游戏，正常保存后，存档文件的后缀为 .SAV </p>
<p>这样就没法这边打完，就把存档复制到那边，然后继续玩。</p>
<p>不过现在（其实应该是好几年前了）模拟器已经支持把  .SAV 文件导入模拟器了。有一个选项，可以导入 sav 格式的存档，然后把它转换为 dsv 格式。</p>
<h2 id="把-nds-的存档复制到模拟器上用"><a href="#把-nds-的存档复制到模拟器上用" class="headerlink" title="把 nds 的存档复制到模拟器上用"></a>把 nds 的存档复制到模拟器上用</h2><p>在菜单里面可以导入存档（import开头的），然后选择sav格式的存档，导入之后将会被转换为 dsv 格式的存档。</p>
<p>在mac中导入是这样的<br><img src="/img/2019/mac-import.png"><br>在win中导入是这样的</p>
<p><img src="/img/2019/win-des.jpg"></p>
<p>但是，问题来了，我一开始是在 mac 上用的，导入是成功了，但是游戏中存档位置是空的。百思不得其解，最终我决定到 windows 上试一下。</p>
<p>果然，只有 windows 版的才行，导入后会跳出一个选项，问要转换为什么类型，我就直接选默认的第一个，就成功在游戏中看到存档了。</p>
<p>而在 mac 里，导入时并没有这些选择，所以导入后也识别不到，暂时无解。非要在 mac 上玩的话，就只能先在 windows 里导入，再导出（或者复制出 dsv 文件），再把这个 dsv 文件复制到 mac 上面用。</p>
<h2 id="模拟器的存档复制到-nds-上用"><a href="#模拟器的存档复制到-nds-上用" class="headerlink" title="模拟器的存档复制到 nds 上用"></a>模拟器的存档复制到 nds 上用</h2><p>刚才游戏中有个地方需要多次尝试，用模拟器的快速存档和读档会比较快。所以我把存档复制到电脑上，导入后游玩，用读取大法很快就过了关卡。</p>
<p>然后我不想一直在电脑用模拟器玩，所以想把存档导出， 复制到 nds 上玩。这个就没什么难度了。选择 <code>Export Rom Save File</code> 然后选择 sav 格式。导出并复制到 nds 的内存卡上即可。</p>
]]></content>
      <tags>
        <tag>游戏</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于咪咕 kindle 打卡版</title>
    <url>/2020/06/migu-kindle/</url>
    <content><![CDATA[<p>终究还是按捺不住想薅羊毛的欲望，上了白嫖咪咕版 kindle 的车。虽然跟之前的 海信A5、腾讯口袋阅相比，咪咕的要求低了很多，只需要每天阅读 15 分钟，连续 100 天即可。</p>
<p>但是，翻车的几率还是挺大的。为了提高成功率，我做了一些研究。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先我在网上收集了一些图片。</p>
<p><img src="/img/2020/%E5%B0%8F%E4%B8%B8%E5%AD%90%E6%89%93%E5%8D%A1%E5%9B%BE.jpg" alt="小丸子打卡图"></p>
<p><img src="/img/2020/%E7%BA%A2%E8%89%B2%E6%89%93%E5%8D%A1%E5%9B%BE-1592296231569.jpg" alt="红色打卡图"></p>
<p>来两张适合全面屏的</p>
<p><img src="/img/2020/%E7%99%BD%E5%AB%96%E6%89%93%E5%BC%80%E5%9B%BE-1592296454315.png" alt="白嫖打开图"></p>
<p><img src="/img/2020/%E8%AE%B0%E5%BE%97%E6%89%93%E5%8D%A1.jpg" alt="记得打卡"></p>
<h3 id="1、锁屏壁纸"><a href="#1、锁屏壁纸" class="headerlink" title="1、锁屏壁纸"></a>1、锁屏壁纸</h3><p>将这些打卡图片设置为锁屏壁纸，这样每次打开手机就能看到。</p>
<h3 id="2、微信聊天背景图"><a href="#2、微信聊天背景图" class="headerlink" title="2、微信聊天背景图"></a>2、微信聊天背景图</h3><p>还可以设置为微信常聊对象的背景图。</p>
<h3 id="3、打卡群"><a href="#3、打卡群" class="headerlink" title="3、打卡群"></a>3、打卡群</h3><p>打卡群非常重要，个人认为，建立一个 5-8 个人的微信群，每天打卡完成就到群里报道，如果发现有人晚上 8 点还没打卡，就可以 @ ta 提醒一下。</p>
<h3 id="4、公众号设置提醒"><a href="#4、公众号设置提醒" class="headerlink" title="4、公众号设置提醒"></a>4、公众号设置提醒</h3><p>公众号 【微定时】可以设置每天定时提醒，我将其置顶，如果当天没有打卡，那个小红点就一直在那里。</p>
<h3 id="5、每天邮件提醒"><a href="#5、每天邮件提醒" class="headerlink" title="5、每天邮件提醒"></a>5、每天邮件提醒</h3><p>可以利用一个 python 脚本，每天发 Email 给自己，起到提醒作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line"></span><br><span class="line">yag = yagmail.SMTP(user=<span class="string">&#x27;xxx@163.com&#x27;</span>,host=<span class="string">&#x27;smtp.163.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contents = [<span class="string">&#x27;记得打卡啊，想想你的 468 &#x27;</span>]</span><br><span class="line"></span><br><span class="line">yag.send(<span class="string">&#x27;xxxxxx@qq.com&#x27;</span>,<span class="string">&#x27;签到提醒&#x27;</span>,contents)</span><br></pre></td></tr></table></figure>



<h3 id="6、使用-autojs-脚本自动翻页"><a href="#6、使用-autojs-脚本自动翻页" class="headerlink" title="6、使用 autojs 脚本自动翻页"></a>6、使用 autojs 脚本自动翻页</h3><p>用这个感觉还是有可能被软件检测到，虽然现在手机升级到 miui12 了，可以禁止 咪咕阅读 读取手机里的应用列表，不过感觉还是有危险，最好还是不用为好。</p>
<h2 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h2><h3 id="断网能否统计阅读时间"><a href="#断网能否统计阅读时间" class="headerlink" title="断网能否统计阅读时间"></a>断网能否统计阅读时间</h3><p>刚才测试了一下，在开着飞行模式的状态下看书，能否统计阅读时间？看了十几分钟后，关闭飞行模式，联网。发现时间没有统计。。。然后继续阅读十分钟，再来看统计时间，发现阅读时间变30分钟了。 那看来，断网时也是有统计的，不过显示出来需要一段时间后。所以最好还是保持联网吧。 </p>
<h3 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h3><p>我这台感觉电量还行吧，一天阅读30分钟，十天下来，电量剩 8%，这还是在联网的状态，如果断网应该还能用更久。</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>咪咕应该是用安卓系统，用数据线连接电脑的话，显示的是这样的</p>
<p><img src="/img/2020/%E5%92%AA%E5%92%95%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91.png" alt="咪咕连接电脑"></p>
<p>而用普通版 kindle 连接电脑，则显示的是像 U盘那样的。</p>
<h3 id="支持什么格式的书？"><a href="#支持什么格式的书？" class="headerlink" title="支持什么格式的书？"></a>支持什么格式的书？</h3><p>打开咪咕的 WLAN 传书，可以看到</p>
<blockquote>
<p>支持文件格式：</p>
<p>TXT、EPUB、UMD</p>
</blockquote>
<p>所以传入 mobi 格式的书籍是没法用咪咕系统打开的。</p>
<hr>
<p>希望可以顺利打完卡下车吧，用了一段时间，感觉咪咕的书还行吧，这些天都能找到感兴趣的来看。现在是6月28日，过几天就能正式打卡了，估计很快就能在闲鱼搜到打卡失败的 kindle 低价抛售了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS离线下载文件最简易方案</title>
    <url>/2018/08/offline-download/</url>
    <content><![CDATA[<h3 id="所使用的工具："><a href="#所使用的工具：" class="headerlink" title="所使用的工具："></a>所使用的工具：</h3><ul>
<li>Aria2</li>
<li>caddy</li>
<li>AriaNg</li>
</ul>
<p>脚本来自<strong>逗比根据地</strong></p>
<h3 id="首先安装-下载工具–-Aria2"><a href="#首先安装-下载工具–-Aria2" class="headerlink" title="首先安装 下载工具– Aria2"></a>首先安装 下载工具– Aria2</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ToyoDAdoubi/</span>doubi<span class="regexp">/master/</span>aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><br></pre></td></tr></table></figure>
<p>按 1 ，就可以安装。成功后会看到这样的显示。<br><img src="/img/2018/Aria2-done.png" alt="image"></p>
<p>由于我们用 ssh 登录 vps 后，默认是在 root 目录下。因此我想让下载位置也在这之下，方便以后用命令行删除文件。</p>
<p>因此需先创建文件夹</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">mkdir -p web/down</span><br></pre></td></tr></table></figure>
<p>然后进入 Aria2 来需改下载位置和密码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./aria2.sh</span></span><br></pre></td></tr></table></figure>
<p>选择 7. 修改 配置文件</p>
<p>再选择 4.  修改 Aria2 密码+端口+文件下载位置</p>
<p>密码就个人按喜好改了(后面要用到)，端口就不改了，按回车键使用默认即可，下载位置就改为新的路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/root/</span>web/down</span><br></pre></td></tr></table></figure>
<p>再次看到 ==Aria2 启动成功 !  == 这部分就完成了。</p>
<hr>
<h3 id="安装使用界面"><a href="#安装使用界面" class="headerlink" title="安装使用界面"></a>安装使用界面</h3><p>下载工具安装完成了，那要怎么用它呢？难道用命令行来下载文件？虽然确实可以，不过这有点……</p>
<p>还是图形界面比较任性化，点点几下就行。</p>
<h4 id="安装-web-服务器-caddy"><a href="#安装-web-服务器-caddy" class="headerlink" title="安装 web 服务器 caddy"></a>安装 web 服务器 caddy</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ToyoDAdoubi/</span>doubi<span class="regexp">/master/</span>caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>
<h4 id="写入配置到-Caddy-配置文件"><a href="#写入配置到-Caddy-配置文件" class="headerlink" title="写入配置到 Caddy 配置文件"></a>写入配置到 Caddy 配置文件</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">&quot;:80 &#123;</span></span><br><span class="line"> root /root/web</span><br><span class="line"> timeouts none</span><br><span class="line"> gzip</span><br><span class="line"> <span class="keyword">browse</span></span><br><span class="line">&#125;<span class="comment">&quot; &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure>

<h4 id="下载-AriaNg"><a href="#下载-AriaNg" class="headerlink" title="下载 AriaNg"></a>下载 AriaNg</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> web &amp;&amp; wget https://github.com/mayswind/AriaNg/releases/download/<span class="number">0</span>.<span class="number">4</span>.<span class="number">0</span>/aria-ng-<span class="number">0</span>.<span class="number">4</span>.<span class="number">0</span>.zip &amp;&amp; unzip aria-ng-<span class="number">0</span>.<span class="number">4</span>.<span class="number">0</span>.zip</span><br></pre></td></tr></table></figure>
<p>这里出错的话，可能是因为没有安装 unzip 这个应用，根据提示安装下即可。</p>
<h4 id="启动-caddy"><a href="#启动-caddy" class="headerlink" title="启动 caddy"></a>启动 caddy</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/caddy start</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="下载文件并取回本地"><a href="#下载文件并取回本地" class="headerlink" title="下载文件并取回本地"></a>下载文件并取回本地</h3><p>这时候就可以用浏览器，通过 IP 或者域名来访问下载界面。需要设置一下。<br><img src="/img/2018/AriaNg.png" alt="image"></p>
<p>第一个红圈可以填 IP 和域名，都行的。第二个红圈就是填刚才设置的密码了。</p>
<p>连接上会有左下角有绿色的已连接提醒。然后就可以下载文件了，也可以下载种子。</p>
<p>下载完就在我们的 vps 里面，那要怎么取回本地呢？只需要在浏览器地址栏里，在  IP 或者域名后面加上 /down 就行。例如</p>
<blockquote>
<p>115.152.148.55/down</p>
</blockquote>
<p>就会显示下载的那些文件。</p>
<hr>
<p>这个方法呢，是我个人觉得比较简易的，比较适合我自己的。下载完就在命令行里用</p>
<blockquote>
<p>rm -rf web/down/*</p>
</blockquote>
<p>来删除所有的文件。</p>
<p>因此也就不去搞那些需要 PHP 的了。也因为下载完就删除，所以也没必要设置需要密码才能访问文件列表。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>打造最具性价比服务器 N1-armbian</title>
    <url>/2020/03/n1-armbian-server/</url>
    <content><![CDATA[<blockquote>
<p>建议搭配视频观看：<a href="https://youtu.be/_3LqxpzISqE">Youtube</a>    <a href="https://www.bilibili.com/video/BV13z411b7qY/">bilibili</a></p>
</blockquote>
<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>之前折腾过把 N1 刷成 armbian 桌面版，<a href="/2019/12/N1-armbian/">斐讯 N1、P1 安装 armbian 变身电脑主机</a>可以当一台小电脑使用。后来觉得我没这个需求，所以就没去用它了。</p>
<p>现在我想把 N1 刷成 armbian 服务器版，不需要桌面环境。因为我觉得，我用小钢炮最主要也是用 docker 和 smb 而已，那这个我用 armbian 也可以实现，而且刷成 armbian 我还可以用 WiFi ，N1 就不需要放在路由器旁边了。</p>
<h2 id="1、写入-U-盘"><a href="#1、写入-U-盘" class="headerlink" title="1、写入 U 盘"></a>1、写入 U 盘</h2><p>将镜像【Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img】写入 U 盘，放入 dtb【meson-gxl-s905d-phicomm-n1-xiangsm.dtb】，修改 uEnv.ini，将第一行的dtb 名字改一下。U盘做好了。xiangsm 大佬在恩山上的帖子：<a href="https://www.right.com.cn/FORUM/thread-510423-1-1.html">https://www.right.com.cn/FORUM/thread-510423-1-1.html</a></p>
<p>相关文件放在网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 的【盒子】文件夹中</p>
<blockquote>
<p>armbian和dtb分别是什么来头，我简单说明一下：</p>
<ul>
<li><p>armbian：直接来源于armbian的官方，armbian其实就是debian发行版为arm架构适配后的版本。也就是说，恩山论坛是没有人去改动armbian系统代码的，是非常可靠的。</p>
</li>
<li><p>dtb：各种品牌的盒子千千万，每个盒子使用的网卡啊、cpu芯片啊的型号千千万，armbian内核为了能够和这些外设正常工作，就要求提供一种叫做dtb的描述文件，我理解就是针对各个硬件的驱动程序。</p>
<ul>
<li>为了让斐讯N1的各个硬件可以被armbian正常调度，所以需要给斐讯N1适配一套dtb文件。</li>
<li>dtb文件需要随着内核编译，所以不同armbian内核版本必须使用配套的dtb文件。</li>
<li>目前斐讯N1的dtb文件已经被armbian收录到官方源码库里，但是使用的时候linux负载会显示的很高，所以热心网友为armbian5.77编译了一个fix过的dtb文件。</li>
</ul>
<p>来自：<a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯N1 – 完美刷机Armbian教程</a></p>
</li>
</ul>
</blockquote>
<h2 id="1-5-首次开机需注意"><a href="#1-5-首次开机需注意" class="headerlink" title="1.5 首次开机需注意"></a>1.5 首次开机需注意</h2><p>第一次启动，用户名 root ，密码 1234 。</p>
<p>登录成功后，会要求你更改密码，但是，但是，但是，需要你先输入当前的密码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">（<span class="keyword">current</span>）UNIX <span class="keyword">password</span>：</span><br></pre></td></tr></table></figure>

<p>也就是输入 1234，之后才是设置新的密码，要输入两次。</p>
<p>这样改好密码之后，会要求你创建一个新的用户，这里我们可以不用创建的，按 <code>ctrl + c</code> 取消。然后需要再登录一次。</p>
<h2 id="2、启动机器，修改源"><a href="#2、启动机器，修改源" class="headerlink" title="2、启动机器，修改源"></a>2、启动机器，修改源</h2><p><a href="https://www.right.com.cn/forum/thread-430903-1-1.html">N1刷入Armbian后换软件源、安装Docker并提速</a>【这篇文章里的源是 debian 的】</p>
<p><a href="https://www.dragoncave.me/2019/07/armbian-on-n1.html">斐讯N1折腾记 - Armbian 5.77 刷入与优化</a>【这篇有 ubuntu 和 debian 】我上面用的镜像是 ubuntu 的。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>apt/sources.list</span><br></pre></td></tr></table></figure>

<p>进来后，按 dG 就可以把里面所有的内容删除，然后按 i 就可以进入输入模式，将下面的内容粘贴进去即可。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> bionic main restricted universe multiverse</span><br><span class="line"><span class="comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> bionic-security main restricted universe multiverse</span><br><span class="line"><span class="comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/ubuntu-ports/</span> bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>

<p><strong>改 armbian 源</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span>armbian.list</span><br></pre></td></tr></table></figure>

<p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/armbian bionic main bionic-utils bionic-desktop</span><br></pre></td></tr></table></figure>

<p>改完这两个后</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt update</span></span><br><span class="line"><span class="attribute">apt upgrade</span></span><br></pre></td></tr></table></figure>

<p>之后我视频中是安装了 zsh ，用这个 shell 会极大提高效率。有兴趣的看另外一篇文章去安装。</p>
<p><a href="/2020/03/zsh-note">最强 shell 非 zsh 莫属</a></p>
<h2 id="3、安装-docker-与改源"><a href="#3、安装-docker-与改源" class="headerlink" title="3、安装 docker 与改源"></a>3、安装 docker 与改源</h2><p>其实也可以用 armbian-config 里面的功能来安装。</p>
<p>这里我参考的是这篇教程：<a href="https://www.right.com.cn/forum/thread-430903-1-1.html">N1刷入Armbian后换软件源、安装Docker并提速</a></p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> -<span class="string">fsSL</span> <span class="string">https</span>://<span class="string">get</span>.<span class="string">docker</span>.<span class="string">com</span> -<span class="string">o</span> <span class="built_in">get-docker.sh</span></span><br><span class="line"></span><br><span class="line"><span class="string">sh</span> <span class="built_in">get-docker.sh</span> <span class="built_in">--mirror</span> <span class="string">Aliyun</span></span><br></pre></td></tr></table></figure>

<p>使用上述命令安装会调用阿里云的镜像，安装速度较快。</p>
<p>之后修改 docker 镜像源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>粘贴下面内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://dockerhub.azk8s.cn&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启 docker</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<p>安装 portainer</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v portainer_data:<span class="regexp">/data --restart always portainer/</span>portainer</span><br></pre></td></tr></table></figure>

<p>这样我们就可以在浏览器输入 <code>IP:9000</code> 来管理 docker 了。</p>
<p>关于 docker 安装 qb 、filebrowser 之类，可以观看另外一篇文章，大概修改一下即可。</p>
<p><a href="/2020/02/about-N1-nano/">N1 小钢炮系统相关</a></p>
<h2 id="4、开机自动挂载硬盘"><a href="#4、开机自动挂载硬盘" class="headerlink" title="4、开机自动挂载硬盘"></a>4、开机自动挂载硬盘</h2><p>之后折腾开机自动挂载硬盘，参考这篇文章：<a href="https://blog.csdn.net/buxiaoxindasuile/article/details/49612867">https://blog.csdn.net/buxiaoxindasuile/article/details/49612867</a></p>
<p>这里我重启后，硬盘的设备名，就从 sdb 变成 sda 了，所以就重新编辑一下 fstab ，之后就可以正常挂载了。</p>
<p>如果还是不行，就改用 uuid 吧。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">blkid <span class="regexp">/dev/</span>sdb1</span><br></pre></td></tr></table></figure>

<p>这条命令可以显示硬盘信息，里面就有 uuid，然后修改 fstab 即可。例如我就是在 fstab 最后添加这行。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">UUID</span>=<span class="number">0000678400004823</span>   /media/one      ntfs    defaults        <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="5、samba-共享"><a href="#5、samba-共享" class="headerlink" title="5、samba 共享"></a>5、samba 共享</h2><p>修改 apt 源 和 armbian 源 之后，再输入 armbian-config 就可以安装 samba 了。</p>
<p>也可以用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install samba</span><br></pre></td></tr></table></figure>

<p>来安装。</p>
<p>关于 samba 的配置，可以看这篇文章：<a href="https://wiki.jikexueyuan.com/project/linux/samba.html">https://wiki.jikexueyuan.com/project/linux/samba.html</a></p>
<p>这里不要在 armbian-config 里修改，退出后用 vim 编辑 /etc/samba/smb.conf</p>
<p>改完重启一下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/smbd restart</span><br></pre></td></tr></table></figure>

<h2 id="6、安装我家云固件的导航"><a href="#6、安装我家云固件的导航" class="headerlink" title="6、安装我家云固件的导航"></a>6、安装我家云固件的导航</h2><p>这时我又想，之前我家云上面的导航好像不错，而且它也是用 armbian 修改的，那我用 N1 应该也可以用这个导航吧。于是根据乘风大佬的这篇文章：<a href="https://blog.windtech.cf/index.php/archives/10/">https://blog.windtech.cf/index.php/archives/10/</a></p>
<p>由于大佬的博客有时访问不了，我把导航传了一份到百度网盘中。</p>
<p><a href="https://pan.baidu.com/s/1J0UYKHbEVWvmAdze_1bNIw">https://pan.baidu.com/s/1J0UYKHbEVWvmAdze_1bNIw</a></p>
<p>提取码：6666</p>
<p>在 armbian 上装了个导航。</p>
<p>将导航下载后，改名，如 1.zip</p>
<p>然后传到 N1 里面，<code>apt install zip</code> ，装一个 zip ，然后就可以解压这个压缩包。不过最好先把这个压缩包，移动到 /opt 中。也可以一开始就传到 /opt 中。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/opt</span></span><br><span class="line">unzip 1.zip <span class="comment">#会解压出来两个文件</span></span><br><span class="line">chmod +x install_navi.sh <span class="comment">#赋予脚本执行权限</span></span><br><span class="line"><span class="string">./install_navi.sh</span>	<span class="comment">#执行里面的安装脚本</span></span><br></pre></td></tr></table></figure>

<p>一分多钟就可以安装完，然后在浏览器输入 N1 的 ip 就可以看到导航了。导航网页的位置在：/opt/wwwroot/navi/ ，可以自己修改里面的 index.php 。像我就自己修改了一些内容。</p>
<p><img src="/img/2020/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%AF%BC%E8%88%AA.jpg" alt="修改后的导航"></p>
<h2 id="7、Nginx-开启-ipv6"><a href="#7、Nginx-开启-ipv6" class="headerlink" title="7、Nginx 开启 ipv6"></a>7、Nginx 开启 ipv6</h2><p>之后我将机器的 ipv6 地址绑定域名后，发现无法访问导航页面。而其它的端口是可以访问的，那难道是 nginx 的问题？查了一下，果然是因为 Nginx 没有开启 ipv6 支持导致的。开启方法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/etc/nginx/vhost/navi.conf</span><br></pre></td></tr></table></figure>

<p>将 <code>listen 80;</code><br>改为 <code>listen [::]:80;</code></p>
<p>之后再重启 Nginx 即可。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/opt/</span>sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="8、用-rsync-备份"><a href="#8、用-rsync-备份" class="headerlink" title="8、用 rsync 备份"></a>8、用 rsync 备份</h2><p>因为我在 N1 上面搭建了一个 typecho 博客，文件都放在 /docker/typecho 中，为了安全，我想备份 typecho 文件夹到硬盘中，可以用这个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -av /docker/typecho /media/one/lib</span><br></pre></td></tr></table></figure>

<p>rsync 使用详细可见：<a href="https://blog.csdn.net/wangjunjun2008/article/details/38658539">https://blog.csdn.net/wangjunjun2008/article/details/38658539</a></p>
<p>当然这只是手动备份，我想设置它每天自动备份，于是用 <code>crontab -e</code> 进入计划任务编辑，在里面添加这一行</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">2</span> * * * rsync -av /docker/typecho /media/one/lib</span><br></pre></td></tr></table></figure>

<p>这样每天的凌晨两点，就会自动备份一次。</p>
<p>而且用 rsync 是增量备份，不用担心占太多空间的问题。</p>
<h2 id="9、修改时区"><a href="#9、修改时区" class="headerlink" title="9、修改时区"></a>9、修改时区</h2><p>在 armbian-config 里面改就行。</p>
<h2 id="10、写入-emmc"><a href="#10、写入-emmc" class="headerlink" title="10、写入 emmc"></a>10、写入 emmc</h2><p>有些教程说，直接用 nand-sata-install 这个命令，就可以把固件写入 emmc ，这样就不需要把系统刷回安卓。于是我在机器 emmc 里装的是小钢炮系统的情况下，执行这条命令，最后显示写入 emmc 成功。但是我关机，拔掉 U盘再启动，发现并不能启动……</p>
<p>所以我还是用之前的方法，将机器刷回安卓，再用 adb 让机器从U盘启动。之后将 <code>./install.sh</code> 将系统写入 emmc 。</p>
<p>这里有一个其他网友的评论</p>
<blockquote>
<p>线刷回安卓，再用 u 盘重刷armbian，绝对是一个干净彻底，重装armbian的好方法。而且绝对不会出现，mac地址重启变化的问题。</p>
</blockquote>
<p>这里我为什么等到最后才把系统写入 emmc 呢？其实是有这样的考虑的，我现在的系统是在 U盘 中的，它是我一步一步配置好的。如果我不介意的话，是可以一直U盘里的系统的。不过U盘当系统盘会加快U盘的损耗，还是不推荐。</p>
<p>那么它还有另外的作用，就是<strong>备份</strong>。我现在才把系统写入emmc，之后我就可以脱离U盘使用这个系统了。但是，之后如果因为我的误操作，或者其它的原因，导致系统坏了，或者有些功能不能用了。那么这时，我可以重新插入U盘，再一次将U盘中的系统写入emmc。</p>
<p>然后，可能有人会觉得，这样我的U盘岂不是，不能用来干其它事情了？因为里面存放着一个系统。那有没有什么办法，把里面的系统备份到电脑呢？</p>
<p>答案是有的。此时将U盘插入电脑，然后再打开【USB image tool】，但是这次我们不是把 img 写入U盘，而是用它，把U盘中的系统，导出为 img 文件。点击右下角的 backup 就可以备份，你的U盘有多大，备份出来的文件就有多大。</p>
<p><img src="/img/2020/%E5%A4%87%E4%BB%BDU%E7%9B%98%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F.jpg" alt="备份U盘中的系统"></p>
<p>那么这样你就可以那U盘去干其它的事情了。而之后如果你有需要，就将刚才的备份的 img 文件，再次写入 U盘即可。</p>
<h2 id="11、中文乱码问题"><a href="#11、中文乱码问题" class="headerlink" title="11、中文乱码问题"></a>11、中文乱码问题</h2><p>此时在终端中，无法显示和输入中文。解决方案来自 <a href="%5Bhttps://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/%5D(https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/)">这篇文章</a> 。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>environment</span><br></pre></td></tr></table></figure>

<p>将最后一行改为</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">LC_ALL</span>=<span class="string">&quot;en_US.utf-8&quot;</span></span><br></pre></td></tr></table></figure>

<p>之后重新连接 ssh 应该就可以了。</p>
<h2 id="12、关于终端中的代理"><a href="#12、关于终端中的代理" class="headerlink" title="12、关于终端中的代理"></a>12、关于终端中的代理</h2><p>运行 Python 脚本需要依赖一些模块，那么就需要用到 pip</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt</span> install python<span class="number">3</span>-pip</span><br></pre></td></tr></table></figure>

<p>然后就可以用 pip3 来安装模块了，比如</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure>

<p>不过由于国内的网络环境，你不一定能成功装上。这时可能就需要用代理了，如果你的电脑有开小飞机的话，那么可以设置 N1 通过电脑来代理访问。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">url=http://192.168.1.2:1080</span><br><span class="line">export http_proxy=$url; export https_proxy=$url</span><br></pre></td></tr></table></figure>

<p>假设电脑的 ip 是 192.168.1.2 ，通过执行这两行命令之后，http https 的访问就会通过电脑的代理。例如 pip 安装模块，不用代理我根本没法安装成功，有时候 github clone 也一样，唉~</p>
<p>不可详讲。。。</p>
<hr>
<p>相关文件的下载链接放在网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 的【盒子】文件夹中。</p>
<p>可能看完又有人要问，哪里可以买 N1 ？那一般就论坛买二手，拼多多买全新。这里分享一下论坛网友买 N1 的心得。</p>
<p><img src="/img/2020/N1%E7%B2%BE%E6%89%93%E7%BB%86%E7%AE%97%E8%B4%AD%E4%B9%B0%E6%B3%95.png" alt="N1精打细算购买法"></p>
<p>总之想省钱就多上论坛逛逛吧。然后我看有些店，原系统和小钢炮系统居然相差20多块，确实有点坑。不过现在卖的 N1 很多都是黑色版的，不知道区别大不大，要买得先去了解一下。</p>
<hr>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>小钢炮又被折腾坏记录，最终成功用上 zsh</title>
    <url>/2019/10/nano-zsh/</url>
    <content><![CDATA[<p>刚才给小钢炮安装了 zsh ，这个过程还是有点复杂的，不过好在都能找到教程。</p>
<h2 id="1、先去看灯大的这个文章"><a href="#1、先去看灯大的这个文章" class="headerlink" title="1、先去看灯大的这个文章"></a>1、先去看灯大的这个文章</h2><p><a href="https://gitee.com/8ox86/phicomm-n1-issue/wikis/entware%20guide?sort_id=1368793">gitee wiki 上的教程</a></p>
<ol>
<li>编辑 /etc/opkg/entware.conf<br>取消行首的 # 符号</li>
<li>opkg2 update</li>
<li>查找包 opkg2 find xxxx</li>
<li>opkg2 install xxxxx</li>
</ol>
<h2 id="2、安装-zsh-与配置集"><a href="#2、安装-zsh-与配置集" class="headerlink" title="2、安装 zsh 与配置集"></a>2、安装 zsh 与配置集</h2><p>于是我就安装了 zsh 以及 oh my zsh 为的就是用这个自动补全插件 zsh-autosuggestions</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">opkg2 <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure>


<h2 id="3、遇坑部分，无法-ssh-连接"><a href="#3、遇坑部分，无法-ssh-连接" class="headerlink" title="3、遇坑部分，无法 ssh 连接"></a>3、遇坑部分，无法 ssh 连接</h2><p>顺利地安装成功了，然后，我想将 zsh 设置为默认的 shell ，使用 chsh -s /opt/bin/zsh 却失败了。</p>
<p>然后网上找其它方法，看到有个是修改 /etc/passwd 这个文件，第一行就是 root 用户的默认 shell 路径，于是用 vim 修改这个文件，改为 zsh 的路径，然后退出，再重新 ssh 连接，就登录不了了……</p>
<p><img src="/img/2019/ssh.jpg"></p>
<p>本想这次扑街了，又得重装系统了，可惜 qb 的配置没有备份……</p>
<h2 id="4、想办法备份"><a href="#4、想办法备份" class="headerlink" title="4、想办法备份"></a>4、想办法备份</h2><p>于是想办法看看能不能备份出来，不然重装系统后所有记录都没了。想到 qb 的配置文件是放在 /var/lib/qbittorrent 这个文件夹里的，之前我是 ssh 之后，把复制到自己的硬盘的。现在无法 ssh，得另寻方法。</p>
<p>于是想到小钢炮的 web 界面有个定时任务的功能 Scheduled Tasks ，在这个我也可以执行命令啊，那我在这里备份这个文件夹不就行了。</p>
<p>同时灯大的 wiki 里也有写备份 qb 和 tr 的方法，他是用 tar 来打包这个文件夹的，这种可能更好吧。</p>
<p>于是我添加了这条任务，每十五分钟就将这两个文件夹打包备份到我这个叫 one 的硬盘里。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span> * * * * tar cvf <span class="regexp">/media/</span>one<span class="regexp">/qb.tar /</span>var<span class="regexp">/lib/</span>qbittorrent &amp;&amp; tar cvf <span class="regexp">/media/</span>one<span class="regexp">/tr.tar /</span>var<span class="regexp">/lib/</span>transmission</span><br></pre></td></tr></table></figure>


<h2 id="5、曲线救国"><a href="#5、曲线救国" class="headerlink" title="5、曲线救国"></a>5、曲线救国</h2><p>所以这样打包好后，就可以重装系统了嘛。不过我突然想到，既然这里可以执行命令，那我在这里修改 passwd 这个文件，改回去不就行了？</p>
<p>于是我将 passwd 这个文件的内容，输出到硬盘里</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passwd &gt; <span class="regexp">/media/</span>one/pass.txt</span><br></pre></td></tr></table></figure>


<p>接着我用 filebrowser 修改这个文档里面的内容，再把它输入回 passwd</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/media/</span>one<span class="regexp">/pass.txt &gt; /</span>etc/passwd</span><br></pre></td></tr></table></figure>


<p>完成，再来 ssh ，就成功登录上了。</p>
<p>但是我的 zsh 还是没办法设置为默认 shell ……</p>
<p>怎么办呢？</p>
<h2 id="6、用上-zsh"><a href="#6、用上-zsh" class="headerlink" title="6、用上 zsh"></a>6、用上 zsh</h2><p>我想到，当我们用 ssh 连接上小钢炮的 sh 时，它会去执行 /etc/prifile 这个文件里面的内容，那我直接在这里面添加一行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zsh</span></span><br></pre></td></tr></table></figure>


<p>我将它放在环境变量之后，在 13 行这个位置。这样之后用 ssh 连接，系统就会先启动 sh ，然后读取 /etc/prifile 的内容，读到 13 行，执行了 zsh 这个命令，然后 shell 就自动切换到 zsh 了。</p>
<p>由于这个过程很快，我们不可能看到，所以一连接上看到的就是 zsh 了。完美！</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一款手机写作软件——纯纯写作</title>
    <url>/2018/07/purewrite/</url>
    <content><![CDATA[<p>我现在就是在使用这款软件写这篇文章。今晚本来是在 <strong>play 商店</strong> 看日记软件的。然后推荐那里出现了这款软件，看介绍和评价不错，就下载来试试。 这款软件是国人开发的，因此在国内的手机应用商店应该是可以下载到的，试了下小米的是搜索得到的。</p>
<h2 id="推荐它的理由："><a href="#推荐它的理由：" class="headerlink" title="推荐它的理由："></a>推荐它的理由：</h2><ul>
<li>  好看</li>
<li>  无广告</li>
<li>  自动备份，数据安全</li>
<li>  安装包小，只有 2.7M</li>
<li>  无后台偷运行担忧</li>
<li>  对我来说很实用</li>
</ul>
<p>主要是能帮我节省时间，比如在中英文之间插入空格，还有支持 markdown 语法，这也挺不错，比如能让我方便文章 markdown 化。还有首行缩进和段落之间自动加空格，这能让我少打了无数个空格。 总之，对这个软件真有种相见恨晚的感觉。</p>
<hr>
<h2 id="下面这些是官方对它的介绍"><a href="#下面这些是官方对它的介绍" class="headerlink" title="下面这些是官方对它的介绍"></a>下面这些是官方对它的介绍</h2><ol>
<li> 这是一个快速的纯文本编辑器，我们希望写作能够回到原本的样子：纯粹、有安全感、随时、绝对不丢失内容、具备良好的写作体验。</li>
<li> 纯纯写作实现了在 Android 上完美的行间距和段间距，它能够使您的文本看起来更加舒适，清晰。同时，它还实现了顺滑滚动、下滑关闭输入法软键盘，以及许多喜人的细节内容。</li>
<li> 蕴繁于简，您能够最快速度达到灵感页面，能够随时随地中断和继续写作，能够使用指纹加密您的文本，能够轻易、快速将文本分享发送到其他 App，这些我们都已经为您做好了。</li>
<li> 最重要的，在使用这个编辑器时，它将会保证您的内容永远不会丢失，除非您主动将它清空。否则即使误操作将文本删除，或瞬间断电，您仍然能够从历史记录中将它恢复。</li>
<li> 当您完成一篇文章写作之后，可以选择 右上角发送按钮 将它发送到另外的 App。</li>
</ol>
]]></content>
      <categories>
        <category>手机</category>
      </categories>
      <tags>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自动签到平台——qiandao</title>
    <url>/2020/09/qiandao-docker/</url>
    <content><![CDATA[<p>Github 项目：<a href="https://github.com/AragonSnow/qiandao">https://github.com/AragonSnow/qiandao</a></p>
<p>本文主要介绍 docker 安装法</p>
<p>不定时上传一些模板到网盘中，网盘地址：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<h3 id="一、导入镜像"><a href="#一、导入镜像" class="headerlink" title="一、导入镜像"></a>一、导入镜像</h3><p>直接拉取镜像，可以使用下面这行命令</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull asdaragon/qiandao</span><br></pre></td></tr></table></figure>

<p>拉取不了镜像的，可以使用我放到网盘中的镜像 <a href="http://pan-yz.chaoxing.com/share/info/b63ab64054fc6e0a">超星网盘地址</a></p>
<p>百度网盘链接：<a href="https://pan.baidu.com/s/1CteLUgJQR_Rz7Sh3G4E0Pw">https://pan.baidu.com/s/1CteLUgJQR_Rz7Sh3G4E0Pw</a><br>提取码：6666</p>
<p>下载后是一个 tar 结尾的文件，可以通过 portainer 将它导入机器里。如果你的机器里没有装 portainer ，就得在命令行中导入了。可以通过 smb 、ftp 、scp 等方式，将文件传入到机器里，之后，在终端中，cd 到文件所在的目录。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker load -<span class="selector-tag">i</span> qiandao<span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure>

<p>就可以导入镜像。</p>
<h3 id="二、创建和启动容器"><a href="#二、创建和启动容器" class="headerlink" title="二、创建和启动容器"></a>二、创建和启动容器</h3><ol>
<li>在 portainer 中创建容器</li>
</ol>
<p><img src="/img/2020/%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8.png" alt="创建容器"></p>
<ol start="2">
<li>在群晖中创建容器</li>
</ol>
<p>打开【docker】图标，【映像】，选择 qiandao ，【启动】，【高级设置】</p>
<p><img src="/img/2020/%E7%BE%A4%E6%99%96%E5%88%9B%E5%BB%BAqiandao%E5%AE%B9%E5%99%A8.png" alt="群晖创建qiandao容器">设置一下端口就行，之后 【下一步】，【应用】。</p>
<h3 id="三、使用服务器创建容器"><a href="#三、使用服务器创建容器" class="headerlink" title="三、使用服务器创建容器"></a>三、使用服务器创建容器</h3><blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p>
</blockquote>
<blockquote>
<p>使用这家的服务器，是因为它可以随时的删除，不像其它的，一买就得一年。而且，这家还可以选择自动安装 docker ，又节省了一些时间。</p>
</blockquote>
<ol>
<li>点击左边的 billing</li>
<li>充值方式支持 <strong>支付宝</strong> <strong>微信</strong>（但最少 10 美元）</li>
<li>充值好后 ，点右边那个 <strong>+</strong> 的圆圈</li>
<li>然后选择服务器的<strong>地区</strong>（日本和新加坡会比较快，不过有可能连接不上，选美国也可以。韩国好像是最近才有的，可以试试。）</li>
<li> <strong>Server Type</strong>点 <strong>application</strong> ，里面就有 <strong>docker</strong></li>
<li> <strong>Server Size</strong> 就是服务器的配置，越高就越贵。（如果有赠送的 50 美元，那就选那个 40 美元的吧，反正你不花，下个月也没了）</li>
<li>把下面的 <strong>Enable IPv6</strong> 前面的 框 打钩✅（可以使我们下载时连接到更多的用户）</li>
<li>然后点击右下角的 deploy now</li>
<li>等待几分钟……</li>
<li>就可以看到服务器部署好了，给了一个 ip 地址。</li>
</ol>
<p>等待服务器装好系统，然后可以用 xshell 之类的工具，连接服务器。主要用到服务器的 ip ，用户名，密码。</p>
<p>连接服务器后，我们便可以在终端中拉取镜像</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull asdaragon/qiandao</span><br></pre></td></tr></table></figure>

<p>建立容器</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d --name qiandao -p <span class="number">9527</span>:<span class="number">80</span> asdaragon/qiandao</span><br></pre></td></tr></table></figure>

<p>此时用的端口是 9527，然后在浏览器中输入 ip:9527，例如 <code>132.123.22.33:9527</code> 这样的格式，就可以访问签到平台。</p>
<p>使用服务器的好处是，你订阅公共模板应该不会出现什么问题。而已，你可以将你搭建的签到网站，分享给你的朋友，这样这个平台就可以多人使用。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>最简单的使用方法是用别人写好的模板，然后根据要求，看是要 cookie ，还是要账号密码，根据要求给对应的内容即可。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让 qBittorrent 在 Linux 上连接更多的 tracker</title>
    <url>/2019/11/qb-more-tracker/</url>
    <content><![CDATA[<p>对于 Linux 上的 qBittorrent，它不同于我们在 Windows 和 Mac 上的桌面版，我们只能通过 web 来管理，基本的功能都一样，但是有一个问题比较麻烦，就是无法打开<strong>高级设置</strong>里的【总是向所有等级的 Tracker 汇报】。</p>
<p>❗️❗️注意，qb 4.2 以及之后的版本，webUI 已经可以管理<strong>高级设置</strong>了，所以想简单的，可以升级版本即可。我个人的建议也是直接升级即可，不过如果因为有特殊原因没法升级，可以继续看下面的方法折腾。</p>
<p>这对于我们下载 BT 任务，影响就比较大了。</p>
<p>但是在研究一番之后，我还是成功的开启了这个功能。</p>
<p>我的思路是这样的，Linux 上的 qb，它有一个配置文件：<code>qBittorrent.conf</code> ，我通过修改这个文件，应该也是可以开启这个功能的。但是，我不知道添加什么语句，才能开启。所以我想到看一下我电脑的 qb 配置文件，来参考一下。</p>
<p>那么我先查看一下我 Mac 上的配置文件：<code>qBittorrent.ini</code> ，它在用户目录下的隐藏文件夹<code>.config</code>里面，在这个文件里面，我找到了这一句</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>它是放在 <code>[Preferences]</code>下面的，那么按理，我在 Linux 上也添加这一句，就可以开启这个功能了。</p>
<p>Linux 上可能不同的发行版本，它配置文件的位置有可能不同，想我的 N1 小钢炮，它的配置文件是在这的：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/qbittorrent/</span>.config<span class="regexp">/qBittorrent/</span>qBittorrent.conf</span><br></pre></td></tr></table></figure>

<p>而我之前用脚本安装的 qb ，它的配置文件是在 home 目录下的某个位置，而如果在 docker 上面，它在容器中的位置可能也不一样吧。所以如果找不到，可以全局搜索一下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -name qBittorrent.conf</span><br></pre></td></tr></table></figure>

<p>找到之后，用 vim 编辑这个文件，添加</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>保存，重启 qb（不会的话就重启机器）</p>
<p>然后就成功了，此时 qb 在下 BT 任务时，就可以连接多个 tracker 了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>下载</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑拔网线一天体验</title>
    <url>/2018/08/one-day-computer-no-network/</url>
    <content><![CDATA[<p>13 号晚上的 23:30 左右，我拔掉了路由器 wan 口的网线，这样我电脑和手机都无法通过它来上网了。到现在已经 24 个小时了。</p>
<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>本来想试试断网一天是什么体验的，因为我经常意识到，无缘无故一天就过去了，我好像什么都没干啊，好像浪费很多时间在网上闲逛。虽有时意识到会自制下，但效果不太明显。</p>
<p>但我有自知之明，不可能完全断网的，太难做到了。于是，我还可以用手机开数据上网。</p>
<h2 id="那么这-24-小时左右，我干了什么呢？"><a href="#那么这-24-小时左右，我干了什么呢？" class="headerlink" title="那么这 24 小时左右，我干了什么呢？"></a>那么这 24 小时左右，我干了什么呢？</h2><ul>
<li>看了几集《老友记》，其实下载挺久的了，有时就看一两集这样，其实这一天好像就看了三集吧。虽然电脑里也有下载好的电影，不过没去看。</li>
<li>练练 Python，这个最近又接着开始学了，还是一头雾水。毕竟从图书馆借的这本书也不厚，还是坚持看并跟着练吧。</li>
<li>看 Rick West 的文章，其实我也不认识他，看别的博主说他是大神，并且推荐他的文章，于是就去看看，应该是英国人，一个 web developer。因为文章都是英文的，我把他一共接近 10 篇文章看完了，也就消去了不少的时间。</li>
<li>然后呢，也看阮一峰老师的博客，挺厉害的，从 2003 年写博客到现在，看他的文章还是有挺多东西学的。</li>
<li>接着就是日常的 知乎 和 v2ex 咯。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实最终还是大部分时间都是在网上，只是从电脑转移到手机罢了。不过也是因为是在手机，能干的事并不多，所以才能看这么多的文章。要是在电脑上肯定不行，因为它能做的事太多了，容易在这事时张那事，导致能集中精力做一件事，因此效率也很低。</p>
<p>总之，还是一次挺不错的体验的。下次试试能不能完全断网体验一下。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>将文章推送到 kindle 上阅读</title>
    <url>/2019/04/push-to-kindle/</url>
    <content><![CDATA[<p>分别讲三种方法</p>
<h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>关注微信公众号：cn_Kindle<br>绑定自己的亚马逊账号，即可把微信文章或者其它文章网址发送到这个号，即可把内容推送到 kindle 。</p>
<h2 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h2><p>微信电脑版就不讲了。<br><a href="https://fivefilters.org/kindle-it/">https://fivefilters.org/kindle-it/</a><br>到这个网址将文章地址粘贴，然后点 preview ，出现预览界面，将其显示的邮箱（例如：<a href="mailto:&#107;&#105;&#x6e;&#x64;&#108;&#x65;&#x40;&#102;&#x69;&#118;&#101;&#x66;&#105;&#108;&#116;&#x65;&#114;&#115;&#x2e;&#x6f;&#x72;&#103;">&#107;&#105;&#x6e;&#x64;&#108;&#x65;&#x40;&#102;&#x69;&#118;&#101;&#x66;&#105;&#108;&#116;&#x65;&#114;&#115;&#x2e;&#x6f;&#x72;&#103;</a>）添加到</p>
<blockquote>
<p>已认可的发件人电子邮箱列表</p>
</blockquote>
<p>然后填入自己的 kindle 邮箱点 send 。</p>
<h2 id="多个网页一起推送"><a href="#多个网页一起推送" class="headerlink" title="多个网页一起推送"></a>多个网页一起推送</h2><p>上面的推送都是一次一篇文章的，如果想把多篇文章一起推送到 kindle 可以用这种方法。</p>
<h3 id="浏览器插件-EpubPress"><a href="#浏览器插件-EpubPress" class="headerlink" title="浏览器插件 EpubPress"></a>浏览器插件 EpubPress</h3><p>这个插件 Chrome 和 Firefox 都有，安装后同时打开多篇文章，再点击这个插件，就可以把这些文章做成 mobi 格式的电子书，可以本地下载，也可以绑定 kindle 邮箱，直接发送到 kindle。</p>
]]></content>
      <tags>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 radxa-zero</title>
    <url>/2021/09/radxa-zero/</url>
    <content><![CDATA[<p>最近搞来了一台 radxa zero</p>
<p><img src="/img/2021/radxa-zero-1.jpg" alt="radxa-zero-1"></p>
<p>产品信息：<a href="https://forum.radxa.com/t/introduce-the-radxa-zero/6550/">https://forum.radxa.com/t/introduce-the-radxa-zero/6550/</a></p>
<p>从论坛可以了解到，目前可以在这台机器上运行 TwisterOS、emuelec、coreelec、Android 9、MiniMyth2、Manjaro</p>
<p>机器到手时，emmc 自带的是 Android 9，之后我开始尝试运行其它的系统。使用 sd 卡成功运行了 TwisterOS 和 EmuELEC，其它的没有启动成功。</p>
<p>看论坛有人说需要把 emmc 的内容擦除掉，这样机器启动时就会自动加载 sd 卡的系统。那么我也尝试了，没有效果。</p>
<p>之后又看到有人说要把 uboot 写入烧录了镜像的 sd 中，我也尝试了，还是没法启动。</p>
<p>那就算了，我还是刷回 Android 9 吧，不然现在 emmc 浪费着有点可惜。</p>
<p>但是这时我发现，这机器并不能像以往的晶晨机器那样，使用 usb burning tool 来将安卓固件烧录到 emmc 里面。</p>
<p>然后我又耗费了很多时间去折腾，中间也联系了 radxa 的工作人员，最终发现，只能使用 Ubuntu 物理机才行。</p>
<p>教程在官方的 wiki 这里：<a href="https://wiki.radxa.com/Zero/install/eMMC_aml_tool">https://wiki.radxa.com/Zero/install/eMMC_aml_tool</a></p>
<p>在 Ubuntu 上面没有像 Windows 一样的 gui 烧录程序，只能通过脚本来烧录。我一开始在 win10 上面通过虚拟机，执行脚本，将镜像烧录进机器，却一直报错。即使已经设置了 usb 默认连接到虚拟机里面，也不行。尝试了 virtual box 和 VMware，都没有成功。</p>
<p>后来 radxa 这边的大哥告诉我，他烧录成功是在物理机上面执行的。那么我就抱着最后的希望，我用 t48e 这台小主机，装了一个 ubuntu 20.04 server 版，之后在 win10 上通过 ssh 控制它。</p>
<p>安装 lrzsz 后将固件传入机器，下载和安装刷机工具。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone flash tool</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/radxa/</span>aml-flash-tool.git</span><br><span class="line"><span class="comment"># install dependency</span></span><br><span class="line">cd aml-flash-tool</span><br><span class="line">./INSTALL</span><br></pre></td></tr></table></figure>

<p>传入固件后，解压（如果电脑没下载固件的话，也可以在 Ubuntu 里面下载）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载，看情况</span></span><br><span class="line">wget https:<span class="regexp">//</span>dl.radxa.com<span class="regexp">/zero/im</span>ages<span class="regexp">/android/</span>radxa_zero_android_9_20210708-amlupdate.img.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf radxa_zero_android_9_20210708-amlupdate.img.gz</span><br></pre></td></tr></table></figure>

<p><img src="/img/2021/radxa-zero-2.jpg" alt="radxa-zero-2"></p>
<p>之后按住机器背后的按键，使用数据线连接运行着 Ubuntu 的电脑，通过 <code>lsusb</code> 查看是否有识别到名字带 Amlogic 的设备。</p>
<p>有的话可以进行下一步，执行刷机命令，由于此时固件和脚本放在同一个目录下，所以可以这样执行</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">./aml-flash-tool.sh radx<span class="built_in">a_zero</span>_android_9_20210708-amlupdate.img</span><br></pre></td></tr></table></figure>

<p>我的执行过程是这样的</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">ver@t48e:~/aml-flash-tool$ ./aml-flash-tool.<span class="keyword">sh</span> radxa_zero_android_9_20210717-amlupdate.img</span><br><span class="line">Unpacking image [OK]</span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">Initializing ddr ........[OK]</span><br><span class="line">Running <span class="keyword">u</span>-boot ........[OK]</span><br><span class="line">Create partitions [OK]</span><br><span class="line">Writing device tree [OK]</span><br><span class="line">Writing bootloader [OK]</span><br><span class="line">Wiping  data partition [OK]</span><br><span class="line">Wiping  cache partition [OK]</span><br><span class="line">Writing boot partition [OK]</span><br><span class="line">Writing dtbo partition [OK]</span><br><span class="line">Writing logo partition [OK]</span><br><span class="line">Writing odm partition [OK]</span><br><span class="line">Writing product partition [OK]</span><br><span class="line">Writing recovery partition [OK]</span><br><span class="line">Writing <span class="built_in">system</span> partition [OK]</span><br><span class="line">Writing vbmeta partition [OK]</span><br><span class="line">Writing vendor partition [OK]</span><br><span class="line">Resetting board [OK]</span><br><span class="line">ver@t48e:~/aml-flash-tool$</span><br></pre></td></tr></table></figure>

<p>那么就成功刷好了，之后重启机器就进入 Android 9 了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>我的相册备份方案</title>
    <url>/2018/06/photos-backup/</url>
    <content><![CDATA[<p>由于之前小米所提供的5G云空间提示我说不够了，要充钱买更大的空间。这怎么可能，想让我花钱去买空间，呵呵。 于是我寻找备份相册的方案。</p>
<h2 id="1-百度云"><a href="#1-百度云" class="headerlink" title="1  百度云"></a>1  百度云</h2><p>因为空间不足，那么想到的就是百度云2T的大空间。（至于说隐私问题，觉得百度云不安全之类的，我一直觉得很奇怪，难道你们相册里面都是一堆自己的裸照？反正我的话涉及隐私也就自拍的照片而已，也没什么见不得人的。） 用手机APP里面就有图片备份功能，设置要备份的相册文件夹就行了。在有WIFI的环境下就会备份到网盘。 <strong>缺点</strong>：只能自动备份，无法自动恢复，比如我换了新手机，它无法自动将相片恢复到新的手机。 还有，备份后是在网盘根目录有一个 来自:MI MAX2 这里就是我这台小米max2备份的数据了，不能自定义路径。。。所以我的解决方法是，把这个文件夹重命名，在前面加个符号，如逗号，然后就可以把这个文件夹移动到隐藏空间。保险一点。</p>
<h2 id="2-谷歌相册"><a href="#2-谷歌相册" class="headerlink" title="2  谷歌相册"></a>2  谷歌相册</h2><p>以高质量的方式备份照片和视频可以无限空间。在手机上基本看不出压缩前后的差别。通过此我把相册都备份到Google，即使把本地照片删除了还可以通过这APP来查看，点击时会通过联网加载图片。 那如果我换新手机了，想把照片都下载到新手机里面，这个就有点复杂，首先得在Google photos里面开启 Google 云端硬盘 ，这样备份的图片才会显示在Google drive里面，然后可以在Google drive的网页或者客户端把图片下载下来，再传入手机，还是挺麻烦的。 当然啦，这一切都建立在能科学上网的基础之上。所以我仅是把它当多一份备份而已。</p>
<h2 id="3-Handshaker"><a href="#3-Handshaker" class="headerlink" title="3  Handshaker"></a>3  Handshaker</h2><p>锤子开发的一款电脑端管理安卓手机的工具，平时我也用它在电脑与手机间传输文件，还是挺方便的。在它的设置里，可以设置自动同步，这样每次连接后就会自动同步所有照片到电脑，如果换新手机，可以在这个软件把电脑里的照片复制到新手机。比较不错。 缺点：同步到电脑的相册无法选择，所有的照片都会同步。（不过电脑复制到手机就可以选择哪些相册要哪些不要） mac版的无法像win版那样选择文件存储路劲，所以我只用win版来备份。</p>
<h2 id="4-Syncthing"><a href="#4-Syncthing" class="headerlink" title="4  Syncthing"></a>4  Syncthing</h2><p>这关联到我之前的  <a href="https://jungui.powersee.pw/?p=194">搭建个人网盘——syncthing</a>  这篇文章。通过此把要备份的相册文件夹备份到其它设备，可以是电脑、另一台手机、电脑上的虚拟机、远程vps，这些都可以，只要两台设备同时在线就能自动备份。那么我vps的  syncthing  一直开着，这样当我需要备份时就打开手机的APP，扫描一下就能同步。 假如我手机丢了，那么此时我的vps或者电脑里还有保存这些，我可以在新手机也安装syncthing来把vps或者电脑里的照片同步到新手机里面。</p>
<h2 id="5-小米云服务"><a href="#5-小米云服务" class="headerlink" title="5  小米云服务"></a>5  小米云服务</h2><p>其实我发现我手机里的照片加视频也就2G而已，小米提供的5G我是够用的，之前说空间不足是因为它默认开启了桌面云备份，会把我手机的app都备份上传云端，用了接近1G，所以把它删了，还是可以放很多照片的。然后如果换手机了，依然是MIUI的话直接登录小米账号同步相册就行。如果是其它手机，可以电脑下载小米云服务，把照片下载到本地，在传入新手机。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平时的话我同步功能都是关闭的，不想随便截张图，保存张照片就自动同步到云端，我会每隔一段时间就清理相册，清理完成再打开同步，同步完就又关闭。感觉现在照片空间还不算多，用小米云优先。但毕竟这段时间研究了挺久这个相片备份问题的，就记录一下吧。</p>
]]></content>
      <tags>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个聊天室——rocket.chat</title>
    <url>/2018/07/rocket-chat/</url>
    <content><![CDATA[<p>Rocket.Chat 是一款开源软件。<br>项目地址：<a href="https://github.com/RocketChat/Rocket.Chat">https://github.com/RocketChat/Rocket.Chat</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我是在 Ubuntu 18.04 纯净系统下使用的<br>用 snap 安装</p>
<pre>snap install rocketchat-server</pre>

<h4 id="联结-caddy"><a href="#联结-caddy" class="headerlink" title="联结 caddy"></a>联结 caddy</h4><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">sudo rocketchat-<span class="keyword">server</span>.initcaddy</span><br></pre></td></tr></table></figure>

<p>编辑 Caddyfile 文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/var/</span>snap<span class="regexp">/rocketchat-server/</span>current/Caddyfile</span><br></pre></td></tr></table></figure>

<p>将  http://:8080 为你的网站,如 powersee.tk</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>powersee.tk</span><br><span class="line">proxy / localhost:<span class="number">3000</span> &#123;</span><br><span class="line">  websocket</span><br><span class="line">  transparent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再重启</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">restart</span> snap.rocketchat-<span class="keyword">server</span>.rocketchat-caddy</span><br></pre></td></tr></table></figure>

<p>那么此时访问网址就能进入聊天室了<br> 因为此处用 SSL 的话，我试了好多次，只能搞自签证书，而这样在手机客户端又没办法连接，因此不演示。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>第一次进入注册的账号会成为管理账号。<br>进入后是英文的，可以设置为中文。<br>点击导航栏的三个点，进入管理界面</p>
<p>然后在里面可以找到设置语言的地方</p>
<h4 id="手机端登录"><a href="#手机端登录" class="headerlink" title="手机端登录"></a>手机端登录</h4><p>第一次进入会出现这个界面<br>(让你输入网址)<br>因为我没有使用 SSL，因此得点那个倒三角，选择 http:// 然后再输入网址，如我的 powersee.tk<br>再用账号密码登录即可。同个账号在多平台是可以同时在线的。</p>
<h4 id="手机客户端下载"><a href="#手机客户端下载" class="headerlink" title="手机客户端下载"></a>手机客户端下载</h4><p>去 play 商店 下载<br>GitHub下载:下载 armv7 版本的到手机安装，x86版本的则到平板。<a href="https://github.com/RocketChat/Rocket.Chat.Cordova/releases/">https://github.com/RocketChat/Rocket.Chat.Cordova/releases/</a><br>总体而言，还是挺有趣的。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装 transmission</title>
    <url>/2020/12/raspberrypi-install-transmission/</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> transmission-daemon</span><br></pre></td></tr></table></figure>

<p>停止程序，修改配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">service transmission-daemon stop</span><br><span class="line">vi <span class="regexp">/etc/</span>transmission-daemon/settings.json</span><br></pre></td></tr></table></figure>

<p>使用 vi 打开这个配置文件后，按 <code>i</code> 键进入编辑模式</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;download-dir&quot;</span>: <span class="string">&quot;/mnt/tr/downloads&quot;</span>,</span><br><span class="line"><span class="string">&quot;rpc-whitelist&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br></pre></td></tr></table></figure>

<p>修改这么两行，此时账号和密码没有修改，默认情况下都是 transmission</p>
<p>修改完成按 <code>ESC</code> 键退出编辑模式，再按 <code>:wq</code> 保存退出。</p>
<p>接着启动 transmission</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service transmission-daemon <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>此时在浏览器中输入 树莓派ip:9091 就可以访问 transmission 。</p>
<p><img src="/img/2020/raspi-tr.png"></p>
<p>此时直接下载种子，应该会报错提示没有写入权限。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/mnt/</span>tr/downloads</span><br><span class="line">chmod <span class="number">777</span> <span class="regexp">/mnt/</span>tr/downloads</span><br></pre></td></tr></table></figure>

<p>这样应该就可以正常下载了。下载完成后，如果想将下载文件夹通过 smb 共享出来，可以在 <code>/etc/samba/smb.conf</code> 中添加这一段</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">[download]</span><br><span class="line">   <span class="attr">comment</span> = Printer Drivers</span><br><span class="line">   <span class="attr">path</span> = /mnt/tr/downloads</span><br><span class="line">   <span class="attr">browseable</span> = yes</span><br><span class="line">   read <span class="attr">only</span> = yes</span><br><span class="line">   guest <span class="attr">ok</span> = yes</span><br></pre></td></tr></table></figure>

<p>然后重启 smb</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">smbd restart</span></span><br></pre></td></tr></table></figure>

<p>此时应该就可以在 win10 的资源管理器中的 【网络】找到树莓派，直接点击应该就可以访问里面的内容。</p>
<p>我使用的内存卡的闪迪的，32G ，class 10，实测 smb 读取速度在 40MB/s 左右。如果打算长期下载的话，建议还是接一个 usb 硬盘比较好。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>OMV 安装失败如何卸载</title>
    <url>/2019/12/remove-omv/</url>
    <content><![CDATA[<p>记录在 armbian 上安装 omv 失败的过程。</p>
<p>omv 好像不支持在 Debian bust 上面安装，我直接安装后报错了。然后也没法卸载，并且 apt 也没法用了，一用就会提示<code>E: 软件包 openmediavault-omvextrasorg 需要重新安装，但是我无法找到相应的安装文件。</code>苦恼。</p>
<p>最终解决方法：</p>
<ol>
<li><p><code>rm -rf /var/lib/dpkg/info/openmediavault-omvextrasorg*</code></p>
</li>
<li><p><code>sudo dpkg --remove --force-remove-reinstreq openmediavault-omvextrasorg</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg: 警告: 由于开启了 --force 选项，以下问题被忽略：</span><br><span class="line">dpkg: 警告: 该软件包现在的状态极为不妥；</span><br><span class="line">建议您在卸载它之前再重新安装一次</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 112651 个文件和目录。)</span><br><span class="line">正在卸载 openmediavault-omvextrasorg (5.1.9) ...</span><br></pre></td></tr></table></figure></li>
<li><p>之后再使用 apt 就不会出现问题了。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派 4B 变身 NAS 服务器</title>
    <url>/2020/12/raspberrypi-nas/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>树莓派由于体积非常小，只有一张银行卡的大小，而且还支持 WiFi ，所以拿它当服务器也是一个不错的选择。只要找一个有电源的地方，丢在那里就行。</p>
<p>如果只是当成服务器来使用，可以感兴趣的人会比较少，如果能够在上面装些下载软件，再开启 smb 共享，那么树莓派也是可以当成一台的简单的 NAS 来使用的。</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>个人推荐先使用官方系统 raspios , 不建议使用以前的 raspbian ，raspbian 是 32 位的系统，如果有使用 docker 的话，就会知道，32 位的 docker 镜像非常的少。如果可以的话，一定要装 64 位的系统，不管是官方的 raspios 还是 Ubuntu 都行。</p>
<p>这里我以官方的 raspios 来作为演示。</p>
<p>下载来源：<a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/">清华镜像站</a></p>
<p>由于是当 NAS 使用，建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_lite_arm64/images/raspios_lite_arm64-2020-08-24/2020-08-20-raspios-buster-arm64-lite.zip">lite 版</a></p>
<p>下载后将里面的 img 镜像解压出来，然后使用镜像写入工具。我使用的是 usb image tools （我的网盘里面有），也可以使用其它的工具，例如 Etcher ，win32diskimager 等等。</p>
<h3 id="开启-ssh"><a href="#开启-ssh" class="headerlink" title="开启 ssh"></a>开启 ssh</h3><p>镜像写入完成后，如果直接弹出读卡器，然后启动树莓派的话，会发现无法用 ssh 连接。解决的方法也很简单，将内存卡重新插回电脑，在里面建立一个文件夹，名字为 <code>ssh</code></p>
<p>这样系统启动后就开启 ssh 了。</p>
<h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>备份原来的</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>apt<span class="regexp">/source.list /</span>etc<span class="regexp">/apt/</span><span class="keyword">source</span>.list.bak</span><br></pre></td></tr></table></figure>

<p>/etc/apt/source.list</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> buster main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> buster main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> buster-updates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> buster-updates main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> buster-backports main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian/</span> buster-backports main contrib non-free</span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian-security buster/u</span>pdates main contrib non-free</span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/debian-security buster/u</span>pdates main contrib non-free</span><br></pre></td></tr></table></figure>

<p>/etc/apt/source.list.d/raspi.list</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/raspberrypi/</span> buster main ui</span><br></pre></td></tr></table></figure>

<p>我使用的是 nano 编辑器，对文本内容进行修改之后，想保存退出，需要按 <code>ctrl + X</code> 退出，然后编辑器会问，是否要保存，按 <code>Y</code> 选择 yes ，再让你确认保存的文件名，按回车键即可。</p>
<p>更改好源之后，输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">apt update</span></span><br></pre></td></tr></table></figure>

<h3 id="安装常用应用"><a href="#安装常用应用" class="headerlink" title="安装常用应用"></a>安装常用应用</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> vim samba zsh docker.io -y</span><br></pre></td></tr></table></figure>



<h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><p>将硬盘通过 usb 连接到树莓派，在终端输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">lsblk</span></span><br></pre></td></tr></table></figure>

<p>列出所有可用块设备的信息，例如我的显示</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0   <span class="number"> 0 </span>55.9G <span class="number"> 0 </span>disk </span><br><span class="line">├─sda1        8:1   <span class="number"> 0 </span>53.9G <span class="number"> 0 </span>part </span><br><span class="line">├─sda2        8:2   <span class="number"> 0 </span>   1K <span class="number"> 0 </span>part </span><br><span class="line">└─sda5        8:5   <span class="number"> 0 </span>   2G <span class="number"> 0 </span>part </span><br><span class="line">mmcblk0     179:0   <span class="number"> 0 </span>14.7G <span class="number"> 0 </span>disk </span><br><span class="line">├─mmcblk0p1 179:1   <span class="number"> 0 </span> 256M <span class="number"> 0 </span>part /boot/firmware</span><br><span class="line">└─mmcblk0p2 179:2   <span class="number"> 0 </span>14.5G <span class="number"> 0 </span>part /</span><br></pre></td></tr></table></figure>

<p>我需要挂载 sda1 这个分区，想将它挂载到 /mnt/to 这个目录下，所以我先创建这个文件夹，再进行挂载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/mnt/</span>to</span><br><span class="line">mount <span class="regexp">/dev/</span>sda1 <span class="regexp">/mnt/</span>to</span><br></pre></td></tr></table></figure>

<p>这种情况下，如果我们重启了机器，那么就得重新挂载硬盘，如果你并不频繁重启机器，这样或许还可以接受。若不是的话，可以了解一下自动挂载。</p>
<p>首先查看硬盘的 UUID ，可以使用 <code>blkid</code> 命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># blkid     </span></span><br><span class="line">/dev/mmcblk0p1: <span class="attribute">LABEL</span>=<span class="string">&quot;system-boot&quot;</span> <span class="attribute">UUID</span>=<span class="string">&quot;85F3-CC2B&quot;</span> <span class="attribute">TYPE</span>=<span class="string">&quot;vfat&quot;</span> <span class="attribute">PARTUUID</span>=<span class="string">&quot;da84cd12-01&quot;</span></span><br><span class="line">/dev/mmcblk0p2: <span class="attribute">LABEL</span>=<span class="string">&quot;writable&quot;</span> <span class="attribute">UUID</span>=<span class="string">&quot;b96d647f-679e-4582-87d0-2d8c7afc91f4&quot;</span> <span class="attribute">TYPE</span>=<span class="string">&quot;ext4&quot;</span> <span class="attribute">PARTUUID</span>=<span class="string">&quot;da84cd12-02&quot;</span></span><br><span class="line">/dev/sda1: <span class="attribute">UUID</span>=<span class="string">&quot;041ff92b-0a5c-49f4-b965-0d3a55ef8284&quot;</span> <span class="attribute">TYPE</span>=<span class="string">&quot;ext4&quot;</span> <span class="attribute">PARTUUID</span>=<span class="string">&quot;0eff14f3-01&quot;</span></span><br><span class="line">/dev/sda5: <span class="attribute">UUID</span>=<span class="string">&quot;b82db7cf-756f-4109-8800-9c0d9bb58810&quot;</span> <span class="attribute">TYPE</span>=<span class="string">&quot;swap&quot;</span> <span class="attribute">PARTUUID</span>=<span class="string">&quot;0eff14f3-05&quot;</span></span><br><span class="line">/dev/mmcblk0: <span class="attribute">PTUUID</span>=<span class="string">&quot;da84cd12&quot;</span> <span class="attribute">PTTYPE</span>=<span class="string">&quot;dos&quot;</span></span><br></pre></td></tr></table></figure>

<p>这里我想挂载的是 <code>/dev/sda1</code> ，所以我复制它的 UUID <code>041ff92b-0a5c-49f4-b965-0d3a55ef8284</code> 记住它的 type 是 ext4 ，你的有可能是其它的，例如 ntfs 之类。</p>
<p>编辑 <code>/etc/fstab</code> </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">nano <span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure>

<p>在最下面添加一行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">UUID</span>=<span class="number">041</span>ff<span class="number">92</span>b-<span class="number">0</span>a<span class="number">5</span>c-<span class="number">49</span>f<span class="number">4</span>-b<span class="number">965</span>-<span class="number">0</span>d<span class="number">3</span>a<span class="number">55</span>ef<span class="number">8284</span> /mnt/to ext<span class="number">4</span> defaults     <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><img src="/img/2020/fstab-nano.png" alt="fstab-nano"></p>
<p>填好后，按 <code>ctrl + o</code> 保存，回车键确认，再按 <code>ctrl + x</code> 退出。</p>
<h3 id="设置-smb-共享"><a href="#设置-smb-共享" class="headerlink" title="设置 smb 共享"></a>设置 smb 共享</h3><p>此时我想通过 smb 的方式将硬盘中的内容共享出来，我需要先编辑 samba 的配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>然后在最后添加这么几行</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">to</span>]</span><br><span class="line">    path = /mnt/<span class="keyword">to</span></span><br><span class="line">    browseable = <span class="literal">yes</span> </span><br><span class="line">    guest ok = <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<p>保存退出，然后重启 smbd</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service smbd restart</span></span><br></pre></td></tr></table></figure>

<p>此时在 资源管理器 的 网络 中，点击树莓派对应的设备名，应该就可以看到一个名字为 to 的共享文件夹。由于上面是设置 guest ok ，所以不用身份验证就可以直接打开。</p>
<p>但这样可能不是你想要的，毕竟任何人都可以直接访问，不安全。能否添加账号密码来验证呢？答案是可以的。</p>
<p>如果你装的是树莓派的 raspbian 或者 raspios ，默认就有一个 pi 用户，如果你安装的是 Ubuntu ，默认情况下就有一个 ubuntu 用户。那么现在就到 samba 里面添加这个同名用户。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">smbpasswd -<span class="keyword">a</span> <span class="literal">pi</span></span><br></pre></td></tr></table></figure>

<p>用 Ubuntu 的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">smbpasswd -<span class="selector-tag">a</span> ubuntu</span><br></pre></td></tr></table></figure>

<p>之后会让你设置密码，需要设置两次。会如下面这样显示。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">New SMB password:</span><br><span class="line">Retype new SMB password:</span><br><span class="line">Added <span class="keyword">user</span> <span class="title">ubuntu</span>.</span><br></pre></td></tr></table></figure>

<p>然后我们可以再来修改 smb 配置文件。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>在最后面添加这么几行</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">[test]</span><br><span class="line">    <span class="attr">path</span> = /mnt/to/test</span><br><span class="line">    <span class="attr">writable</span> =yes</span><br><span class="line">    valid <span class="attr">users</span> = ubuntu</span><br><span class="line">    force create <span class="attr">mode</span> = <span class="number">0644</span></span><br></pre></td></tr></table></figure>

<p>保存退出，然后重启 smbd</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service smbd restart</span></span><br></pre></td></tr></table></figure>

<p>然后在网络中应该就可以看到名字为 test 的共享文件夹，直接双击打开的话，会要求你输入账号和密码。账号就是 pi 或者 ubuntu ，密码是你刚才自己设置的。</p>
<p><img src="/img/2020/samba-test-dir.png" alt="samba-test-dir"></p>
<h3 id="安装我家云导航"><a href="#安装我家云导航" class="headerlink" title="安装我家云导航"></a>安装我家云导航</h3><p>导航下载，在网盘中的【不仅限于盒子】、【贝壳云and我家云】文件夹中。我使用的是 2019 年的旧版导航，用新的应该也可以。</p>
<p>先进入 <code>/opt</code> 这个目录</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/opt</span></span><br></pre></td></tr></table></figure>

<p>想安装需要先把导航压缩包传进树莓派，达到这个目的的方法有很多。我使用的终端是 xshell ，我先在树莓派里安装一个 lrzsz</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> lrzsz</span><br></pre></td></tr></table></figure>

<p>安装完成后，使用 <code>rz</code> 命令，就可以把电脑里的文件，传输到树莓派里面了。</p>
<p>把 <code>entware_navi.tgz</code> 和 <code>install_navi.sh</code> 这两个文件，传到 <code>/opt</code> 目录下，然后安装脚本执行权限，再执行安装</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">chmod +x install_navi.<span class="keyword">sh</span></span><br><span class="line">./install_navi.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>然后等一段时间……</p>
<p>完成后就可以在浏览器输入树莓派的 ip 来访问这个导航界面了。</p>
<p><img src="/img/2020/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AF%BC%E8%88%AA%E7%95%8C%E9%9D%A2.png" alt="树莓派导航界面"></p>
<p>实测 qb 启动不了，控制台那个是给我家云的 omv 用的，装在其它设备上本来就是没法用的。其它的功能好像都还可以用吧。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>PSV存档管理器 savemgr 使用经验</title>
    <url>/2018/08/savemgr/</url>
    <content><![CDATA[<p>savemgr，存档管理器，在 Github 上项目名称为：vita-savemgr</p>
<p>项目地址：<a href="https://github.com/d3m3vilurr/vita-savemgr">https://github.com/d3m3vilurr/vita-savemgr</a></p>
<p>作用：备份还原存档，分享存档给别人，使用他人存档。</p>
<p>使用方法：（#本文只讲v2.0正式版）那么首先下载这个安装包，之后在PSV上面打开安装。</p>
<blockquote>
<p><a href="https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk">https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk</a></p>
</blockquote>
<p>完成之后PSV桌面就有这个图标了。打开，选择一个游戏，然后出现四个选项。分别是 备份，恢复，删除，格式化。看字面意思很容易懂其作用。</p>
<p><img src="/img/2018/savemgr.jpg" alt="软件截图"></p>
<p>比如我要备份空之轨迹sc这个游戏存档（游戏编号为 PCSH10060）。点击这个游戏，备份，选择一个位置，如第七个。之后存档就会备份到</p>
<blockquote>
<p>ux0:data/savegames/PCSH10060/SLOT7</p>
</blockquote>
<p><img src="/img/2018/savegamepath.jpg" alt="备份路径"></p>
<p>这里。把这个文件夹放在别的PSV的这个路径，别人再使用存档管理器恢复存档，即可以使用我们分享出来的存档。同理，我们也可以这样使用别人的存档。</p>
<hr>
<p>　　问题：使用 savemgr 一备份就报错。</p>
<p>　　其实这才是我一开始要写的内容。因为用0.8版本，导致档案损坏，以至于我整个游戏重新安装。于是我就上网下载了个2.0汉化版，却出现 一备份就报错 的情况。关机重启也还是一样。</p>
<p>　　然后去 Github 下载7月1号更新的最新版本，还是一样。看看issue里面，也有人是这种情况，没法解决。但是发现了用原装2.0版本的话，安装好以后，机子重启一下就能正常使用了。备份恢复都可以。</p>
<p>　　吐槽：我网上查了很多，发现很少有人给官方的下载地址，github的直链，大多数都是给个百度云……感觉还是给像<br><a href="https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk">https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk</a><br>这样好吧，直接浏览器就能下载，而且不用怕链接失效。最重要的是，我能知道这个是从哪里来的。</p>
]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器和软路由速度记录</title>
    <url>/2021/07/router-speed/</url>
    <content><![CDATA[<p>本文记录测试过的路由器和软路由设备，它们的出国速度表现。</p>
<p>由于家里的移动宽带，目前最高只能跑到 440-450 mbps 左右，所以有些性能较强的设备，目前没有条件测出它的极限，见谅。</p>
<table>
<thead>
<tr>
<th align="left">设备型号</th>
<th>出国速度（Mbps）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">章鱼星球 S912</td>
<td>440（已达到宽带极限，未知上限）</td>
</tr>
<tr>
<td align="left">小米 CR6608 （mt7621）</td>
<td>80</td>
</tr>
<tr>
<td align="left">JCG Q20</td>
<td>80</td>
</tr>
<tr>
<td align="left">我家云 rk3328</td>
<td>300</td>
</tr>
<tr>
<td align="left">D2550</td>
<td>210（ssr 可以到 390）</td>
</tr>
<tr>
<td align="left">k2p</td>
<td>80</td>
</tr>
<tr>
<td align="left">树莓派4B</td>
<td>415</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 telethon 来定时发送消息</title>
    <url>/2021/06/telethon-auto-reply/</url>
    <content><![CDATA[<p>今天介绍一个 python 库 —— telethon，使用它我们可以在 Linux 服务器上登录 telegram，可以获取群消息、联系人，以及今天要重点介绍的自动发送消息。</p>
<p>更多的内容可以查看官方文档：<a href="https://docs.telethon.dev/en/latest/">https://docs.telethon.dev/en/latest/</a></p>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>首先需要有 python 环境，我这里在 Ubuntu 服务器上面演示的，我用的是 python3</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> telethon</span><br></pre></td></tr></table></figure>

<p>安装成功后可以通过执行下面这个来检查</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">pytho<span class="symbol">n3</span> -c <span class="string">&quot;import telethon; print(telethon.__version__)&quot;</span></span><br></pre></td></tr></table></figure>

<p>我目前装的版本是 <code>1.21.1</code></p>
<h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><p>之后来到浏览器，需要申请 API</p>
<p><a href="https://my.telegram.org/auth?to=apps">https://my.telegram.org/auth?to=apps</a></p>
<p><img src="/img/2021/2021-06-02_22-00-41.jpg" alt="2021-06-02_22-00-41"></p>
<p>填写自己的手机号，前面的 <code>+</code> 我是有填的，不知道不填行不行。点击 next 按钮后我们的 telegram 客户端就会收到一条验证消息，验证码是英文字母，还挺长的。</p>
<p>之后需要创建一个 application ，要填的就是 App title 和 Short name 这两个而已，主要只能 <code>英文字母和数字</code> ，不可以用下划线，并且要在 5-32 个字符之间。可以参考这么填。</p>
<blockquote>
<p>App title: firstApp<br>Short name: 12345</p>
</blockquote>
<p>完成后可以看到 <code>api_id、api_hash</code> 这两个，把它们保存下来。需要将它们填写到下面的脚本里。</p>
<h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use your own values from my.telegram.org</span></span><br><span class="line">api_id = <span class="number">12345</span></span><br><span class="line">api_hash = <span class="string">&#x27;0123456789abcdef0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The first parameter is the .session file name (absolute paths allowed)</span></span><br><span class="line"><span class="keyword">with</span> TelegramClient(<span class="string">&#x27;anon&#x27;</span>, api_id, api_hash) <span class="keyword">as</span> client:</span><br><span class="line">    client.loop.run_until_complete(client.send_message(<span class="string">&#x27;me&#x27;</span>, <span class="string">&#x27;Hello, myself!&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>完成后保存，例如我这里保存为 tele-test.py ，然后通过 <code>python3 tele-test.py</code> 来执行这个脚本。它会让我们输入手机号码，因为这是我们第一次在陌生的设备上登录，之后在 telegram 客户端里我们会收到一个验证码，输入后就可以登录了。（此处手机号前面的 + 我就没填了）</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Please enter your phone (<span class="keyword">or</span> bot <span class="keyword">token</span>): <span class="number">123456789</span></span><br><span class="line">Please enter <span class="keyword">the</span> code you received: <span class="number">11631</span></span><br><span class="line">Signed <span class="keyword">in</span> successfully <span class="keyword">as</span> powersee</span><br></pre></td></tr></table></figure>

<p>那么这样我们在服务器上面登录了，并且此时也已经成功地发送了一条消息。就是给 <code>me</code> 这个用户发送 <code>Hello, myself!</code> 这条消息。其实就是将这句话，保存到 “保存的消息”里面而已。如果你想发送给其他人，以及修改内容，就修改一下脚本的内容就行。</p>
<p>里面的 anon 是缓存的密钥，第一次执行脚本后，我们输出手机号和验证码，完成后脚本所在文件夹就会出现一个 <code>anon.session</code> 文件，下次再执行这个脚本就不用输入手机号验证了。你可以将它移动到其它地方，但是记得也修改一下脚本里的内容，如将 acon 改为 <code>/opt/acon</code> 。</p>
<h3 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h3><p>然后想要实现定时执行的话，需要用到 crontab ，可以轻松实现每天定时发送消息给某个用户。</p>
<p>如果想让发送时间有些变化的话，可以在 python 里面加入 time 和 random</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">time.sleep(random.randint(<span class="number">5</span>,<span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>这样会随机暂停 5 到 200 秒，因此每次发送消息的时间就不同了。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于服务器资源取回本地的几种方法</title>
    <url>/2020/01/three-ways-to-retrieve-the-file/</url>
    <content><![CDATA[<p>本文介绍三种我自己都有用过的方法，都是比较简单的。</p>
<h2 id="一、caddy"><a href="#一、caddy" class="headerlink" title="一、caddy"></a>一、caddy</h2><p> 首先，安装一个 caddy。现在是 <code>2020-09-29</code> ，最新的 caddy 版本是 2.2.0，后期如果有更新的话，请自行到官网或者 <a href="https://github.com/caddyserver/caddy/releases">GitHub</a> 了解。</p>
<p>这里下载的是一个 deb 包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/caddyserver/caddy/releases/download/v2.2.0/caddy_2.2.0_linux_amd64.deb</span><br></pre></td></tr></table></figure>

<p>下载完成后，用 dkpg 来安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -i caddy_2.2.0_linux_amd64.deb</span><br></pre></td></tr></table></figure>

<p>此时 caddy 会自动启动，我们先把它关了</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">systemctl stop caddy</span><br></pre></td></tr></table></figure>

<p>写入配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;:80 &#123;  </span><br><span class="line"> root * /path/to/downloads</span><br><span class="line"> file_server browse  </span><br><span class="line">&#125;&quot; &gt; Caddyfile</span><br></pre></td></tr></table></figure>

<p>注意！！！此处的 <code>/path/to/downloads</code> 就是要共享的文件夹路径，可以自行修改。</p>
<p>启动 caddy</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">caddy <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>开放服务器 80 端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ufw</span> <span class="literal">allow</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p>
<p>其实不建议用 80 端口，最好还是用其它的吧。如果用其它的端口，在浏览器中访问时，就需要加上 <code>:</code>和 <code>端口号</code>，例如用 <code>9527</code> 端口，此时 <code>IP</code>假设为 <code>111.222.111.111</code> 就需要在浏览器中访问</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">111.222.111.111:9527</span></span><br></pre></td></tr></table></figure>

<p>需要想要关闭 caddy 服务，可以用</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">caddy stop</span><br></pre></td></tr></table></figure>

<p>stop 之后，我们可以使用 <code>vim</code> 或者 <code>nano</code> 编辑 <code>Caddyfile</code>，这两个编辑器的使用可以网上搜一下，我们可以修改端口，文件夹的路径这些内容，保存后再来启动 caddy 就行。</p>
<p>如果想卸载，用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dpkg -r caddy</span></span><br></pre></td></tr></table></figure>

<h2 id="二、h5ai"><a href="#二、h5ai" class="headerlink" title="二、h5ai"></a>二、h5ai</h2><blockquote>
<p>这是一个 PHP 程序，原本它是要求机器本身有 PHP 才能用的，不过现在使用 docker 来安装的话，也可以非常迅速就安装好。</p>
</blockquote>
<p>一行命令即可，最简单</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">8055</span>:<span class="number">80</span> -v /home/tr/download:/h<span class="number">5</span>ai --name h<span class="number">5</span>ai ilemonrain/h<span class="number">5</span>ai:full -d</span><br></pre></td></tr></table></figure>

<p>如果你是用 docker 安装了 transmission ，而且下载路径是 <code>/home/tr/download</code> ，那么你可以直接使用上面的命令。</p>
<p>如果你使用的是 qb ，你可以自己修改下载路径，例如将路径改为 <code>/path/to/downloads</code> ，改完的完整命令是这个</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">8055</span>:<span class="number">80</span> -v /path/to/downloads:/h<span class="number">5</span>ai --name h<span class="number">5</span>ai ilemonrain/h<span class="number">5</span>ai:full -d</span><br></pre></td></tr></table></figure>

<p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容。</p>
<p>如果后来觉得不需要了，可以选择停止这个容器</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> stop h<span class="number">5</span>ai</span><br></pre></td></tr></table></figure>

<p>停止后觉得以后不会再用到它了，可以选择将它删除</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> rm h<span class="number">5</span>ai</span><br></pre></td></tr></table></figure>

<h2 id="三、Python-web"><a href="#三、Python-web" class="headerlink" title="三、Python web"></a>三、Python web</h2><p>这个是最简单的，基本所有的服务器都可以，而且不用额外安装其它的程序。只需要在 ssh 时进入到指定的文件夹，然后输入这条命令即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>
<p>会默认采用8000端口,此时输入 <strong>IP:8000</strong> 或者 <strong>域名:8000</strong> ，即可访问当前目录下的文件，如果有 **index.html **则会默认加载。</p>
<p>然后想要停止时，按<code>CTRL + C</code> 取消。<br>不过这种方法有挺多缺点的，比如不支持断点续传，开启时需一直保持 ssh 连接着，显示的文件信息简陋等。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第三种适合于临时下载的，前两种适合长时间的。如果机器本身有装 docker ，那我建议使用第二种。当然第一种也有好处，就是可以绑定指定的域名。</p>
<p>各取所需吧，适合自己的需求的才是最好的。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>乐橙 sn1 刷机经验分享</title>
    <url>/2021/03/sn1-flash/</url>
    <content><![CDATA[<p>刷机关键点，绿联读卡器，<a href="https://detail.tmall.com/item.htm?id=595545521913&skuId=4539873880456">淘宝购买链接</a></p>
<p>@<strong>88841807849_bili</strong> 这位老哥告诉我的，他说他使用这款读卡器成功刷机了，于是我也就去买来试试看。果然是这样，用其它的读卡器和 U 盘一直不行，用了这款读卡器一下子就成功了。</p>
<p>另外还要买两样东西：</p>
<p><a href="https://item.taobao.com/item.htm?id=565486361121&_u=rod6isk7e40">单头电子线 端子线</a></p>
<p>要选择 4P 的</p>
<p>usb 转 ttl，我是在拼多多买的，CH340G普通版，价格 6.3 包邮。</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>建议还是先备份一下源系统比较好，可以先使用 <code>df -h</code> 看一下硬盘的挂载情况，然后再使用 dd 命令把 emmc 备份出来</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/mmcblk0 <span class="attribute">of</span>=你的硬盘或U盘路径/lecheng.img</span><br></pre></td></tr></table></figure>

<h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>固件可以到 GitHub 上面下载，<a href="https://github.com/hanwckf/build-imou-sn1/releases">https://github.com/hanwckf/build-imou-sn1/releases</a></p>
<p>为了方便访问不了 GitHub 的朋友，我也把它们备份到网盘里。</p>
<p>链接：<a href="https://pan.baidu.com/s/1XncryNlALVXAO4rsVaqP3w">https://pan.baidu.com/s/1XncryNlALVXAO4rsVaqP3w</a><br>提取码：psee</p>
<p>7z b 分数</p>
<p><img src="/img/2021/%E4%B9%90%E6%A9%99_sn1_7z_b.jpg" alt="乐橙_sn1_7z_b"></p>
<p>总分 4283</p>
<p>参考另外两台设备</p>
<blockquote>
<p>N1 3556</p>
<p>我家云 3457</p>
</blockquote>
<p>之后如果想刷回安卓系统，可以进入 U 盘中的 alpine 恢复系统，先用 mount 命令挂载硬盘或者U盘，然后使用 dd 命令讲安卓系统恢复到 mmcblk0</p>
<p>例如我是这样的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>sda1 /mnt</span><br><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/mnt/</span>lecheng.img of=<span class="regexp">/dev/mm</span>cblk0</span><br></pre></td></tr></table></figure>

<p>刷机教程文章：<a href="https://www.jianshu.com/p/695fa3b0dab5">https://www.jianshu.com/p/695fa3b0dab5</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将文件传输到另外一台 Linux 设备上</title>
    <url>/2020/09/transfer-in-linux/</url>
    <content><![CDATA[<p>在 Linux 中，如何将文件从当前机器，传输到另外一台机器呢？用 U 盘、移动硬盘、网盘？可以是可以，不过要是用的是服务器，而且要传输的文件数量比较多，这样操作起来就比较麻烦了。还有其它方法吗？</p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>或许用 <code>tar</code> 先将文件打包成一个压缩包，传输到另外一台机器后，再解压也是不错的选择。</p>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>也可以使用 <code>scp</code> 来传输。例如，我现在有两台机器</p>
<ul>
<li>A：192.168.1.4</li>
<li>B：192.168.1.5</li>
</ul>
<p>我先通过 <code>ssh</code> 连接到 A 这台机器上，我想把 <code>/tmp/a.txt</code> 这个文件，传输到 B 这台机器上的 <code>/tmp</code> 文件夹中，我可以用这个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /tmp/a.txt root@192.168.1.5:/tmp</span><br></pre></td></tr></table></figure>

<p>这里我是用 root 这个身份登录 B 这台机器。而且用的是 <code>22</code> 这个默认端口，如果机器的 ssh 是使用其它端口，得用 -p 这个参数。变成这样</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp -p <span class="number">6655</span> /tmp/a.txt root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">5</span><span class="symbol">:/tmp</span></span><br></pre></td></tr></table></figure>

<p>如果传输的是文件夹，则需要加 <code>-r</code> 参数</p>
<h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><p>rsync 是更好的选择，它把整个文件夹复制过去时，可以同步其所有者和用户组，而不需要像 scp 那样复制后再自己用 <code>chown</code> 和 <code>chgrp</code> 去修改。同时它也会同步文件的属性，如创建日期这些信息过去。</p>
<p>使用方法如下</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">rsync -av /tmp/one root<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">5</span><span class="symbol">:/tmp</span></span><br></pre></td></tr></table></figure>

<p>便可以将当前机器的 <code>one</code> 这个文件或者文件夹，传输到 B 这台机器的 <code>/tmp</code> 文件夹下，而且其文件属性不会改变。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人网盘——syncthing</title>
    <url>/2018/05/syncthing/</url>
    <content><![CDATA[<p>syncthing 是一款开源免费的同步工具，而且除了 iOS，其它的平台基本都有客服端可以下载。它的作用是，可以让一个文件夹，在多台设备上保持同步。</p>
<h3 id="一-下载"><a href="#一-下载" class="headerlink" title="一  下载"></a>一  下载</h3><p>到其官网下载对应的客户端：<a href="https://syncthing.net/">官网链接</a>  例如我下载Android版和Ubuntu版 Ubuntu版链接：<a href="https://apt.syncthing.net/">点我</a><br>安卓安装就不用说了，Ubuntu则根据其页面的这段命令输入就行。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">\<span class="comment"># Add the release PGP keys:</span></span><br><span class="line">curl -s https:<span class="regexp">//</span>syncthing.net/release-key.txt | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">\<span class="comment"># Add the &quot;stable&quot; channel to your APT sources:</span></span><br><span class="line">echo <span class="string">&quot;deb https://apt.syncthing.net/ syncthing stable&quot;</span> | sudo tee <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span>syncthing.list</span><br><span class="line"></span><br><span class="line">\<span class="comment"># Update and install syncthing:</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install syncthing</span><br></pre></td></tr></table></figure>
<h3 id="二-运行"><a href="#二-运行" class="headerlink" title="二  运行"></a>二  运行</h3><p>此时在Ubuntu终端输入命令：<code>syncthing</code> 来运行它 等待看到<br><code>GUI and API listening on 127.0.0.1:8384</code><br>同时按<code>ctrl 和 C</code> 来取消命令 运行此命令的目的时为了生成配文件</p>
<h3 id="三-修改"><a href="#三-修改" class="headerlink" title="三  修改"></a>三  修改</h3><p>此时我们即可修改配文件<br><code>vim ~/.config/syncthing/config.xml</code><br>然后找到 <code>127.0.0.1:8384</code> 将之改为 <code>0.0.0.0:8384</code><br>更改方法为找到此处 按键盘的 <code>i</code> 便可以修改，改完按 <code>Esc</code> 退出编辑状态，输入 <code>:wq</code> (保存并退出的意思)</p>
<h3 id="四-配置"><a href="#四-配置" class="headerlink" title="四  配置"></a>四  配置</h3><p>这时就可以输入<code>IP:8384</code> (例如 <code>192.168.123.184:8384</code> )进入管理页面了 我们可以设置账号密码，以免随便他人登录这个界面 点击右上角的 操作 显示ID 将会出现一张二维码，用手机扫描这即可添加关联 然后设置想要同步的文件夹，当两个客户端都运行时就会自动同步</p>
<p>完</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 syncthing 同步多台设备的文件</title>
    <url>/2019/11/syncthing-better/</url>
    <content><![CDATA[<p>又来折腾 syncthing 了，毕竟买了个 10T 的大硬盘，得好好利用起来才行。</p>
<blockquote>
<p>syncthing 是一个跨平台、开源的数据同步工具。它可以让你的文件夹，在多台设备保持同步。</p>
</blockquote>
<h2 id="Syncthing-支持平台"><a href="#Syncthing-支持平台" class="headerlink" title="Syncthing 支持平台"></a>Syncthing 支持平台</h2><p>Syncthing 官方支持 Linux、Windows、OS X、FreeBSD、Solaris 等系统，并且有第三方的 <a href="https://geo.itunes.apple.com/cn/app/fsync/id964427882?mt=8&at=1000l7mq&ct=appinnpost">iOS</a>、<a href="https://play.google.com/store/apps/details?id=com.nutomic.syncthingandroid">Android</a> 应用。</p>
<p>所以利用它，我可以让我手机（Android）的文件，同步到电脑（macOS，Windows）。同时它还可以在 Linux 上用，所以我可以把文件同步到服务器上，也可以同步到刷了<code>小钢炮系统</code>的斐讯 N1 上（系统自带 syncthing）。甚至我可以这些设备全部都使用，确保我的某个文件夹，同步到所有的设备上。（虽然现在没有重要到这样的文件……）</p>
<p>总之，它是一款很强大的软件，并且还免费开源，很了不起。其实我一年半之前就折腾过了 <a href="/2018/05/syncthing/">之前的文章</a> ，不过说来惭愧，当时折腾了一阵子，就没有再使用它了。因为当时的版本是 0.14 ，很多功能还不完善，并且在 Mac 上面，要使用只能<code>二进制执行文件</code>，并没有做出一个 app ，感觉不太方便。不过我的手机上面一直都有保留着它，即使不怎么使用了。</p>
<h2 id="现在的变化"><a href="#现在的变化" class="headerlink" title="现在的变化"></a>现在的变化</h2><p>时间过去这么久，这个应用现在更新了很多次，变得越来越好用了。例如：</p>
<ol>
<li>有 docker 版本，Linux 上安装起来更加方便</li>
<li>Windows 和 macOS 都有了 GUI 版本，使用门槛降低</li>
<li>同步的时候可以选择 仅发送，（而不接收，可以防止对方误操作而导致己方的文件也丢失）</li>
</ol>
<p>可能其它的功能我还没有用到，所以并不能更好地体验这个应用，不过就上面这几点，我就挺满意了。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>在其官网： <a href="https://syncthing.net/">syncthing.net</a> 上面可以看到下载链接，不过都是放在 GitHub 上的，可能得用代理才能下载。</p>
<ul>
<li><strong>Windows</strong> tray utility, filesystem watcher &amp; launcher: <a href="https://github.com/canton7/SyncTrayzor/releases/latest">SyncTrayzor</a></li>
<li><strong>macOS</strong> application bundle: <a href="https://github.com/syncthing/syncthing-macos/releases/latest">syncthing-macos</a></li>
<li><strong>Cross-platform</strong> GUI wrapper: <a href="https://github.com/syncthing/syncthing-gtk/releases/latest">Syncthing-GTK</a></li>
</ul>
<p>安卓手机可以去 Google play 搜索。</p>
<p>我这里主要介绍用 docker 将它装在服务器上面。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run <span class="string">\</span></span><br><span class="line">  --name=syncthing <span class="string">\</span></span><br><span class="line">  -e PUID=<span class="number">1000</span> <span class="string">\</span></span><br><span class="line">  -e PGID=<span class="number">1000</span> <span class="string">\</span></span><br><span class="line">  -e TZ=Asia/Shanghai <span class="string">\</span></span><br><span class="line">  -e UMASK_SET=<span class="number">022</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">8384</span>:<span class="number">8384</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">22000</span>:<span class="number">22000</span> <span class="string">\</span></span><br><span class="line">  -p <span class="number">21027</span>:<span class="number">21027</span>/udp <span class="string">\</span></span><br><span class="line">  -v /home/syncthing/appdata/config:/config <span class="string">\</span></span><br><span class="line">  -v /home/syncthing/data1:/data1 <span class="string">\</span></span><br><span class="line">  -v /home/syncthing/data2:/data2 <span class="string">\</span></span><br><span class="line">  --restart <span class="keyword">unless</span>-stopped <span class="string">\</span></span><br><span class="line">  linuxserver/syncthing</span><br></pre></td></tr></table></figure>

<p>这里开放的 webUI 端口为 8384，所以启动成功后到浏览器输入 <code>IP:8384</code> 即可进入管理界面。因为我们是在服务器上使用，一定要设置用户，不然别人随便输入你的 IP:8384 就可以来管理你的设备了，很不安全。如果是在家里使用的话，例如群晖，或者和我一样使用 小钢炮 ，那不用设置也没多大问题。</p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>这里的添加用户，可以理解成和微信的添加好友相似。两台设备需要添加好友了才能互相发送文件，而要添加可以使用 <strong>二维码</strong> ，也可以使用 <strong>ID</strong> 。这里我以服务器作为被添加的设备。</p>
<p>点击右上角的 【操作】➡️【显示 ID 】即可看到。如果手机想添加这台设备，打开应用后，向左滑来到设备这里，点右上角的 ➕ ，然后点击二维码就可以扫码了。如果是电脑，就只能用 ID 的方式来添加了。点右下角的【添加远程设备】然后输入服务器的 ID 即可。</p>
<h2 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h2><p>这里我以手机文件同步到服务器为例。在手机上向右滑来到左边的 文件夹 这里。点击右上角的 ➕ 。文件夹标签可以随便起，目录选择要同步的文件夹，要同步到哪台设备，就把那台设备的开关打开。这样手机端的设置就完成了。</p>
<p>然后过一会服务器的就会收到通知，我们可以在浏览器的 webUI 里看到，提示某某人分享一个某某文件夹给你，是否接受。接受时可以设置要把这个文件夹放在哪里。</p>
<p>这样设置好后，就只需要等待了，手机会慢慢地把文件上传到服务器里。因为这个应用是使用 端–端 加密的，所以不用怕被中间人知道你在传输什么，不过可能也是因为这个原因吧，感觉传输的速度不是那么快，最高好像只能达到 2M/s 。</p>
<p>当然这个过程也是可以反过来的，把服务器的文件同步到手机上。</p>
<p>我本来是打算尝试一下，把服务器里 qbittorrent 下载好的文件，利用这个应用取回手机。但是，速度实在太慢了，虽然最大时能有 2M/s ，但是大部分时间都是几百 k 的速度。如果设置成服务器下载完，让它同步到我的小钢炮里面就还行，毕竟两台设备都是 24 小时开机。但是手机就没必要了，非要把文件取回手机，我还是选择开启一个临时的 HTTP 服务。</p>
<h2 id="暂时我的使用方案"><a href="#暂时我的使用方案" class="headerlink" title="暂时我的使用方案"></a>暂时我的使用方案</h2><p>我目前的使用有两个</p>
<ol>
<li>把手机的微信下载内容，同步到小钢炮。</li>
<li>把手机里用 vue 这个软件拍的视频，同步到电脑（用于在电脑剪辑）</li>
</ol>
<p>以后想到其它玩法再来更新。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 vim 报错</title>
    <url>/2020/10/vim-error/</url>
    <content><![CDATA[<p>vim 是我在 Linux 上面最常用的编辑器，如果想要更好地使用它，需要对它进行一些设置。具体的方法是修改用户目录下的 <code>.vimrc</code> ，默认情况下需要自己创建这个文件。</p>
<p>在里面添加这些设置，下次打开 vim 就能看到效果。例如（ <code>&quot;</code> 是注释符号）</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span> <span class="comment">&quot;显示行数</span></span><br><span class="line"><span class="keyword">set</span> showmatch <span class="comment">&quot;显示匹配的括号([&#123;和&#125;])</span></span><br><span class="line"><span class="keyword">set</span> hlsearch <span class="comment">&quot;高亮显示搜索的内容</span></span><br><span class="line"><span class="comment">&quot;...</span></span><br></pre></td></tr></table></figure>

<p>但是我有很多台 Linux 设备，每一台都自己去写一遍配置就太累了吧。于是我想把这个文件放在 gitee 上（ GitHub 有时连接不太上），之后其它的机器，只需要把这个文件下载下来即可。当然我还想放一些其它的配置，所以我新建一个 dotfiles 仓库，在里面放一些配置文件。</p>
<p>我直接在 gitee 上面新建仓库，用 readme 初始化，然后新建文件，将 vim 配置复制粘贴进去。</p>
<p>此时我在新设备上，就不只是单纯下载 <code>.vimrc</code> 这个文件了，我把整个 dotfiles 仓库克隆的 <code>/home</code> 目录下。然后用软链接的方式，将用户目录下的 <code>.vimrc</code> 指向 <code>/home/dotfiles/.vimrc</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /home/dotfiles/.vimrc ~/.vimrc</span><br></pre></td></tr></table></figure>

<p> 之后如果我这个仓库更新了，我直接在 <code>/home/dotfiles/</code> 这个目录下用 <code>git pull</code> 更新即可。</p>
<p>但是这时我发现用 vim 报错了，每次使用都会输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error detected while processing /root/.vimrc:</span><br><span class="line">line    3:</span><br><span class="line">E474: Invalid argument: encoding=utf-8^M</span><br><span class="line">line    8:</span><br><span class="line">E488: Trailing characters: number^M</span><br><span class="line">line    9:</span><br><span class="line">E488: Trailing characters: wildmenu^M</span><br><span class="line">line   10:</span><br><span class="line">E488: Trailing characters: autoread^M</span><br><span class="line">line   11:</span><br><span class="line">E488: Trailing characters: autoindent^M</span><br><span class="line">line   13:</span><br><span class="line">E474: Invalid argument: tabstop=4^M</span><br><span class="line">line   14:</span><br><span class="line">E539: Illegal character &lt;^M&gt;: mouse=a^M</span><br><span class="line">line   15:</span><br><span class="line">E492: Not an editor command: ^M</span><br><span class="line">line   18:</span><br><span class="line">E15: Invalid expression: has(&quot;autocmd&quot;)                                                          ^M</span><br><span class="line">line   22:</span><br><span class="line">E171: Missing :endif</span><br><span class="line">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure>

<p>看来关键错误在于 ^M ，Google 一下，很快就发现问题所在了。因为用 gitee 创建的文件，使用的 <code>fileformat</code> 是 dos ，为了验证这个，我后来又在 gitee 创建一个 <code>.alias</code> 文件，拉取到 Linux 后，用 vim 打开这个文件，后看到底部显示</p>
<blockquote>
<p>“.alias” [noeol] [dos] 3L, 68C</p>
</blockquote>
<p>也可以使用 <code>set ff?</code> 命令来查看，在默认状态下，输入 <code>:</code>，再输入这条命令即可看到。</p>
<p>知道问题所在了，解决方法也很简单，用 vim 打开这个文件，将 <code>fileformat</code> 改为 <code>unix</code> 即可。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="builtin-name">set</span> <span class="attribute">ff</span>=unix</span><br></pre></td></tr></table></figure>

<p>保存，退出。</p>
<p>此时 vim 就可以正常读取配置文件了。但是这么搞也不是办法啊，每台设备都去转换一下格式？那也够累的。于是我尝试在 GitHub 上创建文件看看，结果发现直接在 GitHub 网页上面创建的文件，<code>fileformat</code>  默认就是 <code>unix</code> ，看来还是切换到 GitHub 吧。</p>
<p>项目：<a href="https://github.com/powersee/dotfiles.git">https://github.com/powersee/dotfiles.git</a></p>
<p><code>.alias</code>文件也可以像 <code>.vimrc</code> 那样软链接到用户目录下，也可以不用，在 <code>.zshrc</code> or <code>.bashrc</code> 中，添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /home/dotfiles/.alias</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<p>这个的作用是自定义一些命令，少打些字。例如用 d 代替 docker，用 di 代替 docker images 。</p>
<p>完</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>BT挂机利器 transmission docker 安装法</title>
    <url>/2019/09/transmission-docker/</url>
    <content><![CDATA[<p>本文主要介绍如何在服务器上安装 docker，并安装 transmission 来下载 BT 种子任务。并且取回本地。</p>
<blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p>
</blockquote>
<p>上次已经用 docker 安装了 qbittorrent，这是一个非常强大的 BT 软件，我个人是非常喜欢的。但是，它占的内存比较大，如果服务器还要做一些其它的工作，用这个可能就不太合适了。</p>
<p>于是， transmission 是一个不错的选择。它对硬件的配置要求非常的低，甚至在路由器上面都可以运行。</p>
<blockquote>
<p>这次使用一台纯净系统的服务器来装。</p>
</blockquote>
<h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-transmission"><a href="#安装-transmission" class="headerlink" title="安装 transmission"></a>安装 transmission</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run -d <span class="string">\</span></span><br><span class="line">--restart=always <span class="string">\</span></span><br><span class="line">--name transmission <span class="string">\</span></span><br><span class="line">-v /home/tr/torrents:/to_download <span class="string">\</span></span><br><span class="line">-v /home/tr/download:/output <span class="string">\</span></span><br><span class="line">-p <span class="number">9091</span>:<span class="number">9091</span> <span class="string">\</span></span><br><span class="line">-p <span class="number">51413</span>:<span class="number">51413</span> <span class="string">\</span></span><br><span class="line">-e USERNAME=admin <span class="string">\</span></span><br><span class="line">-e PASSWORD=admin <span class="string">\</span></span><br><span class="line">jaymoulin/transmission</span><br></pre></td></tr></table></figure>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>输入 IP:9091 即可进入 transmission 的管理界面</p>
<blockquote>
<p>由于未知原因，现在创建好 transmission 这个容器之后，在输入用户名和密码那里，会一直被卡住，点登录之后还是让你再输入，完全无法进入……</p>
</blockquote>
<blockquote>
<p>这不是最重要的问题，问题是，我发现我输入账户密码后，无法进入界面。然而，我直接什么都不输入，按回车，却可以进入……<br>为了确认，我还专门有手机流量试一下，发现确实，什么都不输入就可以进入……所以看重安全的朋友还是不要用这个 transmission 容器了。</p>
</blockquote>
<p>下载后的文件是保存在 <code>/home/tr/download</code> 这个路径下的</p>
<p>想要取回本地，可以和上一篇文章一样，安装 caddy ，或者也可以使用 FTP 的方法。</p>
<h3 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h3><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。这里推荐两个方案：</p>
<h2 id="一、h5ai"><a href="#一、h5ai" class="headerlink" title="一、h5ai"></a>一、h5ai</h2><p>一行命令即可，最简单</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">8055</span>:<span class="number">80</span> -v /home/tr/download:/h<span class="number">5</span>ai --name h<span class="number">5</span>ai ilemonrain/h<span class="number">5</span>ai:full -d</span><br></pre></td></tr></table></figure>
<p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容</p>
<h2 id="二、caddy"><a href="#二、caddy" class="headerlink" title="二、caddy"></a>二、caddy</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ToyoDAdoubi/</span>doubi<span class="regexp">/master/</span>caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>
<p>写入配置</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="comment">&quot;:80 &#123;  </span></span><br><span class="line"> root /home/<span class="keyword">tr</span></span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> <span class="keyword">browse</span>  </span><br><span class="line">&#125;<span class="comment">&quot; &gt; /usr/local/caddy/Caddyfile</span></span><br></pre></td></tr></table></figure>
<p>启动 caddy</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d/caddy start</span><br></pre></td></tr></table></figure>
<p>开放服务器 80 端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ufw</span> <span class="literal">allow</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>玩客云第二版固件说明</title>
    <url>/2021/02/wankeyun-2/</url>
    <content><![CDATA[<p>玩客云第二版固件已经发布。</p>
<p><img src="/img/2021/wky-2.jpg" alt="wky-2"></p>
<p>下载链接和上一版一样。</p>
<p>固件和刷机工具下载链接</p>
<p>链接：<a href="https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA">https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA</a><br>提取码：6666 </p>
<p>固件天翼云盘分流：<a href="https://cloud.189.cn/t/eYfInuiuYFja">https://cloud.189.cn/t/eYfInuiuYFja</a></p>
<p>解压出来，名字是 <code>Armbian_s805_powersee_2021-01-31.img</code>  </p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>第二版的介绍已发布视频到 B站</p>
<p><a href="https://www.bilibili.com/video/BV1kT4y1P7RL?p=5">https://www.bilibili.com/video/BV1kT4y1P7RL?p=5</a></p>
<hr>
<p>博客用来作为补充和方便大家查询。</p>
<p>第二版更改了 led。开机后，灯自动熄灭，但是网口的灯是亮着的，而且一般网口两个灯都是亮着的。</p>
<p><img src="/img/2021/2021-02-02_19-29-14.jpg" alt="2021-02-02_19-29-14"></p>
<p>可以通过这来判断机器有没有进入U盘中的系统。</p>
<p>qbittorrent 使用原生安装，而不使用 docker 了。并且默认下载路径设置为 <code>/mnt</code> ，下载之前请注意网页底部显示的 <code>剩余磁盘空间</code> 。</p>
<p>添加了 Aria2 ，使用的是 P3TERX 大佬制作的<a href="https://github.com/P3TERX/aria2.sh">一键脚本</a>安装的。rpc 密钥是：12345</p>
<p>启动：<code>/etc/init.d/aria2 start</code> | <code>service aria2 start</code></p>
<p>停止：<code>/etc/init.d/aria2 stop</code> | <code>service aria2 stop</code></p>
<p>重启：<code>/etc/init.d/aria2 restart</code> | <code>service aria2 restart</code></p>
<hr>
<p>smb 添加多一个共享文件夹 <code>mnt-rw</code> ，访问路径依然是 <code>/mnt</code> ，这个文件夹需要账号密码才可以访问，账号 <code>root</code>，密码 <code>1234</code> </p>
<hr>
<h3 id="led-灯的控制"><a href="#led-灯的控制" class="headerlink" title="led 灯的控制"></a>led 灯的控制</h3><p>开机之后，系统会执行 <code>ledoff blue</code> 来关闭灯光。</p>
<p>如果想自己控制灯光，可以用 <code>ledon blue</code> 来打开蓝灯。打开绿灯就是 <code>ledon green</code>，红灯 <code>ledon red</code> 。关闭的话，就是将 <code>ledon</code> 换为 <code>ledoff</code></p>
<p>如果想要在 python 脚本中控制它，可以这样用</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.system(<span class="string">&quot;ledon green&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>来自 B友 @<strong>猫肆音Moshin</strong> 反馈的问题：</p>
<blockquote>
<p>我反映一个玩客云1.3板子刷第二版固件无法网页启动的解决方法。<br>我试了U盘读卡器TF卡好几个，面板灯不亮，网口只一个灯闪后一直没法进入网页。<br>后来发现一个不识别网络设备MAC是123456789ABC，直接用xshell连接IP成功，然后写入emmc后就可以正常进入网页了。</p>
</blockquote>
<p>我简单的复述一下，就是玩客云其实已经获取到 ip 了，但是在路由器里面，它的设备名没有被路由器正确识别到，所以可以通过 mac 地址来判断新增加的 ip 是否为玩客云的。</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p>1、<a href="https://www.right.com.cn/forum/thread-2881296-1-1.html">https://www.right.com.cn/forum/thread-2881296-1-1.html</a></p>
<p>2、<a href="https://github.com/P3TERX/aria2.sh">https://github.com/P3TERX/aria2.sh</a></p>
<p>3、<a href="https://github.com/qbittorrent/qBittorrent/wiki">https://github.com/qbittorrent/qBittorrent/wiki</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>我家云设置贴吧自动签到</title>
    <url>/2020/03/wjy-python/</url>
    <content><![CDATA[<p>需要先安装pip</p>
<p>对于 Python3.x 的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install python3-pip</span><br></pre></td></tr></table></figure>

<p>装好后用 pip3 来装 requests 这个模块</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> requests</span><br></pre></td></tr></table></figure>

<p>之后我们就可以到 github 上面拉取 tieba 签到脚本了。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/powersee/</span>some-scripts<span class="regexp">/master/</span>baidutieba_signin.py</span><br></pre></td></tr></table></figure>

<p>然后需要填写 cookie ，之后就能用 Python 来运行这个脚本了。</p>
<p><img src="/img/2020/firefox-cookie.jpg" alt="firefox-cookie"></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> baidutieba_signin.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>一切顺利的话，就看到签到信息了。但是这还不够，我想让它每天自动执行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>之后会让你选择编辑器，默认是使用 nano ，这个比较容易使用。也可以选择第二个 vim 。当然这里选后不喜欢，可以用 select-editor 这个命令来重新选择。</p>
<p>进入编辑器后，在里面添加这一行，就可以在每天的 7 点和 8 点，自动执行这个脚本去签到，然后将输出的信息，保存在 /root/tieba.log 这个文件里。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">7</span>,<span class="number">8</span> * * * python3 /root/baidutieba_signin.py &gt;&gt; /root/tieba.<span class="keyword">log</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>沦为废铁的玩客云还能拿来干什么？</title>
    <url>/2020/11/wankeyun-flash/</url>
    <content><![CDATA[<h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>玩客云原本的系统是 Android ，想要刷成 Linux 需要使用双公头 USB 线连接电脑，进行线刷。</p>
<p>而且似乎还不是直接连接就能刷，需要拆机，短接主板上的两个点。</p>
<p><img src="/img/2020/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%9F%AD%E6%8E%A5.png" alt="玩客云短接"></p>
<p>我的刷机步骤是先连接双公头 USB 线，然后用镊子按住主板上的两个短接点，电脑打开 USB Burning Tool ，然后玩客云通电。</p>
<p><img src="/img/2020/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7%E6%9C%BA%E6%A8%A1%E5%BC%8F.png" alt="玩客云刷机模式"></p>
<p>虽然网上也能找到可以直接线刷的 armbian 固件，不过我个人还是喜欢先线刷 s805_flash_snail.img 这个镜像。刷入这个之后，玩客云便可以从 U 盘启动系统，因此只要你有多个 U 盘，便可以拥有多个系统。更多的系统镜像可以到 <a href="https://www.right.com.cn/forum/forum-175-1.html">恩山</a> 上找。</p>
<p>我目前使用的固件是 <a href="https://www.right.com.cn/forum/thread-4057492-1-1.html">Armbian 20.10 Buster with Linux 5.9.0-rc7 hdmi docker可用</a> ，先用 U 盘运行，没什么问题之后，再执行 <code>/boot/install/install.sh</code> 将固件写入 emmc 。</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>既然刷入了 armbian 了，那它可以和 N1 一样来使用吗？并不能，因为玩客云的 cpu 是 32 位的 ，能用的 docker 镜像相比于 N1 这种 64 位的，会少很多。</p>
<p>在 docker hub 上面搜镜像时，可以注意一下那些有标 arm 的才可以用。</p>
<p>玩客云安装 docker 也比较简单，可以直接在终端中输入</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">armbian-config</span><br></pre></td></tr></table></figure>

<p>来安装 docker 、samba、transmission 等应用。</p>
<p>不过有时候好像会装不了，可以试一下用</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> docker.io</span><br></pre></td></tr></table></figure>

<p>想知道有没有安装成功，可以用这个命令</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span></span><br></pre></td></tr></table></figure>

<p>我在玩客云上面尝试了这些 docker 镜像。</p>
<h3 id="1、博客——typecho"><a href="#1、博客——typecho" class="headerlink" title="1、博客——typecho"></a>1、博客——typecho</h3><p>typecho 是一款国产的 php 博客系统，开源免费，占用资源少，我个人挺喜欢的。不过之前灯大制作的 typecho 镜像不能用在玩客云上，我重新找了一个。</p>
<p>建议自己建立一个文件夹，用来存放 typecho 的相关文件，方便管理以及以后迁移。我建立在 /root/tyepcho</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/root/</span>tyepcho</span><br></pre></td></tr></table></figure>

<p>然后便可以建立容器了</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">80</span><span class="symbol">:</span><span class="number">80</span> --name typecho -v <span class="string">&quot;/root/tyepcho&quot;</span><span class="symbol">:/var/www/html</span> yangxuan8282/<span class="symbol">typecho:</span>php-arm</span><br></pre></td></tr></table></figure>

<p>此时便可以通过 ip 访问在玩客云里面建立好的博客。</p>
<h3 id="2、aria2"><a href="#2、aria2" class="headerlink" title="2、aria2"></a>2、aria2</h3><p>这是一个多线程的下载器，也是开源免费的，我们可以使用它来下载一些东西。</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -<span class="ruby">-name aria2-pro \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-log-opt max-size=1m \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-network host \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e PUID=<span class="variable">$UID</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e PGID=<span class="variable">$GID</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e RPC_SECRET=<span class="number">12345</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e RPC_PORT=<span class="number">6800</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e LISTEN_PORT=<span class="number">6888</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">v ~<span class="regexp">/aria2-config:/config</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">v /home/<span class="symbol">powersee:</span>/downloads \</span></span><br><span class="line"><span class="ruby"></span>    p3terx/aria2-pro</span><br></pre></td></tr></table></figure>

<p>我将下载的文件存放在 <code>/home/powersee</code> 中，之后只需要将这个文件夹通过 smb 共享出来，便可以在电脑、手机上面访问里面的内容了。</p>
<p>此时 aria2 已经在运行了，但是默认情况下，只能使用命令行的方式控制它，这种比较麻烦了。大多数人还是使用网页的来控制的。使用人数比较多是 AriaNg<strong>（如果有打算装浏览器插件的，这部分可以不看）</strong></p>
<p><a href="https://github.com/mayswind/AriaNg">https://github.com/mayswind/AriaNg</a></p>
<p>官方有提供 demo</p>
<p><a href="http://ariang.mayswind.net/latest">http://ariang.mayswind.net/latest</a></p>
<p>访问后添加自己的 aria2 rpc 即可控制 aria2 。其实这个控制面板就是一个 html 网页，可以自己把它下载到电脑上，双击打开就可以。在 GitHub 的 release 中可以下载，同时我也把它上传到网盘里面，方便无法从 GitHub 下载的朋友。（在【不仅限于盒子】——【玩客云】）里面。</p>
<p><strong>浏览器插件</strong></p>
<p>Aria2 还可以接管浏览器的下载，例如下载网盘的内容，这个以前百度网盘还可以轻松突破限速的时候，Aria2 经常被用在这方面。</p>
<p>用 chrome 的可以到商店下载 Aria2 for chrome 这个扩展插件。</p>
<p>用新版 Edge 的，可以到商店下载 Aria2 for edge</p>
<p><a href="https://microsoftedge.microsoft.com/addons/detail/aria2-for-edge/jjfgljkjddpcpfapejfkelkbjbehagbh?hl=zh-CN">https://microsoftedge.microsoft.com/addons/detail/aria2-for-edge/jjfgljkjddpcpfapejfkelkbjbehagbh?hl=zh-CN</a></p>
<p>使用这个插件，可以让平时用浏览器下载的文件，发送到 aria2 下载，很 idm 很像，都是多线程下载工具，很多时候可以让下载速度快一些。</p>
<p>但是 idm 只能在 windows 上面使用，而 aira2 大多数平台都可以安装，这样有一个好处，就是假如我的 aria2 是安装在 LInux 服务器上的，例如 N1 、我家云、贝壳云、玩客云 这样的设备上面，那么当我下载速度非常慢的资源，例如没有开会员的百度网盘文件，或者城通网盘文件。我可以将下载发送到 Linux 服务器后，电脑就可以关机了，让任务在 Linux 服务器上面慢慢下载就行。</p>
<h3 id="3、verysync"><a href="#3、verysync" class="headerlink" title="3、verysync"></a>3、verysync</h3><p>这是一个同步工具，这里使用 docker 来安装</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">back_path=/mnt/verysync</span><br><span class="line">docker run -d \</span><br><span class="line">-<span class="ruby">-restart=<span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">-name verysync \</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">v <span class="variable">$back_path</span><span class="symbol">:/data</span> \</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby">p <span class="number">8886</span><span class="symbol">:</span><span class="number">8886</span> \</span></span><br><span class="line"><span class="ruby"></span>unwenliu/verysync:armv7</span><br></pre></td></tr></table></figure>

<p>请将里面的 <code>/mnt/verysync</code> 修改为你自己的</p>
<h3 id="4、transmission"><a href="#4、transmission" class="headerlink" title="4、transmission"></a>4、transmission</h3><p>这是一个轻量级的 BT 下载工具，有些路由器里面也有内置它，可见其轻量</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run <span class="string">\</span></span><br><span class="line">    -d <span class="string">\</span></span><br><span class="line">    --name transmission <span class="string">\</span></span><br><span class="line">    -p <span class="number">9091</span>:<span class="number">9091</span> <span class="string">\</span></span><br><span class="line">    -p <span class="number">51413</span>:<span class="number">51413</span> <span class="string">\</span></span><br><span class="line">    -v /mnt/tr_data:/data <span class="string">\</span></span><br><span class="line">    -e USERNAME=admin <span class="string">\</span></span><br><span class="line">    -e PASSWORD=admin <span class="string">\</span></span><br><span class="line">    gists/transmission</span><br></pre></td></tr></table></figure>

<p>这里我装了 3.0 版，如果想装 2.94 ，可以将最后一行后面添加标签 <code>:2.94</code> ，变成</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run <span class="string">\</span></span><br><span class="line">    -d <span class="string">\</span></span><br><span class="line">    --name transmission <span class="string">\</span></span><br><span class="line">    -p <span class="number">9091</span>:<span class="number">9091</span> <span class="string">\</span></span><br><span class="line">    -p <span class="number">51413</span>:<span class="number">51413</span> <span class="string">\</span></span><br><span class="line">    -v /mnt/tr_data:/data <span class="string">\</span></span><br><span class="line">    -e USERNAME=admin <span class="string">\</span></span><br><span class="line">    -e PASSWORD=admin <span class="string">\</span></span><br><span class="line">    gists/transmission:<span class="number">2.94</span></span><br></pre></td></tr></table></figure>

<h3 id="5、qbittorrent"><a href="#5、qbittorrent" class="headerlink" title="5、qbittorrent"></a>5、qbittorrent</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -d \</span><br><span class="line">  <span class="attribute">--name</span>=qbittorrent \</span><br><span class="line">  -e <span class="attribute">PUID</span>=1000 \</span><br><span class="line">  -e <span class="attribute">PGID</span>=1000 \</span><br><span class="line">  -e <span class="attribute">TZ</span>=Aisa/Shanghai \</span><br><span class="line">  -e <span class="attribute">WEBUI_PORT</span>=8080 \</span><br><span class="line">  --network host \</span><br><span class="line">  -v /opt/docker/qb/config:<span class="built_in">/config </span>\</span><br><span class="line">  -v /mnt/qb_downloads:/downloads \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  ghcr.io/linuxserver/qbittorrent</span><br></pre></td></tr></table></figure>



<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>后来我还在上面安装了 nginx 和 php ，可以搭建一些简单的网站。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> nginx php-fpm</span><br></pre></td></tr></table></figure>

<p>想让 nginx 可以解析 php 网页，需要修改 <code>/etc/nginx/sites-enabled/default</code> 这个配置文件。</p>
<p>默认情况下，nignx 的站点文件位置在 <code>/var/www/html/</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>今天是520</title>
    <url>/2018/05/today-is-520/</url>
    <content><![CDATA[<p>昨晚成功弄好了企业邮箱，这样以后就拥有了带自己域名的邮箱，而且随意注册，哈哈</p>
<p>下午成功的弄好了之前弄了好多次都没弄好的个人 wordpress 网站，虽然有点久，不过总算弄好了。</p>
<p>然而现在我是把文章都复制一份到 hexo 这里来了。时隔不到两个月。已经折腾了许多。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 修改默认终端</title>
    <url>/2021/07/vscode-change-default-terminal/</url>
    <content><![CDATA[<p>vscode 默认新建终端的话，开启的是一个 cmd 的 shell，如何将它改为其它的呢？例如 powershell。</p>
<p>首先点击左下角的进入设置，也可以用快捷键 <code>ctrl + ,</code> </p>
<p>点击【功能】，【终端】，修改如下图两个地方即可。</p>
<p><img src="/img/2021/vscode-settings.jpg" alt="vscode-settings"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>玩客云导航固件使用说明</title>
    <url>/2021/01/wankeyun-server/</url>
    <content><![CDATA[<h3 id="玩客云乱七八糟的坑"><a href="#玩客云乱七八糟的坑" class="headerlink" title="玩客云乱七八糟的坑"></a>玩客云乱七八糟的坑</h3><p>搞了一个腾讯文档，懒得复制过来了，已经设置了任何人都可以访问，可以在里面看看有没有适合自己的解决方案。</p>
<p><a href="https://docs.qq.com/doc/DWkhNSmRuQld0UEd0">https://docs.qq.com/doc/DWkhNSmRuQld0UEd0</a></p>
<h3 id="为什么我的主板和你不一样？"><a href="#为什么我的主板和你不一样？" class="headerlink" title="为什么我的主板和你不一样？"></a>为什么我的主板和你不一样？</h3><p>有些小伙伴看了视频，非常激动地跑去买玩客云，买来拆开后却发现，怎么和视频里的不一样呢？难道是被坑了？</p>
<p>其实不用慌，这是因为玩客云有分两版，我视频里展示的是老版，它的短接点是在主板的背面。</p>
<p><img src="/img/2020/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%9F%AD%E6%8E%A5.png" alt="玩客云短接"></p>
<p>另外还有一款新版，短接点是在正面。</p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%96%B0%E7%89%88%E7%9F%AD%E6%8E%A5%E7%82%B9.jpg" alt="玩客云新版短接点"></p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%96%B0%E7%89%88%E7%9F%AD%E6%8E%A5%E7%82%B945.jpg" alt="玩客云新版短接点45"></p>
<p>刷机方式一样的。</p>
<h3 id="为什么没有进入-U-盘中的系统？"><a href="#为什么没有进入-U-盘中的系统？" class="headerlink" title="为什么没有进入 U 盘中的系统？"></a>为什么没有进入 U 盘中的系统？</h3><p>如果你发现 led 灯每隔几秒就闪一下，那可能是你 U 盘没有插在靠近网口的 USB 口。</p>
<p><img src="/img/2021/wky-usb-1613448634572.png" alt="wky-usb"></p>
<p>如果这样还不行，你可以尝试换一个 U 盘，如果有内存卡加读卡器的话，也可以试试。</p>
<h3 id="总结一下玩客云的优劣"><a href="#总结一下玩客云的优劣" class="headerlink" title="总结一下玩客云的优劣"></a>总结一下玩客云的优劣</h3><p>优点</p>
<ul>
<li>便宜</li>
<li>省电，之前测试过功耗只有 1.5 w 左右</li>
<li>静音，没有风扇，自然不会有噪音</li>
</ul>
<p>缺点</p>
<ul>
<li>性能较弱</li>
<li>cpu 是 32 位的，能用的 docker 镜像有限</li>
<li>usb 2.0 速度慢</li>
</ul>
<p>由于这次视频的播放量还可以，很多没有关注我的观众在评论区里留言，说 N1 、树莓派这些比玩客云强。我当然知道这些比玩客云强啊，因为大多数矿渣设备我都有买，有兴趣的朋友可以去翻翻我以前的视频。</p>
<p>其实不用看参数也能知道 N1 、树莓派 这些比玩客云强，看价格就行呗。N1 现在应该要一百多，树莓派得两百多。所以没什么可比性嘛。</p>
<hr>
<h3 id="固件相关"><a href="#固件相关" class="headerlink" title="固件相关"></a>固件相关</h3><p>2021-01-25</p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%AF%BC%E8%88%AA.jpg" alt="玩客云导航"></p>
<p>固件和刷机工具下载链接</p>
<p>链接：<a href="https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA">https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA</a><br>提取码：6666 </p>
<p>访问导航：直接在浏览器输入 onecloud/ 或者输入玩客云的 ip 地址。</p>
<hr>
<p>文件管理器：账号密码都是 admin</p>
<p>portainer : 账号 admin 密码 powersee</p>
<p>transmission : 账号密码都是 admin</p>
<p>qbittorrent : 账号 admin 密码 adminadmin</p>
<p>ssh ：账号 root 密码 powersee233</p>
<hr>
<p>qiandao 这个容器并没有设置开机启动，如果想启动它，可以在 portainer 中启动，或者通过 ssh 使用</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="literal">start</span> qiandao</span><br></pre></td></tr></table></figure>

<p>来启动。</p>
<p>这个自动签到平台我以前也有做过视频，有兴趣可以去翻翻看。</p>
<hr>
<h3 id="关于-SD-卡"><a href="#关于-SD-卡" class="headerlink" title="关于 SD 卡"></a>关于 SD 卡</h3><p>挂载 SD 卡有一点需要注意，有些卡套可能会有问题。插上去后，可以读取到 disk ，但是读取不到 part ，所以没法挂载。质量好的卡套，应该是可以显示 disk 和 part 的，如下图所示。</p>
<p><img src="/img/2021/%E6%8C%82%E8%BD%BDsd%E5%8D%A1.png" alt="挂载sd卡"></p>
<h3 id="如何挂载硬盘"><a href="#如何挂载硬盘" class="headerlink" title="如何挂载硬盘"></a>如何挂载硬盘</h3><p>其实视频里有讲了，先输入 <code>lsblk</code> 查看一下硬盘连接上没，一般会显示 sda 或者 sdb 这样。</p>
<p>假设显示的是 sda ，那么它下面应该有个 sda1 这个才对。这个 sda1 指的是分区，就像你在电脑上，你添加了一块硬盘，你可能把分为 D、E、F　三个盘。但是它都是属于同一块物理硬盘。而这里的 sda 就是指物理硬盘，你不能挂载它，只能挂载它里面的分区。</p>
<p>所以你应该使用的命令是</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>sda1 /mnt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">mount <span class="regexp">/dev/</span>sdb1 /mnt</span><br></pre></td></tr></table></figure>

<hr>
<p>系统装有 python3 和 pip3，同时我还安装了一个命令行的文件管理器 ranger，在终端输入 <code>ranger</code> 就可以打开这样的界面。</p>
<p><img src="/img/2021/ranger.jpg" alt="ranger"></p>
<p>按 q 退出</p>
<hr>
<h3 id="如何判断有没有刷成功"><a href="#如何判断有没有刷成功" class="headerlink" title="如何判断有没有刷成功"></a>如何判断有没有刷成功</h3><p>其实可以用通过玩客云的 hdmi 来判断，你可以把玩客云连接电视或者显示器。</p>
<p>当你刷好底层包之后，不插U盘，画面会显示这个几秒</p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91mxq.png" alt="玩客云mxq"></p>
<p>然后就没信号几秒，再显示这个画面几秒，再没信号……会这样一直重复。</p>
<p>如果你插上U盘，并且玩客云成功进入 U 盘里的系统，画面就会停留在上面这个图片这里，不会变化了。所以你可以通过这种方法来判断有没有成功进入 U 盘系统。</p>
<hr>
<h3 id="一直线刷失败？"><a href="#一直线刷失败？" class="headerlink" title="一直线刷失败？"></a>一直线刷失败？</h3><p>症状是什么呢？无法刷入 snail 底层包，也无法刷入 emmc 直刷包，线刷最后永远报错。这里有一张网友线刷失败的图片。</p>
<p><img src="/img/2021/wky-fail1.png" alt="wky-fail1"></p>
<p>里面的结果这一列，有好多个 5004。然后最近我收了一台有问题的玩客云，下午线刷，发现也是一堆 5004 的报错。所以我估计，可能报 5004 的，应该就是 emmc 有坏块，毕竟症状一样。</p>
<p>到目前为止，我见识过 4 台设备这样，我自己手上就有一台。唯有一个底层包可以刷，是一个 700多K的 img 包，我将它上传到了网盘。<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> </p>
<p><img src="/img/2021/wky-pan1.png" alt="wky-pan1"></p>
<p>使用这个底层包，可以线刷进去。</p>
<p><img src="/img/2021/wky-%E7%BA%BF%E5%88%B7%E6%88%90%E5%8A%9F.png" alt="wky-线刷成功"></p>
<p>刷这个 700 多k 的底层包，开机是亮绿灯。由于 emmc 损坏，因此系统只能装在 U 盘里面使用。</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ol>
<li><p><a href="https://www.right.com.cn/forum/thread-4057492-1-1.html">https://www.right.com.cn/forum/thread-4057492-1-1.html</a></p>
</li>
<li><p><a href="https://github.com/AragonSnow/qiandao">https://github.com/AragonSnow/qiandao</a></p>
</li>
<li><p><a href="https://github.com/bituplink/OneHtmlNav">https://github.com/bituplink/OneHtmlNav</a></p>
</li>
<li><p><a href="https://www.right.com.cn/forum/thread-4058499-1-1.html">https://www.right.com.cn/forum/thread-4058499-1-1.html</a></p>
</li>
<li><p><a href="https://www.right.com.cn/FORUM/thread-4066518-1-1.html">https://www.right.com.cn/FORUM/thread-4066518-1-1.html</a></p>
</li>
</ol>
<h3 id="下期内容"><a href="#下期内容" class="headerlink" title="下期内容"></a>下期内容</h3><p>下一个版本会添加的内容</p>
<p>1、网页终端</p>
<p><img src="/img/2021/wky-ttyd.png" alt="wky-ttyd"></p>
<p>2、portainer 中文化</p>
<p><img src="/img/2021/portainer%E6%B1%89%E5%8C%96.png" alt="portainer汉化"></p>
<p>3、添加控制 led 功能</p>
<p>默认情况下，开机后会一直亮蓝灯。其实没什么用，我打算把这灯利用起来，所以设置了开机进入系统后，灯光会自动关闭。然后这灯就可以跑脚本的时候用。例如用 python 脚本来控制它，让它亮绿灯之类的。以后再说吧。</p>
<p><img src="/img/2021/wky-green.jpg" alt="wky-green"></p>
<p>4、aria2</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>小米WiFi6路由器--cr660x</title>
    <url>/2021/06/xiaomi-cr660x/</url>
    <content><![CDATA[<ul>
<li>6606 — 联通</li>
<li>6608 — 移动</li>
<li>6609 — 电信</li>
</ul>
<p>配置</p>
<blockquote>
<p>soc mt7621 双核 880mhz</p>
<p>rom 128M</p>
<p>ram 256M</p>
<p>全千兆 1 WAN   3 LAN</p>
<p>支持 WiFi6、mesh</p>
</blockquote>
<p>刷机的难点在于解锁 ssh ，不同于其它的小米路由器，这台解锁需要用到一台 openwrt 路由器来辅助，比较麻烦点。</p>
<p>xqsystem.lua</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">module(<span class="string">&quot;luci.controller.admin.xqsystem&quot;</span>, package.seeall)</span><br><span class="line"></span><br><span class="line">function<span class="meta"> index(</span>)</span><br><span class="line">    local <span class="meta">page</span>   = node(<span class="string">&quot;api&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.target  = firstchild()</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">title</span>   = (<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">order</span>   = 100</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">index</span> = true</span><br><span class="line">    <span class="meta">page</span>   = node(<span class="string">&quot;api&quot;</span>,<span class="string">&quot;xqsystem&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.target  = firstchild()</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">title</span>   = (<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">order</span>   = 100</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">index</span> = true</span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;xqsystem&quot;</span>, <span class="string">&quot;token&quot;</span>&#125;, <span class="meta">call</span>(<span class="string">&quot;getToken&quot;</span>), (<span class="string">&quot;&quot;</span>), 103, 0x08)</span><br><span class="line"><span class="meta">end</span></span><br><span class="line"></span><br><span class="line">local LuciHttp = require(<span class="string">&quot;luci.http&quot;</span>)</span><br><span class="line"></span><br><span class="line">function getTok<span class="meta">en(</span>)</span><br><span class="line">    local result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&quot;code&quot;</span>] = 0</span><br><span class="line">    result[<span class="string">&quot;token&quot;</span>] = <span class="string">&quot;; nvram set ssh_en=1; nvram commit; sed -i &#x27;s/channel=.*/channel=\&quot;debug\&quot;/g&#x27; /etc/init.d/dropbear; /etc/init.d/dropbear start;&quot;</span></span><br><span class="line">    LuciHttp.write_js<span class="meta">on(</span>result)</span><br><span class="line"><span class="meta">end</span></span><br></pre></td></tr></table></figure>

<p>如果会用 vi 的话，自己 ssh 进去之后，创建文件，将内容粘贴进去即可。</p>
<p>不会的话，可以使用 winscp 连接旧路由器，将 <code>xqsystem.lua</code> 文件拖进去，放在这个目录里</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/lua/</span>luci<span class="regexp">/controller/</span>admin/</span><br></pre></td></tr></table></figure>

<p>之后修改修改旧路由器的 ip 地址为 <code>169.254.31.1</code> ，并且把 dhcp 关闭</p>
<p>用浏览器访问：<a href="http://169.254.31.1/cgi-bin/luci/api/xqsystem/token">http://169.254.31.1/cgi-bin/luci/api/xqsystem/token</a></p>


	<script type="text/javascript">
	    function mergeText()
	    {
	        document.getElementById('link1').innerText = 
	        	'http://192.168.10.1/cgi-bin/luci/;stok=' +
	            document.getElementById('stok').value + 
	            '/api/misystem/extendwifi_connect?ssid='+
	            document.getElementById('ssid').value +
	            '&password='+
	            document.getElementById('passwd').value;
	         document.getElementById('link2').innerText = 
	        	'http://192.168.10.1/cgi-bin/luci/;stok=' +
	        	document.getElementById('stok').value + 
	        	'/api/xqsystem/oneclick_get_remote_token?username=xxx&password=xxx&nonce=xxx';
	    }
	</script>
你的 stok         <input type="text" id="stok" onkeyup="mergeText()" /><br/>

你的 wifi 名     <input type="text" id="ssid" onkeyup="mergeText()" /><br/>

你的 wifi 密码 <input type="text" id="passwd" onkeyup="mergeText()" /><br/>

<pre id="link1">填好自动生成链接</pre>

第二个链接

<pre id="link2">填好自动生成链接</pre>




<p>之后使用 winscp 连接小米路由器，将 <code>pb-boot.img</code> 放到 <code>tmp</code> 目录中，接着使用命令将它写入 Bootloader</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">mtd <span class="keyword">write</span> <span class="regexp">/tmp/</span>pb-boot.img Bootloader</span><br></pre></td></tr></table></figure>

<p>到此路由器的原系统就没了，现在断电重启，机器会自动进入 pb-boot ，在浏览器访问 192.168.1.1，可以进入刷机界面，如果要刷 openwrt 的话，需要先刷入 factory.bin 结尾的固件。</p>
<p><img src="/img/2021/cr6608.jpg" alt="cr6608"></p>
]]></content>
      <tags>
        <tag>路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>中兴e8820s路由器</title>
    <url>/2021/07/zte-e8820s/</url>
    <content><![CDATA[<p><img src="/img/2021/zte-e8820s.jpg" alt="zte-e8820s"></p>
<p>参考帖子：<a href="https://www.right.com.cn/forum/thread-4046951-1-1.html">中兴8820S与8820V2比较及TTL刷机</a></p>
<p>相关文件：</p>
<p>网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a><br>个人下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top</a></p>
<p>padavan 固件下载：<a href="https://opt.cn2qq.com/padavan">https://opt.cn2qq.com/padavan</a></p>
<p>选择 ZTE_E8820S 开头的</p>
<p>这台路由器想刷机的话，需要自己焊接针脚。</p>
<p><img src="/img/2021/e8820s-ttl.jpg" alt="e8820s-ttl"></p>
<p>我使用的模块是 CH340</p>
<p><img src="/img/2021/e8820s-ttl2.jpg" alt="e8820s-ttl2"></p>
<p>软件的选择有很多，可以用 putty，也可以用 xshell。</p>
<ul>
<li>连接上之后，使用账号密码进行登录。</li>
<li>之后将 breed 放在 U 盘中，插入路由器</li>
<li>路由器进入 U 盘所在目录</li>
<li>备份原系统</li>
<li>写入 breed</li>
<li>重启</li>
</ul>
<p><img src="/img/2021/command-zte.png" alt="14.command-zte"></p>
]]></content>
      <tags>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>我家云相关</title>
    <url>/2020/03/wojiayun/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我家云，又名掉盘云，众多矿渣中的一款。其配置还算不错，但由于有一个严重的缺点——掉盘，即机器内的硬盘时不时地，就自动断开连接，导致获得【掉盘云】这个荣称。也因此而难以获得垃圾佬们的芳心，二手价格长期维持在百元以下。</p>
<p>不过现今有大佬开发了比较好用的固件，据说很多人解决了掉盘的问题，因此价格开始逐渐上升了。</p>
<p>恩山固件发布贴：<a href="https://www.right.com.cn/forum/thread-976714-1-1.html">粒子云，我家云omv自用备份稳定性佳</a></p>
<p>固件作者：Ride_Wind，<a href="https://www.right.com.cn/forum/space-uid-155217.html">恩山链接</a></p>
<p>博客：<a href="https://blog.windtech.cf/">https://blog.windtech.cf/</a></p>
<h2 id="刷机相关"><a href="#刷机相关" class="headerlink" title="刷机相关"></a>刷机相关</h2><blockquote>
<p>这里放置一个刷机所需工具和固件的备份：<br><a href="https://pan.baidu.com/s/1YTlrbDDN9p11CayfaD6vIQ">https://pan.baidu.com/s/1YTlrbDDN9p11CayfaD6vIQ</a></p>
</blockquote>
<p>【webpad】大佬的刷机教程 <a href="https://www.right.com.cn/forum/thread-341574-1-1.html">联想粒子矿云/我家云 线刷OMV（Open Media Vault），图文教程</a></p>
<p>推荐文章教程：来自 smzdm 的【阿文菌】 <a href="https://post.smzdm.com/p/az50epz5/">我家云 保姆级教程：完美OMV固件</a></p>
<p>第一次刷机如果只显示【发现一个 loader 设备】，可以点击高级功能，里面可以点【进入 maskrom】</p>
<p><img src="/img/2020/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD.png" alt="高级功能"></p>
<p>不过我刷机的时候并不知道这个，我是把机器拆开，然后找一根很短的电线，短接主板后面的两个点。</p>
<p><img src="/img/2020/%E7%9F%AD%E6%8E%A5.jpg" alt="短接"></p>
<p>一手按住，一手通电，机器一启动就自动进入 maskrom 了，然后便可以愉快地刷机，这种方法也是终极的救砖方法。</p>
<h2 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h2><p>乘风大佬的固件，本身就修改好 docker 的镜像源了，因此我们可以直接拉取镜像。</p>
<h3 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v portainer_data:<span class="regexp">/data --restart always portainer/</span>portainer:linux-arm</span><br></pre></td></tr></table></figure>

<h3 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h3><p>自带的 qb 是 4.1.7 ，它好像有个问题，没法通过链接的方式来下载种子。所以我想把它停了，改用 docker 来创建一个最新版的 qb 。</p>
<p>那么我需要先把自带的 qb 的开机自起取消，这个比较容易，改个名字它就不会启动了。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/opt/</span>bin<span class="regexp">/qbittorrent-nox /</span>opt<span class="regexp">/bin/</span><span class="number">1</span>qbittorrent-nox</span><br></pre></td></tr></table></figure>

<p>qb最重要的两个文件夹 <code>.config</code> 和 <code>.local</code> ，自带的 qb 是将其放在 <code>/root</code> 里，如果你使用 docker 版的 qb 后，想保留之前的种子信息，下方的 -v 参数自己修改一下。我就不保留了。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">IMAGE_NAME</span>=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line"><span class="comment">#这里我原本的默认下载路径是 /sharedfolders/wjy/ 你应该改成自己的</span></span><br><span class="line"><span class="attribute">DOWNLOAD_PATH</span>=/sharedfolders/wjy/</span><br><span class="line"><span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"></span><br><span class="line">docker <span class="builtin-name">run</span> -d --name qbittorrent \</span><br><span class="line">        -e <span class="attribute">WEB_PORT</span>=8080 \</span><br><span class="line">        -e <span class="attribute">BT_PORT</span>=8998 \</span><br><span class="line">        -e <span class="attribute">QBT_AUTH_SERVER_ADDR</span>=<span class="variable">$QBT_AUTH_SERVER_ADDR</span> \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:<span class="built_in">/config </span>\</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v <span class="string">&quot;<span class="variable">$DOWNLOAD_PATH</span>&quot;</span>:/downloads \</span><br><span class="line">        -v <span class="string">&quot;<span class="variable">$DOWNLOAD_PATH</span>&quot;</span>:<span class="string">&quot;<span class="variable">$DOWNLOAD_PATH</span>&quot;</span> \</span><br><span class="line">        --mount <span class="attribute">type</span>=tmpfs,destination=/tmp \</span><br><span class="line">        <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br></pre></td></tr></table></figure>

<p>之后可能会出现文件夹权限问题，将会导致 qb 无法启动，给予 777 权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod -R <span class="number">777</span> <span class="regexp">/var/</span>lib<span class="regexp">/qbittorrent/</span></span><br></pre></td></tr></table></figure>

<h2 id="导航相关"><a href="#导航相关" class="headerlink" title="导航相关"></a>导航相关</h2><p>在web导航页面添加或者删除图标，修改 /opt/wwwroot/navi/index.php</p>
<h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><h3 id="查看-CPU-温度"><a href="#查看-CPU-温度" class="headerlink" title="查看 CPU 温度"></a>查看 CPU 温度</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cpu=$(&lt;/sys/<span class="keyword">class</span>/<span class="symbol">thermal</span>/<span class="symbol">thermal_zone0</span>/<span class="symbol">temp</span>)</span><br><span class="line"><span class="symbol">echo</span> &quot;$((<span class="symbol">cpu</span>/<span class="symbol">1000</span>)) <span class="symbol">c</span>&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>最强 shell 非 zsh 莫属</title>
    <url>/2020/03/zsh-note/</url>
    <content><![CDATA[<p>个人比较喜欢 zsh ，特别是自动补全的插件 zsh-autosuggestions ，感觉用了就回不去了。再也无法忍受用以前那些 shell 的各种不便。因此我尽量在常用的设备上安装 zsh ，比如电脑，虚拟机，家里的一堆矿渣设备，国内外的云服务器上。</p>
<p>由于每次的操作都基本一样，所以我之前都是将步骤写在笔记中，用到时就复制粘贴即可。现在将内容整理到博客中，方便有时没法打开笔记，可以通过访问博客来查看。</p>
<p>不同的发行版有不同的包管理工具，安装过程却都差不多，apt install zsh 像这样直接安装即可。</p>
<hr>
<p>下载 oh my zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>可恶的墙，哎，下载不了的使用这个吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/powersee/ohmyzsh/raw/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>下载 zsh-autosuggestions 这个插件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone git:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>不行的话用这行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>tee.com<span class="regexp">/powersee/</span>zsh-autosuggestions.git <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>编辑 .zshrc 启用插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>将 zsh-autosuggestions 添加到插件里，加在 git 后面即可，可以用空格，也可以换行。</p>
<p>然后由于有时连接的设备太多，不太容易分清楚哪一台，所以我喜欢用 <code>ys</code> 这个主题。一般修改第 11 行。</p>
<p>然后对于常用命令，可以用 alias 来自定义，比如找个空白处，写上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> d=<span class="string">&quot;docker&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后重新读取一下配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>此时输入 <code>d info</code> 就等于 输入 <code>docker info</code></p>
<p>如果后期配置文件搞得乱七八糟，或者误删了，可以使用这个来恢复成默认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>蜗牛星际驱动核显，使用 jellyfin 和 qbittorrent</title>
    <url>/2020/06/xingjiwoniu/</url>
    <content><![CDATA[<p>最近入手了一台蜗牛星际，这里记录一些自己踩过的坑。</p>
<h2 id="驱动核显"><a href="#驱动核显" class="headerlink" title="驱动核显"></a>驱动核显</h2><h3 id="如何替换-lzma-文件"><a href="#如何替换-lzma-文件" class="headerlink" title="如何替换 lzma 文件"></a>如何替换 lzma 文件</h3><p>需要用到 pe ，这里我用的是 wepe</p>
<p>将pe系统写入U盘，插入蜗牛的usb口，连接键盘鼠标，开机一直按 del 键，进入bios，在最右边选择U盘，进入 pe。</p>
<p>之后打开桌面的 DG ，选中引导所在的硬盘或者U盘（我的话是将引导放在16G的 msata 硬盘里的）。选择分区1，点右边的浏览文件，可以看到里面有两个文件 <code>extra.lzma</code> 和 <code>extra2.lzma</code> </p>
<p><img src="/img/2020/%E9%A9%B1%E5%8A%A8%E6%A0%B8%E6%98%BE%E9%9C%80%E8%A6%81%E6%9B%BF%E6%8D%A2%E7%9A%84%E6%96%87%E4%BB%B6.jpg" alt="驱动核显需要替换的文件"></p>
<p>将这两个文件替换为网盘中的那两个即可。</p>
<p>网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>可以右键然后选择【复制文件到当前分区】。</p>
<p>然后关机，拔掉 pe U盘，再次进入群晖系统，应该就能驱动核显了。</p>
<h3 id="如何判断已经驱动核显了？"><a href="#如何判断已经驱动核显了？" class="headerlink" title="如何判断已经驱动核显了？"></a>如何判断已经驱动核显了？</h3><p>用 ssh 连接群晖，输入</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ls <span class="regexp">/dev/</span>dri/</span><br></pre></td></tr></table></figure>

<p>如果能够看到 renderD128 就是驱动了。</p>
<h2 id="搭建媒体仓库——-jellyfin"><a href="#搭建媒体仓库——-jellyfin" class="headerlink" title="搭建媒体仓库—— jellyfin"></a>搭建媒体仓库—— jellyfin</h2><p>相比于 plex 和 emby ，jellyfin 的优势是调用硬件转码不用钱。</p>
<p>这里我是使用 docker 来安装的，容器建立时需要有这个命令，才能调用核显</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--device=/dev/dri/renderD128</span><br></pre></td></tr></table></figure>

<h2 id="BT下载器——qbittorent"><a href="#BT下载器——qbittorent" class="headerlink" title="BT下载器——qbittorent"></a>BT下载器——qbittorent</h2><p>用手动安装的 qb ，没法正常在 chrome 浏览器打开，只能在隐身模式下才能打开。所以我采用 docker   的方式来安装。</p>
<p>一开始老是没法设置好 /config 映射到宿主机的文件夹的权限，导致 qb 的 web 界面打开后残缺，而且也没法登录。明明我已经把映射的文件夹权限设置为 everyone 了，还是不行。。。</p>
<p>最后发现最简单的应该是不管 /config 了，只设置 /downloads 的映射就行。就可以正常使用 qb 。</p>
<p>但是，我不喜欢这样的方式，我还是喜欢把 /config 映射到宿主机的文件夹中。所以我采用命令行的方式来建立 docker 容器。</p>
<p>需要先确认文件夹的权限，也可以</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /xxx</span><br></pre></td></tr></table></figure>

<p>来更改文件夹 xxx 的权限。</p>
<p>如果想要 qb 能连接 ipv6 用户的话，得使用 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--network host</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>买了两款品胜路由器</title>
    <url>/2022/01/pisen-router/</url>
    <content><![CDATA[<p>最近从小黄鱼收了台路由器，挺特别的，带耳机孔。</p>
<p>不过我买的是 WPR001N ，这款只有的 WiFi 速率只有 150M，而另外有一款外形和它一样的，但是速率是 300M。</p>
<p><img src="/img/2022/001N.jpg" alt="001N"></p>
<p>原本以为它们就这点区别而已，买来后才发现并不是，区别还是挺多的。</p>
<p>首先它们的外形还有一点不同的，就是 300M 这款是有两个网口的，而我的这款 150M 的，它的网口只有一个。其次它们的型号也不同，我这个是 WPR001N ，而那款是 WPR003N，所以导致了，它们的固件是不通用的。</p>
<p><img src="/img/2022/001N-rj45.jpg" alt="001N"></p>
<p>所以如果你是为了刷机，那么应该多花点钱买 300M 那款。不过其实我个人并不建议买这玩意来刷 openwrt，毕竟它最大的价值是那个 3.5mm 耳机接口，而刷机之后，接口就没法用了。只能作为普通的路由器使用。</p>
<p>但是作为普通路由器，它在目前看来，又太弱了。比它更好的选择有太多了，例如同样百兆的路由器有：斐讯 k2、极路由、小米路由器等等，这些都是几十块就能买到的，而且网上的固件也很多，很容易找。</p>
<p>如果价格升到 50 块，那中兴 e8820s 是一个非常好的选择，千兆，带 USB 接口。</p>
<p>然后说回来，目前我手里的这款，刷机方法教程应该只有恩山的这个帖子：<a href="https://www.right.com.cn/forum/thread-7717621-1-1.html">https://www.right.com.cn/forum/thread-7717621-1-1.html</a></p>
<p>里面并没有提供 breed ，我自己网上搜了下。</p>
<hr>
<p>hackpascal自建的http服务器：<a href="http://breed.hackpascal.net/">http://breed.hackpascal.net/</a></p>
<p>breed 备份下载地址：</p>
<p><a href="https://pan.powersee.top/">https://pan.powersee.top/</a></p>
<p><a href="http://veger.ysepan.com/">http://veger.ysepan.com/</a></p>
<p>在 【路由器】【品胜路由器wrp001N-breed】里面</p>
<hr>
<p>不过目前没找到它可以用的固件，可能得自己去编译才行……</p>
<h3 id="更奇葩的路由器"><a href="#更奇葩的路由器" class="headerlink" title="更奇葩的路由器"></a>更奇葩的路由器</h3><p>后来我又买了品胜的另外一款路由器——净 音 云路由</p>
<p><img src="/img/2022/%E5%93%81%E8%83%9C%E8%B7%AF%E7%94%B1%E5%99%A8.jpg" alt="两款路由器"></p>
<p>这款里面内置风扇，配有海绵，可以用当空气净化器……脑洞非常的大</p>
<p>当然，它同样有音频输出接口，所以可以连接一个音响，然后使用它配套的 APP——Pisen Cloud，使用这个 APP 可以访问到，插在路由器上面的 U 盘，或者移动硬盘中的文件。它这个 APP 应该是相当古老的，在现在的全面屏手机上面使用时，下面的一节是黑的，不显示内容。</p>
<p><img src="/img/2022/pisen_cloud_app.png" alt="APP底部"></p>
<p>我记得下载时官网好像提示要求 Android 版本要在 4.0 及以上。然后我还发现了，这款 APP 似乎完全没要求过权限。如果是其它的 APP，想要获取定位、访问相册、访问手机里的其它文件，手机应该会弹出一个提示权限要求才对。但是这个 APP 完全没有，直接就可以访问了。原来只要保持 APP 兼容旧版本的 Android，就可以无视这些权限要求，还是挺可怕的，陌生 APP 安装要谨慎点。</p>
<p>对了，这款 APP 想要识别到路由器，需要手机连接到【净 音 云路由】的 WiFi 上，同时还要把手机的定位功能打开，这点是 Android 6 之后的要求，可能这个 APP 诞生时 Android 6 还没发布吧，所以它也没有提示什么的。</p>
<p>在 APP 里面的闪电互传里，可以播放手机里面的音乐，点击右上角可以将音乐推送到路由器上，也就可以让连接在路由器上的音响出声。其实它就是 dlna 而且，用 网易云音乐 也可以推送，点击歌词界面的右上角就行。但是手机必须连接在品胜路由器的 WiFi 下才行，才可以识别并推送。如果手机和连接在品胜路由器的上级路由，此时是发现不了 dlna 信号的。</p>
<p><img src="/img/2022/pisen-dlna.jpg" alt="dlna"></p>
<p>总体体验下来，不是什么好东西，并不实用，不建议购买。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>品胜 WPR001N 折腾与刷机</title>
    <url>/2022/01/pisen-wpr001n/</url>
    <content><![CDATA[<p>之前买了台品胜路由器，买来之后系统是有缺陷的，没法进入 web 管理界面，最终没办法，只能刷机，于是刷了个 breed 进去。</p>
<p>但是只有 breed，没有系统固件可以用……所以就放着吃灰了。</p>
<p>今天有网友说可以帮我编译固件，所以又来折腾它了。</p>
<p>因为不知道编译好的固件，刷入后会不会出问题，为了避免待会完全变砖，无法挽回。所以先研究一下怎么 ttl 串口连接。</p>
<p>首先需要拆机，带二维码的为背面，沿着缝隙撬开，有三颗螺丝，拧开后再撬正面的外壳。</p>
<p>主板上面有三个金属接触点，分别是 RXD, TXD, GND</p>
<p><img src="/img/2022/Snipaste_22-01-17_22-14-57.jpg" alt="主板"></p>
<p>一开始我拿杜邦线将它与 CH340G 模块进行连接（GND–GND, TX–RX, RX–TX），我是直接用手按着，然而我还需要接通电源以及操控鼠标，所以一直没法按稳。</p>
<p>没办法，还是拿出了电烙铁，焊点锡上去吧。结果成了这样（其实也没多牢固，不过比用手按着好很多了）</p>
<p><img src="/img/2022/Snipaste_22-01-17_22-18-01.jpg" alt="焊锡好"></p>
<p>之后连接好模块，电脑上可以使用 putty 或者 xshell 来进行串口调试。由于我之前以及刷好 breed 进去了，所以给路由器通电，然后在几秒内按回车键，就可以进入 breed，在浏览器可以通过 <code>192.168.1.1</code> 来访问。</p>
<p>如果不按回车键的话，就会启动闪存中的系统。然后我就发现了，原来我之前刷进去的 openwrt 固件，是可以启动的</p>
<p><img src="/img/2022/2022-01-17_19-04-24.jpg" alt="2022-01-17_19-04-24"></p>
<p><img src="/img/2022/2022-01-17_19-10-16.jpg" alt="2022-01-17_19-10-16"></p>
<p>通过 ttl 我才知道的，不过它的 web 服务和 wifi 都没有开启，系统能启动成功也没什么用。</p>
<p>那么 ttl 连接没问题，就可以来折腾看看了。于是我将 @<strong>大电视姬</strong>  发过来的固件，在 breed 中刷入路由器。</p>
<p>之后路由器自动重启，成功了。</p>
<p><img src="/img/2022/2022-01-17_20-06-28.jpg" alt="2022-01-17_20-06-28"></p>
<p>然后，索然无味……就算刷机成功了，又怎样呢？我又不会去使用它，家里面基本所有路由器都比它强，没什么意思。</p>
<p>固件放到网盘和下载站里，在【路由器】【品胜路由器】中，再次感谢 @<strong>大电视姬</strong></p>
<p>网盘：<a href="http://veger.ysepan.com/">http://veger.ysepan.com/</a></p>
<p>下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>千万别用松鼠记账</title>
    <url>/2022/01/songshujizhang/</url>
    <content><![CDATA[<p>松鼠记账，这是一款记账app，我平时主要用来记录日常支出与收入，使用的时间也不短了。到现在应该有一年多了。</p>
<p>由于我的手机取消了应用商店自动更新 app 的功能，所以一直都是使用旧版本，感觉还不错，没有广告，而且 APP 的推送通知功能，也被我屏蔽了，平时根本不会被打扰到。</p>
<p>有一天，我心血来潮，试着将它的一个权限【读写手机存储】给关闭了，因为这个功能是用来读取手机里的相片，或者内部存储空间的其它文件的。作为一款记账软件，我记账并不需要上传图片，所以我就把它关了。</p>
<p>然后就悲剧了，再次打开软件，所有的记账记录全部丢失了。。。一年多快两年的记录，全部都没了。。。</p>
<p>其实这款软件也是可以注册账号的，登录之后就可以将数据同步在服务器里，不过我之前看到它要求必须用手机号注册才行，就没有注册账号，一直都是单机使用，所以现在数据丢失，也就完全没法找回了，全没了。</p>
<p>那么是因为关闭这个权限，导致软件没法正常运行吗？其实并不是，因为我丢失数据之后，继续关闭这个权限使用，是可以正常用的，这个权限并不是必须的。总之这点我就当作是它的一个 bug 吧，之后我就老老实实用手机号注册一个账号，避免以后又发现数据丢失的情况。</p>
<p>那么就这样使用了一段时间，然后又发生了一件事。我的手机一直提示我，可以升级 miui12.5 稳定版了，快点升级快点升级，但是我不想升级，因为我没看到升级后能给我带来什么新的功能。</p>
<p>然而它也不会放任我不升级，它每天都会给我来一条推送，我想禁止它的通知功能，但是因为【系统升级】是系统级应用，没法禁止。我只能每天都手动把这条升级通知给清除掉。</p>
<p>终于有一天，我忍受不了了，我想砸手机，但是舍不得，所以还是被逼得只能去升级系统了，垃圾 MIUI。</p>
<p>那么回到主线，升级之后，松鼠记账这个 APP 会闪退。那么我想到的是，可能是 APP 版本太老了吧，毕竟我一直没去升级 APP 版本，可能和现在的 MIUI 12.5 有冲突吧。于是我就升级 APP 到最新的。</p>
<p>于是我升级完 APP 回来了，然后我震惊了。现在打开 APP 有开屏广告了，APP 底部多了返利的标签页，记账页面显示开通 VIP 可以无广告，你不开通的话，每记一次帐，就给你弹一次广告。那么就开通 VIP 吧，毕竟人开发一款 APP 也不容易嘛。</p>
<p>价格是多少呢？</p>
<p>11.9 元，每个月，每个月，<strong>每个月</strong></p>
<p>我他妈震惊了，人家 B 站会员，打折的时候一年一百出头，购买后大量动漫、电影、电视剧可以观看。人家百度网盘每年 11 月购买会员有优惠，一年 svip 价格不到 200 ，购买后可以扩大网盘空间，可以高速下载从网上转存的大量资源。</p>
<p>而你一个记账软件，一个月会员费收 12 块，主要作用是去掉记账时的广告…… 我觉得我要是去充值那我肯定就是智障了。而且我也后悔了，升级之前为什么没有看看应用商店里，其它网友的评论呢？要是早看到我肯定不会去升级的。</p>
<p><img src="/img/2022/Screenshot_2022-01-24-13-14-37-156_com.xiaomi.market.jpg" alt="com.xiaomi.market"></p>
<p>不过也好，越早知道它们吃相这么难看，才能够越早转移。于是我开始寻找其它的记账 APP 来替代它。然而我并没有立刻找到，所以暂时还是需要用到它，于是我把这款软件的联网功能禁止了，不能联网它也没广告了，不过每次打开 APP 到可以记账的页面，大概需要 10 秒才行，因为它好像设定了开屏时会定住几秒，用来显示开屏广告，如果没法联网加载广告图片，会停在那里显示 APP 的开屏页面。</p>
<h3 id="替代方案——那样记账"><a href="#替代方案——那样记账" class="headerlink" title="替代方案——那样记账"></a>替代方案——那样记账</h3><p>了解来源——GitHub</p>
<p>我之前在搜索引擎里找，没找到合适的，感觉大多数都是商业公司的产品，我是再也不想 APP 用着用着就给我来一堆广告了，所以那些我都不太想去尝试。然后今天我尝试在 GitHub 上面搜索，因为我想可能也会有人和我一样，只需要一个简单的记录收入和支出的应用而已，并不需要那些花里胡哨的功能。那么应该也有人会尝试自己写一个吧。</p>
<p>果然，在 GitHub 搜索记账后，出来很多的项目，而第一个结果就是我想要的了</p>
<p><a href="https://github.com/purezhi/MoneyKeeper">https://github.com/purezhi/MoneyKeeper</a></p>
<p>不过它最后的更新在 2018 年的 6 月，距今都快 4 年了。然后我根据 readme 跳转到酷安，发现原来作者是一直有更新的，最近的更新是 2021-12-20，版本 6.8.5</p>
<p><a href="https://www.coolapk.com/apk/188475">那样记账 - 纯粹的记账软件(me.bakumon.moneykeeper) - 6.8.5 - 应用 - 酷安 (coolapk.com)</a></p>
<p>应用介绍里有这么一段话</p>
<blockquote>
<p>没有任何多余的权限，没有广告，没有用户系统，不保存用户任何信息，只是单纯的记录收支情况，做一些明了的统计，通过清楚的了解钱花在了哪，来建立起良好的消费习惯。 </p>
</blockquote>
<p>我很喜欢这样的软件，很纯粹，很轻量，安装包只有 5.3M，里面不会弹广告，备份可以使用本地备份和云备份，数据都是备份为 zip 压缩包的。云备份是通过 webdav 来实现的，使用我非常熟悉的坚果云就行。里面可以开通永久会员，价格是 21 元，不是一个月，也不是一年，而是 21 元买断。承诺永久无广告，不过目前这个 APP 好像也没有广告，所以目前会员的作用是可以使用不同的主题和图标包。不过我认为默认的图标就挺好看的了。</p>
<p>设置里面可以把【快速记账】的设置勾选上，这样打开 APP 时就自动进入记账页面了，填上金额和选择一个类别就行。软件的速度也很快，从桌面点击打开到记账页面，耗时不到一秒，对比松鼠记账的 10 秒，呵呵。</p>
<p>我的手机里还有另外一款 APP，也是在 GitHub 了解到的，是一款日记软件，模仿电影《你的名字》里面的 APP 开发的，这款是完全开源的。</p>
<p><a href="https://github.com/DaxiaK/MyDiary">DaxiaK/MyDiary: In the Movie “-your name.-“ (君の名は。, 你的名字) , “My Diary” of android version. (github.com)</a></p>
<p>它的备份方式也是通过将数据导出为 zip 压缩包，然后到其它的手机上，导入这个 zip 压缩包就可以恢复数据。也挺好的，开源软件虽然后续就没人维护了，但是只要基本功能都有，不更新也无所谓了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>pve去除订阅提示</title>
    <url>/2022/04/pve-remove-notice/</url>
    <content><![CDATA[<p>pve 每次登录时，都会弹出一个提示</p>
<p><img src="/img/2022/pve-subscription-notice.jpg"></p>
<p>看着挺烦的，如何去掉它呢？网上一搜很容易就找到解决方案，这里记录一下。我目前使用的版本是 7.1-7</p>
<p>参考文章：<a href="https://johnscs.com/remove-proxmox51-subscription-notice/">Remove Proxmox Subscription Notice (Tested to 7.1-10) | John’s Computer Services (johnscs.com)</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -Ezi.bak &quot;s/(Ext.Msg.show\(\&#123;\s+title: gettext\(&#x27;No valid sub)/void\(\&#123; \/\/\1/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br></pre></td></tr></table></figure>

<p>上面这一步是备份 <code>proxmoxlib.js</code> 为 <code>proxmoxlib.js.bak</code>，然后修改 <code>proxmoxlib.js</code> 里的 “Ext.Msg.show” 为 “void”</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> pveproxy.service</span><br></pre></td></tr></table></figure>

<p>之后重启一下服务即可。</p>
<p>这里记录一个坑，之前看到另外一个教程，是修改 <code>/usr/share/pve-manager/js/pvemanagerlib.js</code> 这个文件的，但是要修改的内容我找不到，然后我自己摸索，看到可能是这个提示相关的代码，我就用 <code>#</code>将它注释掉。结果悲剧了。</p>
<p>本来打算修改 js 文件，去掉 pve 的订阅提示，却不小心在 js 里面用 # 来注释，导致了重启 pve 的管理面板服务之后，web 端打开时一片空白，什么都不显示，重启机器也没用。</p>
<p>好在 ssh 还可以连接进去，所以我再次修改 js 文件，将之前的 <code>#</code> 去掉，再执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart pveproxy.service</span><br></pre></td></tr></table></figure>

<p>就救回来了。看来 pve 的版本不同，js 内容也会不同的，大家找教程的时候记得留意一下版本是否对应。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>visionfive 开发板通过 gpio 控制 led 灯</title>
    <url>/2022/04/visionfive-gpio-led/</url>
    <content><![CDATA[<p>visionfive 是赛昉科技推出的一款开发板，使用的处理器是他们自家研发的【惊鸿 7100】（JH7100），这是一颗 risc-v 架构的处理器，双核 U74，U74 对标的是 ARM 的 Cortex-A55 。</p>
<p><img src="/img/2022/visionfive1.jpg" alt="visionfive1"></p>
<h3 id="写入镜像"><a href="#写入镜像" class="headerlink" title="写入镜像"></a>写入镜像</h3><p>这块板子的系统运行和树莓派一样，需要先将系统镜像写入内存卡，再插到板子上来运行。目前官方提供的只有 Fedora 这个发行版，可以在 GitHub 上找到下载链接。</p>
<p><a href="https://github.com/starfive-tech/Fedora_on_StarFive">https://github.com/starfive-tech/Fedora_on_StarFive</a></p>
<p>下载完是一个特殊的压缩格式，zst，我搜了一下</p>
<blockquote>
<p>当前这种 ZST 格式是一种 压缩文件 ，是由 ZStandard 研发，作为一种 ZStandard压缩文件使用，此文件流行程度是 50 分（0-100满分）。</p>
</blockquote>
<p>还得使用专门的工具才能解压，稍微麻烦了点。工具在这里有提供</p>
<p><a href="https://rvspace.org/en/Product/VisionFive/Technical_Documents/VisionFive_Single_Board_Computer_Quick_Start_Guide">https://rvspace.org/en/Product/VisionFive/Technical_Documents/VisionFive_Single_Board_Computer_Quick_Start_Guide</a></p>
<p>点击网页左侧的 <strong>Flashing Fedora OS to a Micro-SD Card</strong> 可以快速达到。</p>
<p><img src="/img/2022/Snipaste_22-04-11_09-21-44.jpg" alt="Snipaste_22-04-11_09-21-44"></p>
<p>我是在 win10 进行操作的，将下载好的解压工具，从压缩包里解压出来，和 zst 文件放在一起。</p>
<p><img src="/img/2022/2022-04-11_09-57-19.jpg" alt="2022-04-11_09-57-19"></p>
<p>此时在这个文件夹里的空白处，一只手按住键盘上的 shift 键，另一只手按一下鼠标的右键，在此处打开 powershell，就可以快速在当前文件夹打开一个命令行窗口。（此处我的 powershell 是自己升级过的，系统自带的是没有带 preview 的。）</p>
<p><img src="/img/2022/2022-04-11_09-58-00.jpg" alt="2022-04-11_09-58-00"></p>
<p>执行这条命令就可以解压了</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">./zstd<span class="selector-class">.exe</span> -d Fedora-riscv64-jh7100-developer-xfce-Rawhide-<span class="number">20211226</span>-<span class="number">214100</span><span class="selector-class">.n</span>.<span class="number">0</span>-sda.raw\<span class="selector-class">.zst</span> -o Fedora-riscv64-jh7100-developer-xfce-Rawhide-<span class="number">20211226</span>-<span class="number">214100</span><span class="selector-class">.n</span>.<span class="number">0</span>-sda.raw</span><br></pre></td></tr></table></figure>

<p>解压出来的文件差不多 13G，可以使用写盘工具将它写入内存卡中，例如 etcher。</p>
<h3 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h3><p>之后将内存卡插入开发板，使用 HDMI 线连接显示器，通电开机，便可进入 Fedora 了。</p>
<p>默认的用户名是 riscv</p>
<p>密码是 starfive</p>
<p>这台设备的桌面体验，我感觉还是比较差的，毕竟没有 GPU，而已本身也只是双核而已，所以桌面体验会有一些卡顿。很快我就放弃用鼠标来控制它了，我选择在电脑上通过 ssh 来控制它。</p>
<p><img src="/img/2022/visionfive-neofetch.jpg" alt="visionfive-neofetch"></p>
<h3 id="如何通过-gpio-控制-LED-灯？"><a href="#如何通过-gpio-控制-LED-灯？" class="headerlink" title="如何通过 gpio 控制 LED 灯？"></a>如何通过 gpio 控制 LED 灯？</h3><p>通过这个网页，我们可以了解到这块板子的 GPIO 信息</p>
<p><a href="https://rvspace.org/en/Product/General/StarFive_40-Pin_GPIO_Header_User_Guide">https://rvspace.org/en/Product/General/StarFive_40-Pin_GPIO_Header_User_Guide</a></p>
<p><img src="/img/2022/visionfive-gpio.jpg" alt="img"></p>
<p>准备一颗 LED 灯，一头连接 34 号的 GND，一头连接 40 号的 GPIO0</p>
<p><img src="/img/2022/LED-off.jpg" alt="LED-off"></p>
<p>在终端里进行如下的操作（需要 root 身份来执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /sys/class/gpio</span><br><span class="line">echo 448 &gt; export</span><br><span class="line">cd gpio448</span><br><span class="line">echo out &gt; direction</span><br><span class="line">echo 1 &gt; value</span><br></pre></td></tr></table></figure>

<p>这样便可以点亮 LED 灯</p>
<p><img src="/img/2022/LED-on.jpg" alt="LED-on"></p>
<p>如果想熄灭它，只需执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">echo</span> <span class="number">0</span> &gt; value</span><br></pre></td></tr></table></figure>

<p>官方文档里的这个表格非常重要，刚才我们控制 GPIO0，操作的是 448，如果现在我们想控制 GPIO4，从表格可以查到是 452，那么只需将刚才的 448 换成 452 即可让 GPIO4 输出高电平。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>dts</strong></td>
<td><strong>sys</strong></td>
<td><strong>Pin Name</strong></td>
<td><strong>Num</strong></td>
<td><strong>Num</strong></td>
<td><strong>Pin Name</strong></td>
<td><strong>sys</strong></td>
<td><strong>dts</strong></td>
</tr>
<tr>
<td></td>
<td></td>
<td>3.3V Power</td>
<td>1</td>
<td>2</td>
<td>5V Power</td>
<td></td>
<td></td>
</tr>
<tr>
<td>i2c1</td>
<td>i2c-1</td>
<td>GPIO48 (I2C SDA)</td>
<td>3</td>
<td>4</td>
<td>5V Power</td>
<td></td>
<td></td>
</tr>
<tr>
<td>i2c1</td>
<td>i2c-1</td>
<td>GPIO47 (I2C SCL)</td>
<td>5</td>
<td>6</td>
<td>GND</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>494</td>
<td>GPIO46</td>
<td>7</td>
<td>8</td>
<td>GPIO14 (UART TX)</td>
<td>ttyS0</td>
<td>uart3</td>
</tr>
<tr>
<td></td>
<td></td>
<td>GND</td>
<td>9</td>
<td>10</td>
<td>GPIO13 (UART RX)</td>
<td>ttyS0</td>
<td>uart3</td>
</tr>
<tr>
<td></td>
<td>492</td>
<td>GPIO44</td>
<td>11</td>
<td>12</td>
<td>GPIO45</td>
<td>PWM2</td>
<td></td>
</tr>
<tr>
<td></td>
<td>470</td>
<td>GPIO22</td>
<td>13</td>
<td>14</td>
<td>GND</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>468</td>
<td>GPIO20</td>
<td>15</td>
<td>16</td>
<td>GPIO21</td>
<td>469</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>3.3V Power</td>
<td>17</td>
<td>18</td>
<td>GPIO19</td>
<td>467</td>
<td></td>
</tr>
<tr>
<td>spi2</td>
<td>spidev0.0</td>
<td>GPIO18 (SPI MOSI)</td>
<td>19</td>
<td>20</td>
<td>GND</td>
<td></td>
<td></td>
</tr>
<tr>
<td>spi2</td>
<td>spidev0.0</td>
<td>GPIO16 (SPI MISO)</td>
<td>21</td>
<td>22</td>
<td>GPIO17</td>
<td>465</td>
<td></td>
</tr>
<tr>
<td>spi2</td>
<td>spidev0.0</td>
<td>GPIO12 (SPI SCLK)</td>
<td>23</td>
<td>24</td>
<td>GPIO15 (SPI CE0)</td>
<td>spidev0.0</td>
<td>spi2</td>
</tr>
<tr>
<td></td>
<td></td>
<td>GND</td>
<td>25</td>
<td>26</td>
<td>GPIO11 (SPI CE1)</td>
<td>spidev0.0</td>
<td>spi2</td>
</tr>
<tr>
<td></td>
<td>457</td>
<td>GPIO9</td>
<td>27</td>
<td>28</td>
<td>GPIO10</td>
<td>458</td>
<td></td>
</tr>
<tr>
<td></td>
<td>456</td>
<td>GPIO8</td>
<td>29</td>
<td>30</td>
<td>GND</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>454</td>
<td>GPIO6</td>
<td>31</td>
<td>32</td>
<td>GPIO7 (PWM0)</td>
<td>PWM0</td>
<td></td>
</tr>
<tr>
<td></td>
<td>PWM1</td>
<td>GPIO5 (PWM1)</td>
<td>33</td>
<td>34</td>
<td>GND</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td>451</td>
<td>GPIO3</td>
<td>35</td>
<td>36</td>
<td>GPIO4</td>
<td>452</td>
<td></td>
</tr>
<tr>
<td></td>
<td>449</td>
<td>GPIO1</td>
<td>37</td>
<td>38</td>
<td>GPIO2</td>
<td>450</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>GND</td>
<td>39</td>
<td>40</td>
<td>GPIO0</td>
<td>448</td>
<td></td>
</tr>
</tbody></table>
<p>对此我写了一个 Python 脚本，作用是监控哔哩哔哩上面是否有人给我发私信，也就是我是否有未读消息，如果有的话，则点亮 LED 灯。而当我看完消息后，脚本检测到目前没有未读消息了，则会将 LED 灯熄灭。</p>
<p>脚本已放在 GitHub 上面，有兴趣的朋友可以参考一下。</p>
<p><a href="https://github.com/powersee/bilibili_unread/blob/master/bili-for-visionfive.py">https://github.com/powersee/bilibili_unread/blob/master/bili-for-visionfive.py</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>设备</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
