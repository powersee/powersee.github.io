<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小米手机免 root 去除广告以及卸载系统应用</title>
    <url>/2019/09/MIUI-adb/</url>
    <content><![CDATA[<p>本文所介绍的操作，需在电脑上进行。</p>
<h2 id="手机打开-USB-调试"><a href="#手机打开-USB-调试" class="headerlink" title="手机打开 USB 调试"></a>手机打开 USB 调试</h2><p>以及 USB 调试（安全模式）</p>
<h2 id="下载-ADB-工具"><a href="#下载-ADB-工具" class="headerlink" title="下载 ADB 工具"></a>下载 ADB 工具</h2><p><a href="http://veger.ys168.com/">http://veger.ys168.com/</a><br>在电脑软件这个文件夹里</p>
<p>解压后把三个文件，解压到 <code>C:\Windows\</code>里面</p>
<h2 id="安装小米刷机工具（安装手机驱动）"><a href="#安装小米刷机工具（安装手机驱动）" class="headerlink" title="安装小米刷机工具（安装手机驱动）"></a>安装小米刷机工具（安装手机驱动）</h2><p><a href="http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip">http://bigota.d.miui.com/tools/MiFlash2018-5-28-0.zip</a></p>
<h2 id="电脑打开-cmd"><a href="#电脑打开-cmd" class="headerlink" title="电脑打开 cmd"></a>电脑打开 cmd</h2><p>删除应用的 ADB 命令是：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --user 0 应用包名</span><br></pre></td></tr></table></figure>
<p>（MIUI 9、MIUI 10 测试删除后能正常开机使用）  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm uninstall --user 0  com.miui.systemAdSolution #（小米系统广告解决方案 必删）  </span><br><span class="line">adb shell pm uninstall --user 0  com.miui.analytics （小米广告分析，必删）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.gamecenter.sdk.service #（小米游戏中心服务）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.gamecenter #（小米游戏中心）  </span><br><span class="line">adb shell pm uninstall --user 0 com.sohu.inputmethod.sogou.xiaomi #（搜狗输入法）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.player #（小米音乐）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.video #（小米视频）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.notes #（小米便签）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.translation.youdao #（有道翻译）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.translation.kingsoft #（金山翻译）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.email #（邮件）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.scanner #（小米扫描）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.hybrid #（混合器）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.bugreport #（bug 反馈）  </span><br><span class="line">adb shell pm uninstall --user 0 com.milink.service #（米连服务）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.browser #（浏览器）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.gallery #（相册）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.yellowpage #（黄页）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.midrop #（小米快传）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.virtualsim #（小米虚拟器）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.payment #（小米支付）  </span><br><span class="line">adb shell pm uninstall --user 0 com.mipay.wallet #（小米钱包）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.soundrecorder #（录音机）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.screenrecorder #（屏幕录制）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.wallpaper #（壁纸）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.voiceassist #（语音助手）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.fm #（收音机）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.touchassistant #（悬浮球）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.cellbroadcastreceiver #（小米广播）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.mitunes #（小米助手）  </span><br><span class="line">adb shell pm uninstall --user 0 com.xiaomi.pass #（小米卡包）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.thememanager #（个性主题管理）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.wallpaper #（动态壁纸）  </span><br><span class="line">adb shell pm uninstall --user 0 com.android.wallpaper.livepicker #（动态壁纸获取）  </span><br><span class="line">adb shell pm uninstall --user 0 com.miui.klo.bugreport #（KLO bug 反馈）</span><br></pre></td></tr></table></figure>

<p>前面两个是 MIUI 系统支撑广告及精准化推送的应用，应第一时间删除，删除后不会出现无法开机的情况。这样 MIUI 系统的广告就会少很多——没有验证是否完全屏蔽。  </p>
<p><strong>【警告】以下系统自带应用删除后必定无法正常开机（来自网络），请避免误删：</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.miui.cloudservice （小米云服务）  </span><br><span class="line">com.xiaomi.account （小米账户）  </span><br><span class="line">com.miui.cloudbackup （云备份）  </span><br><span class="line">com.xiaomi.market （应用市场）</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>为签到平台添加获取 Cookie 功能 GetCookies</title>
    <url>/2020/09/GetCookies-for-qiandao/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前使用 qiandao.today 的时候，我就一直使用 GetCookies 这个浏览器插件，没用它之前，我需要去打开特定的网站，按 F12 查找 cookie ，复制粘贴。有了它，这整个过程将被简化为，在网页中点两下。</p>
<p>这是一个开源的 chrome 插件，原项目地址：<a href="https://github.com/acgotaku/GetCookies">https://github.com/acgotaku/GetCookies</a></p>
<p>现在这个插件已经被 chrome 下架，要使用只能手动安装。然而它默认情况下是只能给 qiandao.today 这个网站用的，我们自己的搭建的签到平台，是没法使用这个插件的。</p>
<p>如果你想让它可以在你的签到平台上面使用，需要做一些修改，我是通过 <a href="https://github.com/acgotaku/GetCookies/issues/2">Github Issues</a> 找到解决方案的。</p>
<p>更改后项目：<a href="https://github.com/powersee/GetCookies">https://github.com/powersee/GetCookies</a></p>
<h3 id="更改过程"><a href="#更改过程" class="headerlink" title="更改过程"></a>更改过程</h3><p>首先需要把插件下载到电脑，可以通过 git clone ，也可以直接 download 。之后需要修改两个地方：</p>
<p>·<strong>mainfest.json</strong></p>
<p>将第 8 行的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;matches&quot;: [ &quot;https://qiandao.today/*&quot;]</span><br></pre></td></tr></table></figure>

<p>修改为自己的网站，如果有多个的话，可以使用 <code>,</code> 区分，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;matches&quot;: [ &quot;https://qiandao.powersee.top/*&quot;,&quot;http://192.168.123.242:9527/*&quot;]</span><br></pre></td></tr></table></figure>

<p>·<strong>background.js</strong></p>
<p>去掉第 3 行中判断网址是否包含 qiandao.today 的语句，即改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (changeInfo.status === &#x27;loading&#x27;) &#123;</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>修改完成后，在浏览器中选择【扩展程序】，【加载已解压的扩展程序】，选择插件所在的文件夹即可。</p>
<p>判断插件有没有成功加载，可以通过查看 console 中有没有打印出 onload 来判断。</p>
<p>网站中一键获取 Cookie 效果如图</p>
<p><img src="/img/2020/getCookies.png" alt="getCookies"></p>
<hr>
<p>这次的排查过程挺特别的，之前我尝试过，直接将网址改为 * ，这样所有网站都可以使用这个插件，但结果发现没效果。</p>
<p>于是尝试改为配置局域网的网站，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.*</span><br></pre></td></tr></table></figure>

<p>也没有效果……</p>
<p>想不出原因，就搁置了。今天专门下载了个 360 极速浏览器，来测试一下是不是修改后在 chrome 浏览器里面没效果，其它浏览器里就有呢？</p>
<p>一番折腾后发现，只有网址写完整，才有效果，可以在网址后用 * ，但是不能在网址中用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.123.242:9527/*   # 可</span><br><span class="line">http://192.168.123.*		   # 不可</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>装好 Mojave 之后要做的事</title>
    <url>/2020/03/Mojave/</url>
    <content><![CDATA[<p>最近越来越觉得 macOS 的 10.15 版本很不好用，刚好手边也有一块闲置的硬盘，于是我想用它装 10.14 的 macOS 。</p>
<p>重新下载镜像，写入 U 盘，修改 config ，重启写入硬盘，完成。由于装过很多次，对此也算是轻车熟路。麻烦的是之后的驱动，以及常用软件的下载。</p>
<h2 id="0，声卡驱动"><a href="#0，声卡驱动" class="headerlink" title="0，声卡驱动"></a>0，声卡驱动</h2><p>github 下载最新的 applealc ，放入 kexts 里的 other ，把里面的万能声卡移出来。clover configurator 里注入 id，重启完成。</p>
<h2 id="1，调整按键"><a href="#1，调整按键" class="headerlink" title="1，调整按键"></a>1，调整按键</h2><p>由于使用 macOS 时，最主要用到的按键是 command ，在普通键盘上就是 Windows 键。为了能够和平时一样使用 ctrl + c , ctrl + v 来复制粘贴。可以在【系统偏好设置】–【键盘】–【修饰键…】里面将两者的位置换一下。</p>
<h2 id="2，开启-hidpi"><a href="#2，开启-hidpi" class="headerlink" title="2，开启 hidpi"></a>2，开启 hidpi</h2><p>如果使用原生的分辨率，字体会非常的小，而且还会模糊。这种情况在 Windows 上面也有，不过 Windows 上我们可以开启屏幕缩放，比如我的 1080P 显示器，我就比较喜欢开启 115% 的缩放。但是在 macOS 上，官方的设定是用 4K 的显示器时，就可以在【系统偏好设置】–【显示器】开启。然而我并没有 4K 的显示器……<br>这时就只能自己来手动开启了。</p>
<p><a href="https://github.com/xzhih/one-key-hidpi">https://github.com/xzhih/one-key-hidpi</a></p>
<p>用 GitHub 上的这个脚本很容易就可以开启。（在 Catalina 里面的会复杂一些，因为一些权限的问题）<br>然后，此时在【系统偏好设置】–【显示器】的缩放里面就能看到选项了。但是能选的并不多，这时可以下载一个工具，RDM</p>
<p><a href="http://www.pc6.com/mac/441275.html">http://www.pc6.com/mac/441275.html</a></p>
<p>这个工具提供更多的选择，比如我的显示器是 1920 × 1200 的，在系统里有 1280 × 800 和 1650 × 1050 的选项，但是用这个工具后，我可以选择 1440 × 900 。这个分辨率我个人觉得更加合适。</p>
<h2 id="3，oh-my-zsh-与-iterm2"><a href="#3，oh-my-zsh-与-iterm2" class="headerlink" title="3，oh my zsh 与 iterm2"></a>3，oh my zsh 与 iterm2</h2><p>由于系统本身就自带有 zsh 这个 shell 了，所以我只需要再装一下 oh-my-zsh ，然后在其装好时会询问【是否将 zsh 设置为默认的 shell】，选择是即可。<br>之后安装 iterm2 替代 terminal 。</p>
<p>然后我还可以把之前系统的用户目录下的【.zshrc】和【.zsh_history】复制过来。</p>
<h2 id="4，复制-ssh-文件夹"><a href="#4，复制-ssh-文件夹" class="headerlink" title="4，复制 .ssh 文件夹"></a>4，复制 .ssh 文件夹</h2><p>这个文件夹里存放着私钥，直接复制过来我就可以 ssh 连接其它终端，以及 GitHub 之类。</p>
<h2 id="5，导入-fcpx-的设定"><a href="#5，导入-fcpx-的设定" class="headerlink" title="5，导入 fcpx 的设定"></a>5，导入 fcpx 的设定</h2><p>主要是自定义的键盘设置，还有 compressor 中的自定义的预设。</p>
<blockquote>
<p>暂时写到这……</p>
</blockquote>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>斐讯 N1、P1 安装 armbian 变身电脑主机</title>
    <url>/2019/12/N1-armbian/</url>
    <content><![CDATA[<p>斐讯 N1 这台设备，我之前一直是使用小钢炮这个系统。因为它非常强大了，可以下载，可以共享硬盘里的文件，还可以玩 docker。</p>
<p>不过其实这台设备还可以装 Debian 和 Ubuntu 系统的，装好之后就可以变成一台电脑主机了，这想想都兴奋。所以我一直想来尝试一下装 armbian 系统。</p>
<p>镜像下载地址：<a href="https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/">https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/</a></p>
<p>但是，其实我之前折腾过很久，一直没法进入启动界面，一次又一次的放弃。早上突然想到会不会是我的写入工具有问题？</p>
<p>所以改用另外一个将镜像写入 U盘的工具，再试一下。</p>
<p>结果，还是不行……</p>
<p>然后仔细看看教程，<a href="https://post.smzdm.com/p/aqnl5kz2/">这篇文章</a>，难不成得先修改 dtb 才可以启动？试一下，果然如此。需要修改 <strong>uEnv.ini</strong> 这个文件。将第一行的dtb_name后面的文字替换成dtb文件夹里斐讯N1的dtb文件名，保存后再来启动就可以了。</p>
<p>所以跟用什么工具将镜像写入U盘完全没有关系，用</p>
<ul>
<li>usb-image-tool</li>
<li>win32diskimager</li>
<li>balenaEtcher</li>
<li>……</li>
</ul>
<p>都是可以的，主要是修改那个文件之后再开机就行。</p>
<p>之后插入 U盘到机器上，启动，正常进入系统。输入账号 root ，密码 1234 。然后需要设置一个新的密码（至少 8 位数）。</p>
<p>然后需要再建立一个账号，用来登录桌面系统。主要是用户名和密码，其它可以不用填。之后就可以进入桌面。</p>
<p>进入桌面系统后，这就是一台电脑主机了，可以上网，看视频，听音乐，编程……</p>
<p>但是想要更好地使用它，我们还得进行一系列的配置。想折腾可以耗费不少的时间。</p>
<hr>
<p>不过，后来我发现恩山有位大佬，直接把他自己修改好的系统打包上传上来，这样我们就可以直接使用他的系统，不用自己去配置了。<a href="https://right.com.cn/forum/thread-1380140-1-1.html">帖子链接</a></p>
<p>2020年7月，原作者后来又更新了其它版本的镜像，现在 <a href="https://www.right.com.cn/forum/thread-3758513-1-1.html">最新的帖子</a></p>
<p>帖子里有百度网盘的链接，里面主要有三个版本，32G 16G 8G ，指的是用这个系统 U盘最少的容量，如果你 U盘大于或等于 32G，那三个版本都可以用。</p>
<p>16G 镜像下载下来只有八百多兆，因为里面的软件最少，没有 docker 这些软件。8G 的比较好，安装好了 docker，并且容量适中，3G 多。32G 版本我没有下。</p>
<p>而且，用官方系统会出现没有 WiFi 的问题，<a href="https://right.com.cn/forum/thread-995217-1-1.html">这个帖子</a> 有讲到，看来用比较老的系统就可以用 WiFi。而使用恩山大佬打包的系统可以使用 WiFi 👍</p>
<blockquote>
<p> 所以我个人的建议是直接使用打包的系统。</p>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>不管是使用原生的系统，还是打包的系统，都需要进行下面的配置。</p>
<h3 id="改源"><a href="#改源" class="headerlink" title="改源"></a>改源</h3><p>默认的软件源可以连接到，但是慢到怀疑人生。把它改为国内的源，这样我们安装或更新软件会快很多。</p>
<p><strong>改软件源</strong> <a href="https://www.jiayie.xyz/2019/06/26/N1%E5%88%B7%E5%85%A5Armbian%E5%90%8E%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E3%80%81%E5%AE%89%E8%A3%85Docker%E5%B9%B6%E6%8F%90%E9%80%9F/">文章链接</a></p>
<p>vim /etc/apt/sources.list</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/debian stretch main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stretch-updates main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stretch-backports main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<p><strong>改 armbian 源</strong></p>
<p>vim /etc/apt/sources.list.d/armbian.list</p>
<p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/armbian stretch main stretch-utils stretch-desktop</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>让一个服务器拥有多个网站</title>
    <url>/2018/05/Multiple-websites-in-one-server/</url>
    <content><![CDATA[<p>可以在一台机器上放置多个网站，若是静态网站的话，理论上可以放置无限多个。</p>
<h3 id="本操作基于Ubuntu"><a href="#本操作基于Ubuntu" class="headerlink" title="本操作基于Ubuntu"></a>本操作基于Ubuntu</h3><p>我的nginx访问的根目录 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/wwwroot/default</span><br></pre></td></tr></table></figure>
<p>创建一个”vhost”目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/local/nginx/conf/vhost</span><br></pre></td></tr></table></figure>
<hr>
<p>创建siteA的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /usr/local/nginx/conf/vhost/vhost_siteA.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;                        # 监听端口</span><br><span class="line">    server_name www.siteA.com siteA.com;    # 站点域名</span><br><span class="line">    root  /home/wwwroot/default;              # 站点根目录</span><br><span class="line">    index index.html index.htm index.php;   # 默认导航页</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # WordPress固定链接URL重写</span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">            rewrite (.*) /index.php;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # PHP配置</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>创建siteB的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/nginx/vhost/vhost_siteB.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;                        # 监听端口</span><br><span class="line">    server_name www.siteA.com siteA.com;    # 站点域名</span><br><span class="line">    root  /home/wwwroot/old;              # 站点根目录</span><br><span class="line">    index index.html index.htm index.php;   # 默认导航页</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        # WordPress固定链接URL重写</span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">            rewrite (.*) /index.php;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # PHP配置</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>修改nginx.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>在http里加入这段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /usr/local/nginx/conf/vhost/*.conf;</span><br></pre></td></tr></table></figure>

<p>重启 nginx 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx下修改WordPress固定链接导致无法访问</title>
    <url>/2019/03/Nginx-WordPress-link-error/</url>
    <content><![CDATA[<p>内容来自：<a href="https://blog.csdn.net/csdn1161851523/article/details/52942404">CSDN</a></p>
<p>先找到配置文件的位置，如我这里是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>用 vim 来修改，在server{}  字段   中的  “root /websit/wwwroot/;”(这行就是指定网站所在目录的)  这一行的下面 ，添加下面的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (-f $request_filename/index.html)&#123;</span><br><span class="line">rewrite (.*) $1/index.html break;</span><br><span class="line">&#125;</span><br><span class="line">if (-f $request_filename/index.php)&#123;</span><br><span class="line">rewrite (.*) $1/index.php;</span><br><span class="line">&#125;</span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">rewrite (.*) /index.php;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rewrite /wp-admin$ $scheme://$host$uri/ permanent;</span><br></pre></td></tr></table></figure>
<p>然后重启 Nginx ，如果和我一样是用 lnmp 的，可以输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lnmp nginx restart</span><br></pre></td></tr></table></figure>
<p>之后就可以访问了文章了。</p>
]]></content>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>用Python创建HTTP服务</title>
    <url>/2018/05/Python-HTTP-server/</url>
    <content><![CDATA[<p>一般的Linux都带有python</p>
<p>有时我们想要把文件，通过网页的方式来共享，但是又不想去搭建像 Nginx 或者 caddy 这样的 web 服务器，此时用 Python 一行命令即可解决。</p>
<p>通过命令进入所要共享的文件夹</p>
<p>输入这个命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>后面的80为端口，这种适合没有搭建其它web服务的</p>
<p>如果是 Python3 的话，是用这个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>

<p>这时我后面并没有加端口，默认会使用 8000 端口</p>
<p>若已经有搭建类似 nginx 的服务 可以通过修改端口数字，例如改为88，或者不输入端口，则会默认采用8000端口</p>
<p>此时输入 <span style="color: #000000;"><strong>IP:8000</strong></span> 或者 <strong>域名:8000</strong></p>
<p>即可访问当前目录下的文件，如果有 <code>index.html</code> 则会默认加载。</p>
<p>然后想要停止时，按<code>CTRL + C</code> 取消。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>在mac把系统固件写入U盘</title>
    <url>/2018/06/Write-system-firmware-to-u-disk-on-MAC/</url>
    <content><![CDATA[<p>苹果官方文章:<a href="https://support.apple.com/zh-cn/HT201372">如何创建可引导的 macOS 安装器</a></p>
<p>最终我执行的是这一段命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /Volumes/Install\ macOS\ High\ Sierra/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/installMacOS --applicationpath /Volumes/Install\ macOS\ High\ Sierra/Install\ macOS\ High\ Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>

<p>分析：<code>（以下内容是在双击固件，将其挂载，在桌面看得到其快捷方式下进行的）</code></p>
<p>一，这一段为固件的位置（前面到.app这一段可以通过双击打开桌面的固件，然后将里面的安装程序拖进来，而来得到地址）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Volumes/Install\macOS\High\Sierra/Install\macOS\High\Sierra.app/Contents/Resources/createinstallmedia</span><br></pre></td></tr></table></figure>

<p>二，这一段为写入的地址，即此时我命名为 installMacOS 的U盘</p>
<blockquote>
<p>/Volumes/installMacOS</p>
</blockquote>
<p>三，这又为固件地址</p>
<blockquote>
<p>/Volumes/Install\ macOS\ High\ Sierra/Install\ macOS\ High\ Sierra.app</p>
</blockquote>
<p>写入完成后会出现 done ，估计十几分钟，耐心等待即可。</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 ireader 阅读器无法连接电脑问题</title>
    <url>/2018/10/Solve-the-problem-that-the-ireader-cannot-connect-to-the-computer/</url>
    <content><![CDATA[<p>今晚把阅读器用 USB 连接电脑，想传些文件。发现连接后，资源管理器无法读到盘符。</p>
<p>由于平时我主要用 Mac 系统，无法用 usb 线与阅读器互传文件的，因此都是用 WIFI 传输。不过之前曾经在虚拟机里运行 XP 系统，可以与阅读器连接并且传输文件，因此硬件是没问题的。</p>
<p>现在 win10 状态下却无法连接，折腾一番后，没法，联系客服。在掌阅的微信公众号【掌阅iReader】里面，右下角，服务，人工服务。</p>
<p>一大段话确认我硬件和操作没有问题后，回复我：</p>
<blockquote>
<p>若是您的电脑没有识别：请您这边电子书阅读器插上USB连接电脑后右击–我的电脑–属性–点击打开设备管理器截图提供这边帮您查看一下</p>
</blockquote>
<p>当阅读器插入后这里面会多出一个设备【Android Phone】，展开它，里面是【Android ADB Interface】。右键，更新驱动。</p>
<p><strong>重点来了</strong></p>
<p>不要点【自动搜索……】，而是点下面的【浏览我的计算机以查找驱动程序软件】。</p>
<p>然后这时会有两个选项，选择下面那个带有【MTP】的，安装这个，然后就完了。资源管理器里可以识别到了。</p>
<p><img src="/img/2018/ireader.jpg" alt="IMG_20181002_202702.jpg"></p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>N1 小钢炮系统相关</title>
    <url>/2020/02/about-N1-nano/</url>
    <content><![CDATA[<p>本文记录一些跟小钢炮系统相关的网址、docker 命令等。</p>
<blockquote>
<p>建议搭配视频使用：<a href="https://www.bilibili.com/video/av88448594">小钢炮系统使用指南</a></p>
</blockquote>
<h2 id="系统固件下载"><a href="#系统固件下载" class="headerlink" title="系统固件下载"></a>系统固件下载</h2><p><a href="https://rom.nanodm.net/">https://rom.nanodm.net/</a></p>
<h2 id="docker-国内源"><a href="#docker-国内源" class="headerlink" title="docker 国内源"></a>docker 国内源</h2><p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>将里面的内容改为这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://dockerhub.azk8s.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改完去 system 里的 Startup 将 docker 停止，再启动。</p>
<p>之后我们安装 docker UI 应该就可以成功了。</p>
<h2 id="filebrowser"><a href="#filebrowser" class="headerlink" title="filebrowser"></a>filebrowser</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 80x86/filebrowser:arm64</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/filebrowser</span><br><span class="line"></span><br><span class="line">WEB_PORT=8082</span><br><span class="line">FB_AUTH_SERVER_ADDR=&quot;127.0.0.1&quot;</span><br><span class="line">docker run -d \</span><br><span class="line">        -e PUID=$UID \</span><br><span class="line">        -e PGID=$GID \</span><br><span class="line">        -e WEB_PORT=$WEB_PORT \</span><br><span class="line">        -e FB_AUTH_SERVER_ADDR=$FB_AUTH_SERVER_ADDR \</span><br><span class="line">        -p $WEB_PORT:$WEB_PORT \</span><br><span class="line">        -v /media:/myfiles \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        $&#123;IMAGE_NAME&#125;:arm64</span><br></pre></td></tr></table></figure>

<p>这个应该大家都可以通用的。</p>
<p>接下来到浏览器打开<code>IP:8082</code>来访问，看看是否能正常使用。</p>
<h2 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h2><p>要先停止自带的 qb ，去 system 里的 Startup 将 qbittorrent 停止，然后将 Yes 改为 No ，这样就不会开机自启了。</p>
<blockquote>
<p>勘误，视频中讲将S92qbittorrent改个名字，这种方法并不行。得将其移动到其它位置。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d/</span><br><span class="line">mv S92qbittorrent ..</span><br></pre></td></tr></table></figure>

<p>这样S92qbittorrent就会待在 /etc 这个目录下了。</p>
<p>拉去镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 80x86/qbittorrent:4.2.1-arm64</span><br></pre></td></tr></table></figure>

<p>建立容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line">#WEB_PORT=$(nvram get app.qb.listen_port)</span><br><span class="line">#这里我原本的默认下载路径是 /media/one/qb 你应该改成自己的</span><br><span class="line">DOWNLOAD_PATH=/media/one/qb</span><br><span class="line">BT_PORT=$(cat /var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf | grep -i &#x27;Connection\\PortRangeMin&#x27; | cut -d&#x27;=&#x27; -f2)</span><br><span class="line">QBT_AUTH_SERVER_ADDR=&quot;127.0.0.1&quot;</span><br><span class="line">if [ &quot;$DOWNLOAD_PATH&quot; = &quot;/downloads&quot; ] || [ &quot;$DOWNLOAD_PATH&quot; = &quot;/downloads/&quot; ]; then</span><br><span class="line">    echo &quot;please set correct DOWNLOAD_PATH&quot;</span><br><span class="line">    exit -1</span><br><span class="line">fi</span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -e PUID=$(id -u qbittorrent) \</span><br><span class="line">        -e PGID=$(cat /etc/group | grep -e &#x27;^users&#x27; | cut -d&#x27;:&#x27; -f3) \</span><br><span class="line">        -e WEB_PORT=8088 \</span><br><span class="line">        -e BT_PORT=$BT_PORT \</span><br><span class="line">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:/config \</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v &quot;$DOWNLOAD_PATH&quot;:/downloads \</span><br><span class="line">        -v &quot;$DOWNLOAD_PATH&quot;:&quot;$DOWNLOAD_PATH&quot; \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        $&#123;IMAGE_NAME&#125;</span><br></pre></td></tr></table></figure>

<p>这里的端口我改为 8088 ，也可以改为和原来一样的 8083</p>
<p>之后就可以通过 <code>IP:8088</code>来访问 qb 了。设置没错的话，应该可以看到之前的种子信息的。</p>
<h2 id="微力同步-verysync"><a href="#微力同步-verysync" class="headerlink" title="微力同步 verysync"></a>微力同步 verysync</h2><p>这是一款和 syncthing 类似的同步工具。<code>/media/one/verysync</code>是我自己的路径，其它人使用前需要更改一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name verysync \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -p 8886:8886 \</span><br><span class="line">  -v /media/one/verysync:/media \</span><br><span class="line">  lstcml/n1_verysync</span><br></pre></td></tr></table></figure>

<p>这个应用的功能是，可以把一个文件夹，在多台设备之间保持内容同步。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>关于斐讯 R1 智能音响</title>
    <url>/2020/05/about-R1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这款产品是 燕飞利仕 和斐讯合作的产品，应该是2018年推出的。</p>
<p>这是一款智能音响，可以搭配【斐讯ai】这个 app 来使用，不过，由于斐讯后来翻车了，至今也快两年了。所谓智能音响，也就是可以用语音来控制罢了。但是由于斐讯服务器那边不能用（或者说不稳定）。账号现在没法正常注册，看论坛有人说每天 0 点会开放注册一段时间，由于本人 2017 年时就有了斐讯的账号，也没去尝试能否注册。</p>
<p>所以很多人就只能把这音响当普通音响来用，音响开机后按三下顶部的按键，就可以打开蓝牙，之后用手机或者电脑连接，听歌或者听有声小说还是不错的。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>不过最近我在拼多多买了这台设备，发现斐讯的服务器还是可以连接的嘛，而且网上有大佬修改了 app ，使得现在没有账号的情况下，也能配置音响的网络，使其连接家中的WIFI。修改版APP下载：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>但是有些时候，配置网络好了，喊【小讯小讯】，却会提示，未绑定。。。</p>
<h2 id="这时候有两种解决方案"><a href="#这时候有两种解决方案" class="headerlink" title="这时候有两种解决方案"></a>这时候有两种解决方案</h2><p>一，修改路由器的 dns</p>
<p>将路由器的 DNS 改为 47.240.76.176</p>
<p><img src="/img/2020/padavan-dns.jpg" alt="padavan-dns"></p>
<p>二，自定义 hosts</p>
<p>在路由器的 hosts 中添加 118.24.249.189  aios-home.hivoice.cn</p>
<p>在老毛子路由器中</p>
<p><img src="/img/2020/padavan-hosts.jpg" alt="padavan-hosts"></p>
<p>在 openwrt 路由器中</p>
<p><img src="/img/2020/openwrt-hosts.jpg" alt="openwrt-hosts"></p>
<p>这样做音响才能完成绑定，之后我们就可以使用语音来控制它了。</p>
<blockquote>
<p>如果你用的是普通的路由器，那看看哪个地方可以修改 hosts，实在找不到就修改 DNS 吧。  </p>
</blockquote>
<hr>
<p><strong>如果你实在太小白，不会修改 dns 和 hosts ，那就放弃语音控制吧，反正作用也不是那么大。还有很多其它的东西可以折腾的。</strong></p>
<h2 id="使用-dlna-享受更好的音质"><a href="#使用-dlna-享受更好的音质" class="headerlink" title="使用 dlna 享受更好的音质"></a>使用 dlna 享受更好的音质</h2><p>前段时间，在网上看到这样的话</p>
<blockquote>
<p>蓝牙连接是sbc，音效很浑浊，发闷。dlan 才能发挥它真正的音质</p>
</blockquote>
<p>为了用上 dlna ，我在论坛中找到在 R1 上面安装 dlna 的方法，同样将资源放在网盘中了：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>装好后，在电脑中就可以选中歌曲，然后将其推送到 R1 上面播放了。</p>
<p><img src="/img/2020/dlna1.jpg" alt="dlna1"></p>
<p>后来，有网友提示，其实系统也自带有 dlna 的，不过需要蓝牙打开的状态下才可以用。所以我打开蓝牙后，再来右键歌曲，就可以看到有两个 dlna 了。</p>
<p><img src="/img/2020/dlna2.jpg" alt="dlna2"></p>
<p>据说还可以装一个【乐播投屏】也同样有 dlna ，论坛有个帖子分析了各自的优缺点。<a href="https://www.right.com.cn/forum/thread-4017780-1-1.html">R1音响三大dlna软件对比</a> 不过这个我自己没用，我最多使用的还是 从n1提取的dlna ，因为这个一直保持开启状态，用起来比较方便。</p>
<h2 id="电脑端-dlna"><a href="#电脑端-dlna" class="headerlink" title="电脑端 dlna"></a>电脑端 dlna</h2><p>用系统自带的播放器固然方便，但是不怎么好用，只能自己把歌曲添加进去，而且还不支持播放 FLAC 的歌曲。</p>
<p>我想要播放网易云音乐里的歌曲，有没有什么好方法呢？</p>
<p>那最简单的还是属用蓝牙连接。不过我这里讨论的是 dlna ，那就得用一个第三方软件了，名字是 airfoil ，这是一款付费软件，大家自己网上找吧。在电脑上安装好后，打开时就会搜索你的网络中有哪些 dlna 设备。</p>
<p><img src="/img/2020/Airfoil.jpg" alt="Airfoil"></p>
<p>下方可以选择那个设备作为音响，点亮其右侧的图标即可。上方可以选择声音来源，可以像上图那样，将整个系统的声音都输出。也可以像下图这样，只选择将网易云音乐的声音输出。</p>
<p><img src="/img/2020/Airfoil-netease.jpg" alt="Airfoil-netease"></p>
<p><strong>注意</strong> 通过 dlna 将声音输出到音响，大概有两秒的延迟，所以……只适合用来听歌，看视频和打游戏是完全没法用的。</p>
<h2 id="手机端-dlna"><a href="#手机端-dlna" class="headerlink" title="手机端 dlna"></a>手机端 dlna</h2><p>手机这边我一开始只知道小米系统自带的音乐播放器，可以通过 dlna 推送到 R1。不过它有很多缺陷，一次只能播放一首歌，然后就暂停了。而且没法显示播放进度。</p>
<p>然后我想去找其它支持 dlna 播放的 APP ，谷歌商店试了好几个，没好用的。</p>
<p>今天下载了个 咪咕音乐 ，想来听听周杰伦的歌，发现它居然可以把歌曲通过 dlna 推送到 R1 上面，而且切歌之后，播放进度就会同步。非常的意外，不过，它也有缺点，就是有时候没法调节 R1 的音量，有时候却可以……</p>
<p>后来，我发现，在网易云音乐的设置中，将 dlna 功能打开，也可以把歌曲通过 dlna 推送到 R1 上面。这个应该是现在手机端比较好用的了，可以连续播放，可以同步播放进度，还可以通过手机调节 R1 的音量。</p>
<h2 id="天线"><a href="#天线" class="headerlink" title="天线"></a>天线</h2><p>由于拆机时不小心，把天线弄断了。</p>
<p><img src="/img/2020/%E5%A4%A9%E7%BA%BF%E6%96%AD.jpg" alt="天线断"></p>
<p>导致音响只有放在路由器旁边才能连接到 WiFi ，蓝牙连接距离只有一米左右……于是到淘宝买了条天线，1块4包邮，买来连接上，满血复活。</p>
<p><img src="/img/2020/tb%E5%A4%A9%E7%BA%BF.jpg" alt="tb天线"></p>
<p>由于不知道到底要买哪一款，我就买了几个，最终发现这个【IPEX 1代】在 R1 上用就刚好适合。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://www.right.com.cn/forum/thread-4013529-1-1.html">R1音箱 小白入门 和目前现状</a></p>
<p>这篇文章作者用自己的服务器提供绑定服务。</p>
<p><a href="https://www.cnblogs.com/lome/p/12465328.html#4548078">https://www.cnblogs.com/lome/p/12465328.html#4548078</a></p>
<p>这篇教自建服务</p>
<p><a href="http://www.mz6.net/news/android/12911.html">http://www.mz6.net/news/android/12911.html</a></p>
<p>另外一个自建服务的帖子</p>
<p><a href="https://www.right.com.cn/forum/thread-3285422-1-1.html">https://www.right.com.cn/forum/thread-3285422-1-1.html</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 docker 一些事</title>
    <url>/2020/04/about-docker/</url>
    <content><![CDATA[<p>有些小伙伴反映 armbian 的 docker，按照小钢炮那篇文章的方法，有一些容器老是无法启动成功。在此开一篇帖子记录一下。当然帖子的内容肯定不仅限于 armbian 。</p>
<h2 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>

<p>判断安装是否成功可以通过 <code>docker info</code> 这个命令查看。</p>
<h2 id="docker-镜像"><a href="#docker-镜像" class="headerlink" title="docker 镜像"></a>docker 镜像</h2><p>默认情况下 docker 镜像很难拉取，最简单的方案是路由器挂梯子，速度还是挺可以的。没有这个条件的话，就多准备几个镜像源吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">七牛</span><br><span class="line">https://reg-mirror.qiniu.com</span><br><span class="line">中科大</span><br><span class="line">https://docker.mirrors.ustc.edu.cn</span><br><span class="line">腾讯云</span><br><span class="line">https://mirror.ccs.tencentyun.com/</span><br><span class="line">网易</span><br><span class="line">http://hub-mirror.c.163.com/</span><br><span class="line">daocloud</span><br><span class="line">http://f1361db2.m.daocloud.io/</span><br><span class="line">华为云</span><br><span class="line">https://05f073ad3c0010ea0f4bc00b7105ec20.mirror.swr.myhuaweicloud.com/</span><br></pre></td></tr></table></figure>

<p>阿里云私有镜像加速。<br>（自己进入<br><a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors">https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</a> 用自己的账号登陆，获取属于自己的加速镜像）</p>
<p>得到的格式是这样的：<a href="https://xxxxxxxx.mirror.aliyuncs.com/">https://xxxxxxxx.mirror.aliyuncs.com/</a></p>
<h2 id="关于-qb"><a href="#关于-qb" class="headerlink" title="关于 qb"></a>关于 qb</h2><p>armbian 用小钢炮的配置来建立 qb 容器的话，有一堆的问题，这里我改了一些内容，自己试了几次，应该没什么大问题了。使用的是 4.2.1，想用新的可以去 dockerhub 看→<a href="https://hub.docker.com/r/80x86/qbittorrent/tags">传送门</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line">#下面我是将 /media/one 作为下载路径，你自己修改</span><br><span class="line">DOWNLOAD_PATH=/media/one/</span><br><span class="line">QBT_AUTH_SERVER_ADDR=&quot;127.0.0.1&quot;</span><br><span class="line">#下面我是将 /media/one/lib/qb 作为配置文件的路径，你自己修改</span><br><span class="line">QBCONF=/media/one/lib/qb</span><br></pre></td></tr></table></figure>

<p>对上面的部分修改，然后粘贴到 shell 中。</p>
<p>下面的不用修改，直接复制粘贴就行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -e WEB_PORT=8080 \</span><br><span class="line">        -e BT_PORT=8998 \</span><br><span class="line">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v $QBCONF/.config/qBittorrent:/config \</span><br><span class="line">        -v $QBCONF/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v &quot;$DOWNLOAD_PATH&quot;:/downloads \</span><br><span class="line">        -v &quot;$DOWNLOAD_PATH&quot;:&quot;$DOWNLOAD_PATH&quot; \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        $&#123;IMAGE_NAME&#125;</span><br></pre></td></tr></table></figure>

<p>将上面这堆在终端中输入后，到 portainer 中查看日志。</p>
<p><img src="/img/2020/container.jpg" alt="container"></p>
<p>如果启动成功，最后会出现一个地址，如果不成功，也可以看看具体出现什么问题。</p>
<p><img src="/img/2020/qb%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.jpg" alt="qb启动成功"></p>
<p>比较常见的问题是，docker 对文件夹没有读写权限。简单粗暴解决方案，给予 777 权限。先在 portainer 中停止 qb 容器，然后在终端执行下面的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 -R $QBCONF</span><br><span class="line">chmod 777 -R $DOWNLOAD_PATH</span><br></pre></td></tr></table></figure>

<p>然后再去启动容器。按理应该就可以了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>修复 next 主题无法提交到 git 仓库</title>
    <url>/2018/08/about-git-cache/</url>
    <content><![CDATA[<p>修复 git 仓库内，有另一个仓库，而产生冲突的问题。</p>
<p>用 hexo 来部署博客，只是把生成的静态网页给发布上去。但完整的备份是需要备份博客源码的，很多人会新建一个项目来放置博客源码。这样每次写好文章更新博客后，再把源码更新到远程仓库，例如 github 就行。完美备份。</p>
<p>但是，我发现我的 Next 主题下的文件全部无法上传，官方自带的主题就行。于是想到，当前这整个博客文件夹都是一个 git 仓库，而 next 主题是从 github 上克隆下来的，也是一个仓库，估计是会产生冲突。</p>
<p>于是，进入到 next 目录下，用命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure>
<p>删除掉 <code>.git</code> 这个文件夹。这样应该就把这个仓库变成一个普通的文件夹了吧。于是再来把它添加到博客源码这个项目里吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>结果不行，报错了，显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: in unpopulated subnodule &#x27;themes/next&#x27;</span><br></pre></td></tr></table></figure>
<p>看来不只是删除一个文件夹就行。好像还得再清除下，先返回上一级目录，<code>cd ..</code> 后就是在 themes 这个目录下咯，再执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r –cached /next</span><br></pre></td></tr></table></figure>
<p>去掉已经托管的文件，然后提交即可。</p>
<p>此时再输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<p>就可以了。<br>之后再 commit，并成功同步到远程仓库。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>kindle 漫画制作软件 kindle comic converter 汉化版</title>
    <url>/2021/12/about-kcc/</url>
    <content><![CDATA[<p>Kindle Comic Converter 是漫画制作软件，主要是用来讲图片转换为 epub 或者 mobi 格式的文件，方便墨水屏设备阅读。</p>
<p>项目地址：<a href="https://github.com/ciromattia/kcc">ciromattia&#x2F;kcc: KCC (a.k.a. Kindle Comic Converter) is a comic and manga converter for ebook readers. (github.com)</a></p>
<p>最后的更新停留在 2019 年 10 月，最近我也是花了很多的时间在研究这款软件上。最终的成果是在自己的机器上，编译出了新的软件版本。</p>
<p>目前编译出的有</p>
<ul>
<li>Windows 64 位版（win10 和 win7 上都可以用）</li>
<li>Macos ARM 版（在 M1 芯片的 Mac mini 上可以使用，不需要转译）</li>
</ul>
<p><img src="/img/2021/Mac_M1_kcc.png" alt="Mac_M1_kcc"></p>
<blockquote>
<p>软件链接：</p>
<p>蓝奏云：<a href="https://pan.lanzou.com/b0bg5lrub">https://pan.lanzou.com/b0bg5lrub</a> 密码:2ebz</p>
<p>百度网盘：链接：<a href="https://pan.baidu.com/s/1NWci0kT5NN_XFfv3HETVJw">https://pan.baidu.com/s/1NWci0kT5NN_XFfv3HETVJw</a><br>提取码：psee</p>
<p>个人下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a> </p>
<p>在【Windows 应用】和【Mac 应用】文件夹中</p>
<p>阿里云盘分享不了压缩包，mac 的 dmg 安装包居然也不行。。。</p>
</blockquote>
<p><img src="/img/2021/profiles_kcc.png" alt="profiles_kcc"></p>
<p>并且我还对软件进行了汉化。并且添加多几个预设，如果你们的设备没有在列表里面，其实也没有关系的，选择同样分辨率的设备就行。例如里面的 Boox，我就只添加一个，因为我发现 7.8 英寸的 nova air 和 10.3 英寸的 note X 其实它们的分辨率是一样的，都是1404 * 1872，和 kobo auro ONE 其实也一样，本来是不需要添加进去的。</p>
<p>但是我发现如果预设选择 kobo 系列的，那么转换出来的文件，后缀是 kepub.epub，看着有点别扭，所以我就添加多一个预设进去了。这样转换出来的 epub 就不会带 kepub。</p>
<p><img src="/img/2021/kcc-other.jpg" alt="kcc-other"></p>
<p>如果自己的设备在里面没有相同分辨率的机器，那么可以选择 other，然后自己添加分辨率。</p>
<p>这里我也把里面的预设的分辨率放出来给大家参考</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;K1&#x27;: (&quot;Kindle 1&quot;, (600, 670), Palette4, 1.8),</span><br><span class="line">&#x27;K2&#x27;: (&quot;Kindle 2&quot;, (600, 670), Palette15, 1.8),</span><br><span class="line">&#x27;K34&#x27;: (&quot;Kindle Keyboard/Touch&quot;, (600, 800), Palette16, 1.8),</span><br><span class="line">&#x27;K578&#x27;: (&quot;Kindle&quot;, (600, 800), Palette16, 1.8),</span><br><span class="line">&#x27;KDX&#x27;: (&quot;Kindle DX/DXG&quot;, (824, 1000), Palette16, 1.8),</span><br><span class="line">&#x27;KPW&#x27;: (&quot;Kindle Paperwhite 1/2&quot;, (758, 1024), Palette16, 1.8),</span><br><span class="line">&#x27;KV&#x27;: (&quot;Kindle Paperwhite 3/4/Voyage/Oasis&quot;, (1072, 1448), Palette16, 1.8),</span><br><span class="line">&#x27;KPW5&#x27;: (&quot;Kindle Paperwhite 5/Signature Edition&quot;, (1236, 1648), Palette16, 1.8),</span><br><span class="line">&#x27;KO&#x27;: (&quot;Kindle Oasis 2/3&quot;, (1264, 1680), Palette16, 1.8),</span><br><span class="line">&#x27;MIX7&#x27;: (&quot;Kindle Oasis 2/3&quot;, (1264, 1680), Palette16, 1.8),</span><br><span class="line">&#x27;KoMT&#x27;: (&quot;Kobo Mini/Touch&quot;, (600, 800), Palette16, 1.8),</span><br><span class="line">&#x27;KoG&#x27;: (&quot;Kobo Glo&quot;, (768, 1024), Palette16, 1.8),</span><br><span class="line">&#x27;KoGHD&#x27;: (&quot;Kobo Glo HD&quot;, (1072, 1448), Palette16, 1.8),</span><br><span class="line">&#x27;KoA&#x27;: (&quot;Kobo Aura&quot;, (758, 1024), Palette16, 1.8),</span><br><span class="line">&#x27;KoAHD&#x27;: (&quot;Kobo Aura HD&quot;, (1080, 1440), Palette16, 1.8),</span><br><span class="line">&#x27;KoAH2O&#x27;: (&quot;Kobo Aura H2O&quot;, (1080, 1430), Palette16, 1.8),</span><br><span class="line">&#x27;KoAO&#x27;: (&quot;Kobo Aura ONE&quot;, (1404, 1872), Palette16, 1.8),</span><br><span class="line">&#x27;BOOX&#x27;: (&quot;BOOX nova air / note X&quot;, (1404, 1872), Palette16, 1.8),</span><br><span class="line">&#x27;KoC&#x27;: (&quot;Kobo Clara HD&quot;, (1072, 1448), Palette16, 1.8),</span><br><span class="line">&#x27;KoL&#x27;: (&quot;Kobo Libra H2O&quot;, (1264, 1680), Palette16, 1.8),</span><br><span class="line">&#x27;KoF&#x27;: (&quot;Kobo Forma&quot;, (1440, 1920), Palette16, 1.8),</span><br><span class="line">&#x27;OTHER&#x27;: (&quot;Other&quot;, (0, 0), Palette16, 1.8),</span><br></pre></td></tr></table></figure>



<p>其实选择不同的预设，只是转换出来的图片分辨率不用而已，但是，好像都是可以正常全屏阅读的，例如我同一本漫画，转为为 ko2 和 kindle（也就是上面的 K578，分辨率为 600 X 800），那么结果在我的 kindle 499 上面都是可以正常阅读，而且明显用 ko2 预设转换出来的漫画，分辨率更高，在 kindle 499 上面看也比较清晰一些。因为选 ko2 转换出来的 mobi 文档，里面的图片分辨率是 1680 X 1264 ，而选择 kindle 转换出来的分辨率则为 600 X 800，所以不管在那台设备，都是高分辨率的图片看起来清晰。</p>
<p>所以个人感觉，如果可以，尽可能的使用较高分辨率的预设，这样转换出来的图片分辨率比较高，画质更好更清晰，而且可能以后的设备也可以阅读（例如现在有时从网上下载的 kindle 漫画，有些是比较旧的，是当年网友制作给 600 X 800 的设备阅读的，放到 ko2 这个分辨率为 1680 X 1264 的设备看就挺模糊的）。</p>
<p>当然也不是说分辨率调高就好，现在比较高清的日本漫画资源，分辨率高度方面好像就 2000 多而已，你调个 3、4000 肯定也没用。</p>
<p><img src="/img/2021/tieba-img-download.jpg" alt="tieba-img-download"></p>
<p>然后我发现贴吧还是可以下载到挺多漫画图片的，所以我也写了个程序来下载贴吧的高清图片，用着也还不错，图片会按照顺序重命名，所以下载完后，直接把文件夹拖到 kcc 里面就可以转换为 epub 或者 mobi 了，两者可以配合使用。</p>
<p>对了，kcc 这个软件也是可以将 PDF 漫画，转换为 epub 或者 mobi 的，我之前就有尝试过，将 700 多 M 的 PDF 漫画，拖进去，转换为 mobi 漫画，放到 kindle 上面来阅读。结果会变成两个文件，因为这个软件限制 mobi 格式的文档，最大只能 400M，据说是太大了 kindle 用起来会卡。（作者在论坛说的）</p>
<p>EPUB 就没有这方面的限制，所以我尝试过把整本漫画转换为 epub，结果生成了一个 1G 多的文档，放到墨案 mix7 上面阅读还挺流畅的。</p>
<h3 id="12-21-版"><a href="#12-21-版" class="headerlink" title="12.21 版"></a>12.21 版</h3><p><img src="/img/2021/kcc-2021-12-21.jpg" alt="kcc-2021-12-21"></p>
<p>添加了两个选择框</p>
<ul>
<li>禁删 epub</li>
<li>保持原图</li>
</ul>
<p>当我们制作 mobi 漫画时，其实软件是先将图片制作为 epub，然后再使用 kindlegen 将 epub 转换为 mobi，转换完成就把 epub 删除掉。</p>
<p>如果我们制作的漫画是想要放到网上进行分享的，那么两种格式都保存可能比较好，这样受众会更多一些。所以我添加了一个选项，勾选上就不会删除 epub 了。</p>
<p>保持原图，就是不对图片进行处理，仅仅是把图片放到 epub 或者 mobi 里面而已，所以不管你的图片是双页，还是留有巨大的白边，它都不管了，直接放进去就行。一些高分辨率图片也可以使用这个功能。</p>
<h3 id="另类的用法——将-PPT-课件转为-mobi"><a href="#另类的用法——将-PPT-课件转为-mobi" class="headerlink" title="另类的用法——将 PPT 课件转为 mobi"></a>另类的用法——将 PPT 课件转为 mobi</h3><p>这个是网友 @<a href="https://space.bilibili.com/11372531">芊里阿</a>  分享的方法</p>
<blockquote>
<p>之前用kindle把ppt转成pdf看，又卡，每一页还显示不全。 用up分享的软件，先把ppt转成图片，然后再转mobi格式的就方便多了（要点那个旋转不切割，不缩放）大家有需要的也可以试试 </p>
</blockquote>
<p>如果是直接将 PPT 导出为 PDF，放到 kindle 上面也可以看，但是不能横屏吧。而且 PDF 在 kindle 上面观看，应该是每一页都会全刷，屏闪非常严重。用 mobi 就不会，而且用这个软件可以让图片进行旋转，也就可以全屏观看了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透工具 nps</title>
    <url>/2020/03/about-nps/</url>
    <content><![CDATA[<p>nps 是一款内网穿透工具，在 Github 上面有一万多个 star ：<a href="https://github.com/ehang-io/nps">https://github.com/ehang-io/nps</a></p>
<p>这个的原理和 frp 是一样的，都是用服务器来中转，不过用起来会简单一点。</p>
<blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a></p>
</blockquote>
<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>服务器开好后，先下载 nps ，解压，安装，启动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_amd64_server.tar.gz</span><br><span class="line">tar -zxvf linux_amd64_server.tar.gz</span><br><span class="line">./nps install</span><br><span class="line">nps start</span><br></pre></td></tr></table></figure>

<p>这样服务器就启动 nps 这个服务了，在浏览器输入 ip:8080 就可以进行管理。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>像 N1 ，我家云，猫盘 这些设备，都是 arm64 ，因此它的使用方法都是一样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ehang-io/nps/releases/download/v0.26.6/linux_arm64_client.tar.gz</span><br><span class="line">tar -zxvf linux_arm64_client.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后需要到管理面板，添加客户端，这样会生成一个密钥。有了这个才能和服务器建立连接。</p>
<p>建立的命令是这样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./npc -server=ip:port -vkey=web界面中显示的密钥</span><br></pre></td></tr></table></figure>

<p>例如我的就是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./npc -server=45.32.126.224:8024 -vkey=4vv7n1p7u584an64</span><br></pre></td></tr></table></figure>

<p>此时就与服务器建立好连接了，之后的操作只需在管理面板，进行端口映射即可。</p>
<h2 id="建立隧道"><a href="#建立隧道" class="headerlink" title="建立隧道"></a>建立隧道</h2><p>点击左边的【TCP 隧道】，【新增】，填写【ID】，服务器访问端口，目标端口。</p>
<p>比如我服务器端口设置为 1234 ，目标端口为 80 ，建立好后，我只要访问服务器的1234端口，就可以看到内网设备 80 端口的内容。想要访问其它的端口，就再建立隧道。内网的端口和服务器的端口是可以保持一致的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本以为，它只是用起来比 frp 简单。但现在发现不止于此，还有其它很多功能。</p>
<p>首先作为内网穿透工具，它用起来确实简单，点几下就可以建立好连接。</p>
<p>然后里面的域名解析功能，用起来也非常的简单。事先把 <code>*.xxx.com</code> 解析到服务器，之后就可以实现不同的子域名，访问不同的页面了。</p>
<p>然后我发现，用 nps 也是可以套 CDN 的，这样就不用担心自己的 IP 暴露了，不过速度会变慢一些。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于乐橙 SN1 一些记录</title>
    <url>/2021/03/about-sn1/</url>
    <content><![CDATA[<p>简书刷机教程</p>
<p><a href="https://www.jianshu.com/p/695fa3b0dab5">https://www.jianshu.com/p/695fa3b0dab5</a></p>
<p>拆解与介绍</p>
<p><a href="https://www.mydigit.cn/forum.php?mod=viewthread&amp;tid=139874">https://www.mydigit.cn/forum.php?mod=viewthread&amp;tid=139874</a></p>
<p>扩展玩法</p>
<p><a href="https://www.right.com.cn/forum/thread-3773109-1-1.html">乐橙SN1破解补丁包-机顶盒桌面-去限制-开ADB-ROOT-安装未知来源软件</a></p>
<p><a href="https://post.smzdm.com/p/aoo8oqzn/">乐橙SN1 扩展 Transmission插件， 内置硬盘充分利用 PT必备</a></p>
<p>由于我依然还是无法刷机，所以只能改为研究怎么折腾原生系统了。</p>
<h4 id="自带的远程下载软件"><a href="#自带的远程下载软件" class="headerlink" title="自带的远程下载软件"></a>自带的远程下载软件</h4><p>与其它 bt 软件连接的端口，似乎每次都变化。我通过在电脑使用 qb 做种，然后 sn1 下载这个种子资源，了解到 sn1 在 qb 中显示的 客户端 信息为 client_test/1.1.1.0，估计是他们自己搞的一个 BT 软件吧。</p>
<h4 id="硬盘的路径"><a href="#硬盘的路径" class="headerlink" title="硬盘的路径"></a>硬盘的路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/linux/mnt/lv/</span><br></pre></td></tr></table></figure>

<h4 id="web-网页的路径"><a href="#web-网页的路径" class="headerlink" title="web 网页的路径"></a>web 网页的路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/linux/mnt/web</span><br></pre></td></tr></table></figure>

<p>我是先 root ，然后通过 ttl 备份原本的系统。再来折腾其它的，建议大家也这么做，这个非常重要，因为这机器现在是没有线刷包的，要是自己搞坏了系统，估计就变砖了。</p>
<p>root 后是可以恢复出厂设置的，不用担心，而且恢复之后功能都还能用，远程访问、下载这些都在，并且 root 权限依旧，不会因为恢复出厂而丢失。</p>
<p>折腾主要就是安装 entware ，他人已经写好教程了，大家可以根据超链接跳转过去学习，建议有科学上网环境再来折腾这个，不然很可能安装失败。</p>
<p><a href="https://post.smzdm.com/p/aoo8oqzn/">乐橙SN1 扩展 Transmission插件， 内置硬盘充分利用 PT必备</a></p>
<p>这个过程中，需要安装 <strong>busybox</strong> ，我这里安装的是 1.20.2，使用这个版本才可以用 wget 。安装包我上传到网盘里 <a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 在 【手机软件】里面。</p>
<p>代理可以参考这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=http://192.168.123.69:7890</span><br><span class="line">alias pon=&#x27;export http_proxy=$url; export https_proxy=$url&#x27;</span><br><span class="line">pon</span><br></pre></td></tr></table></figure>

<p>192.168.123.69 是我电脑的 ip ，不细讲了。</p>
<p>配置好 entware 之后，还可以装 qb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opkg install qbittorrent</span><br></pre></td></tr></table></figure>

<p>安装完成应用在 /opt/bin 里面，可以通过 /opt/bin/qbittorrent-nox 来运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/bin # qbittorrent-nox </span><br><span class="line">QtSingleCoreApplication: listen on local socket failed, QLocalServer::listen: Name error</span><br><span class="line"></span><br><span class="line">*** Legal Notice ***</span><br><span class="line">qBittorrent is a file sharing program. When you run a torrent, its data will be made available to others by means of upload. Any content you share is your sole responsibility.</span><br><span class="line"></span><br><span class="line">No further notices will be issued.</span><br><span class="line"></span><br><span class="line">Press &#x27;y&#x27; key to accept and continue...</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">******** Information ********</span><br><span class="line">To control qBittorrent, access the Web UI at http://localhost:8080</span><br><span class="line">The Web UI administrator username is: admin</span><br><span class="line">The Web UI administrator password is still the default one: adminadmin</span><br><span class="line">This is a security risk, please consider changing your password from program preferences.</span><br></pre></td></tr></table></figure>

<p>第一次运行需要按 y 同意一下。</p>
<p>想知道能装什么，可以浏览器访问 <a href="http://bin.entware.net/armv7sf-k3.2/">http://bin.entware.net/armv7sf-k3.2/</a></p>
<p>然后通过查找来查询自己想装的应用。</p>
<p>不过装好这些应用后，机器重启，自身的 launcher 就打不开了。也就是自身的 nas 功能丢失了。估计是哪里冲突了，暂时还没找到原因。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 s905 盒子数码Q5刷 armbian Ubuntu</title>
    <url>/2020/07/about-s905/</url>
    <content><![CDATA[<p>闲鱼上面 s905 的电视盒子有很多，我买的是 北京数码视讯 Q5 ，这款算是比较出名的了，网上搜也可以找到很多帖子。</p>
<p>我买来时里面就是破解好的安卓系统了，当成一个普通播放器是没什么问题的。如果你是家里本身就有这台设备的，可以网上查一下怎么破解，其实不能算破解吧，应该叫刷机才对。</p>
<p>比如我这台后面写的是江苏移动，那它应该是江苏那边的用户办理宽带送的，然后如果宽带到期了，这台设备也就没法用了。因为里面的系统是移动定制的。网上有方案可以把它刷成其它系统，做到废物利用。</p>
<p>虽然我现在可以正常使用里面的安卓系统，不过我好奇的是怎么把它刷成 Linux 系统。研究之后发现挺简单的。</p>
<hr>
<p><strong>需要东西</strong>（在网盘 <a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 的【不仅限于盒子】文件夹中）</p>
<ol>
<li>Linux 系统镜像（这里使用 Ubuntu 18.04）</li>
<li>将 img 镜像写入 U 盘或者 tf 卡的工具——usb burning tool</li>
<li>从安卓系统重启到 Linux 系统软件—— Reboot to libreELEC</li>
</ol>
<p>将三样东西准备好，然后用 usb burning tool 将 img 镜像写入 U 盘或者 tf 卡。写入好后，需要修改 dtb ，我们更改  U 盘或者 tf 卡的 <code>uEnv.ini</code> 文件，将里面的第一行修改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtb_name=/dtb/meson-gxbb-p201.dtb</span><br></pre></td></tr></table></figure>

<p>保存文件，将 U 盘或者 tf 卡插入机器，开机。</p>
<p>如果依然是进入到安卓系统的话，那就安装一个上面提到的 <code>Reboot to libreELEC</code> 这个软件，自己想办法把这个 apk 安装包弄到盒子上面装。</p>
<p>装好打开这个软件，确认，就可以重启进入 Linux 系统。后面的教程和之前的 N1 教程一模一样的，可以去看之前的文章就行。</p>
<p><a href="/2020/03/n1-armbian-server/">打造最具性价比服务器 N1-armbian</a></p>
<p>有一个缺点就是，没法驱动 wifi ，我试过里面好几个 dtb ，都没法，尝试用其它版本的固件，也不行，暂时无解，如果有朋友知道怎么解决欢迎告知我一下，可以用下方的邮箱，或者其它平台的私信、留言都可以，感谢。</p>
<p>视频发出后，感谢网友 @<a href="https://space.bilibili.com/53153092">栾__</a> 的回复</p>
<blockquote>
<p>wifi可以用544的镜像，后来的都没有驱动</p>
</blockquote>
<p>于是我通过搜索找到了这篇帖子</p>
<p><a href="https://www.cnblogs.com/jzgw/p/S905_8189ETV_8189ES_wifi-config.html">S905/S905X Armbian安装WiFi驱动8189ETV的解决方法</a></p>
<p>在里面下载了 5.44 的镜像，将 dtb 文件夹里面的 meson-gxbb-p201.dtb 复制到根目录，改名为 dtb.img。</p>
<p>使用这个镜像不能从 sd 卡启动，只能从 U 盘启动。然后 wifi 我没有成功驱动……</p>
<h3 id="2022-年-10-月"><a href="#2022-年-10-月" class="headerlink" title="2022 年 10 月"></a>2022 年 10 月</h3><p>时隔两年多，今天收到了网友的邮件，告知我已经解决了 WiFi 驱动的问题，并且还给出了编译网卡驱动的过程，大家感兴趣的可以点击链接去了解一下。</p>
<p><a href="https://www.right.com.cn/forum/thread-8257102-1-1.html">https://www.right.com.cn/forum/thread-8257102-1-1.html</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于玩客云的一些资料</title>
    <url>/2019/10/about-wankeyun/</url>
    <content><![CDATA[<h3 id="玩客云能做什么？"><a href="#玩客云能做什么？" class="headerlink" title="玩客云能做什么？"></a>玩客云能做什么？</h3><ul>
<li><p>下载迅雷可以下载的内容。</p>
</li>
<li><p>当私人网盘来使用，出门在外时，也可访问家中硬盘中的文件。</p>
</li>
</ul>
<p>那它有什么缺点？最大的缺点是，会不停往硬盘存东西。因此会加大硬盘损耗，以及占用带宽。</p>
<p>下面是关于玩客云，个人收集的一些资料。</p>
<h3 id="问：现在入手什么版本最好啊？"><a href="#问：现在入手什么版本最好啊？" class="headerlink" title="问：现在入手什么版本最好啊？"></a>问：现在入手什么版本最好啊？</h3><p>（这个是几个月前的回答了，现在没什么用，一律买最便宜的就行）</p>
<ul>
<li><p>看你的用途吧。。。想要挖矿的就去买开了挖矿的，不需要挖矿、只想下载和当网盘用的买退出挖矿的或者未拆封的，要刷机或者装组件(如transmission、apache、nginx、php、mysql等)玩的买root的。</p>
</li>
<li><p>之前买了一个全新未拆封的，没有开通链克计划，硬盘是可以休眠的</p>
</li>
</ul>
<h3 id="玩客云限制上传的方法"><a href="#玩客云限制上传的方法" class="headerlink" title="玩客云限制上传的方法"></a>玩客云限制上传的方法</h3><p>（最好电脑上操作）</p>
<ul>
<li><p>1、显示隐藏的文件，看到一个.onething_data的文件夹，删除了。</p>
</li>
<li><p>2、打开记事本，什么都不需要，直接另存为—保存类型选择为所有文件，文件名为.onething_data</p>
</li>
<li><p>丢到玩客云硬盘的根目录上，设置为只读的属性，完事。</p>
</li>
<li><p>反正我这么搞，不会上班，远程访问也没毛病，一天还有0.几个蛋。大不了被绝育，能下载，能当家庭云用就行！</p>
</li>
</ul>
<hr>
<p>很多人不满玩客云一直读写硬盘的这种行为，于是申请退出玩客链计划，当时想退出却没那么容易。因为迅雷要求你必须手持身份证，拍一张照片给他们，才愿意帮你退出计划。这想想还是挺可怕，谁知道照片会被拿去干什么事啊。但是在 张大妈 有这样一个有趣的例子。</p>
<p>与客服互怼成功拒绝提供身份证</p>
<p><a href="https://post.smzdm.com/p/az59706n/">https://post.smzdm.com/p/az59706n/</a></p>
<p>同时这上面还有一篇非常详细的评测</p>
<p><a href="https://post.smzdm.com/p/aw3np922/">https://post.smzdm.com/p/aw3np922/</a></p>
<p>B 站上面也有教</p>
<p><span style="color: rgb(34, 34, 34);">不让其不停读取硬盘的四种方案（</span><a href="https://www.bilibili.com/video/av53589623">https://www.bilibili.com/video/av53589623</a><span style="color: rgb(34, 34, 34);">）</span></p>
<ul>
<li><p><span style="color: rgb(34, 34, 34);">① .onething_data文件夹封闭 具体操作看之前视频</span></p>
</li>
<li><p><span style="color: rgb(34, 34, 34);">② 发邮件退出玩客云奖励计划</span></p>
</li>
<li><p><span style="color: rgb(34, 34, 34);">③ 用闲置U盘或TF卡做主盘避免写入机械硬盘</span></p>
</li>
<li><p><span style="color: rgb(34, 34, 34);">④ 不用时弹出硬盘 使用时远程重启</span></p>
</li>
</ul>
<h3 id="用-Linux-禁止其读写的方法："><a href="#用-Linux-禁止其读写的方法：" class="headerlink" title="用 Linux 禁止其读写的方法："></a>用 Linux 禁止其读写的方法：</h3><p>（此方法本人测试无效，因为玩客云根本不能识别 ext4 格式的硬盘）</p>
<p>直接第一种覆盖就行 而且他不会改回来 但是需要把硬盘搞成ext4 同时设置该文件的用户组为root 再修改文件属性不可修改 以上操作在linux下进行</p>
<h3 id="挂载到电脑的方法："><a href="#挂载到电脑的方法：" class="headerlink" title="挂载到电脑的方法："></a>挂载到电脑的方法：</h3><ul>
<li>Win + r 输入 //ip</li>
</ul>
<h3 id="我个人对于这台设备的评价"><a href="#我个人对于这台设备的评价" class="headerlink" title="我个人对于这台设备的评价"></a>我个人对于这台设备的评价</h3><p>我认为，对于下载，有这台设备还是不错的，因为它让我们在没有迅雷会员的情况下，也可以高速下载。当然前提是你下载的资源迅雷的服务器里面有。不过随着现在版权管理越来越严，迅雷能下载的东西也越来越少了。</p>
<p>对于当私人云盘，我看有人专门买两台这个来当私人云盘，不过买的硬盘盒都比机器贵。我个人是不会把手机的图片、视频放这的，不太敢，也没必要。</p>
<p>所以这台机器对我确实没多大用处，大多数情况下都是出于吃灰状态。不过也无所谓了，五六十块钱的东西，买来折腾折腾过过瘾也就值得了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>关于迅雷赚钱宝二代一些小记录</title>
    <url>/2021/03/about-zhuanqianbao2/</url>
    <content><![CDATA[<p>最近买了台 赚钱宝2代，闲鱼买的，30块包邮，有包装，电源适配器，网线。</p>
<p><img src="/img/2021/2021-03-01_21-01-42.jpg" alt="2021-03-01_21-01-42"></p>
<p>买这个干什么呢？拿它来赚钱吗？并不是，现在这个好像赚不了钱了吧，不然别人也不会卖。主要是看到恩山上面有刷机的帖子，想买来刷机玩玩。</p>
<p>论坛帖子：<a href="https://www.right.com.cn/forum/thread-4063295-1-1.html">https://www.right.com.cn/forum/thread-4063295-1-1.html</a></p>
<p>刷机很简单，下载镜像——<strong>二代线刷无需算号只需改mac后插盘就用.img</strong></p>
<p>然后使用 usb burning tool 导入，赚钱宝先用双公头 usb 线连接电脑，然后用卡针或者牙签，捅住复位键，再插电源。软件应该就能识别到了，然后就可以点【开始】刷机</p>
<p><img src="/img/2021/2021-03-01_23-17-35.jpg" alt="2021-03-01_23-17-35"></p>
<p>完成后拔电源、双公头 usb，再插上网线、电源开机。等待路由器出现 IP，然后就可以通过 ssh 连接上去。</p>
<p><img src="/img/2021/2021-03-01_21-05-16.jpg" alt="2021-03-01_21-05-16"></p>
<p>原本以为是 armbian ，刷完才发现，原来是 openwrt，而且精简得不能再精简的，很多命令行工具都没有。里面自带有甜糖，一开机就跑，有兴趣可以去原帖看看。</p>
<p>我对这个是没什么兴趣，那就把它拆开看看吧。网上一搜好像没有拆机的文章，那只能自己研究了。耗费很长很长的时间，终于把机器拆开了，也拆坏了。</p>
<p><img src="/img/2021/2021-03-01_23-23-40.jpg" alt="2021-03-01_23-23-40"></p>
<p>通过这伤痕累累的外壳，也可以想象我拆得好辛苦。</p>
<p><img src="/img/2021/2021-03-01_23-24-19.jpg" alt="2021-03-01_23-24-19"></p>
<p>而且主板上的一颗电容也被我弄掉下来了，现在机器无法开机了。</p>
<p><img src="/img/2021/2021-03-01_23-24-24.jpg" alt="2021-03-01_23-24-24"></p>
<p>背面长这样，可以焊接排针，用于 ttl 。</p>
<p><img src="/img/2021/2021-03-01_23-24-31.jpg" alt="2021-03-01_23-24-31"></p>
<p>正确的拆法应该是，用吹风筒吹机器的正面加热，然后取下上面比较薄的一层壳，应该就能看到 4 颗螺丝，拧开才能取下外壳。而我这种拆法是直接大力出奇迹，在 4 颗螺丝拧紧的情况下，强行将外壳掰开。</p>
<p>希望后人引以为戒。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>文章中插入服务器的视频</title>
    <url>/2018/09/add-video-in-post/</url>
    <content><![CDATA[<p>在博客上可以用嵌入的方式，引用优酷和 YouTube 的视频，那么可以播放放在网站（服务器）的视频吗？</p>
<p>下面依然用这串代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">315</span> <span class="attr">width</span>=<span class="string">560</span> <span class="attr">src</span>=<span class="string">&#x27;视频的相对路径&#x27;</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在本地的启动 web 服务，然后在浏览器打开，视频可以播放。不错，手机端也可以正常访问。此时将网页和视频文件放置在 GitHub 上，同样可以播放。但是有个缺点，一打开就自动播放，不知道怎么关闭。</p>
<p>后来了解到用 video 标签的话，就可以设置它不自动播放，并且如果想让视频能够自动适应大小，只需要加上 div 标签就行。如下面这样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">src</span>=<span class="string">&quot;视频路径&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div  width="100%">
<video height="100%" width="100%" src="/misc/1.mp4" controls="controls"></video>
</div>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器的端口映射和内网穿透</title>
    <url>/2018/06/about-router/</url>
    <content><![CDATA[<p>如果我的路由器的管理地址为 <code>192.168.1.1</code> 如果我开放外网访问，当在外网输入我的公网IP，那么默认是访问 公网IP:80 然后进入路由器的管理界面 <code>192.168.1.1</code></p>
<p><strong>端口映射</strong></p>
<p>端口映射，可以设置不同的端口来访问路由器内不同的设备。例如我的电脑连接路由器，然后分配的IP是<code>192.168.1.2</code>，此时我可以通过设置一个端口（8888）来映射到电脑，设置完成后输入公网IP:8888 访问的就是电脑了而不是路由器。通过这种方法,可以让电脑开启web服务，然后从外网访问。此处必须输入外网ip来访问，通过内网像 <code>192.168.1.1:8888</code> 这样是没用的。</p>
<p><strong>内网穿透</strong></p>
<p>当然上面的那样明显只适合有公网IP的情况，像我的话就没有公网IP。所以外网访问内网就需要内网穿透了，这里使用 ngrok 和<code>老毛子固件</code>。</p>
<p>我使用的路由器固件为恩山的hiboyhiboy大神的固件，路由器为斐讯K2。</p>
<p>打开路由器的ngrok穿透界面，去 Server.ngrok.cc 注册帐号，然后得到一个 token 码，复制它，之后开通隧道，可以选择免费的。设置域名前缀，如123，那么最后你的域名就是 <span style="background-color: #ffff00;">123.free.ngrok.cc</span></p>
<p>之后设置一个端口，用默认的4443也可以。</p>
<p>开通隧道完成后，再回到路由器这里，然后把信息填进去，</p>
<p><a href="/img/2018/ngrok.png"><img src="/img/2018/ngrok.png"></a></p>
<p>之后再把启动 【ngrok 内网穿透】的的开关打开，再应用本页面设置，此时通过访问域名</p>
<p>如上面的<span style="background-color: #ffff00;">123.free.ngrok.cc</span></p>
<p>应该就可以进入路由器管理界面了。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>分析网络兼职诈骗过程</title>
    <url>/2018/07/analysis-cheating-process/</url>
    <content><![CDATA[<p>此类消息一般多见于 QQ 群，毕竟对于个人来说，这个应该算是最大的曝光率了。可见其宣传手段以 QQ 群为主。（后面我去加入，管理员的要求也印证了这一点）</p>
<p>从网络得知了一个 QQ 群号，我去加入。之后联系管理员了解工作。这时她的 QQ 性别一般都是女性，美女头像，20 多岁。（至于真假呢，呵呵。）然后她就会开始介绍工作，例如刷单、打字或者快递单录入，都会强调其简单、时间自由、收益不错等。之后问你要不要加入？回答要，然后就说需要帮她宣传，自然就是转发 QQ 群了。而我昨天的尝试，发现现在还得发空间说说和微信朋友圈了。</p>
<p>很不容易宣传完了，再联系她。这时就会说可以了，得去听一个老师的课，培训完才能工作。以前是 QT 语音和 YY 语音，现在可能这些不能用了吧，改成了第三方软件，估计是自己专门开发的。（应该是，我后来又去登录一次，这个软件连自己名称都不能改，只有那些‘老师’才能改你的名称。）注册好帐号之后，登录上去，等人差不多了，就开始讲了。先装模作样地介绍怎么工作，balabala 一堆之后。就开始要钱了，说需要花一百块左右买一个激活码，然后才能有一个工号，才可以接任务。然后就是各种游说。</p>
<p>这个时候，大多数人会在这放弃，但是此时想起之前转发这些也很不容易，甚至因为这个而被很多个 QQ 群踢了。此时放弃，岂不是前功尽弃了？或许有人就因此而选择了去交钱。而有的就还有些犹豫，于是去问之前那个介绍人。（例如我就去问，之前不是说不用交钱吗？）此时介绍人就会说，你放心啦，这个每个人都交的，我也交了，待会做几个任务就拿回来了。然后就发一些截图过来，证明她的话。这时就又增加了交钱的可能性。</p>
<p>那么，有人也许会想，交就交嘛，反正一会就拿回来了。然而，呵呵→_→。等交了钱，准备去完成那几个新手任务，这时这个老师就会让你去另一个老师那。来到新老师这，你以为可以开始了吗？不行的，接下来会说，你这是普通会员，只能接普通任务，要再交 298 成为钻石会员……又 balabala 之类，这时我相信大多数人会发现自己被骗了的。</p>
<p>但是，还是会有人想着，唉，前面都交钱了，这是放弃那钱不就打水漂了吗？所以还真有人又交了。这时据说就真的完成了，（只是据说，我并不清楚，好像也有继续要求交很多钱的。）可以接任务了。然后就准备大干一场吧。……过了不久，就会发现，一天耗费不少的精力，最后大概能赚个几块钱。又或者得经常去注册什么什么帐号，绑定银行卡身份证之类的。要把本钱赚回来基本不可能。</p>
<p>之后有人估计就算了，当作花钱买教训吧。而有的人呢，发现唯一能赚回本的方式，就是去拉人，据说拉人那人交的钱，有 70%能归拉人者，也就是客服。于是，一个新的客服就此诞生……</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>bilibili 粉丝数量展示器 app</title>
    <url>/2021/02/bilibili-fans/</url>
    <content><![CDATA[<p>去年搞了好几台墨水屏手机，平时除了阅读，就是放在桌面上当时钟用。</p>
<p><img src="/img/2021/f1_time.jpg" alt="f1_time"></p>
<p>后来突发奇想，要不拿它来当粉丝计数器吧。放在桌面上展示当前的粉丝数量，反正墨水屏屏幕不刷新的话，也不怎么耗电。</p>
<p>于是花费了一些时间，写了这个 app —— B站粉丝展示器</p>
<p><img src="/img/2021/Bili_fans_app.jpg" alt="Bili_fans_app"></p>
<p>app 只申请网络权限而已，其它的权限都不需要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>当然这个权限申请不会弹出选项，所以直接安装就可以使用。打开 app 后会显示 </p>
<blockquote>
<p>waiting for update</p>
</blockquote>
<p>需要点击文字，进入设置页面</p>
<p><img src="/img/2021/bili_fans_settings.jpg" alt="bili_fans_settings"></p>
<p>填写 mid ，在电脑网页上，点击用户头像，就可以在地址栏看到 mid 了。例如这样</p>
<blockquote>
<p><a href="https://space.bilibili.com/254479550">https://space.bilibili.com/254479550</a></p>
<p>254479550 就是 mid</p>
</blockquote>
<p>填完退出 app，再重新打开。就可以刷新出粉丝数量了。手机如果有打开自动旋转屏幕，可以横屏展示。</p>
<p><img src="/img/2021/phones_bili_fans.jpg" alt="phones_bili_fans"></p>
<p>默认设置每 60 秒请求一次粉丝数量，并且屏幕永不熄屏，比较适合在墨水屏设备上面使用。</p>
<p>下载地址：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>在【手机软件】文件夹里</p>
<p>其它信息</p>
<blockquote>
<p>compileSdkVersion 30<br>minSdkVersion 16<br>targetSdkVersion 30</p>
</blockquote>
]]></content>
      <tags>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>对于掌阅精选的一些研究</title>
    <url>/2020/08/about-zyjx/</url>
    <content><![CDATA[<p>由于我购买了两台掌阅F1手机，来参加阅读 180 天，购买金额全返回的活动。所以最近也就接触了 掌阅精选 这款app，使用了也有一段时间了，也算有了一些了解。</p>
<p>首先，它的账号和掌阅的账号是不通用的，不过如果你之前的手机号注册过掌阅，现在注册掌阅精选，系统监测到你是掌阅老用户，会赠送一些虚拟币给你购买书籍。像我的话是赠送了 50 个，相当于人民币 50 块。加上新用户福利，有 10 个币，一共就 60 个了。我用它买了好几本书。</p>
<p>新用户刚注册的前七天，每天登录可以领取虚拟币，七天一共能领 10 个。而且新人还有购书优惠，第一本书不用钱，所以很多人都去挑选那些很贵的书，卖三四百的那种。像我就有买《世界名著合集》、《银河帝国》。然后第二本书还是有优惠，只需要一分钱，所以感觉掌阅精选为了拉取新用户，下的力度还是挺大的。</p>
<p>我之前以为掌阅精选也可以每天签到，靠签到得到的赠送币来购买书，这样不就可以一直不花钱来看书了吗？不过。。。只有新人的前七天才有，七天后就只剩下一种方式来获取赠送币了– <strong>阅读时长</strong>。每个星期，星期一开始、星期日结束，只要你阅读30分钟，就可以兑换一个赠送币，<strong>每周最多10个</strong>，也就是阅读5个小时。</p>
<p>而兑换来的赠送币的有效期是<strong>一个月</strong>，我8月2日兑换了10个，从【账户】里面查到有效期是到 9 月 1 日。所以这样算，一个月最多可以积累50个，购买那些非合集的书一般是够的。</p>
<blockquote>
<p>掌阅精选领取赠送币之后，分享到微信，让账号和小程序绑定，赠送币还能翻倍。本来这星期阅读满5个小时，领取了十个赠送币，分享之后，又领取了10个。经过测试，第二个星期继续分享，还能再领另外10个。这也就意味着，每个星期可以领取20个赠送币，单靠这些，账号里一个月可以积累100个赠送币。</p>
</blockquote>
<p>刚才我把 app 升级了一下，现在也有了每天签到的入口了，不过签到得的币很少，连续七天下来也就2.8个。</p>
<p>有一点我是觉得挺有意思的，掌阅精选里面的书，购买的时候如果不用赠送币，而用真金白银购买，是支持七天内退款的。这就简直不知怎么夸好了，对于大部分书，我相信自己还是能够在七天内看完的， 而且之后打卡活动开始之后，每天都得阅读 30 分钟，七天就是 3 个半小时，或许看一些字数比较多的书，看不完，但是我想，是否能够利用这个规定，我在第六天就退款，然后再买呢？感觉掌阅这样搞很容易被薅羊毛嘛。</p>
<p>不过我觉得还是不要轻易去尝试比较好，谁知道它会不会也像京东那样，搞一个黑号系统，退款多几次就把你拉进黑号名单。</p>
<p>也有可能只是因为掌阅精选现在需要拉人头，所以才有这么大的优惠和福利，就像几年前，掌阅那时通过每天的签到，也可以购买很多书的，后来不也不行了。签到给的阅饼变少了，阅饼的使用期限也缩短了，就导致【不花钱也能一直看书】这种现象减少了。</p>
<p>不过也有可能优惠会一直持续下去吧，毕竟现在竞争这么激烈，想想今年搞【阅读打卡】的，有 京东阅读、咪咕阅读、QQ阅读、国文和当当合作的阅读器、以及本文讲的掌阅，这些都是国内的阅读平台，而用户一共就那么多。你不搞优惠的话，用户可能就被其它平台抢去了。</p>
<p>刚才去查了一下，阅读时长兑换书币这种活动，谁是最先发明的不知道，但是搞得最火热的应该是微信读书。现在好像是变成时长兑换无限卡了吧，所以感觉这种模式是有可能一直持续下去的。</p>
<p>而且我还了解到其它两个平台，网易蜗牛和藏书馆。前者每天的第一个小时可以免费阅读，后者的书是通过借阅的，和图书馆一样，书被别人借了，你就没法读，挺有意思的。</p>
<hr>
<p>不过这些我都没有多大的兴趣的去注册，我购买了两台掌阅 F1 ，每台需要打卡 180 天，每天半个小时，我接下来将会花费很多时间，在掌阅精选这个 app 上面。所以利用好时长兑换赠书币这个活动，一般也就够用了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>贝壳云、我家云以太网口自动从千兆变为百兆</title>
    <url>/2020/11/bky-wjy-eth-100/</url>
    <content><![CDATA[<p>偶然间发现，怎么通过 smb 方式从贝壳云上面读取文件，速度只有 11MB/s 左右，上传文件到里面去也是如此。明明前几天从里面复制文件还有 60 多的速度的，怎么无缘无故变慢了？难道现在网口变百兆速度了？</p>
<p>于是我通过 <code>ifconfig</code> 命令，查看到 eth0 里显示</p>
<blockquote>
<p>collisions:0 txqueuelen:100</p>
</blockquote>
<p>以及通过 <code>dmesg</code> 命令查到这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[687120.156847] rk_gmac-dwmac ff540000.ethernet eth0: Link is Down</span><br><span class="line">[687122.156839] rk_gmac-dwmac ff540000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br><span class="line">[687126.156737] rk_gmac-dwmac ff540000.ethernet eth0: Link is Down</span><br><span class="line">[687139.156393] rk_gmac-dwmac ff540000.ethernet eth0: Link is Up - 100Mbps/Full - flow control rx/tx</span><br></pre></td></tr></table></figure>

<p>看来确实是在某一时刻，以太网的网速从千兆降为百兆了。</p>
<p>解决方案是，拔网线重插。速度就又恢复千兆了。<code>dmesg</code> 里面也有显示新的日志。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1736677.257293] rk_gmac-dwmac ff540000.ethernet eth0: Link is Down</span><br><span class="line">[1736681.257229] rk_gmac-dwmac ff540000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br></pre></td></tr></table></figure>

<p>我拔下两秒后插回去，ssh 连接没断，smb 也可以继续访问。因此也没什么影响。</p>
<p>这个问题好像在我家云上面更为明显，我记得之前用我家云的时候也碰到几次，当时还在论坛找到可以恢复千兆的命令，不过现在找不到了。</p>
<p>因为贝壳云和我家云用的是同样的处理器，可能是硬件的通病吧，暂时也没什么更好的方法，只能发现降为百兆后就去重插一下网线就是了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>更改hosts文件</title>
    <url>/2018/06/change-hosts/</url>
    <content><![CDATA[<p>原理：我们上网的时候,输入网址,浏览器先检查 hosts 文件中是否有对应的IP地址,如果没有,就连接到DNS服务器,查找这个网址对应的 IP 地址。</p>
<p>我联想到域名绑定IP后是提交到DNS服务器的，那么按理说我去弄一个域名，比如：<code>sb.com</code> 然后将解析到我局域网的IP，比如：<code>192.168.1.8</code> ，那么我在局域网中就不用输入那么长的IP地址了。哈哈，不过这显然很麻烦，而且也有点浪费，一个域名居然只用在局域网中。</p>
<p>于是就想到之前的更改 hosts 文件来访问一些被墙的网站，还有来屏蔽一些网站。于是通过此，我就把 39.io 给解析到 192.168.1.39 ，因为我平时还是挺常开虚拟机的，所以只是IP最后这个不同而已 ，例如其它的为 <code>192.168.1.88</code> ，那么我也可以把它绑定为 <code>88.io</code></p>
<p>这样，我通过这个短网址就能访问虚拟机了，而不用去输入那一大串的IP。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
  </entry>
  <entry>
    <title>使用 Docker 将服务器打造成全能下载机</title>
    <url>/2021/05/docker-download-server/</url>
    <content><![CDATA[<p>本文建议搭配视频观看：</p>
<p><a href="https://www.bilibili.com/video/BV1xv411573B/">https://www.bilibili.com/video/BV1xv411573B/</a></p>
<p>两个 Docker 容器的搭建</p>
<p>transmission</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    --name transmission \</span><br><span class="line">    -p 9091:9091 \</span><br><span class="line">    -p 51413:51413 \</span><br><span class="line">    -v /mnt/tr_data:/data \</span><br><span class="line">    -e USERNAME=admin \</span><br><span class="line">    -e PASSWORD=admin \</span><br><span class="line">    gists/transmission</span><br></pre></td></tr></table></figure>

<p>aria2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name aria2-pro \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    --network host \</span><br><span class="line">    -e PUID=$UID \</span><br><span class="line">    -e PGID=$GID \</span><br><span class="line">    -e RPC_SECRET=12345 \</span><br><span class="line">    -e RPC_PORT=6800 \</span><br><span class="line">    -e LISTEN_PORT=6888 \</span><br><span class="line">    -v ~/aria2-config:/config \</span><br><span class="line">    -v /mnt/aria2:/downloads \</span><br><span class="line">    p3terx/aria2-pro</span><br></pre></td></tr></table></figure>

<p>使用 python 开启一个简单的文件分享服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure>

<p>此时默认使用 8000 端口</p>
<p>更好的文件展示服务—— h5ai</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5555:80 -v /mnt:/h5ai --name h5ai ilemonrain/h5ai:full</span><br></pre></td></tr></table></figure>

<p>最后记得防火墙放行。</p>
<p>如果你有购买腾讯云轻量服务器的需求，可以点击我的链接进行购买</p>
<p><a href="https://curl.qcloud.com/i4FBqtLH">https://curl.qcloud.com/i4FBqtLH</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器搭建全能下载器 Aria2 以及私人网盘，只需一行命令（docker）</title>
    <url>/2019/09/docker-aria2/</url>
    <content><![CDATA[<p>本文将利用 docker 一键安装 Aria2 和 filebrowser。</p>
<p>建议搭配之前的文章来观看：<a href="/2019/08/docker-qb">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p>
<p><a href="https://github.com/wahyd4/aria2-ariang-docker/blob/master/README.CN.md">项目 GitHub 地址</a></p>
<h3 id="安装-docker-如果机器没有的话）"><a href="#安装-docker-如果机器没有的话）" class="headerlink" title="安装 docker(如果机器没有的话）"></a>安装 docker(如果机器没有的话）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<h3 id="最快速启动"><a href="#最快速启动" class="headerlink" title="最快速启动"></a>最快速启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name aria2-ui -v /home/down:/data -p 80:80 wahyd4/aria2-ui</span><br></pre></td></tr></table></figure>

<ul>
<li>Aria2: <a href="http://yourip/ui/">http://yourip/ui/</a><ul>
<li>假如你的 IP 是 123.123.123.123 ，这里你可以在浏览器输入 <a href="http://123.123.123.123/ui/">http://123.123.123.123/ui/</a></li>
</ul>
</li>
<li>FileManger: <a href="http://yourip/">http://yourip</a><ul>
<li>假如你的 IP 是 123.123.123.123 ，这里你可以在浏览器输入 <a href="http://123.123.123.123/">http://123.123.123.123</a></li>
</ul>
</li>
<li>访问文件管理器的默认账号和密码都是 admin</li>
</ul>
<p>这样下载的文件都放在 <code>/home/down</code> 这个文件夹里面</p>
<p>文件夹没有写入权限，有兴趣看这篇文章了解 <a href="https://note.qidong.name/2018/01/docker-volume-permission/">文章链接</a><br>不管原理，无脑给予 777</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /home/down</span><br></pre></td></tr></table></figure>

<p>强制删除容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f aria2-ui</span><br></pre></td></tr></table></figure>
<h3 id="加密下载界面"><a href="#加密下载界面" class="headerlink" title="加密下载界面"></a>加密下载界面</h3><p>由于前面的容器使用了 80 端口，所以想创建下面这个容器的话，要把前面的容器先删除了，有的小伙伴忘记删除前面的容器，导致下面这个容器一直无法建立。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name ariang \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e ENABLE_AUTH=true \</span><br><span class="line">  -e RPC_SECRET=Hello \</span><br><span class="line">  -e ARIA2_SSL=false \</span><br><span class="line">  -e ARIA2_USER=user \</span><br><span class="line">  -e ARIA2_PWD=pwd \</span><br><span class="line">  -v /home/down:/data \</span><br><span class="line">  wahyd4/aria2-ui</span><br></pre></td></tr></table></figure>

<ul>
<li>用户名：user</li>
<li>密码：pwd</li>
</ul>
<h3 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h3><p>根据个人的需求来选择，如果觉得不需要加密 Aria2 的管理界面的，其实用第一种方式就行了。非常简单，一行命令即可。</p>
<p>同时也可以结合 APP ：Transdrone_2.5.17.apk 来使用，这个我放在网盘里（在【手机软件】文件夹中），使用它来管理多个下载工具也是比较方便的。</p>
<p><a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p><img src="/img/2019/transdrone.jpg" alt="transdrone"></p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>下载</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>克隆 WordPress 网站</title>
    <url>/2018/06/clone-WordPress/</url>
    <content><![CDATA[<p>我现在的网站是放在美国的一个 vps 里的，之前一直想要怎么备份，万一这台服务器被墙了（毕竟真的发生过），或者将来换服务器了，那我怎么转移。当时找了好多方法。</p>
<h3 id="一-自带的导出导入"><a href="#一-自带的导出导入" class="headerlink" title="一 自带的导出导入"></a>一 自带的导出导入</h3><p>这是最简单的了，WordPress 本身就有这功能。登录后台，工具，就有导入和导出。把旧的导出，然后在一台新的服务器上导入，这样所有的文章就都过去了。确实方便，然而，只能导出文章，主题、插件是没法的。</p>
<h3 id="二-All-in-One-WP-Migration"><a href="#二-All-in-One-WP-Migration" class="headerlink" title="二 All-in-One WP Migration"></a>二 All-in-One WP Migration</h3><p>这是一个插件，在添加插件里搜索就能找到。安装后会出现在后台面板的左侧。点导出，会生成一个文件，可以下载。然后在一台新的服务器也安装这个插件，就能导入刚才下载的这个文件，这样就能把整个网站完整的克隆。这样也可以当做备份，不过免费版最多只能备份 500M 的网站，而且只能备份到本地。</p>
<h3 id="三-UpdraftPlus"><a href="#三-UpdraftPlus" class="headerlink" title="三 UpdraftPlus"></a>三 UpdraftPlus</h3><p>在添加插件里搜索 back 排第一的就是它。支持定时备份，既可以备份在本地，也可以备份在网盘、邮箱、FTP 这些，而且还是免费的。果然厉害，于是我设置它每天备份到 Dropbox ，只保留两份备份，这样就不会一下子就把网盘给塞满了。</p>
<p><strong>缺点：</strong>不能像上面那个插件那样，克隆网站，它只是支持数据丢失后的恢复。如果要实现网站克隆，需要花钱购买它的专业版。</p>
<h3 id="四-免费让-UpdraftPlus-支持网站克隆"><a href="#四-免费让-UpdraftPlus-支持网站克隆" class="headerlink" title="四 免费让 UpdraftPlus 支持网站克隆"></a>四 免费让 UpdraftPlus 支持网站克隆</h3><p>这是我无意发现的。那天是在查让 WordPress 绑定多个域名。</p>
<p>在 WordPress 程序根目录 wp-config.php 文件中加上下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define(&#x27;WP_SITEURL&#x27;, &#x27;http://&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;]);</span><br><span class="line">define(&#x27;WP_HOME&#x27;, &#x27;http://&#x27; . $_SERVER[&#x27;HTTP_HOST&#x27;]);</span><br></pre></td></tr></table></figure>

<p>这样只要是解析进来的域名都可以打开且不会看到串联到其他域名</p>
<p>这样修改后再就可以用 UpdraftPlus 来克隆网站了</p>
<p>我只是想多备份而已，不然这么久的努力忽然消失了，岂不是很心疼。</p>
]]></content>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>用服务器来离线下载 BT 种子，体验千兆网络的魅力——docker 安装 qBittorrent，以及把文件取回手机</title>
    <url>/2019/08/docker-qb/</url>
    <content><![CDATA[<p><strong>此教程并不难，只要你会复制粘贴即可。</strong></p>
<p>🌟🌟🌟搭配视频：</p>
<p><a href="https://www.bilibili.com/video/av65923774">用服务器来离线下载 BT 种子，体验千兆网络的魅力</a></p>
<p><a href="https://www.bilibili.com/video/av84585591/">利用免费CDN加速取回BT资源</a></p>
<blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p>
</blockquote>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><blockquote>
<p>使用这家的服务器，是因为它可以随时的删除，不像其它的，一买就得一年。而且，这家还可以选择自动安装 docker ，又节省了一些时间。</p>
</blockquote>
<ol>
<li>点击左边的 billing</li>
<li>充值方式支持 <strong>支付宝</strong> <strong>微信</strong>（但最少 10 美元）</li>
<li>充值好后 ，点右边那个 <strong>+</strong> 的圆圈</li>
<li>然后选择服务器的<strong>地区</strong>（日本和新加坡会比较快，不过有可能连接不上，选美国也可以）</li>
<li> <strong>Server Type</strong>点 <strong>application</strong> ，里面就有 <strong>docker</strong></li>
<li> <strong>Server Size</strong> 就是服务器的配置，越高就越贵。（如果有赠送的 50 美元，那就选那个 40 美元的吧，反正你不花，下个月也没了）</li>
<li>把下面的 <strong>Enable IPv6</strong> 前面的 框 打钩✅（可以使我们下载时连接到更多的用户）</li>
<li>然后点击右下角的 deploy now</li>
<li>等待几分钟……</li>
<li>就可以看到服务器部署好了，给了一个 ip 地址。</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> 我们要控制这台服务器，需要用 ssh 工具，这里我用 putty 来演示。</p>
<blockquote>
<p>如果用安卓手机的话，可以下载个 <strong>JuiceSSH</strong></p>
</blockquote>
<p>有能力的可以去 GitHub 下载：<a href="https://github.com/larryli/PuTTY/releases">地址</a><br>无法在 GitHub 下载的，可以到我的网盘里下载：<a href="http://veger.ys168.com/">地址</a>（在『电脑软件』里）</p>
<p>下载后解压，打开 putty<br><img src="/img/2019/putty-config.webp" alt="putty 连接.png"><br>填上 IP 地址连接</p>
<p>接着输入用户名和密码。（密码输入时不会显示的）</p>
<p>连接后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull linuxserver/qbittorrent</span><br></pre></td></tr></table></figure>
<p>完成后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker create \</span><br><span class="line">  --name=qbittorrent \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Aisa/Shanghai \</span><br><span class="line">  -e UMASK_SET=022 \</span><br><span class="line">  -e WEBUI_PORT=8080 \</span><br><span class="line">  -p 8999:8999 \</span><br><span class="line">  -p 8999:8999/udp \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -v /path/to/appdata/config:/config \</span><br><span class="line">  -v /path/to/downloads:/downloads \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  linuxserver/qbittorrent</span><br></pre></td></tr></table></figure>
<p>创建好后再启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start qbittorrent</span><br></pre></td></tr></table></figure>
<p>完成后就可以在浏览器里，输入 <code>IP:8080</code> 来访问 qB 了。</p>
<blockquote>
<p>补充，还需要到设置里面，在【连接】中，将【监听端口】改为 8999 才行。如图</p>
</blockquote>
<p><img src="/img/2020/qb%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3.png" alt="qb监听端口"></p>
<h2 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h2><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。</p>
<p>我在后期还写了这篇文章：<a href="/2020/01/three-ways-to-retrieve-the-file/">关于服务器资源取回本地的几种方法</a> 想通过浏览器将文件取回本地的朋友，可以了解一下。</p>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>看到有些人评论说用服务器下载会有风险，这个我也是知道的。因为国外的版权保护比较严格，所以有时会监控到你在下载 BT ，如果发现你下载的内容是盗版视频之类的，有可能会对你发出警告⚠️！</p>
<p>但是，我已经用了两年多了，没有碰到过，所以才敢出这个教程。我认为可能和上传有关吧，不用上传太多应该就不太容易被查水表吧。所以我的分享率就设置为 2 而已。</p>
<blockquote>
<p>就算你真的被警告了，一般也就是叫你把视频删了而已。如果再严重点，我大不了就把这台服务器删了，然后重新开一台。（就跟我们在网吧里一样，这也是用 vultr 的好处。）</p>
</blockquote>
<p>而且，有的人问这个流量的问题，像视频中演示的，最便宜的套餐都有 1000G 流量，而且是上传 1000G，下载也 1000G ，正常使用一般是用不完的，只要设置一下这个分享率，按理是不会用超过的。</p>
<p><img src="/img/2019/bandwidth.png" alt="bandi.png"><br>像我这一个月才用 200G ……</p>
<p>总之一般用户下载是用不完的。</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>下载</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>在 N1、我家云搭建 discuz 论坛</title>
    <url>/2020/09/discuz-in-N1/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为了更好地讲解，如何为 qiandao 这个全自动签到平台，制作签到模板，我打算搭建一个 discuz 论坛来演示。本次使用的设备是 斐讯N1，因为之前把它刷成 Ubuntu 系统，再装上 乘风大佬 制作的导航（详情请看：<a href="/2020/03/n1-armbian-server">打造最具性价比服务器 N1-armbian</a>），所以现在它是一个 lnmp 环境，添加多一个网站也很容易。</p>
<p>当然，用 <code>我家云</code>、<code>S905电视盒子</code> 也可以，这两个我之前也介绍过怎么在上面安装 armbian 并使用 乘风大佬 制作的导航。</p>
<p>下面开始具体操作流程</p>
<h3 id="一、下载网站源码"><a href="#一、下载网站源码" class="headerlink" title="一、下载网站源码"></a>一、下载网站源码</h3><p><a href="https://gitee.com/3dming/DiscuzL/attach_files">https://gitee.com/3dming/DiscuzL/attach_files</a></p>
<p>官方的源码放在 gitee 上面，下载需要有账号。为了方便其他人下载，我将最新版的下载后传到网盘中了。网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> </p>
<blockquote>
<p>在【Web相关】文件夹中</p>
</blockquote>
<h3 id="二、上传到设备内"><a href="#二、上传到设备内" class="headerlink" title="二、上传到设备内"></a>二、上传到设备内</h3><p>需要用到的是压缩包中的 upload 文件夹，你可以选择在电脑上解压，然后再传入 N1，可以用 smb 、ftp、scp 等方式传输。</p>
<p>也可以直接将压缩包先传到 N1 里面。然后使用 unzip 命令解压（建议先建立一个空文件夹，将压缩包放里面），之前再用 mv 命令将 upload 文件夹移动到你想要放的位置。这里顺便改一下文件夹名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv upload /opt/wwwroot/discuz</span><br></pre></td></tr></table></figure>

<h3 id="三、修改-nginx-的配置文件"><a href="#三、修改-nginx-的配置文件" class="headerlink" title="三、修改 nginx 的配置文件"></a>三、修改 nginx 的配置文件</h3><p>先进入配置所在的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/etc/nginx/vhost</span><br></pre></td></tr></table></figure>

<p>把 h5ai 的配置文件复制一份给 discuz 用，然后手动编辑这份配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp h5ai.conf discuz.conf</span><br><span class="line">vim discuz.conf</span><br></pre></td></tr></table></figure>

<p>我将它修改为这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 8188;</span><br><span class="line">     server_name localhost;</span><br><span class="line">     root /opt/wwwroot/discuz/;</span><br><span class="line">     index  index.html  index.php  /_h5ai/public/index.php;</span><br><span class="line">     include /opt/etc/nginx/conf/php-fpm.conf;</span><br><span class="line">    #otherconf</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>主要就是修改第二和第四行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 8188; #端口可以自己设置，但是不能和其它重复</span><br><span class="line">server_name localhost; #有域名的话是在这里设置</span><br><span class="line">root /opt/wwwroot/discuz/; # 网站源码所在的文件夹路径</span><br></pre></td></tr></table></figure>

<p>改好后，让 Nginx 重新读取一下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h3 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h3><p>然后你到浏览器打开 N1 的 IP:8188</p>
<p>就可以看到 discuz 的安装界面。</p>
<p><img src="/img/2020/discuz-install.png" alt="discuz-install"></p>
<p>但是你有可能会碰到提示不可写的情况</p>
<p><img src="/img/2020/%E4%B8%8D%E5%8F%AF%E5%86%99.png" alt="不可写"></p>
<p>这时就需要修改权限了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /opt/wwwroot/discuz</span><br></pre></td></tr></table></figure>

<p>然后再刷新一下网页应该就可以了</p>
<p>接着来到这一步，数据库密码改为 <code>123456</code></p>
<p><img src="/img/2020/discuz-database.png" alt="discuz-database"></p>
<p>然后就可以按下一步安装了。</p>
<p>这样应该就可以顺利使用了。</p>
<h3 id="五、卸载"><a href="#五、卸载" class="headerlink" title="五、卸载"></a>五、卸载</h3><p>删除 nginx 配置和网站源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /opt/etc/nginx/vhost/discuz.conf</span><br><span class="line">rm -rf /opt/wwwroot/discuz</span><br></pre></td></tr></table></figure>

<p>删除数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/bin/mysql -uroot -p</span><br><span class="line"># 输入密码 123456</span><br><span class="line">drop database ultrax;</span><br></pre></td></tr></table></figure>

<p>完成。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 换电脑方案</title>
    <url>/2018/09/hexo-change-computer/</url>
    <content><![CDATA[<p>hexo 搭建博客容易。但是搭建好后只能在这一台电脑上用，这就有点麻烦了。而且要是电脑坏了那且不是完了？所以备份以及恢复很重要。</p>
<p>（当然，windows 下能下载个便携版的 hexo 环境，(<a href="https://portablehexo.bitmoe.cn/">https://portablehexo.bitmoe.cn/</a>) ，放在 U 盘里面，这样随便到哪里都可以用。这种这里不讨论。）</p>
<h2 id="备份哪"><a href="#备份哪" class="headerlink" title="备份哪"></a>备份哪</h2><p>用 hexo 搭建博客好后，生成的静态网页是放在（public）这个文件夹里的。正常流程就是把这个文件夹里的内容发布到 github 或者自己的服务器上。而我们要备份的，不是这个，而是整个博客源码，就是（public）的上一层的这整个文件夹。</p>
<h2 id="如何备份"><a href="#如何备份" class="headerlink" title="如何备份"></a>如何备份</h2><p>那么可以手动复制吗？额，有点难。因为小文件太多，接近一万个，复制要很久。而且文件经常变动，每次变动都再重新复制一份？不现实。</p>
<p>因此用 <strong>git</strong> 用管理是最好的方法。在博客项目根目录，比如我的博客源码放在 blog 这个文件夹里，那么就用命令行进入这个文件夹，git init 初始化这个项目，将它变成一个仓库，然后就可以把备份到网上了。</p>
<h2 id="准备新环境"><a href="#准备新环境" class="headerlink" title="准备新环境"></a>准备新环境</h2><p>比如说电脑坏了，或者换了新电脑。要怎么在新的新电脑上继续写博客呢？</p>
<p>首先得先在新的电脑上安装好运行 hexo 的环境，比如 windows 就得先安装 node.js 和 git，然后再安装 hexo。等可以运行 hexo 并在浏览器显示了，再把刚才备份到网上的博客源码克隆下来。</p>
<h2 id="克隆之后"><a href="#克隆之后" class="headerlink" title="克隆之后"></a>克隆之后</h2><p>如果顺利的话，此时进入克隆下来的文件夹，再 npm install 一下，应该就可以用了。如果像我这样，发现可以启动，但是打开链接后什么都没显示。那么应该是主题缺失的原因。可以选择重新下载主题，或者在备份的时候把主题也备份到网络。可以参考这篇文章：<a href="https://powersee.github.io/2018/08/about-git-cache/">修复 next 主题无法提交到 git 仓库</a></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>github 拉取项目出错</title>
    <url>/2021/06/github-clone-error/</url>
    <content><![CDATA[<p>今天拉取 GitHub 上面的项目时，发现一直出错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/xxxx/xxxxx/&#x27;: gnutls_handshake() failed: Error in the pull function.</span><br></pre></td></tr></table></figure>

<p>最终发现，开代理就行，唉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=http://192.168.123.69:7890</span><br><span class="line">alias pon=&#x27;export http_proxy=$url; export https_proxy=$url&#x27;</span><br><span class="line">pon</span><br></pre></td></tr></table></figure>

<p>我电脑的 ip 是 192.168.123.69 ，使用的代理软件是 clash ，把 allow lan 的开关打开后，局域网的其它设备就能使用电脑的代理。7890 是 clash 默认的端口，如果使用 ssr 默认是 1080。</p>
<p>另外一种方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:10809</span><br><span class="line">git config --global https.proxy https://127.0.0.1:10809</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>利用lnmp搭建wordpress</title>
    <url>/2018/06/install-wordpress-with-lnmp/</url>
    <content><![CDATA[<p>#发现1.5正式版更新了，我自己也试了，所以现在把原来命令行里的 1.4 全部都换成 1.5 了</p>
<h3 id="一，安装lnmp-Nginx-MySQL-PHP-环境"><a href="#一，安装lnmp-Nginx-MySQL-PHP-环境" class="headerlink" title="一，安装lnmp(Nginx/MySQL/PHP)环境"></a>一，安装lnmp(Nginx/MySQL/PHP)环境</h3><blockquote>
<p>wget <a href="http://soft2.vpser.net/lnmp/lnmp1.5-full.tar.gz">http://soft2.vpser.net/lnmp/lnmp1.5-full.tar.gz</a></p>
</blockquote>
<blockquote>
<p>tar -zxvf lnmp1.5-full.tar.gz</p>
</blockquote>
<blockquote>
<p>cd lnmp1.5-full</p>
</blockquote>
<blockquote>
<p>./install.sh</p>
</blockquote>
<p>一路默认，虚拟机一个小时应该能安装好 之后就可以访问IP了</p>
<p>默认的访问目录为这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/wwwroot/default</span><br></pre></td></tr></table></figure>


<h3 id="二，安装wordpress"><a href="#二，安装wordpress" class="headerlink" title="二，安装wordpress"></a>二，安装wordpress</h3><p>此时进入默认的访问目录的上一级</p>
<blockquote>
<p>cd /home/wwwroot/</p>
</blockquote>
<blockquote>
<p>wget <a href="https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz">https://cn.wordpress.org/wordpress-4.9.4-zh_CN.tar.gz</a></p>
</blockquote>
<blockquote>
<p>tar -zxvf wordpress-4.9.4-zh_CN.tar.gz</p>
</blockquote>
<blockquote>
<p>mv default old</p>
</blockquote>
<blockquote>
<p>mv wordpress default</p>
</blockquote>
<p>此时应该就可以访问wordpress了</p>
<h3 id="三，创建数据库"><a href="#三，创建数据库" class="headerlink" title="三，创建数据库"></a>三，创建数据库</h3><blockquote>
<p>mysql -u root -p</p>
</blockquote>
<p>输入密码，默认的话就是root</p>
<blockquote>
<p>create database wordpress;</p>
</blockquote>
<blockquote>
<p>exit</p>
</blockquote>
<h3 id="四，给权限"><a href="#四，给权限" class="headerlink" title="四，给权限"></a>四，给权限</h3><blockquote>
<p>chown -R 755 /home/wwwroot/</p>
</blockquote>
<blockquote>
<p>chown -R www:www /home/wwwroot/</p>
</blockquote>
<hr>
<p>此时输入IP即可访问配置 wordpress</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>jekyll 与 hexo 的对比</title>
    <url>/2018/08/jekyll-vs-hexo/</url>
    <content><![CDATA[<p>jekyll 和 hexo 的差别呢，就是 jekyll 可以直接在 GitHub 上面写文章，而 hexo 则需要在电脑里面写好再上传上来。</p>
<p>前面平台搭建的部分可以说是差不多的，搭建好同样传到 GitHub 上，jekyll 是把博客源码传上来，而 hexo 则是先在电脑里生成 html 的静态文件，再将这些传上来。</p>
<p>也因为这样，hexo 的备份会比较麻烦一点。而 jekyll 则可以说本来就自带备份（针对于像我这种使用 git pages 的人来说）。因为 jekyll 本身就是把整个博客都上传的。</p>
<p>不仅备份方便，编辑修改也方便，因为文件都在 GitHub 上，可以直接用浏览器登录 GitHub ，直接更改文章源文件就能修改博客文章，在上面新增 Markdown 文件就能往博客添加新文章。</p>
<p>但是呢，jekyll 不能像 hexo 一样使用命令行 <code>hexo new &#39;title&#39;</code> 来生成文章模板。因此用这个来写文章的话，就得自己打文章开头的那些设置，如这些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: jekyll 与 hexo 的对比</span><br><span class="line">date: 2018-08-05 21:02:07</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>因此这个感觉也算是劣势吧。当然复制粘贴上一篇文章的，然后修改一下也不会用太久的时间。但还是能自动生成方便啊。</p>
<p>因此在这上面写好像也没见得有多爽……</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客2022年瞎折腾</title>
    <url>/2022/01/hexo-2022/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我的博客一直使用 hexo 部署的，之前还有同步到 gitee 上，后来 gitee 提示我说有内容违规，把 gitee page 给我关了，还要我自己去审查我哪里违规。。。</p>
<p>那就算了，不用 gitee 了，现在主要部署在 GitHub 上面。</p>
<h3 id="为什么使用-hexo？"><a href="#为什么使用-hexo？" class="headerlink" title="为什么使用 hexo？"></a>为什么使用 hexo？</h3><p>主要原因有，文档可以使用 Markdown，博客可以部署到 GitHub pages（免费），迁移不难（相对于 WordPress 来说）。说起来我这博客还真的迁移了好几次了，之前在黑苹果上，后来迁移到 win7，之后到 win10，现在迁移到 Mac mini M1</p>
<p>前段时间也了解到有一个和 hexo 差不多的，可以将 Markdown 渲染为 HTML，然后可以部署到 GitHub pages 的项目——<a href="https://vuepress.vuejs.org/zh/">VuePress (vuejs.org)</a></p>
<p>不过我还没去深入了解，毕竟 hexo 我也用了好几年了，其实主题方面也花了不少时间去折腾，才达到了自己勉强满意的效果，如果换其它的，之前的时间感觉就白费了，而且可以又得花时间去了解、去调整到自己满意的效果。</p>
<p>所以既然现在 hexo 还能用，就继续用就行了。</p>
<h3 id="本次迁移过程中遇到的问题"><a href="#本次迁移过程中遇到的问题" class="headerlink" title="本次迁移过程中遇到的问题"></a>本次迁移过程中遇到的问题</h3><p>步骤是安装 nodejs 先，我是直接下载 tar 压缩包，解压后将 bin 文件夹路径添加到环境变量中的，执行 node -v 和 npm -v 查看版本，成功显示既可。</p>
<p>之后参考 hexo 官网安装，然后把之前备份的 hexo 博客项目拉取回来，进入博客根目录，执行 npm install 安装依赖。</p>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>完成后就碰到问题了，执行 hexo d 无法将内容部署到 GitHub 上面。显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Copying files from public folder</span><br></pre></td></tr></table></figure>

<p>后就报错了</p>
<p>那么就网上搜搜看别人的解决方法，于是找到了。</p>
<p><a href="https://www.zhihu.com/question/443396119">求解hexo d把文件复制到deploy文件夹就没用然后了？ - 知乎 (zhihu.com)</a></p>
<blockquote>
<p>我也遇到了这个问题，这是我在GitHub上看到的某位大佬的办法，先把原来的hexo-deployer-git插件卸载了，然后直接从 master 分支安装<br>npm un hexo-deployer-git<br>npm i hexojs&#x2F;hexo-deployer-git</p>
<p>作者：cc666<br>链接：<a href="https://www.zhihu.com/question/443396119/answer/1721530396">https://www.zhihu.com/question/443396119/answer/1721530396</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>接着遇到了第二个问题，就是 public 文件夹内的 html 文件，内容都是空白的。</p>
<p>那么这个具体是怎么解决的呢？其实我也不太清楚，我的操作过程是，升级看看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm audit fix</span><br><span class="line"></span><br><span class="line">npm audit fix --force</span><br></pre></td></tr></table></figure>

<p>然后查看 <code>package.json</code> 发现里的 hexo 版本是 3.7，对比一下 hexo 官网，最新的好像已经是 6 点几了，于是我执行一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>

<p>然后它就自动变为 6.0.0 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;hexo&quot;: &#123;</span><br><span class="line">  &quot;version&quot;: &quot;6.0.0&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>那么看来已经把 hexo 升级了，于是再来试试 <code>hexo g</code></p>
<p>这一次生成的 html 文件就又内容了，在执行 <code>hexo d</code> 部署到 GitHub pages，就完成了。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>然后部署到 GitHub pages 的内容，打开后发现图片没法加载。</p>
<p>原因是我的博客文章里，图片链接都是以这种方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![Mac_M1_kcc](\img\2021\Mac_M1_kcc.png)</span><br></pre></td></tr></table></figure>

<p>之所以是反斜杠 <code>\</code> ，是因为我之前用的是 win10 ，Windows 里面文件的路径就是用反斜杠的，而在 Linux 或者 macOS 里面，文件路径则是 <code>/</code> ，所以导致现在在浏览器里面，图片的加载路径变为像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://powersee.github.io/2021/07/zte-e8820s/\img\2021\e8820s-ttl.jpg</span><br></pre></td></tr></table></figure>

<p>这样的了，自然就没法加载出来图片。不过也是很奇怪，我刚才没有升级 hexo 的时候，明明图片是可以加载出来的（刚才在电脑里通过 hexo s 访问 localhost:4000 的时候，图片什么的都是正常的……）</p>
<p>然后我又查看了一下我的备份博客，我设置它每天凌晨同步 GitHub 上的网页，所以刚才更新的内容，它还没同步过去。然后我发现，其实之前的图片也是有反斜杠的，并且图片可以正常加载。</p>
<p><img src="/img/2022/%E4%BD%BF%E7%94%A8%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5.jpg"></p>
<p>等了一会之后，我再去刷新 GitHub pages 搭建的博客，图片大多数也可以加载了。有点莫名其妙。不过我还是使用 vscode 里的查找替换功能，将 <code>\img\2021\</code> 全部替换为 <code>/img/2021/</code> ，以及 2020 年的。</p>
<p>其实想想也不怎么省心呀，不过还好问题能够解决。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 命令行中复制粘贴 pbcopy 与 pbpaste</title>
    <url>/2022/06/mac-pbcopy-pbpaste/</url>
    <content><![CDATA[<p>发现两个有用的命令</p>
<ul>
<li>pbcopy 可以将文本复制（写入）到剪贴板</li>
<li>pbpaste 可以读取剪贴板中的内容</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;powersee&#x27; | pbcopy</span><br></pre></td></tr></table></figure>

<p>此时就将字符串 <code>powersee</code> 写入剪贴板，可以找个地方粘贴试试看。</p>
<p>另外一种用法，将文件中的文本内容复制到剪贴板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cat test.txt</span><br><span class="line">hehe</span><br><span class="line">$pbcopy &lt; test.txt</span><br></pre></td></tr></table></figure>

<p>现在有一个 txt 文件，里面的内容是 hehe，使用 <code>&lt;</code> 将里面的内容输入给 <code>pbcopy</code> ，这样就可以将内容复制到剪贴板。当然也可以用 <code>cat</code> 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cat test.txt | pbcopy</span><br></pre></td></tr></table></figure>

<p>读取剪贴板的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pbpaste</span><br><span class="line">hehe%</span><br><span class="line">$ echo `pbpaste`</span><br><span class="line">hehe</span><br></pre></td></tr></table></figure>

<p>直接执行 <code>pbpaste</code> 也可以输出内容，不过在最后会跟一个 <code>%</code> </p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止 mac 在U盘产生隐藏文件</title>
    <url>/2018/10/mac-hide-file/</url>
    <content><![CDATA[<p>自从 U 盘在 mac 上使用一段时间后，我发现里面有好多隐藏文件。</p>
<p>每个都是 4KB。基本上 U 盘里每个文件，都有一个跟它对应的隐藏文件。看来是 Mac 自动生成的，但不知道是用来干什么的，而且平时也没什么影响，毕竟隐藏文件不管在 win 还是 Mac，默认情况下都是不显示的，所以也就没去管它。</p>
<p>直到，那天 U 盘插别人的电脑，居然被安全软件检测到这些隐藏文件，弹窗说有安全隐患……</p>
<p>再接着，拿 U 盘去自助打印机，这一堆隐藏文件显示在那里，严重影响我查找要打印的文件的效率。这不能忍。</p>
<p>于是我百度一下，没有找到方法。再谷歌，就找到了。</p>
<p>是 Mac 上【聚焦搜索】（spotlight）这个软件造成的，这是一个全局搜索软件。应该是它为了能快速搜索到 U 盘里的文件，所以，当我们在 mac 上往 U 盘传文件的时候，同时会在文件旁边创建一个 4KB 的隐藏文件。</p>
<h2 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h2><p>打开【系统偏好设置】，第一行倒数第二个的【聚焦】，进去后点【隐私】，然后左下角的【+】，之后选中 U 盘，确认就好了。以后再往 U 盘写入文件就不会有这些隐藏文件了，之前产生的那些可以在 win 下将之删除。（Mac 下在访达里根本无法显示这些文件）</p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>猫盘群晖折腾记录</title>
    <url>/2020/03/maopan/</url>
    <content><![CDATA[<p>最近研究猫盘这台设备，恩山上面谈论这个好像不多。所以我找到了其它几个好去处。</p>
<ol>
<li><a href="https://www.huakings.cn/category/maopan/">花王网络</a></li>
<li><a href="http://bbs.nas66.com/forum-38-1.html">矿渣论坛</a></li>
</ol>
<p>这两个地方可以学到很多东西，感谢各位大佬的付出。</p>
<p>记录一些教程文章</p>
<p><a href="https://zhuanlan.zhihu.com/p/104139410">将猫盘固件从 DS119J 升级为 DS120J</a></p>
<p><a href="https://www.cnblogs.com/housestudy/p/11968726.html">猫盘群辉装qbittorrent和aria2</a></p>
<hr>
<p>由于我的机器是卖家帮我刷好群晖系统，再给我发过来的，所以我没有去折腾刷机这些东西。</p>
<h2 id="一、开启LED灯"><a href="#一、开启LED灯" class="headerlink" title="一、开启LED灯"></a>一、开启LED灯</h2><p>上面的花王网络的博主，写了一个脚本可以控制 LED 灯的颜色，有人把它转载到 什么值得买 上面了。<a href="https://post.smzdm.com/p/aqn96mx2/">万能的脚本让猫盘变完美</a> ，通过添加任务计划，我们就可以实现开机后，显示绿灯，关机后显示红灯。（因为猫盘关机只是系统关了而已，风扇其实还是在转的……所以有时不知道机器，是处于开机还是关机状态）</p>
<p>脚本的下载链接是这个</p>
<p><a href="https://www.huakings.cn/mp202003/aw2013_led_syno.sh">https://www.huakings.cn/mp202003/aw2013_led_syno.sh</a></p>
<p><a href="/misc/2020/aw2013_led_syno.sh">本人备份</a></p>
<h2 id="二、关于掉-ip-的问题"><a href="#二、关于掉-ip-的问题" class="headerlink" title="二、关于掉 ip 的问题"></a>二、关于掉 ip 的问题</h2><p>这台机器掉 ip 严重。指的是，机器启动后，有时候会获取不到 ip，这个是硬件问题，所以有些设备用得一直很稳，有的就频频掉 ip 。例如论坛中有人说，机器启动五次，只有一次可以获取到 ip 。</p>
<p>我自己的也有这个问题，有时候也获取不到 ip 。解决的方法只有重启，还是获取不到，那就等断电等十分钟，再启动一般就可以获取到了。</p>
<h2 id="三、掉盘"><a href="#三、掉盘" class="headerlink" title="三、掉盘"></a>三、掉盘</h2><p>机器刚到手时，急切想了解它。于是把 N1 上面的硬盘拆下来，放到里面安装群晖系统。进入系统后发现，硬盘有坏道，时不时地就发出 “ 吱、吱、吱 ” 的异响。再过一会就发现掉盘了，就是硬盘明明连接着，却显示找不到硬盘，重启也没用。而我拿连接电脑却可以识别……</p>
<p>那估计群晖对硬盘的要求比较高吧，而我这块硬盘已经买了好几年了，而且有坏道，估计它被群晖嫌弃了。没法，就到闲鱼再买一块。</p>
<p>小猫盘只能用 2.5 寸的硬盘，这个在闲鱼比较贵，500G 的要一百块，唉，买不起。最终找了一款 320G 的，59 块包邮。卖家写全新零通电。</p>
<p>买来就可以愉快地使用群晖系统了。下载、共享、备份相册、安装 Python ……</p>
<p>然而第二天就发生悲剧了，开机几分钟后，就会掉盘。硬盘又时不时地就发出 “ 吱、吱、吱 ” 的异响。然而我这硬盘是新买的啊，难到闲鱼卖家坑我？于是我把硬盘拿到电脑扫一下。</p>
<p><img src="/img/2020/%E7%A1%AC%E7%9B%98%E5%85%A8%E7%BB%BF.jpg" alt="硬盘全绿"></p>
<p>发现并没法坏道啊，怎么昨天还好好的，今天就不能用了呢？郁闷。难道这硬盘不够高档，又被群晖嫌弃了？那这群晖系统也太难伺候了吧。</p>
<h2 id="四、九曲十八弯的拯救大行动"><a href="#四、九曲十八弯的拯救大行动" class="headerlink" title="四、九曲十八弯的拯救大行动"></a>四、九曲十八弯的拯救大行动</h2><p>本打算把系统充 119j 升级 120j ，看看能否解决这个问题。如果不行再试试把系统刷程 one space XP3 ，如果刷成这个系统也有问题，就证明是硬件的问题，估计就没救了。</p>
<p>正当我准备刷机的时候，突然想到，有时候我打开插排的电源，猫盘这个机器并没有启动，风扇并没有转，需要我碰一下猫盘的电线才会转，那难道是电线接触不良的问题？</p>
<p>于是我把之前淘宝 1.5 包邮买的 USB 转 DC 5.5 拿出来，想用这条线试一下。（之前买这条线是想试一下能否用这来给 N1 供电，结果发现机器的灯会亮，但是无法进入系统。）结果发现，这条线无法插入猫盘……明明可以插入 N1 的……</p>
<p>不过我还有另外一条线，是淘宝 9.9 包邮买的，叫【诱骗激活线9-12V充电宝移动电源路由器USB供电】，输出12V的，我用这个加我那个12V的小米手机充电头，就可以给 N1 供电，并正常使用，不过这成本太高了。9.9 + 19.9 = 29.8 ，还是老实用斐讯自身的电源适配器吧。</p>
<p>那么这条用不到的线，拿来给猫盘供电，配合猫盘自带的 5V3A 的充电头。就发现机器可以正常使用了。</p>
<p>其实真的很意外的，因为一开始线接触不良，机器是无法启动的，我轻轻碰一下线就可以启动了。但是使用中电线如果接触不良，不应该是整台机器断电吗？怎么只是硬盘异响，然后掉盘而已呢？机器风扇依然转动着，如果不是刚好手上有这台多余的电线，估计我还得为刷机去折腾很久吧。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>玩矿渣很废时间。</p>
<h2 id="折腾升级-120j"><a href="#折腾升级-120j" class="headerlink" title="折腾升级 120j"></a>折腾升级 120j</h2><p>群晖的 119j 这台机器，是 256M 内存。我们的猫盘是 512M ，所以有些人觉得，刷 119j 的固件，可能只能用一半的内存而已。而 120j 就和猫盘一样是 512M 的内存，那把固件升级到 120j 是否就可以，发挥猫盘真正的性能呢？</p>
<p>没升级前，内存最高只能用到 53%，平时大多维持在 48%</p>
<p><img src="/img/2020/%E6%9C%80%E9%AB%9853.jpg" alt="最高53%"></p>
<p>于是根据这篇文章：<a href="https://zhuanlan.zhihu.com/p/104139410">将猫盘固件从 DS119J 升级为 DS120J</a> 升级一下 ，升级后内容不会丢失，可以放心升级。</p>
<p>然后我发现最高能到 60%，但是平时大多也是维持在 48%</p>
<p>所以，我认为升不升级，应该是一样的。原先的 119j 应该是没有限制内存的，因为白群晖本来就是可以升级内存的。</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li><p>群晖里面的下载器，ds station 是可以用 transdroid 来控制的。</p>
</li>
<li><p>使用 ipv6 来远程访问群晖效果还不错。</p>
</li>
<li><p>moments 来管理相册感觉不习惯，还是 photo station 好。</p>
</li>
<li><p>刚才又把 k2p 拿过来了，然后我就顺便测试一下 smb 的读写速度。</p>
<ul>
<li>读取在 65 M/S 左右</li>
</ul>
<p><img src="/img/2020/cat-read.jpg" alt="cat-read"></p>
<ul>
<li>写入在 7 M/S 左右……</li>
</ul>
<p><img src="/img/2020/cat-write.jpg" alt="cat-write"></p>
<p>直接把文件拖浏览器中，也差不多是这个速度，不太懂……</p>
</li>
</ol>
<h3 id="USB-扩展"><a href="#USB-扩展" class="headerlink" title="USB 扩展"></a>USB 扩展</h3><p>后来又在淘宝买了个USB扩展版，直接套在主板的 TTL 线上面，就可以连接USB设备了。如果长期使用，就得自己把猫盘的后壳打孔了。</p>
<p>东西我拿到手后，插上猫盘带主板，然后接一个U盘，确实可以识别到。但是，一下子就出问题了。一两分钟就断开一次，感觉像是接触不良，检查一下发现我插得挺紧的。问了一下淘宝客服，直接回复，东西接触上能显示，就是能用，要是不能用就是不能用……</p>
<p>总之也没给出这问题怎么解决，估计他也不知道吧，想想还挺气的，想给他个中评，看他小店只卖出过几样东西，还是于心不忍，算了算了，确认收货等系统自动好评就是了，这东西就当丢了吧。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于咪咕 kindle 打卡版</title>
    <url>/2020/06/migu-kindle/</url>
    <content><![CDATA[<p>终究还是按捺不住想薅羊毛的欲望，上了白嫖咪咕版 kindle 的车。虽然跟之前的 海信A5、腾讯口袋阅相比，咪咕的要求低了很多，只需要每天阅读 15 分钟，连续 100 天即可。</p>
<p>但是，翻车的几率还是挺大的。为了提高成功率，我做了一些研究。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>首先我在网上收集了一些图片。</p>
<p><img src="/img/2020/%E5%B0%8F%E4%B8%B8%E5%AD%90%E6%89%93%E5%8D%A1%E5%9B%BE.jpg" alt="小丸子打卡图"></p>
<p><img src="/img/2020/%E7%BA%A2%E8%89%B2%E6%89%93%E5%8D%A1%E5%9B%BE-1592296231569.jpg" alt="红色打卡图"></p>
<p>来两张适合全面屏的</p>
<p><img src="/img/2020/%E7%99%BD%E5%AB%96%E6%89%93%E5%BC%80%E5%9B%BE-1592296454315.jpg" alt="白嫖打开图"></p>
<p><img src="/img/2020/%E8%AE%B0%E5%BE%97%E6%89%93%E5%8D%A1.jpg" alt="记得打卡"></p>
<h3 id="1、锁屏壁纸"><a href="#1、锁屏壁纸" class="headerlink" title="1、锁屏壁纸"></a>1、锁屏壁纸</h3><p>将这些打卡图片设置为锁屏壁纸，这样每次打开手机就能看到。</p>
<h3 id="2、微信聊天背景图"><a href="#2、微信聊天背景图" class="headerlink" title="2、微信聊天背景图"></a>2、微信聊天背景图</h3><p>还可以设置为微信常聊对象的背景图。</p>
<h3 id="3、打卡群"><a href="#3、打卡群" class="headerlink" title="3、打卡群"></a>3、打卡群</h3><p>打卡群非常重要，个人认为，建立一个 5-8 个人的微信群，每天打卡完成就到群里报道，如果发现有人晚上 8 点还没打卡，就可以 @ ta 提醒一下。</p>
<h3 id="4、公众号设置提醒"><a href="#4、公众号设置提醒" class="headerlink" title="4、公众号设置提醒"></a>4、公众号设置提醒</h3><p>公众号 【微定时】可以设置每天定时提醒，我将其置顶，如果当天没有打卡，那个小红点就一直在那里。</p>
<h3 id="5、每天邮件提醒"><a href="#5、每天邮件提醒" class="headerlink" title="5、每天邮件提醒"></a>5、每天邮件提醒</h3><p>可以利用一个 python 脚本，每天发 Email 给自己，起到提醒作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yagmail</span><br><span class="line"></span><br><span class="line">yag = yagmail.SMTP(user=<span class="string">&#x27;xxx@163.com&#x27;</span>,host=<span class="string">&#x27;smtp.163.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contents = [<span class="string">&#x27;记得打卡啊，想想你的 468 &#x27;</span>]</span><br><span class="line"></span><br><span class="line">yag.send(<span class="string">&#x27;xxxxxx@qq.com&#x27;</span>,<span class="string">&#x27;签到提醒&#x27;</span>,contents)</span><br></pre></td></tr></table></figure>



<h3 id="6、使用-autojs-脚本自动翻页"><a href="#6、使用-autojs-脚本自动翻页" class="headerlink" title="6、使用 autojs 脚本自动翻页"></a>6、使用 autojs 脚本自动翻页</h3><p>用这个感觉还是有可能被软件检测到，虽然现在手机升级到 miui12 了，可以禁止 咪咕阅读 读取手机里的应用列表，不过感觉还是有危险，最好还是不用为好。</p>
<h2 id="其它信息"><a href="#其它信息" class="headerlink" title="其它信息"></a>其它信息</h2><h3 id="断网能否统计阅读时间"><a href="#断网能否统计阅读时间" class="headerlink" title="断网能否统计阅读时间"></a>断网能否统计阅读时间</h3><p>刚才测试了一下，在开着飞行模式的状态下看书，能否统计阅读时间？看了十几分钟后，关闭飞行模式，联网。发现时间没有统计。。。然后继续阅读十分钟，再来看统计时间，发现阅读时间变30分钟了。 那看来，断网时也是有统计的，不过显示出来需要一段时间后。所以最好还是保持联网吧。 </p>
<h3 id="电量"><a href="#电量" class="headerlink" title="电量"></a>电量</h3><p>我这台感觉电量还行吧，一天阅读30分钟，十天下来，电量剩 8%，这还是在联网的状态，如果断网应该还能用更久。</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>咪咕应该是用安卓系统，用数据线连接电脑的话，显示的是这样的</p>
<p><img src="/img/2020/%E5%92%AA%E5%92%95%E8%BF%9E%E6%8E%A5%E7%94%B5%E8%84%91.png" alt="咪咕连接电脑"></p>
<p>而用普通版 kindle 连接电脑，则显示的是像 U盘那样的。</p>
<h3 id="支持什么格式的书？"><a href="#支持什么格式的书？" class="headerlink" title="支持什么格式的书？"></a>支持什么格式的书？</h3><p>打开咪咕的 WLAN 传书，可以看到</p>
<blockquote>
<p>支持文件格式：</p>
<p>TXT、EPUB、UMD</p>
</blockquote>
<p>所以传入 mobi 格式的书籍是没法用咪咕系统打开的。</p>
<hr>
<p>希望可以顺利打完卡下车吧，用了一段时间，感觉咪咕的书还行吧，这些天都能找到感兴趣的来看。现在是6月28日，过几天就能正式打卡了，估计很快就能在闲鱼搜到打卡失败的 kindle 低价抛售了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>ireader阅读器与掌阅APP对比</title>
    <url>/2018/08/ireader-vs-APP/</url>
    <content><![CDATA[<p>近日买了个 ireader light 青春版。是一款类似 kindle 的电子阅读器，不过性价比高，功能体验也比较好。所以综合了解后我选择了它。</p>
<p>因为是掌阅出的，那么功能就和在手机下载个 掌阅APP 差不多。主要还是看中它的墨水屏，据说墨水屏看久不易伤眼睛。其它的也是有些不同的。</p>
<h2 id="阅读器独有的"><a href="#阅读器独有的" class="headerlink" title="阅读器独有的"></a>阅读器独有的</h2><ul>
<li><p>阅读器书城的图书价格和掌阅APP价格，总体价格保持一致。阅读器书城为回馈书友，每周会有特价书目，仅限阅读器书友享有。</p>
</li>
<li><p>无广告。这点其实不怎么值得提，因为手机有些定制版的也是无广告的。比如 OPPO vivo 这两个牌子的手机，自带的定制版的掌阅好像就是无广告的。而阅读器其实也就是一个定制版的掌阅APP，装在一个墨水屏平板里面罢了。况且我花了几百块买了这个只能阅读的机器，倘若得和手机免费下载一个APP一样，忍受着广告，这说得过去吗？</p>
</li>
<li><p>传送资料。这个功能说是主打微信文章推送，就是可以把公众号文章，弄到阅读器里面来阅读。流程是先关注它的公众号，绑定手机，然后再来阅读器用手机号登录。之后看到文章，复制它的链接，发送给公众号，阅读器就能收到这条链接。可见只是把文章网址发过去罢了，因此其它链接应该也是可以的。我试了一些博客文章，有英文的和中文的，发现有时候图片会加载不出来，全英文排版也还可以，故没图片或者图片少的文章，推送到阅读器里面再来观看，体验还是不错的。然后知乎的回答也可以推送到此。这个功能体验几次后我还是挺喜欢的。</p>
</li>
<li><p>阅读时长奖励代金券。这个并非手机端同有的 『阅读30分钟奖励5代金券』，而是阅读器里『我的，福利，时长福利』，（手机端我找不到这个，所以应该是阅读器特权吧）。这个一个星期算一次，阅读不同时间领取不同代金券，888分钟为最高，达到的话，全部领取有几百代金券。</p>
</li>
</ul>
<h2 id="手机独有的（或者说阅读器还没有的）"><a href="#手机独有的（或者说阅读器还没有的）" class="headerlink" title="手机独有的（或者说阅读器还没有的）"></a>手机独有的（或者说阅读器还没有的）</h2><ul>
<li><p>读完写评论。手机端看完一本书，可以给它评星级和写评论，而阅读器看完了就只出现：全书完。因此在阅读器看完，我得回到手机，翻到最后一页，再点一下，出现写书评的界面再来写。不写过段时间都不知道这本书有没有看完……</p>
</li>
<li><p>杂志往期。手机端打开一本杂志，右上角有个『往期』，这个非常方便，看完就能继续下载下一本。阅读器应该只能去书城里面搜索吧。</p>
</li>
</ul>
<p>阅读器的系统是可以升级的，所以我觉得未来应该会有越来越多的功能加进来。不过现在有些功能只有手机有，阅读器没有，有些不太方便。其它的暂时对我好像没多大影响。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>即使是使用 ipv6 也最好做好防范，ip6tables 与 ss</title>
    <url>/2019/11/ip6tables-and-ss/</url>
    <content><![CDATA[<p>最近看到好多个人，因为开放群晖的端口号，导致宽带被封，运营商给出的原因是：未备案个人宽带不允许提供 web 服务……</p>
<p>这里有一个案例：<a href="https://koolshare.cn/thread-170517-1-1.html">重要消息：上海电信对于绑定域名用于WEB服务的 直接封宽带</a></p>
<p>所以现在哪怕我只是开放给自己使用而已，也不行了。其实之前也是不允许的，不过运营商会把 80 端口和 443 端口给封了，这样我们就无法在家里搭建网站了。不过严格来讲还是可以的，只不过得在域名后面加个端口号，例如这样</p>
<blockquote>
<p><a href="http://www.baidu.com:12345/">www.baidu.com:12345</a></p>
</blockquote>
<p>但是现在这种也不允许了，而且一经发现，直接封了你的宽带。除非你自己去电信询问，否则都不知道为什么封的。没错，现在只有电信会封，而且看网友的讨论，好像只有 <strong>上海、深圳</strong> 这两个地方的<strong>电信宽带</strong>才会。</p>
<p>那么我是用 移动宽带 的，我需要担心吗？之前我是觉得不需要担心的，毕竟等网上别人出事的时候，我在网上看到别人的帖子，我再来开启防火墙就行了。</p>
<p>然而，我又一想，我怎么知道我不会是，移动用户中第一批遭殃的呢？所以我赶紧又打开我路由器的防火墙。</p>
<p>但我还是想享受外网访问的便捷性，所以我得来想想对策。</p>
<h3 id="之前的"><a href="#之前的" class="headerlink" title="之前的"></a>之前的</h3><p>我之前的话，是直接关闭防火墙，这样我就可以通过 ipv6 ，在外面访问宿舍的设备，主要有：</p>
<ol>
<li>进入路由器查看一下情况</li>
<li>访问刷了小钢炮系统的斐讯 N1 盒子，查看系统的负载，管理里面 qbittorrent 的下载</li>
<li>有时候电脑用虚拟机开着一台 Ubuntu 服务器，需要外网 ssh 连接</li>
</ol>
<p>所以这上面三台主机里面，我都有运行 ddns 脚本，让它们把自身的 ipv6 地址与我在阿里云申请的域名进行绑定。这样我就可以通过三个不同的域名访问这些主机。但是也麻烦，再添加机器我就得再去添加脚本，并且记住域名，所以我更改了方案。</p>
<h3 id="现在的"><a href="#现在的" class="headerlink" title="现在的"></a>现在的</h3><p>我直接开启 padavan 系统的路由器里面的 ss_server ，之后我在外面要访问内网的设备时，就用 ss 连接我的路由器，这时就相当于把它当 VPN 来使用。我想要管理路由器，可以直接在浏览器输入 <code>192.168.123.1</code> 而不用去输入域名，管理其它设备也一样，直接输入局域网 IP 即可。</p>
<p>但是，这一切，还是建立在我把防火墙关闭了的情景下，这样我的宽带还是有被封的风险。我想要开启防火墙，但同时我还可以连接到内网的设备。所以，我了解了一下 <code>ip6tables</code> ，这个是管理 ipv6 的防火墙软件，详情可以看这里 <a href="https://man.linuxde.net/ip6tables">ip6tables详细使用说明</a></p>
<p>但我用到不多，现在外界访问只通过一个端口，就是 ss_server 开放的那个端口，默认为 8388 ，所以我只需要开放这个端口即可。需要做的，是通过 ssh 连接路由器，或者直接在 高级设置，系统管理，控制台 输入这 3 条命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip6tables -A FORWARD -p tcp --dport 8388 -j ACCEPT</span><br><span class="line">ip6tables -A INPUT -p tcp --dport 8388 -j ACCEPT</span><br><span class="line">ip6tables -A OUTPUT -p tcp --dport 8388 -j ACCEPT</span><br></pre></td></tr></table></figure>

<p>这样外网就只能通过 8388 这个端口来访问内网，而且只能用 ss 连接才行，直接在浏览器输入我 IP 加 8388 肯定不行，因为我根本没有开启 web 服务。所以应该是不会有宽带被封的风险。</p>
<p>但是这样有一个问题，就是当我路由器重启之后，就失效了，只能重新到控制台再输入一次。能否让它开机后自动执行呢？</p>
<p>可以的，需要到【高级设置】——【自定义设置】——【脚本】里添加。由于我使用的是 hiboy 大佬修改的 padavan 系统，所以里面有好几个脚本。如果是其他人的固件估计没这个功能。</p>
<p>那么这里我可以把上面的三条命令，放在【在路由器启动后执行】这个脚本里，也可以放在【在防火墙规则启动后执行】里。我个人是选择后者。</p>
<p>将命令粘贴进去后，点击下方的【应用本页设置】即可。这样以后重启路由器后，就会自动执行这三条命令。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Linux 上挂载 NFS</title>
    <url>/2020/10/mount-nfs-in-linux/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>NFS 是 Network File System 的缩写。和 smb 相似，可以将服务器中的某个文件夹共享出来，让其它设备可以访问里面的内容。</p>
<p>我们知道 smb 共享可以挂载在 Windows 电脑上，当一块网络硬盘来使用。</p>
<p><img src="/img/2020/smb-mount.png" alt="smb-mount"></p>
<p>NFS 也同样可以，于是我想把 贝壳云 上面连接的 10T 硬盘，通过 NFS 共享，挂载在刷了 armbian 的 N1 上面，这样我两台设备都可以使用这块硬盘，提高利用效率。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>贝壳云上我刷的是小钢炮系统，里面可以直接开启 NFS ，需要先设置共享。</p>
<ul>
<li>export dir 想要共享的目录</li>
<li>hosts allow 允许访问的 IP 地址，这里我填 N1 的 IP 地址</li>
<li>nfs option 使用默认 <code>rw,sync,root_squash,all_squash,insecure,no_subtree_check</code></li>
</ul>
<p>nfs 和 smb 不同，不能设置用账号密码访问，只能设置让某个 IP 访问。如果想让局域网的所有人都可以访问，假设路由器的 IP 是 <code>192.168.1.1</code>，那么这里可以填 <code>192.168.1.0/24</code>，指的是 IP 地址以 <code>192.168.1</code> 开头的用户都可以访问。</p>
<p>设置好后，切换的 armbian ，用 ssh 连接设备，查看一下 贝壳云 nfs 的共享权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">showmount -e beikeyun</span><br></pre></td></tr></table></figure>

<p>这里的 <code>beikeyun</code> 也可以使用内网 IP</p>
<p>确定 N1 拥有访问权限之后，便可以开始挂载了。此时我想把 贝壳云 上的 <code>/media/x</code> 挂载到 N1 的 <code>/media/x</code> 上，我需要先在 N1 上创建这个文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /media/x</span><br></pre></td></tr></table></figure>

<p>之后在 N1 上安装 nfs 客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nfs-common</span><br></pre></td></tr></table></figure>

<p>之后挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t nfs beikeyun:/media/x /media/x</span><br></pre></td></tr></table></figure>

<p>没有报错便是挂载成功。此时已经可以查看 10T 硬盘里面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /media/x</span><br></pre></td></tr></table></figure>

<p>完</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>IOS 设备备份相册与文件到 NAS</title>
    <url>/2020/12/ios-backup-photos/</url>
    <content><![CDATA[<p>一直以来，我都是用安卓手机，特别是小米的手机，已经用了很多年了。一开始的照片也不多，用小米自带的云服务备份即可。后来照片有点多了，小米云服务免费的 5G 空间已经不够用了。</p>
<p>我开始尝试其它的备份方案，比如电脑和手机都安装 handshaker 这个软件，可以自动将图片备份到电脑里。电脑里现在还存放着两年多前备份的手机图片。</p>
<p><img src="/img/2020/handshaker-photos.png" alt="handshaker-photos"></p>
<p>好像备份了一两次我就不用了，不是我想要的备份方案。后来我还尝试使用 Google photos 备份，也觉得不好用。都不是我想要的。</p>
<p>后来我接触到 syncthing 这个开源软件。感觉它才是最符合我需求的，它其实是一个同步软件，网上有很多人称它为网盘并不准确。其原理是这样，我手机上面选中一个文件夹，通过这个软件，就可以把里面的文件备份到其它的设备，比如其它的手机、电脑或者 NAS。</p>
<p>所以在安卓手机上，我只要选中 DCIM 这个文件夹，就可以把手机里面拍摄的图片、视频以及截图备份到其它设备。但是有一些图片，是通过微信保存到手机里的，并不在 DCIM 这个文件夹中。这也不难解决，再选中一个文件夹即可 <code>tencent\MircoMsg\WeiXin</code> 。但是，这款应用并没有 IOS 版……</p>
<p>所以当我买了台二手的 ipad 后，我发现没法用 syncthing 来备份里面文件，我只能去寻找替代品。于是我找到了这么一款——微力同步（verysync）。这是一款国产的应用，也是支持多平台的同步应用。当我第一次接触它时，我严重怀疑它是拿开源的 syncthing 去换皮的。</p>
<p><img src="/img/2020/syncthing-and-verysync.png" alt="syncthing-and-verysync"></p>
<p>它的使用方法和 syncthing 差不多，不过它有一个不错的地方，就是它分享文件夹，不需要像 syncthing 那样先让两台设备建立关系（有点像微信互相添加好友），微力同步可以将要分享的文件夹通过密钥或者链接分享出去。比如我手机里想将相册这个文件夹同步到电脑，那么我只要让它生成一个链接，将链接发到电脑，电脑点击后就可以将文件同步过来了。</p>
<p>如果是电脑想分享给手机，除了上述的链接和密钥，还可以通过二维码分享，只要扫这个二维码，就可以将电脑的文件同步到手机里。</p>
<p><img src="/img/2020/verysync-share.png" alt="verysync-share"></p>
<p>所以我后来就慢慢的使用微力同步代替 syncthing 了，感觉它用起来方便点，而且也都是免费的。然后我还了解到它还有 IOS 版，就想用它来备份 iPad 的相册到 NAS 里。结果却发现，它在其它所有平台都是免费的，唯独在 ios 上是收费的，价格 12 块。</p>
<p>抱着价格也不贵的心态，而我也使用了有一段时间了，我也就买一份支持一下。</p>
<p><img src="/img/2020/ios-appstore-verysync.jpg" alt="ios-appstore-verysync"></p>
<p>不过后来我又发现了一款功能差不多，而且可以免费用的 app —— resilio sync 。并且我这时才知道，原来微力同步的那些功能都是从这里学来的。</p>
<p><img src="/img/2020/resilio-option.png" alt="resilio-option"></p>
<p>这软件以前叫 btsync ，感觉像是 BT 的变种。最早的 BT 是，比如我有一部电影想分享给朋友，我可以为这部电影制作一个种子（torrent 文件），我只要电脑不关，保持做种状态，并把这个种子文件发给其他人。其他人只要能连接到我的电脑，就能下载我电脑里的这部电影。</p>
<p>而这个 btsync 可以省去制作种子和传播种子文件的过程，直接发给别人一个链接或一个密钥就行。但其实 BT 也可以省去传播种子文件的过程，发磁力链接就行呗。但是有一点 BT 就做不到了，那就是更新，btsync 可以分享一个文件夹，比如现在里面是一个文件 <code>xxxS01E01.mp4</code> ，是某部电视剧的第一集，其他人得到这个分享链接或密钥，就可以下载到。但如果下个星期出第二集了，其他人不需要进行任何操作，就可以下载到第二集 <code>xxxS01E02.mp4</code> ，因为这个分享文件夹更新了。</p>
<p>但是用 BT 就做不到，只能等出第二集了，再做一个 BT 种子，分享给其他人才行。所以听说以前这个 btsync 挺火的，那后来怎么不火的呢？因为官方觉得使用 dht 技术自己管控不了这个软件，所以在 1.4.111 版本后，就把 dht 功能去掉了。之后的版本如果想通过 bysync 下载资源的话，就得通过官方的服务器，才可以查询到其他用户 IP ，从而进行下载。而再之后，它的服务器在国内被墙了，因此在国内也就基本凉了。</p>
<p>不过它只是作为资源下载这方面凉了，用来局域网同步还是可以用的，使用的方法都一样，因为这三个软件的关系很微妙。我在 <a href="https://www.appinn.com/verysync/">小众软件</a> 看到了网友 <strong>哆哆爱焱垚</strong> 的这样一段留言</p>
<blockquote>
<p><strong>这个软件我知道，在Resilio Sync时代，发现不能使用时，微力同步的作者一直以小资源站的形式进行着Resilio Sync再度能用的努力，但是后来实在经不住这么折腾就在开源软件Syncthing的基础上自己开发了这款微力同步，而界面的相似真的是为了让当初一批Resilio Sync用户减少适应的难度而高度相似。后来，也是看着作者一步步因为论坛及QQ群网友的要求开发出了适应各个平台的版本。作者一路走来也真的是不容易，也挺高兴他的软件被小编收录到了主站！</strong></p>
</blockquote>
<p>这三款应用，简单的同步功能，都可以免费使用。</p>
<ul>
<li>syncthing 由于是开源软件，完全免费，但是它没有 IOS 端，而且同步之前需要设备互相添加好友，感觉有点不方便。</li>
<li>verysync 基于 syncthing 开发的国产闭源软件，IOS 端需要付费购买才可以使用，现在的价格是 ￥12。其它平台可以免费使用，但是有些高级功能，如电脑和 Linux 端的选择同步，需要 Pro 才可以使用，想拥有 Pro 资格，需要 ￥99.</li>
<li>resilio sync 是闭源商业软件，除了同步功能之外，还可以下载资源。免费版对于个人使用应该也是足够的。</li>
</ul>
<p>为了写这篇文章，我把三款应用都通过 docker 装在 N1 上了。</p>
<p><img src="/img/2020/3-sync-app.png" alt="3-sync-app"></p>
<p>体验下来还是觉得 verysync 用着比较顺手。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>进阶了解 hexo 博客</title>
    <url>/2020/02/more-about-hexo/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>个人使用 hexo 搭建博客已经有一年多的时间了。但是说实在，对其了解并不多，我只知道用它，可以把我的 markdown 文档渲染成 html 文件，之后放到 GitHub 上就可以搭建博客。</p>
<p>一开始的使用是看别人的教程，网上一堆人写了用 hexo 来搭建免费博客的文章。其官网 <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> 上面也有教程，几条命令就可以在电脑上弄好一个博客。</p>
<p>之后便是将文章推送到 GitHub 上面，进行设置，使用 GitHub page 建立博客网站。在这时我了解到，我们还可以搭建在国内的网站上面，如 gitee ，coding 。可以让我们的访问速度更快。而且之前还了解到有位老哥有一个不错的方法，可以让国外的 ip 就访问 github 的博客，国内的 ip 就访问 gitee 或者 coding 的博客。好像是利用域名解析来达到目的的，具体我没有去尝试。</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>不像　wordpress ，所有文件都是在服务器上。hexo 的博客源文件都是在我们自己的电脑上面的，如果我们的电脑出问题，如硬盘坏了，被偷了，那么我们的博客就没法更新和修改。因此我们需要自己来备份这些文件。</p>
<p>如果只是想备份文章而已，那么同步网盘如 onedrive 、坚果云 也足够的。当然你想同步整个博客文件夹也可以，不过我不建议这么做，因为里面的文件实在太多了，之前　git push　的时候看到，好像有几万个文件。而且，这样也太 low 了。</p>
<p>正确的备份方法应该是使用 git 来备份。</p>
<h3 id="备份前准备"><a href="#备份前准备" class="headerlink" title="备份前准备"></a>备份前准备</h3><p>我们得知道我们备份的目的，像我的话，我最主要的目的是备份文章，其次是博客主题，再来是博客的一些配置。<strong>目的明确</strong>之后，就来分析博客根目录下的文件。</p>
<p>需要备份的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source //文件夹放置着博客文章，最最重要的一个文件夹</span><br><span class="line">themes //放置着主题，我个人喜欢一起备份</span><br><span class="line">scaffolds //页面模板位置</span><br><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>

<p>不需要备份的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.deploy_git   //里面的文件除了多一个 .git 其它和 public 里面一样</span><br><span class="line">node_modules  //在根目录下 npm i 就会读取 package.json 来安装模块，没必要备份</span><br><span class="line">public    	  // hexo 生成 html 页面后所放的地方，hexo g 就可以生成，没必要备份</span><br><span class="line">db.json       //执行 hexo s 启动本地服务器的时候就会自动生成，没必要备份</span><br></pre></td></tr></table></figure>

<p>了解这些之后，我们就可以只备份必要的文件。</p>
<h3 id="以前的备份方案"><a href="#以前的备份方案" class="headerlink" title="以前的备份方案"></a>以前的备份方案</h3><p>我之前是根据这篇文章　<a href="https://www.jianshu.com/p/beb8d611340a">Hexo博客从一台电脑迁移到其他电脑</a>　将博客源文件备份到 GitHub 上面。这个方法是让渲染文件和博客源文件，都放在同一个仓库里面的不同分支。但我个人觉得到不如放两个仓库好。</p>
<h3 id="现在的备份方案"><a href="#现在的备份方案" class="headerlink" title="现在的备份方案"></a>现在的备份方案</h3><p>首先我们如果想备份主题的话，需要把主题文件夹里的 <code>.git</code> 给删除了，让它变成一个普通的文件夹。比如很多人使用的 <code>next</code> 主题，就进入 <code>themes/next</code> 里面将 .git 文件夹给删除了就行。</p>
<p>在博客根目录下 <code>git init</code> ,让其变成一个 git 仓库。将那些不需要备份的文件和文件夹添加到 <code>.gitignore</code> 中，我的里面有这些内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public</span><br><span class="line">db.json</span><br><span class="line">.deploy_git</span><br><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure>

<p>之后 <code>git add .</code> ，再 commit ，然后将其推送到远程仓库即可。之后换电脑，只需把这个仓库 clone 到电脑，进入仓库， <code>npm i</code> 一下，npm 就会根据两个 package 开头的文件，去帮我们安装相对应的模块，之后我们便可以看到 <code>node_modules</code> 文件夹又回来了。此时我们的博客便已搭建成功，可以继续写博客了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>小钢炮又被折腾坏记录，最终成功用上 zsh</title>
    <url>/2019/10/nano-zsh/</url>
    <content><![CDATA[<p>刚才给小钢炮安装了 zsh ，这个过程还是有点复杂的，不过好在都能找到教程。</p>
<h2 id="1、先去看灯大的文章"><a href="#1、先去看灯大的文章" class="headerlink" title="1、先去看灯大的文章"></a>1、先去看灯大的文章</h2><p><a href="https://gitee.com/8ox86/phicomm-n1-issue/wikis/entware%20guide?sort_id=1368793">gitee wiki 上的教程</a></p>
<blockquote>
<ol>
<li>编辑 /etc/opkg/entware.conf<br>取消行首的 # 符号</li>
<li>opkg2 update</li>
<li>查找包 opkg2 find xxxx</li>
<li>opkg2 install xxxxx</li>
</ol>
</blockquote>
<h2 id="2、安装-zsh-与配置集"><a href="#2、安装-zsh-与配置集" class="headerlink" title="2、安装 zsh 与配置集"></a>2、安装 zsh 与配置集</h2><p>于是我就安装了 zsh 以及 oh my zsh 为的就是用这个自动补全插件 zsh-autosuggestions</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opkg2 install zsh</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>


<h2 id="3、遇坑部分，无法-ssh-连接"><a href="#3、遇坑部分，无法-ssh-连接" class="headerlink" title="3、遇坑部分，无法 ssh 连接"></a>3、遇坑部分，无法 ssh 连接</h2><p>顺利地安装成功了，然后，我想将 zsh 设置为默认的 shell ，使用 chsh -s /opt/bin/zsh 却失败了。</p>
<p>然后网上找其它方法，看到有个是修改 /etc/passwd 这个文件，第一行就是 root 用户的默认 shell 路径，于是用 vim 修改这个文件，改为 zsh 的路径，然后退出，再重新 ssh 连接，就登录不了了……</p>
<p><img src="/img/2019/ssh.jpg"></p>
<p>本想这次扑街了，又得重装系统了，可惜 qb 的配置没有备份……</p>
<h2 id="4、想办法备份"><a href="#4、想办法备份" class="headerlink" title="4、想办法备份"></a>4、想办法备份</h2><p>于是想办法看看能不能备份出来，不然重装系统后所有记录都没了。想到 qb 的配置文件是放在 /var/lib/qbittorrent 这个文件夹里的，之前我是 ssh 之后，把复制到自己的硬盘的。现在无法 ssh，得另寻方法。</p>
<p>于是想到小钢炮的 web 界面有个定时任务的功能 Scheduled Tasks ，在这个我也可以执行命令啊，那我在这里备份这个文件夹不就行了。</p>
<p>同时灯大的 wiki 里也有写备份 qb 和 tr 的方法，他是用 tar 来打包这个文件夹的，这种可能更好吧。</p>
<p>于是我添加了这条任务，每十五分钟就将这两个文件夹打包备份到我这个叫 one 的硬盘里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15 * * * * tar cvf /media/one/qb.tar /var/lib/qbittorrent &amp;&amp; tar cvf /media/one/tr.tar /var/lib/transmission</span><br></pre></td></tr></table></figure>


<h2 id="5、曲线救国"><a href="#5、曲线救国" class="headerlink" title="5、曲线救国"></a>5、曲线救国</h2><p>所以这样打包好后，就可以重装系统了嘛。不过我突然想到，既然这里可以执行命令，那我在这里修改 passwd 这个文件，改回去不就行了？</p>
<p>于是我将 passwd 这个文件的内容，输出到硬盘里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd &gt; /media/one/pass.txt</span><br></pre></td></tr></table></figure>


<p>接着我用 filebrowser 修改这个文档里面的内容，再把它输入回 passwd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /media/one/pass.txt &gt; /etc/passwd</span><br></pre></td></tr></table></figure>


<p>完成，再来 ssh ，就成功登录上了。</p>
<p>但是我的 zsh 还是没办法设置为默认 shell ……</p>
<p>怎么办呢？</p>
<h2 id="6、用上-zsh"><a href="#6、用上-zsh" class="headerlink" title="6、用上 zsh"></a>6、用上 zsh</h2><p>我想到，当我们用 ssh 连接上小钢炮的 sh 时，它会去执行 /etc/prifile 这个文件里面的内容，那我直接在这里面添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zsh</span><br></pre></td></tr></table></figure>


<p>我将它放在环境变量之后，在 13 行这个位置。这样之后用 ssh 连接，系统就会先启动 sh ，然后读取 /etc/prifile 的内容，读到 13 行，执行了 zsh 这个命令，然后 shell 就自动切换到 zsh 了。</p>
<p>由于这个过程很快，我们不可能看到，所以一连接上看到的就是 zsh 了。完美！</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>打造最具性价比服务器 N1-armbian</title>
    <url>/2020/03/n1-armbian-server/</url>
    <content><![CDATA[<blockquote>
<p>建议搭配视频观看：<a href="https://youtu.be/_3LqxpzISqE">Youtube</a>    <a href="https://www.bilibili.com/video/BV13z411b7qY/">bilibili</a></p>
</blockquote>
<h2 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h2><p>之前折腾过把 N1 刷成 armbian 桌面版，<a href="/2019/12/N1-armbian/">斐讯 N1、P1 安装 armbian 变身电脑主机</a>可以当一台小电脑使用。后来觉得我没这个需求，所以就没去用它了。</p>
<p>现在我想把 N1 刷成 armbian 服务器版，不需要桌面环境。因为我觉得，我用小钢炮最主要也是用 docker 和 smb 而已，那这个我用 armbian 也可以实现，而且刷成 armbian 我还可以用 WiFi ，N1 就不需要放在路由器旁边了。</p>
<h2 id="1、写入-U-盘"><a href="#1、写入-U-盘" class="headerlink" title="1、写入 U 盘"></a>1、写入 U 盘</h2><p>将镜像【Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img】写入 U 盘，放入 dtb【meson-gxl-s905d-phicomm-n1-xiangsm.dtb】，修改 uEnv.ini，将第一行的dtb 名字改一下。U盘做好了。xiangsm 大佬在恩山上的帖子：<a href="https://www.right.com.cn/FORUM/thread-510423-1-1.html">https://www.right.com.cn/FORUM/thread-510423-1-1.html</a></p>
<p>相关文件放在网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 的【盒子】文件夹中</p>
<blockquote>
<p>armbian和dtb分别是什么来头，我简单说明一下：</p>
<ul>
<li><p>armbian：直接来源于armbian的官方，armbian其实就是debian发行版为arm架构适配后的版本。也就是说，恩山论坛是没有人去改动armbian系统代码的，是非常可靠的。</p>
</li>
<li><p>dtb：各种品牌的盒子千千万，每个盒子使用的网卡啊、cpu芯片啊的型号千千万，armbian内核为了能够和这些外设正常工作，就要求提供一种叫做dtb的描述文件，我理解就是针对各个硬件的驱动程序。</p>
<ul>
<li>为了让斐讯N1的各个硬件可以被armbian正常调度，所以需要给斐讯N1适配一套dtb文件。</li>
<li>dtb文件需要随着内核编译，所以不同armbian内核版本必须使用配套的dtb文件。</li>
<li>目前斐讯N1的dtb文件已经被armbian收录到官方源码库里，但是使用的时候linux负载会显示的很高，所以热心网友为armbian5.77编译了一个fix过的dtb文件。</li>
</ul>
<p>来自：<a href="https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/">斐讯N1 – 完美刷机Armbian教程</a></p>
</li>
</ul>
</blockquote>
<h2 id="1-5-首次开机需注意"><a href="#1-5-首次开机需注意" class="headerlink" title="1.5 首次开机需注意"></a>1.5 首次开机需注意</h2><p>第一次启动，用户名 root ，密码 1234 。</p>
<p>登录成功后，会要求你更改密码，但是，但是，但是，需要你先输入当前的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（current）UNIX password：</span><br></pre></td></tr></table></figure>

<p>也就是输入 1234，之后才是设置新的密码，要输入两次。</p>
<p>这样改好密码之后，会要求你创建一个新的用户，这里我们可以不用创建的，按 <code>ctrl + c</code> 取消。然后需要再登录一次。</p>
<h2 id="2、启动机器，修改源"><a href="#2、启动机器，修改源" class="headerlink" title="2、启动机器，修改源"></a>2、启动机器，修改源</h2><p><a href="https://www.right.com.cn/forum/thread-430903-1-1.html">N1刷入Armbian后换软件源、安装Docker并提速</a>【这篇文章里的源是 debian 的】</p>
<p><a href="https://www.dragoncave.me/2019/07/armbian-on-n1.html">斐讯N1折腾记 - Armbian 5.77 刷入与优化</a>【这篇有 ubuntu 和 debian 】我上面用的镜像是 ubuntu 的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>进来后，按 dG 就可以把里面所有的内容删除，然后按 i 就可以进入输入模式，将下面的内容粘贴进去即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span><br><span class="line">#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p><strong>改 armbian 源</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list.d/armbian.list</span><br></pre></td></tr></table></figure>

<p>将里面的那行注释掉（在前面添加 # ）然后添加这行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/armbian bionic main bionic-utils bionic-desktop</span><br></pre></td></tr></table></figure>

<p>改完这两个后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure>

<p>之后我视频中是安装了 zsh ，用这个 shell 会极大提高效率。有兴趣的看另外一篇文章去安装。</p>
<p><a href="/2020/03/zsh-note">最强 shell 非 zsh 莫属</a></p>
<h2 id="3、安装-docker-与改源"><a href="#3、安装-docker-与改源" class="headerlink" title="3、安装 docker 与改源"></a>3、安装 docker 与改源</h2><p>其实也可以用 armbian-config 里面的功能来安装。</p>
<p>这里我参考的是这篇教程：<a href="https://www.right.com.cn/forum/thread-430903-1-1.html">N1刷入Armbian后换软件源、安装Docker并提速</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"></span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure>

<p>使用上述命令安装会调用阿里云的镜像，安装速度较快。</p>
<p>之后修改 docker 镜像源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>粘贴下面内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://dockerhub.azk8s.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启 docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>安装 portainer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data --restart always portainer/portainer</span><br></pre></td></tr></table></figure>

<p>这样我们就可以在浏览器输入 <code>IP:9000</code> 来管理 docker 了。</p>
<p>关于 docker 安装 qb 、filebrowser 之类，可以观看另外一篇文章，大概修改一下即可。</p>
<p><a href="/2020/02/about-N1-nano/">N1 小钢炮系统相关</a></p>
<h2 id="4、开机自动挂载硬盘"><a href="#4、开机自动挂载硬盘" class="headerlink" title="4、开机自动挂载硬盘"></a>4、开机自动挂载硬盘</h2><p>之后折腾开机自动挂载硬盘，参考这篇文章：<a href="https://blog.csdn.net/buxiaoxindasuile/article/details/49612867">https://blog.csdn.net/buxiaoxindasuile/article/details/49612867</a></p>
<p>这里我重启后，硬盘的设备名，就从 sdb 变成 sda 了，所以就重新编辑一下 fstab ，之后就可以正常挂载了。</p>
<p>如果还是不行，就改用 uuid 吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blkid /dev/sdb1</span><br></pre></td></tr></table></figure>

<p>这条命令可以显示硬盘信息，里面就有 uuid，然后修改 fstab 即可。例如我就是在 fstab 最后添加这行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID=0000678400004823   /media/one      ntfs    defaults        0 0</span><br></pre></td></tr></table></figure>

<h2 id="5、samba-共享"><a href="#5、samba-共享" class="headerlink" title="5、samba 共享"></a>5、samba 共享</h2><p>修改 apt 源 和 armbian 源 之后，再输入 armbian-config 就可以安装 samba 了。</p>
<p>也可以用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install samba</span><br></pre></td></tr></table></figure>

<p>来安装。</p>
<p>关于 samba 的配置，可以看这篇文章：<a href="https://wiki.jikexueyuan.com/project/linux/samba.html">https://wiki.jikexueyuan.com/project/linux/samba.html</a></p>
<p>这里不要在 armbian-config 里修改，退出后用 vim 编辑 /etc/samba/smb.conf</p>
<p>改完重启一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/smbd restart</span><br></pre></td></tr></table></figure>

<h2 id="6、安装我家云固件的导航"><a href="#6、安装我家云固件的导航" class="headerlink" title="6、安装我家云固件的导航"></a>6、安装我家云固件的导航</h2><p>这时我又想，之前我家云上面的导航好像不错，而且它也是用 armbian 修改的，那我用 N1 应该也可以用这个导航吧。于是根据乘风大佬的这篇文章：<a href="https://blog.windtech.cf/index.php/archives/10/">https://blog.windtech.cf/index.php/archives/10/</a></p>
<p>由于大佬的博客有时访问不了，我把导航传了一份到百度网盘中。</p>
<p><a href="https://pan.baidu.com/s/1J0UYKHbEVWvmAdze_1bNIw">https://pan.baidu.com/s/1J0UYKHbEVWvmAdze_1bNIw</a></p>
<p>提取码：6666</p>
<p>在 armbian 上装了个导航。</p>
<p>将导航下载后，改名，如 1.zip</p>
<p>然后传到 N1 里面，<code>apt install zip</code> ，装一个 zip ，然后就可以解压这个压缩包。不过最好先把这个压缩包，移动到 /opt 中。也可以一开始就传到 /opt 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">unzip 1.zip #会解压出来两个文件</span><br><span class="line">chmod +x install_navi.sh #赋予脚本执行权限</span><br><span class="line">./install_navi.sh	#执行里面的安装脚本</span><br></pre></td></tr></table></figure>

<p>一分多钟就可以安装完，然后在浏览器输入 N1 的 ip 就可以看到导航了。导航网页的位置在：/opt/wwwroot/navi/ ，可以自己修改里面的 index.php 。像我就自己修改了一些内容。</p>
<p><img src="/img/2020/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E5%AF%BC%E8%88%AA.jpg" alt="修改后的导航"></p>
<h2 id="7、Nginx-开启-ipv6"><a href="#7、Nginx-开启-ipv6" class="headerlink" title="7、Nginx 开启 ipv6"></a>7、Nginx 开启 ipv6</h2><p>之后我将机器的 ipv6 地址绑定域名后，发现无法访问导航页面。而其它的端口是可以访问的，那难道是 nginx 的问题？查了一下，果然是因为 Nginx 没有开启 ipv6 支持导致的。开启方法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /opt/etc/nginx/vhost/navi.conf</span><br></pre></td></tr></table></figure>

<p>将 <code>listen 80;</code><br>改为 <code>listen [::]:80;</code></p>
<p>之后再重启 Nginx 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/sbin/nginx -s reload</span><br></pre></td></tr></table></figure>

<h2 id="8、用-rsync-备份"><a href="#8、用-rsync-备份" class="headerlink" title="8、用 rsync 备份"></a>8、用 rsync 备份</h2><p>因为我在 N1 上面搭建了一个 typecho 博客，文件都放在 /docker/typecho 中，为了安全，我想备份 typecho 文件夹到硬盘中，可以用这个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rsync -av /docker/typecho /media/one/lib</span><br></pre></td></tr></table></figure>

<p>rsync 使用详细可见：<a href="https://blog.csdn.net/wangjunjun2008/article/details/38658539">https://blog.csdn.net/wangjunjun2008/article/details/38658539</a></p>
<p>当然这只是手动备份，我想设置它每天自动备份，于是用 <code>crontab -e</code> 进入计划任务编辑，在里面添加这一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 2 * * * rsync -av /docker/typecho /media/one/lib</span><br></pre></td></tr></table></figure>

<p>这样每天的凌晨两点，就会自动备份一次。</p>
<p>而且用 rsync 是增量备份，不用担心占太多空间的问题。</p>
<h2 id="9、修改时区"><a href="#9、修改时区" class="headerlink" title="9、修改时区"></a>9、修改时区</h2><p>在 armbian-config 里面改就行。</p>
<h2 id="10、写入-emmc"><a href="#10、写入-emmc" class="headerlink" title="10、写入 emmc"></a>10、写入 emmc</h2><p>有些教程说，直接用 nand-sata-install 这个命令，就可以把固件写入 emmc ，这样就不需要把系统刷回安卓。于是我在机器 emmc 里装的是小钢炮系统的情况下，执行这条命令，最后显示写入 emmc 成功。但是我关机，拔掉 U盘再启动，发现并不能启动……</p>
<p>所以我还是用之前的方法，将机器刷回安卓，再用 adb 让机器从U盘启动。之后将 <code>./install.sh</code> 将系统写入 emmc 。</p>
<p>这里有一个其他网友的评论</p>
<blockquote>
<p>线刷回安卓，再用 u 盘重刷armbian，绝对是一个干净彻底，重装armbian的好方法。而且绝对不会出现，mac地址重启变化的问题。</p>
</blockquote>
<p>这里我为什么等到最后才把系统写入 emmc 呢？其实是有这样的考虑的，我现在的系统是在 U盘 中的，它是我一步一步配置好的。如果我不介意的话，是可以一直U盘里的系统的。不过U盘当系统盘会加快U盘的损耗，还是不推荐。</p>
<p>那么它还有另外的作用，就是<strong>备份</strong>。我现在才把系统写入emmc，之后我就可以脱离U盘使用这个系统了。但是，之后如果因为我的误操作，或者其它的原因，导致系统坏了，或者有些功能不能用了。那么这时，我可以重新插入U盘，再一次将U盘中的系统写入emmc。</p>
<p>然后，可能有人会觉得，这样我的U盘岂不是，不能用来干其它事情了？因为里面存放着一个系统。那有没有什么办法，把里面的系统备份到电脑呢？</p>
<p>答案是有的。此时将U盘插入电脑，然后再打开【USB image tool】，但是这次我们不是把 img 写入U盘，而是用它，把U盘中的系统，导出为 img 文件。点击右下角的 backup 就可以备份，你的U盘有多大，备份出来的文件就有多大。</p>
<p><img src="/img/2020/%E5%A4%87%E4%BB%BDU%E7%9B%98%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F.jpg" alt="备份U盘中的系统"></p>
<p>那么这样你就可以那U盘去干其它的事情了。而之后如果你有需要，就将刚才的备份的 img 文件，再次写入 U盘即可。</p>
<h2 id="11、中文乱码问题"><a href="#11、中文乱码问题" class="headerlink" title="11、中文乱码问题"></a>11、中文乱码问题</h2><p>此时在终端中，无法显示和输入中文。解决方案来自 <a href="%5Bhttps://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/%5D(https://yuerblog.cc/2019/10/23/%E6%96%90%E8%AE%AFn1-%E5%AE%8C%E7%BE%8E%E5%88%B7%E6%9C%BAarmbian%E6%95%99%E7%A8%8B/)">这篇文章</a> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/environment</span><br></pre></td></tr></table></figure>

<p>将最后一行改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LC_ALL=&quot;en_US.utf-8&quot;</span><br></pre></td></tr></table></figure>

<p>之后重新连接 ssh 应该就可以了。</p>
<h2 id="12、关于终端中的代理"><a href="#12、关于终端中的代理" class="headerlink" title="12、关于终端中的代理"></a>12、关于终端中的代理</h2><p>运行 Python 脚本需要依赖一些模块，那么就需要用到 pip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure>

<p>然后就可以用 pip3 来安装模块了，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure>

<p>不过由于国内的网络环境，你不一定能成功装上。这时可能就需要用代理了，如果你的电脑有开小飞机的话，那么可以设置 N1 通过电脑来代理访问。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">url=http://192.168.1.2:1080</span><br><span class="line">export http_proxy=$url; export https_proxy=$url</span><br></pre></td></tr></table></figure>

<p>假设电脑的 ip 是 192.168.1.2 ，通过执行这两行命令之后，http https 的访问就会通过电脑的代理。例如 pip 安装模块，不用代理我根本没法安装成功，有时候 github clone 也一样，唉~</p>
<p>不可详讲。。。</p>
<hr>
<p>相关文件的下载链接放在网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 的【盒子】文件夹中。</p>
<p>可能看完又有人要问，哪里可以买 N1 ？那一般就论坛买二手，拼多多买全新。这里分享一下论坛网友买 N1 的心得。</p>
<p><img src="/img/2020/N1%E7%B2%BE%E6%89%93%E7%BB%86%E7%AE%97%E8%B4%AD%E4%B9%B0%E6%B3%95.png" alt="N1精打细算购买法"></p>
<p>总之想省钱就多上论坛逛逛吧。然后我看有些店，原系统和小钢炮系统居然相差20多块，确实有点坑。不过现在卖的 N1 很多都是黑色版的，不知道区别大不大，要买得先去了解一下。</p>
<hr>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nds 游戏存档导入到电脑的模拟器玩</title>
    <url>/2019/11/nds2desmume/</url>
    <content><![CDATA[<p>我有这么个需求，之前在 nds 上面用 R4 卡玩的游戏存档，想把它复制到电脑上，然后在电脑上用模拟器继承存档，继续玩之前的进度。但它并不是直接复制过来就可以用的。</p>
<p>用 desmume 这个 nds 游戏模拟器，它在游戏中正常保存后的存档格式为 .dsv</p>
<p>而用 nds 加 R4 卡来玩游戏，正常保存后，存档文件的后缀为 .SAV </p>
<p>这样就没法这边打完，就把存档复制到那边，然后继续玩。</p>
<p>不过现在（其实应该是好几年前了）模拟器已经支持把  .SAV 文件导入模拟器了。有一个选项，可以导入 sav 格式的存档，然后把它转换为 dsv 格式。</p>
<h2 id="把-nds-的存档复制到模拟器上用"><a href="#把-nds-的存档复制到模拟器上用" class="headerlink" title="把 nds 的存档复制到模拟器上用"></a>把 nds 的存档复制到模拟器上用</h2><p>在菜单里面可以导入存档（import开头的），然后选择sav格式的存档，导入之后将会被转换为 dsv 格式的存档。</p>
<p>在mac中导入是这样的<br><img src="/img/2019/mac-import.png"><br>在win中导入是这样的</p>
<p><img src="/img/2019/win-des.jpg"></p>
<p>但是，问题来了，我一开始是在 mac 上用的，导入是成功了，但是游戏中存档位置是空的。百思不得其解，最终我决定到 windows 上试一下。</p>
<p>果然，只有 windows 版的才行，导入后会跳出一个选项，问要转换为什么类型，我就直接选默认的第一个，就成功在游戏中看到存档了。</p>
<p>而在 mac 里，导入时并没有这些选择，所以导入后也识别不到，暂时无解。非要在 mac 上玩的话，就只能先在 windows 里导入，再导出（或者复制出 dsv 文件），再把这个 dsv 文件复制到 mac 上面用。</p>
<h2 id="模拟器的存档复制到-nds-上用"><a href="#模拟器的存档复制到-nds-上用" class="headerlink" title="模拟器的存档复制到 nds 上用"></a>模拟器的存档复制到 nds 上用</h2><p>刚才游戏中有个地方需要多次尝试，用模拟器的快速存档和读档会比较快。所以我把存档复制到电脑上，导入后游玩，用读取大法很快就过了关卡。</p>
<p>然后我不想一直在电脑用模拟器玩，所以想把存档导出， 复制到 nds 上玩。这个就没什么难度了。选择 <code>Export Rom Save File</code> 然后选择 sav 格式。导出并复制到 nds 的内存卡上即可。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS离线下载文件最简易方案</title>
    <url>/2018/08/offline-download/</url>
    <content><![CDATA[<h3 id="所使用的工具："><a href="#所使用的工具：" class="headerlink" title="所使用的工具："></a>所使用的工具：</h3><ul>
<li>Aria2</li>
<li>caddy</li>
<li>AriaNg</li>
</ul>
<p>脚本来自<strong>逗比根据地</strong></p>
<h3 id="首先安装-下载工具–-Aria2"><a href="#首先安装-下载工具–-Aria2" class="headerlink" title="首先安装 下载工具– Aria2"></a>首先安装 下载工具– Aria2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh</span><br></pre></td></tr></table></figure>
<p>按 1 ，就可以安装。成功后会看到这样的显示。<br><img src="/img/2018/Aria2-done.png" alt="image"></p>
<p>由于我们用 ssh 登录 vps 后，默认是在 root 目录下。因此我想让下载位置也在这之下，方便以后用命令行删除文件。</p>
<p>因此需先创建文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p web/down</span><br></pre></td></tr></table></figure>
<p>然后进入 Aria2 来需改下载位置和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./aria2.sh</span><br></pre></td></tr></table></figure>
<p>选择 7. 修改 配置文件</p>
<p>再选择 4.  修改 Aria2 密码+端口+文件下载位置</p>
<p>密码就个人按喜好改了(后面要用到)，端口就不改了，按回车键使用默认即可，下载位置就改为新的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/root/web/down</span><br></pre></td></tr></table></figure>
<p>再次看到 ==Aria2 启动成功 !  == 这部分就完成了。</p>
<hr>
<h3 id="安装使用界面"><a href="#安装使用界面" class="headerlink" title="安装使用界面"></a>安装使用界面</h3><p>下载工具安装完成了，那要怎么用它呢？难道用命令行来下载文件？虽然确实可以，不过这有点……</p>
<p>还是图形界面比较任性化，点点几下就行。</p>
<h4 id="安装-web-服务器-caddy"><a href="#安装-web-服务器-caddy" class="headerlink" title="安装 web 服务器 caddy"></a>安装 web 服务器 caddy</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>
<h4 id="写入配置到-Caddy-配置文件"><a href="#写入配置到-Caddy-配置文件" class="headerlink" title="写入配置到 Caddy 配置文件"></a>写入配置到 Caddy 配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;:80 &#123;</span><br><span class="line"> root /root/web</span><br><span class="line"> timeouts none</span><br><span class="line"> gzip</span><br><span class="line"> browse</span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>

<h4 id="下载-AriaNg"><a href="#下载-AriaNg" class="headerlink" title="下载 AriaNg"></a>下载 AriaNg</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd web &amp;&amp; wget https://github.com/mayswind/AriaNg/releases/download/0.4.0/aria-ng-0.4.0.zip &amp;&amp; unzip aria-ng-0.4.0.zip</span><br></pre></td></tr></table></figure>
<p>这里出错的话，可能是因为没有安装 unzip 这个应用，根据提示安装下即可。</p>
<h4 id="启动-caddy"><a href="#启动-caddy" class="headerlink" title="启动 caddy"></a>启动 caddy</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="下载文件并取回本地"><a href="#下载文件并取回本地" class="headerlink" title="下载文件并取回本地"></a>下载文件并取回本地</h3><p>这时候就可以用浏览器，通过 IP 或者域名来访问下载界面。需要设置一下。<br><img src="/img/2018/AriaNg.png" alt="image"></p>
<p>第一个红圈可以填 IP 和域名，都行的。第二个红圈就是填刚才设置的密码了。</p>
<p>连接上会有左下角有绿色的已连接提醒。然后就可以下载文件了，也可以下载种子。</p>
<p>下载完就在我们的 vps 里面，那要怎么取回本地呢？只需要在浏览器地址栏里，在  IP 或者域名后面加上 /down 就行。例如</p>
<blockquote>
<p>115.152.148.55/down</p>
</blockquote>
<p>就会显示下载的那些文件。</p>
<hr>
<p>这个方法呢，是我个人觉得比较简易的，比较适合我自己的。下载完就在命令行里用</p>
<blockquote>
<p>rm -rf web/down/*</p>
</blockquote>
<p>来删除所有的文件。</p>
<p>因此也就不去搞那些需要 PHP 的了。也因为下载完就删除，所以也没必要设置需要密码才能访问文件列表。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑拔网线一天体验</title>
    <url>/2018/08/one-day-computer-no-network/</url>
    <content><![CDATA[<p>13 号晚上的 23:30 左右，我拔掉了路由器 wan 口的网线，这样我电脑和手机都无法通过它来上网了。到现在已经 24 个小时了。</p>
<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>本来想试试断网一天是什么体验的，因为我经常意识到，无缘无故一天就过去了，我好像什么都没干啊，好像浪费很多时间在网上闲逛。虽有时意识到会自制下，但效果不太明显。</p>
<p>但我有自知之明，不可能完全断网的，太难做到了。于是，我还可以用手机开数据上网。</p>
<h2 id="那么这-24-小时左右，我干了什么呢？"><a href="#那么这-24-小时左右，我干了什么呢？" class="headerlink" title="那么这 24 小时左右，我干了什么呢？"></a>那么这 24 小时左右，我干了什么呢？</h2><ul>
<li>看了几集《老友记》，其实下载挺久的了，有时就看一两集这样，其实这一天好像就看了三集吧。虽然电脑里也有下载好的电影，不过没去看。</li>
<li>练练 Python，这个最近又接着开始学了，还是一头雾水。毕竟从图书馆借的这本书也不厚，还是坚持看并跟着练吧。</li>
<li>看 Rick West 的文章，其实我也不认识他，看别的博主说他是大神，并且推荐他的文章，于是就去看看，应该是英国人，一个 web developer。因为文章都是英文的，我把他一共接近 10 篇文章看完了，也就消去了不少的时间。</li>
<li>然后呢，也看阮一峰老师的博客，挺厉害的，从 2003 年写博客到现在，看他的文章还是有挺多东西学的。</li>
<li>接着就是日常的 知乎 和 v2ex 咯。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实最终还是大部分时间都是在网上，只是从电脑转移到手机罢了。不过也是因为是在手机，能干的事并不多，所以才能看这么多的文章。要是在电脑上肯定不行，因为它能做的事太多了，容易在这事时张那事，导致能集中精力做一件事，因此效率也很低。</p>
<p>总之，还是一次挺不错的体验的。下次试试能不能完全断网体验一下。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>我的相册备份方案</title>
    <url>/2018/06/photos-backup/</url>
    <content><![CDATA[<p>由于之前小米所提供的5G云空间提示我说不够了，要充钱买更大的空间。这怎么可能，想让我花钱去买空间，呵呵。 于是我寻找备份相册的方案。</p>
<h2 id="1-百度云"><a href="#1-百度云" class="headerlink" title="1  百度云"></a>1  百度云</h2><p>因为空间不足，那么想到的就是百度云2T的大空间。（至于说隐私问题，觉得百度云不安全之类的，我一直觉得很奇怪，难道你们相册里面都是一堆自己的裸照？反正我的话涉及隐私也就自拍的照片而已，也没什么见不得人的。） 用手机APP里面就有图片备份功能，设置要备份的相册文件夹就行了。在有WIFI的环境下就会备份到网盘。 <strong>缺点</strong>：只能自动备份，无法自动恢复，比如我换了新手机，它无法自动将相片恢复到新的手机。 还有，备份后是在网盘根目录有一个 来自:MI MAX2 这里就是我这台小米max2备份的数据了，不能自定义路径。。。所以我的解决方法是，把这个文件夹重命名，在前面加个符号，如逗号，然后就可以把这个文件夹移动到隐藏空间。保险一点。</p>
<h2 id="2-谷歌相册"><a href="#2-谷歌相册" class="headerlink" title="2  谷歌相册"></a>2  谷歌相册</h2><p>以高质量的方式备份照片和视频可以无限空间。在手机上基本看不出压缩前后的差别。通过此我把相册都备份到Google，即使把本地照片删除了还可以通过这APP来查看，点击时会通过联网加载图片。 那如果我换新手机了，想把照片都下载到新手机里面，这个就有点复杂，首先得在Google photos里面开启 Google 云端硬盘 ，这样备份的图片才会显示在Google drive里面，然后可以在Google drive的网页或者客户端把图片下载下来，再传入手机，还是挺麻烦的。 当然啦，这一切都建立在能科学上网的基础之上。所以我仅是把它当多一份备份而已。</p>
<h2 id="3-Handshaker"><a href="#3-Handshaker" class="headerlink" title="3  Handshaker"></a>3  Handshaker</h2><p>锤子开发的一款电脑端管理安卓手机的工具，平时我也用它在电脑与手机间传输文件，还是挺方便的。在它的设置里，可以设置自动同步，这样每次连接后就会自动同步所有照片到电脑，如果换新手机，可以在这个软件把电脑里的照片复制到新手机。比较不错。 缺点：同步到电脑的相册无法选择，所有的照片都会同步。（不过电脑复制到手机就可以选择哪些相册要哪些不要） mac版的无法像win版那样选择文件存储路劲，所以我只用win版来备份。</p>
<h2 id="4-Syncthing"><a href="#4-Syncthing" class="headerlink" title="4  Syncthing"></a>4  Syncthing</h2><p>这关联到我之前的  <a href="https://jungui.powersee.pw/?p=194">搭建个人网盘——syncthing</a>  这篇文章。通过此把要备份的相册文件夹备份到其它设备，可以是电脑、另一台手机、电脑上的虚拟机、远程vps，这些都可以，只要两台设备同时在线就能自动备份。那么我vps的  syncthing  一直开着，这样当我需要备份时就打开手机的APP，扫描一下就能同步。 假如我手机丢了，那么此时我的vps或者电脑里还有保存这些，我可以在新手机也安装syncthing来把vps或者电脑里的照片同步到新手机里面。</p>
<h2 id="5-小米云服务"><a href="#5-小米云服务" class="headerlink" title="5  小米云服务"></a>5  小米云服务</h2><p>其实我发现我手机里的照片加视频也就2G而已，小米提供的5G我是够用的，之前说空间不足是因为它默认开启了桌面云备份，会把我手机的app都备份上传云端，用了接近1G，所以把它删了，还是可以放很多照片的。然后如果换手机了，依然是MIUI的话直接登录小米账号同步相册就行。如果是其它手机，可以电脑下载小米云服务，把照片下载到本地，在传入新手机。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>平时的话我同步功能都是关闭的，不想随便截张图，保存张照片就自动同步到云端，我会每隔一段时间就清理相册，清理完成再打开同步，同步完就又关闭。感觉现在照片空间还不算多，用小米云优先。但毕竟这段时间研究了挺久这个相片备份问题的，就记录一下吧。</p>
]]></content>
      <tags>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>买了两款品胜路由器</title>
    <url>/2022/01/pisen-router/</url>
    <content><![CDATA[<p>最近从小黄鱼收了台路由器，挺特别的，带耳机孔。</p>
<p>不过我买的是 WPR001N ，这款只有的 WiFi 速率只有 150M，而另外有一款外形和它一样的，但是速率是 300M。</p>
<p><img src="/img/2022/001N.jpg" alt="001N"></p>
<p>原本以为它们就这点区别而已，买来后才发现并不是，区别还是挺多的。</p>
<p>首先它们的外形还有一点不同的，就是 300M 这款是有两个网口的，而我的这款 150M 的，它的网口只有一个。其次它们的型号也不同，我这个是 WPR001N ，而那款是 WPR003N，所以导致了，它们的固件是不通用的。</p>
<p><img src="/img/2022/001N-rj45.jpg" alt="001N"></p>
<p>所以如果你是为了刷机，那么应该多花点钱买 300M 那款。不过其实我个人并不建议买这玩意来刷 openwrt，毕竟它最大的价值是那个 3.5mm 耳机接口，而刷机之后，接口就没法用了。只能作为普通的路由器使用。</p>
<p>但是作为普通路由器，它在目前看来，又太弱了。比它更好的选择有太多了，例如同样百兆的路由器有：斐讯 k2、极路由、小米路由器等等，这些都是几十块就能买到的，而且网上的固件也很多，很容易找。</p>
<p>如果价格升到 50 块，那中兴 e8820s 是一个非常好的选择，千兆，带 USB 接口。</p>
<p>然后说回来，目前我手里的这款，刷机方法教程应该只有恩山的这个帖子：<a href="https://www.right.com.cn/forum/thread-7717621-1-1.html">https://www.right.com.cn/forum/thread-7717621-1-1.html</a></p>
<p>里面并没有提供 breed ，我自己网上搜了下。</p>
<hr>
<p>hackpascal自建的http服务器：<a href="http://breed.hackpascal.net/">http://breed.hackpascal.net/</a></p>
<p>breed 备份下载地址：</p>
<p><a href="https://pan.powersee.top/">https://pan.powersee.top/</a></p>
<p><a href="http://veger.ysepan.com/">http://veger.ysepan.com/</a></p>
<p>在 【路由器】【品胜路由器wrp001N-breed】里面</p>
<hr>
<p>不过目前没找到它可以用的固件，可能得自己去编译才行……</p>
<h3 id="更奇葩的路由器"><a href="#更奇葩的路由器" class="headerlink" title="更奇葩的路由器"></a>更奇葩的路由器</h3><p>后来我又买了品胜的另外一款路由器——净 音 云路由</p>
<p><img src="/img/2022/%E5%93%81%E8%83%9C%E8%B7%AF%E7%94%B1%E5%99%A8.jpg" alt="两款路由器"></p>
<p>这款里面内置风扇，配有海绵，可以用当空气净化器……脑洞非常的大</p>
<p>当然，它同样有音频输出接口，所以可以连接一个音响，然后使用它配套的 APP——Pisen Cloud，使用这个 APP 可以访问到，插在路由器上面的 U 盘，或者移动硬盘中的文件。它这个 APP 应该是相当古老的，在现在的全面屏手机上面使用时，下面的一节是黑的，不显示内容。</p>
<p><img src="/img/2022/pisen_cloud_app.png" alt="APP底部"></p>
<p>我记得下载时官网好像提示要求 Android 版本要在 4.0 及以上。然后我还发现了，这款 APP 似乎完全没要求过权限。如果是其它的 APP，想要获取定位、访问相册、访问手机里的其它文件，手机应该会弹出一个提示权限要求才对。但是这个 APP 完全没有，直接就可以访问了。原来只要保持 APP 兼容旧版本的 Android，就可以无视这些权限要求，还是挺可怕的，陌生 APP 安装要谨慎点。</p>
<p>对了，这款 APP 想要识别到路由器，需要手机连接到【净 音 云路由】的 WiFi 上，同时还要把手机的定位功能打开，这点是 Android 6 之后的要求，可能这个 APP 诞生时 Android 6 还没发布吧，所以它也没有提示什么的。</p>
<p>在 APP 里面的闪电互传里，可以播放手机里面的音乐，点击右上角可以将音乐推送到路由器上，也就可以让连接在路由器上的音响出声。其实它就是 dlna 而且，用 网易云音乐 也可以推送，点击歌词界面的右上角就行。但是手机必须连接在品胜路由器的 WiFi 下才行，才可以识别并推送。如果手机和连接在品胜路由器的上级路由，此时是发现不了 dlna 信号的。</p>
<p><img src="/img/2022/pisen-dlna.jpg" alt="dlna"></p>
<p>总体体验下来，不是什么好东西，并不实用，不建议购买。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐一款手机写作软件——纯纯写作</title>
    <url>/2018/07/purewrite/</url>
    <content><![CDATA[<p>我现在就是在使用这款软件写这篇文章。今晚本来是在 <strong>play 商店</strong> 看日记软件的。然后推荐那里出现了这款软件，看介绍和评价不错，就下载来试试。 这款软件是国人开发的，因此在国内的手机应用商店应该是可以下载到的，试了下小米的是搜索得到的。</p>
<h2 id="推荐它的理由："><a href="#推荐它的理由：" class="headerlink" title="推荐它的理由："></a>推荐它的理由：</h2><ul>
<li>  好看</li>
<li>  无广告</li>
<li>  自动备份，数据安全</li>
<li>  安装包小，只有 2.7M</li>
<li>  无后台偷运行担忧</li>
<li>  对我来说很实用</li>
</ul>
<p>主要是能帮我节省时间，比如在中英文之间插入空格，还有支持 markdown 语法，这也挺不错，比如能让我方便文章 markdown 化。还有首行缩进和段落之间自动加空格，这能让我少打了无数个空格。 总之，对这个软件真有种相见恨晚的感觉。</p>
<hr>
<h2 id="下面这些是官方对它的介绍"><a href="#下面这些是官方对它的介绍" class="headerlink" title="下面这些是官方对它的介绍"></a>下面这些是官方对它的介绍</h2><ol>
<li> 这是一个快速的纯文本编辑器，我们希望写作能够回到原本的样子：纯粹、有安全感、随时、绝对不丢失内容、具备良好的写作体验。</li>
<li> 纯纯写作实现了在 Android 上完美的行间距和段间距，它能够使您的文本看起来更加舒适，清晰。同时，它还实现了顺滑滚动、下滑关闭输入法软键盘，以及许多喜人的细节内容。</li>
<li> 蕴繁于简，您能够最快速度达到灵感页面，能够随时随地中断和继续写作，能够使用指纹加密您的文本，能够轻易、快速将文本分享发送到其他 App，这些我们都已经为您做好了。</li>
<li> 最重要的，在使用这个编辑器时，它将会保证您的内容永远不会丢失，除非您主动将它清空。否则即使误操作将文本删除，或瞬间断电，您仍然能够从历史记录中将它恢复。</li>
<li> 当您完成一篇文章写作之后，可以选择 右上角发送按钮 将它发送到另外的 App。</li>
</ol>
]]></content>
      <categories>
        <category>手机</category>
      </categories>
      <tags>
        <tag>手机</tag>
      </tags>
  </entry>
  <entry>
    <title>将文章推送到 kindle 上阅读</title>
    <url>/2019/04/push-to-kindle/</url>
    <content><![CDATA[<p>分别讲三种方法</p>
<h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>关注微信公众号：cn_Kindle<br>绑定自己的亚马逊账号，即可把微信文章或者其它文章网址发送到这个号，即可把内容推送到 kindle 。</p>
<h2 id="电脑端"><a href="#电脑端" class="headerlink" title="电脑端"></a>电脑端</h2><p>微信电脑版就不讲了。<br><a href="https://fivefilters.org/kindle-it/">https://fivefilters.org/kindle-it/</a><br>到这个网址将文章地址粘贴，然后点 preview ，出现预览界面，将其显示的邮箱（例如：<a href="mailto:&#107;&#105;&#110;&#100;&#x6c;&#101;&#64;&#x66;&#105;&#x76;&#101;&#x66;&#x69;&#108;&#116;&#101;&#114;&#x73;&#x2e;&#111;&#x72;&#103;">&#107;&#105;&#110;&#100;&#x6c;&#101;&#64;&#x66;&#105;&#x76;&#101;&#x66;&#x69;&#108;&#116;&#101;&#114;&#x73;&#x2e;&#111;&#x72;&#103;</a>）添加到</p>
<blockquote>
<p>已认可的发件人电子邮箱列表</p>
</blockquote>
<p>然后填入自己的 kindle 邮箱点 send 。</p>
<h2 id="多个网页一起推送"><a href="#多个网页一起推送" class="headerlink" title="多个网页一起推送"></a>多个网页一起推送</h2><p>上面的推送都是一次一篇文章的，如果想把多篇文章一起推送到 kindle 可以用这种方法。</p>
<h3 id="浏览器插件-EpubPress"><a href="#浏览器插件-EpubPress" class="headerlink" title="浏览器插件 EpubPress"></a>浏览器插件 EpubPress</h3><p>这个插件 Chrome 和 Firefox 都有，安装后同时打开多篇文章，再点击这个插件，就可以把这些文章做成 mobi 格式的电子书，可以本地下载，也可以绑定 kindle 邮箱，直接发送到 kindle。</p>
]]></content>
      <tags>
        <tag>kindle</tag>
      </tags>
  </entry>
  <entry>
    <title>品胜 WPR001N 折腾与刷机</title>
    <url>/2022/01/pisen-wpr001n/</url>
    <content><![CDATA[<p>之前买了台品胜路由器，买来之后系统是有缺陷的，没法进入 web 管理界面，最终没办法，只能刷机，于是刷了个 breed 进去。</p>
<p>但是只有 breed，没有系统固件可以用……所以就放着吃灰了。</p>
<p>今天有网友说可以帮我编译固件，所以又来折腾它了。</p>
<p>因为不知道编译好的固件，刷入后会不会出问题，为了避免待会完全变砖，无法挽回。所以先研究一下怎么 ttl 串口连接。</p>
<p>首先需要拆机，带二维码的为背面，沿着缝隙撬开，有三颗螺丝，拧开后再撬正面的外壳。</p>
<p>主板上面有三个金属接触点，分别是 RXD, TXD, GND</p>
<p><img src="/img/2022/Snipaste_22-01-17_22-14-57.jpg" alt="主板"></p>
<p>一开始我拿杜邦线将它与 CH340G 模块进行连接（GND–GND, TX–RX, RX–TX），我是直接用手按着，然而我还需要接通电源以及操控鼠标，所以一直没法按稳。</p>
<p>没办法，还是拿出了电烙铁，焊点锡上去吧。结果成了这样（其实也没多牢固，不过比用手按着好很多了）</p>
<p><img src="/img/2022/Snipaste_22-01-17_22-18-01.jpg" alt="焊锡好"></p>
<p>之后连接好模块，电脑上可以使用 putty 或者 xshell 来进行串口调试。由于我之前以及刷好 breed 进去了，所以给路由器通电，然后在几秒内按回车键，就可以进入 breed，在浏览器可以通过 <code>192.168.1.1</code> 来访问。</p>
<p>如果不按回车键的话，就会启动闪存中的系统。然后我就发现了，原来我之前刷进去的 openwrt 固件，是可以启动的</p>
<p><img src="/img/2022/2022-01-17_19-04-24.jpg" alt="2022-01-17_19-04-24"></p>
<p><img src="/img/2022/2022-01-17_19-10-16.jpg" alt="2022-01-17_19-10-16"></p>
<p>通过 ttl 我才知道的，不过它的 web 服务和 wifi 都没有开启，系统能启动成功也没什么用。</p>
<p>那么 ttl 连接没问题，就可以来折腾看看了。于是我将 @<strong>大电视姬</strong>  发过来的固件，在 breed 中刷入路由器。</p>
<p>之后路由器自动重启，成功了。</p>
<p><img src="/img/2022/2022-01-17_20-06-28.jpg" alt="2022-01-17_20-06-28"></p>
<p>然后，索然无味……就算刷机成功了，又怎样呢？我又不会去使用它，家里面基本所有路由器都比它强，没什么意思。</p>
<p>固件放到网盘和下载站里，在【路由器】【品胜路由器】中，再次感谢 @<strong>大电视姬</strong></p>
<p>网盘：<a href="http://veger.ysepan.com/">http://veger.ysepan.com/</a></p>
<p>下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>pve去除订阅提示</title>
    <url>/2022/04/pve-remove-notice/</url>
    <content><![CDATA[<p>pve 每次登录时，都会弹出一个提示</p>
<p><img src="/img/2022/pve-subscription-notice.jpg"></p>
<p>看着挺烦的，如何去掉它呢？网上一搜很容易就找到解决方案，这里记录一下。我目前使用的版本是 7.1-7</p>
<p>参考文章：<a href="https://johnscs.com/remove-proxmox51-subscription-notice/">Remove Proxmox Subscription Notice (Tested to 7.1-10) | John’s Computer Services (johnscs.com)</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -Ezi.bak &quot;s/(Ext.Msg.show\(\&#123;\s+title: gettext\(&#x27;No valid sub)/void\(\&#123; \/\/\1/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br></pre></td></tr></table></figure>

<p>上面这一步是备份 <code>proxmoxlib.js</code> 为 <code>proxmoxlib.js.bak</code>，然后修改 <code>proxmoxlib.js</code> 里的 “Ext.Msg.show” 为 “void”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart pveproxy.service</span><br></pre></td></tr></table></figure>

<p>之后重启一下服务即可。</p>
<p>这里记录一个坑，之前看到另外一个教程，是修改 <code>/usr/share/pve-manager/js/pvemanagerlib.js</code> 这个文件的，但是要修改的内容我找不到，然后我自己摸索，看到可能是这个提示相关的代码，我就用 <code>#</code>将它注释掉。结果悲剧了。</p>
<p>本来打算修改 js 文件，去掉 pve 的订阅提示，却不小心在 js 里面用 # 来注释，导致了重启 pve 的管理面板服务之后，web 端打开时一片空白，什么都不显示，重启机器也没用。</p>
<p>好在 ssh 还可以连接进去，所以我再次修改 js 文件，将之前的 <code>#</code> 去掉，再执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart pveproxy.service</span><br></pre></td></tr></table></figure>

<p>就救回来了。看来 pve 的版本不同，js 内容也会不同的，大家找教程的时候记得留意一下版本是否对应。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自动签到平台——qiandao</title>
    <url>/2020/09/qiandao-docker/</url>
    <content><![CDATA[<blockquote>
<p>来自 2023年04月03日 的更新，修改了一些内容。</p>
</blockquote>
<p>Github 项目：<a href="https://github.com/qiandao-today/qiandao">https://github.com/qiandao-today/qiandao</a></p>
<p>本文主要介绍 docker 安装法</p>
<p>不定时上传一些模板到网盘中，网盘地址：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<h3 id="一、导入镜像"><a href="#一、导入镜像" class="headerlink" title="一、导入镜像"></a>一、导入镜像</h3><p>直接拉取镜像，可以使用下面这行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull a76yyyy/qiandao</span><br></pre></td></tr></table></figure>

<p>拉取不了镜像的，<del>可以使用我放到网盘中的镜像</del> <a href="http://pan-yz.chaoxing.com/share/info/b63ab64054fc6e0a">超星网盘地址</a></p>
<blockquote>
<p>建议还是使用 docker 镜像源吧，网上搜索下相关的教程。现在新的 qiandao 应用好用了很多。</p>
</blockquote>
<p>百度网盘链接：<a href="https://pan.baidu.com/s/1CteLUgJQR_Rz7Sh3G4E0Pw">https://pan.baidu.com/s/1CteLUgJQR_Rz7Sh3G4E0Pw</a><br>提取码：6666</p>
<p>下载后是一个 tar 结尾的文件，可以通过 portainer 将它导入机器里。如果你的机器里没有装 portainer ，就得在命令行中导入了。可以通过 smb 、ftp 、scp 等方式，将文件传入到机器里，之后，在终端中，cd 到文件所在的目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i qiandao.tar</span><br></pre></td></tr></table></figure>

<p>就可以导入镜像。</p>
<h3 id="二、创建和启动容器"><a href="#二、创建和启动容器" class="headerlink" title="二、创建和启动容器"></a>二、创建和启动容器</h3><h4 id="在-portainer-中创建容器"><a href="#在-portainer-中创建容器" class="headerlink" title="在 portainer 中创建容器"></a>在 portainer 中创建容器</h4><p>⚠️注意现在用的是 a76yyyy&#x2F;qiandao 了。</p>
<p><img src="/img/2020/create-container.webp" alt="创建容器"></p>
<h4 id="在群晖中创建容器"><a href="#在群晖中创建容器" class="headerlink" title="在群晖中创建容器"></a>在群晖中创建容器</h4><p>打开【docker】图标，【映像】，选择 qiandao ，【启动】，【高级设置】</p>
<p><img src="/img/2020/synology-create-qiandao.webp" alt="群晖创建qiandao容器">设置一下端口就行，之后 【下一步】，【应用】。</p>
<h3 id="三、使用服务器创建容器"><a href="#三、使用服务器创建容器" class="headerlink" title="三、使用服务器创建容器"></a>三、使用服务器创建容器</h3><blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p>
</blockquote>
<blockquote>
<p>使用这家的服务器，是因为它可以随时的删除，不像其它的，一买就得一年。而且，这家还可以选择自动安装 docker ，又节省了一些时间。</p>
</blockquote>
<ol>
<li>点击左边的 billing</li>
<li>充值方式支持 <strong>支付宝</strong> <strong>微信</strong>（但最少 10 美元）</li>
<li>充值好后 ，点右边那个 <strong>+</strong> 的圆圈</li>
<li>然后选择服务器的<strong>地区</strong>（日本和新加坡会比较快，不过有可能连接不上，选美国也可以。韩国好像是最近才有的，可以试试。）</li>
<li><strong>Server Type</strong>点 <strong>application</strong> ，里面就有 <strong>docker</strong></li>
<li><strong>Server Size</strong> 就是服务器的配置，越高就越贵。（如果有赠送的 50 美元，那就选那个 40 美元的吧，反正你不花，下个月也没了）</li>
<li>把下面的 <strong>Enable IPv6</strong> 前面的 框 打钩✅（可以使我们下载时连接到更多的用户）</li>
<li>然后点击右下角的 deploy now</li>
<li>等待几分钟……</li>
<li>就可以看到服务器部署好了，给了一个 ip 地址。</li>
</ol>
<p>等待服务器装好系统，然后可以用 xshell 之类的工具，连接服务器。主要用到服务器的 ip ，用户名，密码。</p>
<p>连接服务器后，我们便可以在终端中拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull a76yyyy/qiandao</span><br></pre></td></tr></table></figure>

<p>建立容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name qiandao -p 9527:80 a76yyyy/qiandao</span><br></pre></td></tr></table></figure>

<p>此时用的端口是 9527，然后在浏览器中输入 ip:9527，例如 <code>132.123.22.33:9527</code> 这样的格式，就可以访问签到平台。</p>
<p>使用服务器的好处是，你订阅公共模板应该不会出现什么问题。而已，你可以将你搭建的签到网站，分享给你的朋友，这样这个平台就可以多人使用。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>最简单的使用方法是用别人写好的模板，然后根据要求，看是要 cookie ，还是要账号密码，根据要求给对应的内容即可。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 radxa-zero</title>
    <url>/2021/09/radxa-zero/</url>
    <content><![CDATA[<p>最近搞来了一台 radxa zero</p>
<p><img src="/img/2021/radxa-zero-1.jpg" alt="radxa-zero-1"></p>
<p>产品信息：<a href="https://forum.radxa.com/t/introduce-the-radxa-zero/6550/">https://forum.radxa.com/t/introduce-the-radxa-zero/6550/</a></p>
<p>从论坛可以了解到，目前可以在这台机器上运行 TwisterOS、emuelec、coreelec、Android 9、MiniMyth2、Manjaro</p>
<p>机器到手时，emmc 自带的是 Android 9，之后我开始尝试运行其它的系统。使用 sd 卡成功运行了 TwisterOS 和 EmuELEC，其它的没有启动成功。</p>
<p>看论坛有人说需要把 emmc 的内容擦除掉，这样机器启动时就会自动加载 sd 卡的系统。那么我也尝试了，没有效果。</p>
<p>之后又看到有人说要把 uboot 写入烧录了镜像的 sd 中，我也尝试了，还是没法启动。</p>
<p>那就算了，我还是刷回 Android 9 吧，不然现在 emmc 浪费着有点可惜。</p>
<p>但是这时我发现，这机器并不能像以往的晶晨机器那样，使用 usb burning tool 来将安卓固件烧录到 emmc 里面。</p>
<p>然后我又耗费了很多时间去折腾，中间也联系了 radxa 的工作人员，最终发现，只能使用 Ubuntu 物理机才行。</p>
<p>教程在官方的 wiki 这里：<a href="https://wiki.radxa.com/Zero/install/eMMC_aml_tool">https://wiki.radxa.com/Zero/install/eMMC_aml_tool</a></p>
<p>在 Ubuntu 上面没有像 Windows 一样的 gui 烧录程序，只能通过脚本来烧录。我一开始在 win10 上面通过虚拟机，执行脚本，将镜像烧录进机器，却一直报错。即使已经设置了 usb 默认连接到虚拟机里面，也不行。尝试了 virtual box 和 VMware，都没有成功。</p>
<p>后来 radxa 这边的大哥告诉我，他烧录成功是在物理机上面执行的。那么我就抱着最后的希望，我用 t48e 这台小主机，装了一个 ubuntu 20.04 server 版，之后在 win10 上通过 ssh 控制它。</p>
<p>安装 lrzsz 后将固件传入机器，下载和安装刷机工具。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git clone flash tool</span><br><span class="line">git clone https://github.com/radxa/aml-flash-tool.git</span><br><span class="line"># install dependency</span><br><span class="line">cd aml-flash-tool</span><br><span class="line">./INSTALL</span><br></pre></td></tr></table></figure>

<p>传入固件后，解压（如果电脑没下载固件的话，也可以在 Ubuntu 里面下载）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载，看情况</span><br><span class="line">wget https://dl.radxa.com/zero/images/android/radxa_zero_android_9_20210708-amlupdate.img.gz</span><br><span class="line"># 解压</span><br><span class="line">tar -xzvf radxa_zero_android_9_20210708-amlupdate.img.gz</span><br></pre></td></tr></table></figure>

<p><img src="/img/2021/radxa-zero-2.jpg" alt="radxa-zero-2"></p>
<p>之后按住机器背后的按键，使用数据线连接运行着 Ubuntu 的电脑，通过 <code>lsusb</code> 查看是否有识别到名字带 Amlogic 的设备。</p>
<p>有的话可以进行下一步，执行刷机命令，由于此时固件和脚本放在同一个目录下，所以可以这样执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./aml-flash-tool.sh radxa_zero_android_9_20210708-amlupdate.img</span><br></pre></td></tr></table></figure>

<p>我的执行过程是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ver@t48e:~/aml-flash-tool$ ./aml-flash-tool.sh radxa_zero_android_9_20210717-amlupdate.img</span><br><span class="line">Unpacking image [OK]</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">awk: cmd. line:1: warning: regexp escape sequence `\&quot;&#x27; is not a known regexp operator</span><br><span class="line">Initializing ddr ........[OK]</span><br><span class="line">Running u-boot ........[OK]</span><br><span class="line">Create partitions [OK]</span><br><span class="line">Writing device tree [OK]</span><br><span class="line">Writing bootloader [OK]</span><br><span class="line">Wiping  data partition [OK]</span><br><span class="line">Wiping  cache partition [OK]</span><br><span class="line">Writing boot partition [OK]</span><br><span class="line">Writing dtbo partition [OK]</span><br><span class="line">Writing logo partition [OK]</span><br><span class="line">Writing odm partition [OK]</span><br><span class="line">Writing product partition [OK]</span><br><span class="line">Writing recovery partition [OK]</span><br><span class="line">Writing system partition [OK]</span><br><span class="line">Writing vbmeta partition [OK]</span><br><span class="line">Writing vendor partition [OK]</span><br><span class="line">Resetting board [OK]</span><br><span class="line">ver@t48e:~/aml-flash-tool$</span><br></pre></td></tr></table></figure>

<p>那么就成功刷好了，之后重启机器就进入 Android 9 了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装 transmission</title>
    <url>/2020/12/raspberrypi-install-transmission/</url>
    <content><![CDATA[<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install transmission-daemon</span><br></pre></td></tr></table></figure>

<p>停止程序，修改配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service transmission-daemon stop</span><br><span class="line">vi /etc/transmission-daemon/settings.json</span><br></pre></td></tr></table></figure>

<p>使用 vi 打开这个配置文件后，按 <code>i</code> 键进入编辑模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;download-dir&quot;: &quot;/mnt/tr/downloads&quot;,</span><br><span class="line">&quot;rpc-whitelist&quot;: &quot;*&quot;,</span><br></pre></td></tr></table></figure>

<p>修改这么两行，此时账号和密码没有修改，默认情况下都是 transmission</p>
<p>修改完成按 <code>ESC</code> 键退出编辑模式，再按 <code>:wq</code> 保存退出。</p>
<p>接着启动 transmission</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service transmission-daemon start</span><br></pre></td></tr></table></figure>

<p>此时在浏览器中输入 树莓派ip:9091 就可以访问 transmission 。</p>
<p><img src="/img/2020/raspi-tr.png"></p>
<p>此时直接下载种子，应该会报错提示没有写入权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/tr/downloads</span><br><span class="line">chmod 777 /mnt/tr/downloads</span><br></pre></td></tr></table></figure>

<p>这样应该就可以正常下载了。下载完成后，如果想将下载文件夹通过 smb 共享出来，可以在 <code>/etc/samba/smb.conf</code> 中添加这一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[download]</span><br><span class="line">   comment = Printer Drivers</span><br><span class="line">   path = /mnt/tr/downloads</span><br><span class="line">   browseable = yes</span><br><span class="line">   read only = yes</span><br><span class="line">   guest ok = yes</span><br></pre></td></tr></table></figure>

<p>然后重启 smb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbd restart</span><br></pre></td></tr></table></figure>

<p>此时应该就可以在 win10 的资源管理器中的 【网络】找到树莓派，直接点击应该就可以访问里面的内容。</p>
<p>我使用的内存卡的闪迪的，32G ，class 10，实测 smb 读取速度在 40MB/s 左右。如果打算长期下载的话，建议还是接一个 usb 硬盘比较好。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>OMV 安装失败如何卸载</title>
    <url>/2019/12/remove-omv/</url>
    <content><![CDATA[<p>记录在 armbian 上安装 omv 失败的过程。</p>
<p>omv 好像不支持在 Debian bust 上面安装，我直接安装后报错了。然后也没法卸载，并且 apt 也没法用了，一用就会提示<code>E: 软件包 openmediavault-omvextrasorg 需要重新安装，但是我无法找到相应的安装文件。</code>苦恼。</p>
<p>最终解决方法：</p>
<ol>
<li><p><code>rm -rf /var/lib/dpkg/info/openmediavault-omvextrasorg*</code></p>
</li>
<li><p><code>sudo dpkg --remove --force-remove-reinstreq openmediavault-omvextrasorg</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg: 警告: 由于开启了 --force 选项，以下问题被忽略：</span><br><span class="line">dpkg: 警告: 该软件包现在的状态极为不妥；</span><br><span class="line">建议您在卸载它之前再重新安装一次</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 112651 个文件和目录。)</span><br><span class="line">正在卸载 openmediavault-omvextrasorg (5.1.9) ...</span><br></pre></td></tr></table></figure></li>
<li><p>之后再使用 apt 就不会出现问题了。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派 4B 变身 NAS 服务器</title>
    <url>/2020/12/raspberrypi-nas/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>树莓派由于体积非常小，只有一张银行卡的大小，而且还支持 WiFi ，所以拿它当服务器也是一个不错的选择。只要找一个有电源的地方，丢在那里就行。</p>
<p>如果只是当成服务器来使用，可以感兴趣的人会比较少，如果能够在上面装些下载软件，再开启 smb 共享，那么树莓派也是可以当成一台的简单的 NAS 来使用的。</p>
<h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>个人推荐先使用官方系统 raspios , 不建议使用以前的 raspbian ，raspbian 是 32 位的系统，如果有使用 docker 的话，就会知道，32 位的 docker 镜像非常的少。如果可以的话，一定要装 64 位的系统，不管是官方的 raspios 还是 Ubuntu 都行。</p>
<p>这里我以官方的 raspios 来作为演示。</p>
<p>下载来源：<a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/">清华镜像站</a></p>
<p>由于是当 NAS 使用，建议使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_lite_arm64/images/raspios_lite_arm64-2020-08-24/2020-08-20-raspios-buster-arm64-lite.zip">lite 版</a></p>
<p>下载后将里面的 img 镜像解压出来，然后使用镜像写入工具。我使用的是 usb image tools （我的网盘里面有），也可以使用其它的工具，例如 Etcher ，win32diskimager 等等。</p>
<h3 id="开启-ssh"><a href="#开启-ssh" class="headerlink" title="开启 ssh"></a>开启 ssh</h3><p>镜像写入完成后，如果直接弹出读卡器，然后启动树莓派的话，会发现无法用 ssh 连接。解决的方法也很简单，将内存卡重新插回电脑，在里面建立一个文件夹，名字为 <code>ssh</code></p>
<p>这样系统启动后就开启 ssh 了。</p>
<h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>备份原来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/source.list /etc/apt/source.list.bak</span><br></pre></td></tr></table></figure>

<p>&#x2F;etc&#x2F;apt&#x2F;source.list</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<p>&#x2F;etc&#x2F;apt&#x2F;source.list.d&#x2F;raspi.list</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui</span><br></pre></td></tr></table></figure>

<p>我使用的是 nano 编辑器，对文本内容进行修改之后，想保存退出，需要按 <code>ctrl + X</code> 退出，然后编辑器会问，是否要保存，按 <code>Y</code> 选择 yes ，再让你确认保存的文件名，按回车键即可。</p>
<p>更改好源之后，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<h3 id="安装常用应用"><a href="#安装常用应用" class="headerlink" title="安装常用应用"></a>安装常用应用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install vim samba zsh docker.io -y</span><br></pre></td></tr></table></figure>



<h3 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h3><p>将硬盘通过 usb 连接到树莓派，在终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p>列出所有可用块设备的信息，例如我的显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NAME        MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0    0 55.9G  0 disk </span><br><span class="line">├─sda1        8:1    0 53.9G  0 part </span><br><span class="line">├─sda2        8:2    0    1K  0 part </span><br><span class="line">└─sda5        8:5    0    2G  0 part </span><br><span class="line">mmcblk0     179:0    0 14.7G  0 disk </span><br><span class="line">├─mmcblk0p1 179:1    0  256M  0 part /boot/firmware</span><br><span class="line">└─mmcblk0p2 179:2    0 14.5G  0 part /</span><br></pre></td></tr></table></figure>

<p>我需要挂载 sda1 这个分区，想将它挂载到 &#x2F;mnt&#x2F;to 这个目录下，所以我先创建这个文件夹，再进行挂载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/to</span><br><span class="line">mount /dev/sda1 /mnt/to</span><br></pre></td></tr></table></figure>

<p>这种情况下，如果我们重启了机器，那么就得重新挂载硬盘，如果你并不频繁重启机器，这样或许还可以接受。若不是的话，可以了解一下自动挂载。</p>
<p>首先查看硬盘的 UUID ，可以使用 <code>blkid</code> 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># blkid     </span><br><span class="line">/dev/mmcblk0p1: LABEL=&quot;system-boot&quot; UUID=&quot;85F3-CC2B&quot; TYPE=&quot;vfat&quot; PARTUUID=&quot;da84cd12-01&quot;</span><br><span class="line">/dev/mmcblk0p2: LABEL=&quot;writable&quot; UUID=&quot;b96d647f-679e-4582-87d0-2d8c7afc91f4&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;da84cd12-02&quot;</span><br><span class="line">/dev/sda1: UUID=&quot;041ff92b-0a5c-49f4-b965-0d3a55ef8284&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;0eff14f3-01&quot;</span><br><span class="line">/dev/sda5: UUID=&quot;b82db7cf-756f-4109-8800-9c0d9bb58810&quot; TYPE=&quot;swap&quot; PARTUUID=&quot;0eff14f3-05&quot;</span><br><span class="line">/dev/mmcblk0: PTUUID=&quot;da84cd12&quot; PTTYPE=&quot;dos&quot;</span><br></pre></td></tr></table></figure>

<p>这里我想挂载的是 <code>/dev/sda1</code> ，所以我复制它的 UUID <code>041ff92b-0a5c-49f4-b965-0d3a55ef8284</code> 记住它的 type 是 ext4 ，你的有可能是其它的，例如 ntfs 之类。</p>
<p>编辑 <code>/etc/fstab</code> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/fstab</span><br></pre></td></tr></table></figure>

<p>在最下面添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID=041ff92b-0a5c-49f4-b965-0d3a55ef8284 /mnt/to ext4 defaults     0 0</span><br></pre></td></tr></table></figure>

<p><img src="/img/2020/fstab-nano.png" alt="fstab-nano"></p>
<p>填好后，按 <code>ctrl + o</code> 保存，回车键确认，再按 <code>ctrl + x</code> 退出。</p>
<h3 id="设置-smb-共享"><a href="#设置-smb-共享" class="headerlink" title="设置 smb 共享"></a>设置 smb 共享</h3><p>此时我想通过 smb 的方式将硬盘中的内容共享出来，我需要先编辑 samba 的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>然后在最后添加这么几行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[to]</span><br><span class="line">    path = /mnt/to</span><br><span class="line">    browseable = yes </span><br><span class="line">    guest ok = yes</span><br></pre></td></tr></table></figure>

<p>保存退出，然后重启 smbd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service smbd restart</span><br></pre></td></tr></table></figure>

<p>此时在 资源管理器 的 网络 中，点击树莓派对应的设备名，应该就可以看到一个名字为 to 的共享文件夹。由于上面是设置 guest ok ，所以不用身份验证就可以直接打开。</p>
<p>但这样可能不是你想要的，毕竟任何人都可以直接访问，不安全。能否添加账号密码来验证呢？答案是可以的。</p>
<p>如果你装的是树莓派的 raspbian 或者 raspios ，默认就有一个 pi 用户，如果你安装的是 Ubuntu ，默认情况下就有一个 ubuntu 用户。那么现在就到 samba 里面添加这个同名用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbpasswd -a pi</span><br></pre></td></tr></table></figure>

<p>用 Ubuntu 的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbpasswd -a ubuntu</span><br></pre></td></tr></table></figure>

<p>之后会让你设置密码，需要设置两次。会如下面这样显示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New SMB password:</span><br><span class="line">Retype new SMB password:</span><br><span class="line">Added user ubuntu.</span><br></pre></td></tr></table></figure>

<p>然后我们可以再来修改 smb 配置文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>在最后面添加这么几行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[test]</span><br><span class="line">    path = /mnt/to/test</span><br><span class="line">    writable =yes</span><br><span class="line">    valid users = ubuntu</span><br><span class="line">    force create mode = 0644</span><br></pre></td></tr></table></figure>

<p>保存退出，然后重启 smbd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service smbd restart</span><br></pre></td></tr></table></figure>

<p>然后在网络中应该就可以看到名字为 test 的共享文件夹，直接双击打开的话，会要求你输入账号和密码。账号就是 pi 或者 ubuntu ，密码是你刚才自己设置的。</p>
<p><img src="/img/2020/samba-test-dir.png" alt="samba-test-dir"></p>
<h3 id="安装我家云导航"><a href="#安装我家云导航" class="headerlink" title="安装我家云导航"></a>安装我家云导航</h3><p>导航下载，在网盘中的【不仅限于盒子】、【贝壳云and我家云】文件夹中。我使用的是 2019 年的旧版导航，用新的应该也可以。</p>
<p>先进入 <code>/opt</code> 这个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br></pre></td></tr></table></figure>

<p>想安装需要先把导航压缩包传进树莓派，达到这个目的的方法有很多。我使用的终端是 xshell ，我先在树莓派里安装一个 lrzsz</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install lrzsz</span><br></pre></td></tr></table></figure>

<p>安装完成后，使用 <code>rz</code> 命令，就可以把电脑里的文件，传输到树莓派里面了。</p>
<p>把 <code>entware_navi.tgz</code> 和 <code>install_navi.sh</code> 这两个文件，传到 <code>/opt</code> 目录下，然后安装脚本执行权限，再执行安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x install_navi.sh</span><br><span class="line">./install_navi.sh</span><br></pre></td></tr></table></figure>

<p>然后等一段时间……</p>
<p>完成后就可以在浏览器输入树莓派的 ip 来访问这个导航界面了。</p>
<p><img src="/img/2020/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AF%BC%E8%88%AA%E7%95%8C%E9%9D%A2.jpg" alt="树莓派导航界面"></p>
<p>实测 qb 启动不了，控制台那个是给我家云的 omv 用的，装在其它设备上本来就是没法用的。其它的功能好像都还可以用吧。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>RISC-V 开源软件安装与自行编译</title>
    <url>/2022/04/riscv-apps/</url>
    <content><![CDATA[<p>risc-v 开发板虽然可以运行 Linux 发行版，但是毕竟还是处于起步阶段，生态是没法跟 arm 以及 x86 相比的。</p>
<p>这段时间在研究这台 visionfive，在软件这方面也折腾了不少，本文记录一下心得。</p>
<p>以前拿到开发板或者可以运行 Linux 的机顶盒时，我喜欢在上面装下载软件，以及开启 smb 共享，让它作为一台简易 NAS 来使用。这次在 visionfive 上面我也有进行尝试。</p>
<p>首先 BT 下载软件 transmission 和 qbittorrent 在这上面想要安装都非常简单，直接用 dnf 就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install transmission-daemon</span><br><span class="line">dnf install qbittorrent-nox</span><br></pre></td></tr></table></figure>

<p><img src="/img/2022/image-20220412155348270.png" alt="image-20220412155348270"></p>
<p><img src="/img/2022/image-20220412155459647.png" alt="image-20220412155459647"></p>
<p>samba 也可以直接用 dnf 安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install samba</span><br></pre></td></tr></table></figure>

<p><img src="/img/2022/image-20220412160053966.png" alt="image-20220412160053966"></p>
<p>这种是比较简单的，这里就不多细讲了。</p>
<p>像有些开源软件，它是托管在 GitHub 上面的，这类软件，我们可以到它的 GitHub release 里面，下载 riscv 架构的可执行文件。这里举两个例子</p>
<h4 id="syncthing"><a href="#syncthing" class="headerlink" title="syncthing"></a>syncthing</h4><p>这是一个多平台同步软件，之前有一段时间，我经常使用它将我手机里的照片、视频，同步到电脑上面。</p>
<p>想要让它在 visionfive 上面运行，需要到 <a href="https://github.com/syncthing/syncthing/releases">https://github.com/syncthing/syncthing/releases</a> 里面找名字带 riscv64 的，目前最新的是这个</p>
<p><a href="https://github.com/syncthing/syncthing/releases/download/v1.19.2/syncthing-linux-riscv64-v1.19.2.tar.gz">https://github.com/syncthing/syncthing/releases/download/v1.19.2/syncthing-linux-riscv64-v1.19.2.tar.gz</a></p>
<p>我们可以通过 wget 将它下载到本地，然后使用 tar 解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/syncthing/syncthing/releases/download/v1.19.2/syncthing-linux-riscv64-v1.19.2.tar.gz</span><br><span class="line">tar xf syncthing-linux-riscv64-v1.19.2.tar.gz</span><br></pre></td></tr></table></figure>

<p>此时我们得到的是一个文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$l</span> syncthing-linux-riscv64-v1.19.1</span><br><span class="line">total 23M</span><br><span class="line">drwxr-xr-x   5 riscv riscv 4.0K Mar  1 14:45 .</span><br><span class="line">drwx------. 19 riscv riscv 4.0K Apr 10 10:45 ..</span><br><span class="line">-rw-r--r--   1 riscv riscv  14K Mar  1 14:38 AUTHORS.txt</span><br><span class="line">drwxr-xr-x  11 riscv riscv 4.0K Mar  1 14:45 etc</span><br><span class="line">drwxr-xr-x   2 riscv riscv 4.0K Mar  1 14:45 extra</span><br><span class="line">-rw-r--r--   1 riscv riscv  17K Mar  1 14:38 LICENSE.txt</span><br><span class="line">drwxr-xr-x   2 riscv riscv 4.0K Mar  1 14:45 .metadata</span><br><span class="line">-rw-r--r--   1 riscv riscv 4.7K Mar  1 14:38 README.txt</span><br><span class="line">-rwxr-xr-x   1 riscv riscv  23M Mar  1 14:44 syncthing</span><br></pre></td></tr></table></figure>

<p>执行文件夹里的 syncthing 即可启动这个软件，然后它会输出一些启动信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">cd</span> syncthing-linux-riscv64-v1.19.1 </span><br><span class="line">➜ syncthing-linux-riscv64-v1.19.1 ./syncthing </span><br><span class="line">[start] 16:13:15 INFO: syncthing v1.19.1 <span class="string">&quot;Fermium Flea&quot;</span> (go1.17.7 linux-riscv64) teamcity@build.syncthing.net 2022-02-21 13:57:21 UTC</span><br><span class="line">[start] 16:13:15 INFO: Generating ECDSA key and certificate <span class="keyword">for</span> syncthing...</span><br><span class="line">[start] 16:13:16 INFO: Default folder created and/or linked to new config</span><br><span class="line">[start] 16:13:16 INFO: Default config saved. Edit /root/.config/syncthing/config.xml to taste (with Syncthing stopped) or use the GUI</span><br><span class="line">[start] 16:13:16 INFO: Archiving a copy of old config file format at: /root/.config/syncthing/config.xml.v0</span><br></pre></td></tr></table></figure>

<p>等一会会出现一条比较重要的信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[6RXV3] 16:13:32 INFO: Access the GUI via the following URL: http://127.0.0.1:8384/</span><br></pre></td></tr></table></figure>

<p>它表示我们只能在 visionfive 上面使用浏览器访问这个网址，才可以打开 syncthing 的图形化界面。如果你像我一样，并没有给 visionfive 接显示器，一直都是 ssh 连接来操作的。此时这一步就没有进行下去了。</p>
<p>所以我们需要先停止软件，改一下配置文件后，再来启动。按 <code>ctrl + c</code> 这两个按键可以退出软件，然后我们使用 nano 来修改配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano ~/.config/syncthing/config.xml</span><br></pre></td></tr></table></figure>

<p>找到 <code>&lt;address&gt;127.0.0.1:8384&lt;/address&gt;</code> 这一行，改为 <code>&lt;address&gt;0.0.0.0:8384&lt;/address&gt;</code> ，再次输入 <code>./syncthing</code> 启动软件</p>
<p>此时就可以用电脑的浏览器来访问运行在 visionfive 上面的 syncthing 了。</p>
<p><img src="/img/2022/image-20220412162500139.png" alt="image-20220412162500139"></p>
<h4 id="miniserve"><a href="#miniserve" class="headerlink" title="miniserve"></a>miniserve</h4><p>这个软件是我个人非常喜欢的文件展示应用，它的主要功能就是将某个文件夹通过 web 的方式共享出来，但是功能远不止于此。它还是支持上传功能，以及添加用户名密码验证，所以也可以把它当一个简易网盘来使用。</p>
<p>项目：<a href="https://github.com/svenstaro/miniserve">https://github.com/svenstaro/miniserve</a></p>
<p>安装方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/svenstaro/miniserve/releases/download/v0.19.4/miniserve-v0.19.4-riscv64gc-unknown-linux-gnu</span><br><span class="line"><span class="built_in">mv</span> miniserve-* miniserve</span><br><span class="line"><span class="built_in">chmod</span> +x miniserve</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./miniserve</span><br></pre></td></tr></table></figure>

<p>非常简单，下载后赋予它可执行权限，然后直接 <code>./</code> 就可以运行了。这样它会将你当前所在的文件夹，通过 <code>8080</code> 端口共享出来。</p>
<p>如果想使用其它端口，可以使用 <code>-p</code> 来指定，想添加上传功能，使用 <code>-u</code> ，想共享其它的文件夹，直接将文件夹路径写上去即可。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ ./miniserve -u -p 9527 /tmp/test</span><br><span class="line">miniserve v0.19.3</span><br><span class="line">Bound to [::]:9527, 0.0.0.0:9527</span><br><span class="line">Serving path /tmp/test</span><br><span class="line">Available at (non-exhaustive list):</span><br><span class="line">    http://127.0.0.1:9527</span><br><span class="line">    http://192.168.68.178:9527</span><br><span class="line">    http://[::1]:9527</span><br><span class="line"></span><br><span class="line">Quit by pressing CTRL-C</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/img/2022/image-20220412163658298.png" alt="image-20220412163658298"></p>
<h3 id="自行编译"><a href="#自行编译" class="headerlink" title="自行编译"></a>自行编译</h3><p>上面讲到的 syncthing 和 miniserve，它们的 release 里都有提供 riscv 的可执行文件，所以我们使用起来还算是比较容易。</p>
<p>但这类还是比较少数的，其它开源软件大多数目前都是没有提供 riscv 版的，所以如果我们想要使用的话，就需要自行编译。</p>
<p>先来一个简单的——<a href="https://github.com/zerotier/ZeroTierOne">zerotier</a></p>
<p>这个软件的功能是组虚拟局域网，让家里没有公网 ip 的用户，也可以远程访问家里设备。</p>
<p>想让它在 visionfive 上面运行我们需要自行编译，很简单，下载源代码到本地，进入项目文件夹，执行 make 编译就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/zerotier/ZeroTierOne.git</span><br><span class="line">cd ZeroTierOne</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>编译完成后当前目前下多出 <code>zerotier-one</code> 和 <code>zerotier-cli</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./zerotier-cli -v                   </span><br><span class="line">1.8.8</span><br></pre></td></tr></table></figure>

<p>另外我还尝试编译 <a href="https://github.com/fatedier/frp">frp</a> 这款软件，这个耗费了我不少的时间。由于它是用 go 写的，想要编译它需要有 go 环境，然后我就想到 golang 的官网下载，却发现并没有提供 riscv 版的。</p>
<p>走了一堆弯路之后，我才发现 visionfive 的 Fedora 里竟然自带 go</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜  ~ go version</span><br><span class="line">go version go1.14.6 gccgo (GCC) 10.3.1 20210422 (Red Hat 10.3.1-1) linux/riscv64</span><br></pre></td></tr></table></figure>

<p>不过我使用它并没法成功编译 frp，想使用自带的 go1.14.6 编译现在最新的 go1.18 也没成功。</p>
<p>之后又发现在 x86 上面是可以使用 go 设定交叉编译，来编译 riscv64 的可执行文件的。</p>
<p>最终我使用这两条命令，成功编译出 riscv 版的 frp 服务器端和客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure>

<p>网络问题，先设置代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGO_ENABLE=0 GOOS=linux GOARCH=riscv64 go build ./cmd/frpc</span><br><span class="line">CGO_ENABLE=0 GOOS=linux GOARCH=riscv64 go build ./cmd/frps</span><br></pre></td></tr></table></figure>

<p>这样编译出来的文件是在当前目录下的，想存放在其它地方，应该使用 -o 参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGO_ENABLE=0 GOOS=linux GOARCH=riscv64 go build -o bin/frpc-riscv64 ./cmd/frpc</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ frpc -v         </span><br><span class="line">0.41.0</span><br><span class="line">➜ file frpc       </span><br><span class="line">frpc: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV), statically linked, Go BuildID=Pwh5MYcPoYJ1E09FI1rO/vrYuoTbR0yxAguZ0ck9D/DeYARJeTJfCF72R2PXOv/9mZ673VwFshYBrO5Grjy, not stripped</span><br></pre></td></tr></table></figure>

<p>那么用同样的方法，也可以编译 <a href="https://github.com/filebrowser/filebrowser">filebrowser</a> 的后端部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GOOS=linux GOARCH=riscv64 go build</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ file filebrowser</span><br><span class="line">filebrowser: ELF 64-bit LSB executable, UCB RISC-V, version 1 (SYSV), statically linked, Go BuildID=8ohLL6OaYPgPR1ZtkIRd/d9lcK8Ocz9YIDVZqMFFv/cB4dn0G6WtNCIXUJsvX-/Xo17t9_I87svg4x4zqx_, not stripped</span><br></pre></td></tr></table></figure>

<p>前端部分需要 nodejs 和 npm ，这个官方没有提供 riscv 版，GitHub 上面有修改版，说是可以给 riscv 用，不过我没弄成功。</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建一个聊天室——rocket.chat</title>
    <url>/2018/07/rocket-chat/</url>
    <content><![CDATA[<p>Rocket.Chat 是一款开源软件。<br>项目地址：<a href="https://github.com/RocketChat/Rocket.Chat">https://github.com/RocketChat/Rocket.Chat</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我是在 Ubuntu 18.04 纯净系统下使用的<br>用 snap 安装</p>
<pre>snap install rocketchat-server</pre>

<h4 id="联结-caddy"><a href="#联结-caddy" class="headerlink" title="联结 caddy"></a>联结 caddy</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rocketchat-server.initcaddy</span><br></pre></td></tr></table></figure>

<p>编辑 Caddyfile 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /var/snap/rocketchat-server/current/Caddyfile</span><br></pre></td></tr></table></figure>

<p>将  http://:8080 为你的网站,如 powersee.tk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://powersee.tk</span><br><span class="line">proxy / localhost:3000 &#123;</span><br><span class="line">  websocket</span><br><span class="line">  transparent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart snap.rocketchat-server.rocketchat-caddy</span><br></pre></td></tr></table></figure>

<p>那么此时访问网址就能进入聊天室了<br> 因为此处用 SSL 的话，我试了好多次，只能搞自签证书，而这样在手机客户端又没办法连接，因此不演示。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>第一次进入注册的账号会成为管理账号。<br>进入后是英文的，可以设置为中文。<br>点击导航栏的三个点，进入管理界面</p>
<p>然后在里面可以找到设置语言的地方</p>
<h4 id="手机端登录"><a href="#手机端登录" class="headerlink" title="手机端登录"></a>手机端登录</h4><p>第一次进入会出现这个界面<br>(让你输入网址)<br>因为我没有使用 SSL，因此得点那个倒三角，选择 http:// 然后再输入网址，如我的 powersee.tk<br>再用账号密码登录即可。同个账号在多平台是可以同时在线的。</p>
<h4 id="手机客户端下载"><a href="#手机客户端下载" class="headerlink" title="手机客户端下载"></a>手机客户端下载</h4><p>去 play 商店 下载<br>GitHub下载:下载 armv7 版本的到手机安装，x86版本的则到平板。<a href="https://github.com/RocketChat/Rocket.Chat.Cordova/releases/">https://github.com/RocketChat/Rocket.Chat.Cordova/releases/</a><br>总体而言，还是挺有趣的。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器和软路由速度记录</title>
    <url>/2021/07/router-speed/</url>
    <content><![CDATA[<p>本文记录测试过的路由器和软路由设备，它们的出国速度表现。</p>
<p>由于家里的移动宽带，目前最高只能跑到 440-450 mbps 左右，所以有些性能较强的设备，目前没有条件测出它的极限，见谅。</p>
<table>
<thead>
<tr>
<th align="left">设备型号</th>
<th>出国速度（Mbps）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">章鱼星球 S912</td>
<td>440（已达到宽带极限，未知上限）</td>
</tr>
<tr>
<td align="left">小米 CR6608 （mt7621）</td>
<td>80</td>
</tr>
<tr>
<td align="left">JCG Q20</td>
<td>80</td>
</tr>
<tr>
<td align="left">我家云 rk3328</td>
<td>300</td>
</tr>
<tr>
<td align="left">D2550</td>
<td>210（ssr 可以到 390）</td>
</tr>
<tr>
<td align="left">k2p</td>
<td>80</td>
</tr>
<tr>
<td align="left">树莓派4B</td>
<td>415</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>乐橙 sn1 刷机经验分享</title>
    <url>/2021/03/sn1-flash/</url>
    <content><![CDATA[<p>刷机关键点，绿联读卡器，<a href="https://detail.tmall.com/item.htm?id=595545521913&skuId=4539873880456">淘宝购买链接</a></p>
<p>@<strong>88841807849_bili</strong> 这位老哥告诉我的，他说他使用这款读卡器成功刷机了，于是我也就去买来试试看。果然是这样，用其它的读卡器和 U 盘一直不行，用了这款读卡器一下子就成功了。</p>
<p>另外还要买两样东西：</p>
<p><a href="https://item.taobao.com/item.htm?id=565486361121&_u=rod6isk7e40">单头电子线 端子线</a></p>
<p>要选择 4P 的</p>
<p>usb 转 ttl，我是在拼多多买的，CH340G普通版，价格 6.3 包邮。</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>建议还是先备份一下源系统比较好，可以先使用 <code>df -h</code> 看一下硬盘的挂载情况，然后再使用 dd 命令把 emmc 备份出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd if=/dev/mmcblk0 of=你的硬盘或U盘路径/lecheng.img</span><br></pre></td></tr></table></figure>

<h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>固件可以到 GitHub 上面下载，<a href="https://github.com/hanwckf/build-imou-sn1/releases">https://github.com/hanwckf/build-imou-sn1/releases</a></p>
<p>为了方便访问不了 GitHub 的朋友，我也把它们备份到网盘里。</p>
<p>链接：<a href="https://pan.baidu.com/s/1XncryNlALVXAO4rsVaqP3w">https://pan.baidu.com/s/1XncryNlALVXAO4rsVaqP3w</a><br>提取码：psee</p>
<p>7z b 分数</p>
<p><img src="/img/2021/%E4%B9%90%E6%A9%99_sn1_7z_b.jpg" alt="乐橙_sn1_7z_b"></p>
<p>总分 4283</p>
<p>参考另外两台设备</p>
<blockquote>
<p>N1 3556</p>
<p>我家云 3457</p>
</blockquote>
<p>之后如果想刷回安卓系统，可以进入 U 盘中的 alpine 恢复系统，先用 mount 命令挂载硬盘或者U盘，然后使用 dd 命令讲安卓系统恢复到 mmcblk0</p>
<p>例如我是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br><span class="line">dd if=/mnt/lecheng.img of=/dev/mmcblk0</span><br></pre></td></tr></table></figure>

<p>刷机教程文章：<a href="https://www.jianshu.com/p/695fa3b0dab5">https://www.jianshu.com/p/695fa3b0dab5</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>千万别用松鼠记账</title>
    <url>/2022/01/songshujizhang/</url>
    <content><![CDATA[<p>松鼠记账，这是一款记账app，我平时主要用来记录日常支出与收入，使用的时间也不短了。到现在应该有一年多了。</p>
<p>由于我的手机取消了应用商店自动更新 app 的功能，所以一直都是使用旧版本，感觉还不错，没有广告，而且 APP 的推送通知功能，也被我屏蔽了，平时根本不会被打扰到。</p>
<p>有一天，我心血来潮，试着将它的一个权限【读写手机存储】给关闭了，因为这个功能是用来读取手机里的相片，或者内部存储空间的其它文件的。作为一款记账软件，我记账并不需要上传图片，所以我就把它关了。</p>
<p>然后就悲剧了，再次打开软件，所有的记账记录全部丢失了。。。一年多快两年的记录，全部都没了。。。</p>
<p>其实这款软件也是可以注册账号的，登录之后就可以将数据同步在服务器里，不过我之前看到它要求必须用手机号注册才行，就没有注册账号，一直都是单机使用，所以现在数据丢失，也就完全没法找回了，全没了。</p>
<p>那么是因为关闭这个权限，导致软件没法正常运行吗？其实并不是，因为我丢失数据之后，继续关闭这个权限使用，是可以正常用的，这个权限并不是必须的。总之这点我就当作是它的一个 bug 吧，之后我就老老实实用手机号注册一个账号，避免以后又发现数据丢失的情况。</p>
<p>那么就这样使用了一段时间，然后又发生了一件事。我的手机一直提示我，可以升级 miui12.5 稳定版了，快点升级快点升级，但是我不想升级，因为我没看到升级后能给我带来什么新的功能。</p>
<p>然而它也不会放任我不升级，它每天都会给我来一条推送，我想禁止它的通知功能，但是因为【系统升级】是系统级应用，没法禁止。我只能每天都手动把这条升级通知给清除掉。</p>
<p>终于有一天，我忍受不了了，我想砸手机，但是舍不得，所以还是被逼得只能去升级系统了，垃圾 MIUI。</p>
<p>那么回到主线，升级之后，松鼠记账这个 APP 会闪退。那么我想到的是，可能是 APP 版本太老了吧，毕竟我一直没去升级 APP 版本，可能和现在的 MIUI 12.5 有冲突吧。于是我就升级 APP 到最新的。</p>
<p>于是我升级完 APP 回来了，然后我震惊了。现在打开 APP 有开屏广告了，APP 底部多了返利的标签页，记账页面显示开通 VIP 可以无广告，你不开通的话，每记一次帐，就给你弹一次广告。那么就开通 VIP 吧，毕竟人开发一款 APP 也不容易嘛。</p>
<p>价格是多少呢？</p>
<p>11.9 元，每个月，每个月，<strong>每个月</strong></p>
<p>我他妈震惊了，人家 B 站会员，打折的时候一年一百出头，购买后大量动漫、电影、电视剧可以观看。人家百度网盘每年 11 月购买会员有优惠，一年 svip 价格不到 200 ，购买后可以扩大网盘空间，可以高速下载从网上转存的大量资源。</p>
<p>而你一个记账软件，一个月会员费收 12 块，主要作用是去掉记账时的广告…… 我觉得我要是去充值那我肯定就是智障了。而且我也后悔了，升级之前为什么没有看看应用商店里，其它网友的评论呢？要是早看到我肯定不会去升级的。</p>
<p><img src="/img/2022/Screenshot_2022-01-24-13-14-37-156_com.xiaomi.market.jpg" alt="com.xiaomi.market"></p>
<p>不过也好，越早知道它们吃相这么难看，才能够越早转移。于是我开始寻找其它的记账 APP 来替代它。然而我并没有立刻找到，所以暂时还是需要用到它，于是我把这款软件的联网功能禁止了，不能联网它也没广告了，不过每次打开 APP 到可以记账的页面，大概需要 10 秒才行，因为它好像设定了开屏时会定住几秒，用来显示开屏广告，如果没法联网加载广告图片，会停在那里显示 APP 的开屏页面。</p>
<h3 id="替代方案——那样记账"><a href="#替代方案——那样记账" class="headerlink" title="替代方案——那样记账"></a>替代方案——那样记账</h3><p>了解来源——GitHub</p>
<p>我之前在搜索引擎里找，没找到合适的，感觉大多数都是商业公司的产品，我是再也不想 APP 用着用着就给我来一堆广告了，所以那些我都不太想去尝试。然后今天我尝试在 GitHub 上面搜索，因为我想可能也会有人和我一样，只需要一个简单的记录收入和支出的应用而已，并不需要那些花里胡哨的功能。那么应该也有人会尝试自己写一个吧。</p>
<p>果然，在 GitHub 搜索记账后，出来很多的项目，而第一个结果就是我想要的了</p>
<p><a href="https://github.com/purezhi/MoneyKeeper">https://github.com/purezhi/MoneyKeeper</a></p>
<p>不过它最后的更新在 2018 年的 6 月，距今都快 4 年了。然后我根据 readme 跳转到酷安，发现原来作者是一直有更新的，最近的更新是 2021-12-20，版本 6.8.5</p>
<p><a href="https://www.coolapk.com/apk/188475">那样记账 - 纯粹的记账软件(me.bakumon.moneykeeper) - 6.8.5 - 应用 - 酷安 (coolapk.com)</a></p>
<p>应用介绍里有这么一段话</p>
<blockquote>
<p>没有任何多余的权限，没有广告，没有用户系统，不保存用户任何信息，只是单纯的记录收支情况，做一些明了的统计，通过清楚的了解钱花在了哪，来建立起良好的消费习惯。 </p>
</blockquote>
<p>我很喜欢这样的软件，很纯粹，很轻量，安装包只有 5.3M，里面不会弹广告，备份可以使用本地备份和云备份，数据都是备份为 zip 压缩包的。云备份是通过 webdav 来实现的，使用我非常熟悉的坚果云就行。里面可以开通永久会员，价格是 21 元，不是一个月，也不是一年，而是 21 元买断。承诺永久无广告，不过目前这个 APP 好像也没有广告，所以目前会员的作用是可以使用不同的主题和图标包。不过我认为默认的图标就挺好看的了。</p>
<p>设置里面可以把【快速记账】的设置勾选上，这样打开 APP 时就自动进入记账页面了，填上金额和选择一个类别就行。软件的速度也很快，从桌面点击打开到记账页面，耗时不到一秒，对比松鼠记账的 10 秒，呵呵。</p>
<p>我的手机里还有另外一款 APP，也是在 GitHub 了解到的，是一款日记软件，模仿电影《你的名字》里面的 APP 开发的，这款是完全开源的。</p>
<p><a href="https://github.com/DaxiaK/MyDiary">DaxiaK&#x2F;MyDiary: In the Movie “-your name.-“ (君の名は。, 你的名字) , “My Diary” of android version. (github.com)</a></p>
<p>它的备份方式也是通过将数据导出为 zip 压缩包，然后到其它的手机上，导入这个 zip 压缩包就可以恢复数据。也挺好的，开源软件虽然后续就没人维护了，但是只要基本功能都有，不更新也无所谓了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 syncthing 同步多台设备的文件</title>
    <url>/2019/11/syncthing-better/</url>
    <content><![CDATA[<p>又来折腾 syncthing 了，毕竟买了个 10T 的大硬盘，得好好利用起来才行。</p>
<blockquote>
<p>syncthing 是一个跨平台、开源的数据同步工具。它可以让你的文件夹，在多台设备保持同步。</p>
</blockquote>
<h2 id="Syncthing-支持平台"><a href="#Syncthing-支持平台" class="headerlink" title="Syncthing 支持平台"></a>Syncthing 支持平台</h2><p>Syncthing 官方支持 Linux、Windows、OS X、FreeBSD、Solaris 等系统，并且有第三方的 <a href="https://geo.itunes.apple.com/cn/app/fsync/id964427882?mt=8&at=1000l7mq&ct=appinnpost">iOS</a>、<a href="https://play.google.com/store/apps/details?id=com.nutomic.syncthingandroid">Android</a> 应用。</p>
<p>所以利用它，我可以让我手机（Android）的文件，同步到电脑（macOS，Windows）。同时它还可以在 Linux 上用，所以我可以把文件同步到服务器上，也可以同步到刷了<code>小钢炮系统</code>的斐讯 N1 上（系统自带 syncthing）。甚至我可以这些设备全部都使用，确保我的某个文件夹，同步到所有的设备上。（虽然现在没有重要到这样的文件……）</p>
<p>总之，它是一款很强大的软件，并且还免费开源，很了不起。其实我一年半之前就折腾过了 <a href="/2018/05/syncthing/">之前的文章</a> ，不过说来惭愧，当时折腾了一阵子，就没有再使用它了。因为当时的版本是 0.14 ，很多功能还不完善，并且在 Mac 上面，要使用只能<code>二进制执行文件</code>，并没有做出一个 app ，感觉不太方便。不过我的手机上面一直都有保留着它，即使不怎么使用了。</p>
<h2 id="现在的变化"><a href="#现在的变化" class="headerlink" title="现在的变化"></a>现在的变化</h2><p>时间过去这么久，这个应用现在更新了很多次，变得越来越好用了。例如：</p>
<ol>
<li>有 docker 版本，Linux 上安装起来更加方便</li>
<li>Windows 和 macOS 都有了 GUI 版本，使用门槛降低</li>
<li>同步的时候可以选择 仅发送，（而不接收，可以防止对方误操作而导致己方的文件也丢失）</li>
</ol>
<p>可能其它的功能我还没有用到，所以并不能更好地体验这个应用，不过就上面这几点，我就挺满意了。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>在其官网： <a href="https://syncthing.net/">syncthing.net</a> 上面可以看到下载链接，不过都是放在 GitHub 上的，可能得用代理才能下载。</p>
<ul>
<li><strong>Windows</strong> tray utility, filesystem watcher &amp; launcher: <a href="https://github.com/canton7/SyncTrayzor/releases/latest">SyncTrayzor</a></li>
<li><strong>macOS</strong> application bundle: <a href="https://github.com/syncthing/syncthing-macos/releases/latest">syncthing-macos</a></li>
<li><strong>Cross-platform</strong> GUI wrapper: <a href="https://github.com/syncthing/syncthing-gtk/releases/latest">Syncthing-GTK</a></li>
</ul>
<p>安卓手机可以去 Google play 搜索。</p>
<p>我这里主要介绍用 docker 将它装在服务器上面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name=syncthing \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e UMASK_SET=022 \</span><br><span class="line">  -p 8384:8384 \</span><br><span class="line">  -p 22000:22000 \</span><br><span class="line">  -p 21027:21027/udp \</span><br><span class="line">  -v /home/syncthing/appdata/config:/config \</span><br><span class="line">  -v /home/syncthing/data1:/data1 \</span><br><span class="line">  -v /home/syncthing/data2:/data2 \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  linuxserver/syncthing</span><br></pre></td></tr></table></figure>

<p>这里开放的 webUI 端口为 8384，所以启动成功后到浏览器输入 <code>IP:8384</code> 即可进入管理界面。因为我们是在服务器上使用，一定要设置用户，不然别人随便输入你的 IP:8384 就可以来管理你的设备了，很不安全。如果是在家里使用的话，例如群晖，或者和我一样使用 小钢炮 ，那不用设置也没多大问题。</p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><p>这里的添加用户，可以理解成和微信的添加好友相似。两台设备需要添加好友了才能互相发送文件，而要添加可以使用 <strong>二维码</strong> ，也可以使用 <strong>ID</strong> 。这里我以服务器作为被添加的设备。</p>
<p>点击右上角的 【操作】➡️【显示 ID 】即可看到。如果手机想添加这台设备，打开应用后，向左滑来到设备这里，点右上角的 ➕ ，然后点击二维码就可以扫码了。如果是电脑，就只能用 ID 的方式来添加了。点右下角的【添加远程设备】然后输入服务器的 ID 即可。</p>
<h2 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h2><p>这里我以手机文件同步到服务器为例。在手机上向右滑来到左边的 文件夹 这里。点击右上角的 ➕ 。文件夹标签可以随便起，目录选择要同步的文件夹，要同步到哪台设备，就把那台设备的开关打开。这样手机端的设置就完成了。</p>
<p>然后过一会服务器的就会收到通知，我们可以在浏览器的 webUI 里看到，提示某某人分享一个某某文件夹给你，是否接受。接受时可以设置要把这个文件夹放在哪里。</p>
<p>这样设置好后，就只需要等待了，手机会慢慢地把文件上传到服务器里。因为这个应用是使用 端–端 加密的，所以不用怕被中间人知道你在传输什么，不过可能也是因为这个原因吧，感觉传输的速度不是那么快，最高好像只能达到 2M/s 。</p>
<p>当然这个过程也是可以反过来的，把服务器的文件同步到手机上。</p>
<p>我本来是打算尝试一下，把服务器里 qbittorrent 下载好的文件，利用这个应用取回手机。但是，速度实在太慢了，虽然最大时能有 2M/s ，但是大部分时间都是几百 k 的速度。如果设置成服务器下载完，让它同步到我的小钢炮里面就还行，毕竟两台设备都是 24 小时开机。但是手机就没必要了，非要把文件取回手机，我还是选择开启一个临时的 HTTP 服务。</p>
<h2 id="暂时我的使用方案"><a href="#暂时我的使用方案" class="headerlink" title="暂时我的使用方案"></a>暂时我的使用方案</h2><p>我目前的使用有两个</p>
<ol>
<li>把手机的微信下载内容，同步到小钢炮。</li>
<li>把手机里用 vue 这个软件拍的视频，同步到电脑（用于在电脑剪辑）</li>
</ol>
<p>以后想到其它玩法再来更新。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人网盘——syncthing</title>
    <url>/2018/05/syncthing/</url>
    <content><![CDATA[<p>syncthing 是一款开源免费的同步工具，而且除了 iOS，其它的平台基本都有客服端可以下载。它的作用是，可以让一个文件夹，在多台设备上保持同步。</p>
<h3 id="一-下载"><a href="#一-下载" class="headerlink" title="一  下载"></a>一  下载</h3><p>到其官网下载对应的客户端：<a href="https://syncthing.net/">官网链接</a>  例如我下载Android版和Ubuntu版 Ubuntu版链接：<a href="https://apt.syncthing.net/">点我</a><br>安卓安装就不用说了，Ubuntu则根据其页面的这段命令输入就行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\# Add the release PGP keys:</span><br><span class="line">curl -s https://syncthing.net/release-key.txt | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">\# Add the &quot;stable&quot; channel to your APT sources:</span><br><span class="line">echo &quot;deb https://apt.syncthing.net/ syncthing stable&quot; | sudo tee /etc/apt/sources.list.d/syncthing.list</span><br><span class="line"></span><br><span class="line">\# Update and install syncthing:</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install syncthing</span><br></pre></td></tr></table></figure>
<h3 id="二-运行"><a href="#二-运行" class="headerlink" title="二  运行"></a>二  运行</h3><p>此时在Ubuntu终端输入命令：<code>syncthing</code> 来运行它 等待看到<br><code>GUI and API listening on 127.0.0.1:8384</code><br>同时按<code>ctrl 和 C</code> 来取消命令 运行此命令的目的时为了生成配文件</p>
<h3 id="三-修改"><a href="#三-修改" class="headerlink" title="三  修改"></a>三  修改</h3><p>此时我们即可修改配文件<br><code>vim ~/.config/syncthing/config.xml</code><br>然后找到 <code>127.0.0.1:8384</code> 将之改为 <code>0.0.0.0:8384</code><br>更改方法为找到此处 按键盘的 <code>i</code> 便可以修改，改完按 <code>Esc</code> 退出编辑状态，输入 <code>:wq</code> (保存并退出的意思)</p>
<h3 id="四-配置"><a href="#四-配置" class="headerlink" title="四  配置"></a>四  配置</h3><p>这时就可以输入<code>IP:8384</code> (例如 <code>192.168.123.184:8384</code> )进入管理页面了 我们可以设置账号密码，以免随便他人登录这个界面 点击右上角的 操作 显示ID 将会出现一张二维码，用手机扫描这即可添加关联 然后设置想要同步的文件夹，当两个客户端都运行时就会自动同步</p>
<p>完</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 telethon 来定时发送消息</title>
    <url>/2021/06/telethon-auto-reply/</url>
    <content><![CDATA[<p>今天介绍一个 python 库 —— telethon，使用它我们可以在 Linux 服务器上登录 telegram，可以获取群消息、联系人，以及今天要重点介绍的自动发送消息。</p>
<p>更多的内容可以查看官方文档：<a href="https://docs.telethon.dev/en/latest/">https://docs.telethon.dev/en/latest/</a></p>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>首先需要有 python 环境，我这里在 Ubuntu 服务器上面演示的，我用的是 python3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install telethon</span><br></pre></td></tr></table></figure>

<p>安装成功后可以通过执行下面这个来检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import telethon; print(telethon.__version__)&quot;</span><br></pre></td></tr></table></figure>

<p>我目前装的版本是 <code>1.21.1</code></p>
<h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><p>之后来到浏览器，需要申请 API</p>
<p><a href="https://my.telegram.org/auth?to=apps">https://my.telegram.org/auth?to=apps</a></p>
<p><img src="/img/2021/2021-06-02_22-00-41.jpg" alt="2021-06-02_22-00-41"></p>
<p>填写自己的手机号，前面的 <code>+</code> 我是有填的，不知道不填行不行。点击 next 按钮后我们的 telegram 客户端就会收到一条验证消息，验证码是英文字母，还挺长的。</p>
<p>之后需要创建一个 application ，要填的就是 App title 和 Short name 这两个而已，主要只能 <code>英文字母和数字</code> ，不可以用下划线，并且要在 5-32 个字符之间。可以参考这么填。</p>
<blockquote>
<p>App title: firstApp<br>Short name: 12345</p>
</blockquote>
<p>完成后可以看到 <code>api_id、api_hash</code> 这两个，把它们保存下来。需要将它们填写到下面的脚本里。</p>
<h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use your own values from my.telegram.org</span></span><br><span class="line">api_id = <span class="number">12345</span></span><br><span class="line">api_hash = <span class="string">&#x27;0123456789abcdef0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The first parameter is the .session file name (absolute paths allowed)</span></span><br><span class="line"><span class="keyword">with</span> TelegramClient(<span class="string">&#x27;anon&#x27;</span>, api_id, api_hash) <span class="keyword">as</span> client:</span><br><span class="line">    client.loop.run_until_complete(client.send_message(<span class="string">&#x27;me&#x27;</span>, <span class="string">&#x27;Hello, myself!&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>完成后保存，例如我这里保存为 tele-test.py ，然后通过 <code>python3 tele-test.py</code> 来执行这个脚本。它会让我们输入手机号码，因为这是我们第一次在陌生的设备上登录，之后在 telegram 客户端里我们会收到一个验证码，输入后就可以登录了。（此处手机号前面的 + 我就没填了）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please enter your phone (or bot token): 123456789</span><br><span class="line">Please enter the code you received: 11631</span><br><span class="line">Signed in successfully as powersee</span><br></pre></td></tr></table></figure>

<p>那么这样我们在服务器上面登录了，并且此时也已经成功地发送了一条消息。就是给 <code>me</code> 这个用户发送 <code>Hello, myself!</code> 这条消息。其实就是将这句话，保存到 “保存的消息”里面而已。如果你想发送给其他人，以及修改内容，就修改一下脚本的内容就行。</p>
<p>里面的 anon 是缓存的密钥，第一次执行脚本后，我们输出手机号和验证码，完成后脚本所在文件夹就会出现一个 <code>anon.session</code> 文件，下次再执行这个脚本就不用输入手机号验证了。你可以将它移动到其它地方，但是记得也修改一下脚本里的内容，如将 acon 改为 <code>/opt/acon</code> 。</p>
<h3 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h3><p>然后想要实现定时执行的话，需要用到 crontab ，可以轻松实现每天定时发送消息给某个用户。</p>
<p>如果想让发送时间有些变化的话，可以在 python 里面加入 time 和 random</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">time.sleep(random.randint(<span class="number">5</span>,<span class="number">200</span>))</span><br></pre></td></tr></table></figure>

<p>这样会随机暂停 5 到 200 秒，因此每次发送消息的时间就不同了。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>PSV存档管理器 savemgr 使用经验</title>
    <url>/2018/08/savemgr/</url>
    <content><![CDATA[<p>savemgr，存档管理器，在 Github 上项目名称为：vita-savemgr</p>
<p>项目地址：<a href="https://github.com/d3m3vilurr/vita-savemgr">https://github.com/d3m3vilurr/vita-savemgr</a></p>
<p>作用：备份还原存档，分享存档给别人，使用他人存档。</p>
<p>使用方法：（#本文只讲v2.0正式版）那么首先下载这个安装包，之后在PSV上面打开安装。</p>
<blockquote>
<p><a href="https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk">https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk</a></p>
</blockquote>
<p>完成之后PSV桌面就有这个图标了。打开，选择一个游戏，然后出现四个选项。分别是 备份，恢复，删除，格式化。看字面意思很容易懂其作用。</p>
<p><img src="/img/2018/savemgr.jpg" alt="软件截图"></p>
<p>比如我要备份空之轨迹sc这个游戏存档（游戏编号为 PCSH10060）。点击这个游戏，备份，选择一个位置，如第七个。之后存档就会备份到</p>
<blockquote>
<p>ux0:data/savegames/PCSH10060/SLOT7</p>
</blockquote>
<p><img src="/img/2018/savegamepath.jpg" alt="备份路径"></p>
<p>这里。把这个文件夹放在别的PSV的这个路径，别人再使用存档管理器恢复存档，即可以使用我们分享出来的存档。同理，我们也可以这样使用别人的存档。</p>
<hr>
<p>　　问题：使用 savemgr 一备份就报错。</p>
<p>　　其实这才是我一开始要写的内容。因为用0.8版本，导致档案损坏，以至于我整个游戏重新安装。于是我就上网下载了个2.0汉化版，却出现 一备份就报错 的情况。关机重启也还是一样。</p>
<p>　　然后去 Github 下载7月1号更新的最新版本，还是一样。看看issue里面，也有人是这种情况，没法解决。但是发现了用原装2.0版本的话，安装好以后，机子重启一下就能正常使用了。备份恢复都可以。</p>
<p>　　吐槽：我网上查了很多，发现很少有人给官方的下载地址，github的直链，大多数都是给个百度云……感觉还是给像<br><a href="https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk">https://github.com/d3m3vilurr/vita-savemgr/releases/download/2.0.0/savemgr.vpk</a><br>这样好吧，直接浏览器就能下载，而且不用怕链接失效。最重要的是，我能知道这个是从哪里来的。</p>
]]></content>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>关于服务器资源取回本地的几种方法</title>
    <url>/2020/01/three-ways-to-retrieve-the-file/</url>
    <content><![CDATA[<p>本文介绍三种我自己都有用过的方法，都是比较简单的。</p>
<h2 id="一、caddy"><a href="#一、caddy" class="headerlink" title="一、caddy"></a>一、caddy</h2><p> 首先，安装一个 caddy。现在是 <code>2020-09-29</code> ，最新的 caddy 版本是 2.2.0，后期如果有更新的话，请自行到官网或者 <a href="https://github.com/caddyserver/caddy/releases">GitHub</a> 了解。</p>
<p>这里下载的是一个 deb 包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/caddyserver/caddy/releases/download/v2.2.0/caddy_2.2.0_linux_amd64.deb</span><br></pre></td></tr></table></figure>

<p>下载完成后，用 dkpg 来安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -i caddy_2.2.0_linux_amd64.deb</span><br></pre></td></tr></table></figure>

<p>此时 caddy 会自动启动，我们先把它关了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop caddy</span><br></pre></td></tr></table></figure>

<p>写入配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;:80 &#123;  </span><br><span class="line"> root * /path/to/downloads</span><br><span class="line"> file_server browse  </span><br><span class="line">&#125;&quot; &gt; Caddyfile</span><br></pre></td></tr></table></figure>

<p>注意！！！此处的 <code>/path/to/downloads</code> 就是要共享的文件夹路径，可以自行修改。</p>
<p>启动 caddy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy start</span><br></pre></td></tr></table></figure>

<p>开放服务器 80 端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw allow 80</span><br></pre></td></tr></table></figure>

<p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p>
<p>其实不建议用 80 端口，最好还是用其它的吧。如果用其它的端口，在浏览器中访问时，就需要加上 <code>:</code>和 <code>端口号</code>，例如用 <code>9527</code> 端口，此时 <code>IP</code>假设为 <code>111.222.111.111</code> 就需要在浏览器中访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">111.222.111.111:9527</span><br></pre></td></tr></table></figure>

<p>需要想要关闭 caddy 服务，可以用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy stop</span><br></pre></td></tr></table></figure>

<p>stop 之后，我们可以使用 <code>vim</code> 或者 <code>nano</code> 编辑 <code>Caddyfile</code>，这两个编辑器的使用可以网上搜一下，我们可以修改端口，文件夹的路径这些内容，保存后再来启动 caddy 就行。</p>
<p>如果想卸载，用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg -r caddy</span><br></pre></td></tr></table></figure>

<h2 id="二、h5ai"><a href="#二、h5ai" class="headerlink" title="二、h5ai"></a>二、h5ai</h2><blockquote>
<p>这是一个 PHP 程序，原本它是要求机器本身有 PHP 才能用的，不过现在使用 docker 来安装的话，也可以非常迅速就安装好。</p>
</blockquote>
<p>一行命令即可，最简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8055:80 -v /home/tr/download:/h5ai --name h5ai ilemonrain/h5ai:full -d</span><br></pre></td></tr></table></figure>

<p>如果你是用 docker 安装了 transmission ，而且下载路径是 <code>/home/tr/download</code> ，那么你可以直接使用上面的命令。</p>
<p>如果你使用的是 qb ，你可以自己修改下载路径，例如将路径改为 <code>/path/to/downloads</code> ，改完的完整命令是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8055:80 -v /path/to/downloads:/h5ai --name h5ai ilemonrain/h5ai:full -d</span><br></pre></td></tr></table></figure>

<p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容。</p>
<p>如果后来觉得不需要了，可以选择停止这个容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop h5ai</span><br></pre></td></tr></table></figure>

<p>停止后觉得以后不会再用到它了，可以选择将它删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm h5ai</span><br></pre></td></tr></table></figure>

<h2 id="三、Python-web"><a href="#三、Python-web" class="headerlink" title="三、Python web"></a>三、Python web</h2><p>这个是最简单的，基本所有的服务器都可以，而且不用额外安装其它的程序。只需要在 ssh 时进入到指定的文件夹，然后输入这条命令即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>
<p>会默认采用8000端口,此时输入 <strong>IP:8000</strong> 或者 <strong>域名:8000</strong> ，即可访问当前目录下的文件，如果有 **index.html **则会默认加载。</p>
<p>然后想要停止时，按<code>CTRL + C</code> 取消。<br>不过这种方法有挺多缺点的，比如不支持断点续传，开启时需一直保持 ssh 连接着，显示的文件信息简陋等。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第三种适合于临时下载的，前两种适合长时间的。如果机器本身有装 docker ，那我建议使用第二种。当然第一种也有好处，就是可以绑定指定的域名。</p>
<p>各取所需吧，适合自己的需求的才是最好的。</p>
]]></content>
      <tags>
        <tag>服务器</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云云函数要收费了</title>
    <url>/2022/05/tencent-scf/</url>
    <content><![CDATA[<p>前几天腾讯云发布了通知，以后云函数不能免费使用了。我之前有从网上看到消息，今天还收到了腾讯云的短信通知。</p>
<blockquote>
<p>【腾讯云】腾讯云云函数免费额度和计费方式将于2022年6月1日 起正式调整，届时新用户将获得三个月更多的用量的免费额度，第四个月开始不再享受免费额度，同时从第四个月开始，系统每月会自动发放基础套餐额度并扣除基础套餐费用 12.8 元，详情请查看：<a href="https://mc.tencent.com/qpgtGc9H">https://mc.tencent.com/qpgtGc9H</a> ，如您有任何疑问可以登录（账号 ID：9527，昵称：powersee）提交工单与我们联系。</p>
</blockquote>
<p>我还在网上搜了一下，看看别人是怎么讨论这个的，不过看来讨论的好像不多。知乎上面有一个相关的提问，到目前 5 月 31 号才 11 个回答。</p>
<p><a href="https://www.zhihu.com/question/533580659">如何看待腾讯云函数（SCF）取消免费额度，每月必须 12.8 元最低消费？ - 知乎 (zhihu.com)</a></p>
<p>总而言之，以后可能就没法白嫖云函数了。</p>
<p>我登录电脑网页版了解看看，一来到云函数的界面，就有明显的提示</p>
<blockquote>
<h4 id="计费模式和免费额度变更通知"><a href="#计费模式和免费额度变更通知" class="headerlink" title="计费模式和免费额度变更通知"></a>计费模式和免费额度变更通知</h4><ol>
<li>SCF计费模式和免费额度于 2022 年 6 月 1 日进行调整，用户开通使用云函数三个月后每月不再享受免费额度，系统每月会发放基础套餐额度，同时自动扣除 12.8 元，详见<a href="https://cloud.tencent.com/document/product/583/12282">免费额度</a>文档。</li>
<li>新用户前三个月免费额度中资源使用量、外网出流量较此前免费额度的量将提升一倍，通过 0 元购买套餐包的形式享受免费额度，函数并发配额也将提升一倍。</li>
<li>学生用户可通过<a href="https://cloud.tencent.com/act/campus?utm_source=qcloud&utm_medium=navigation&utm_campaign=campus">云+校园</a>购买专属超低折扣套餐，活动长期有效。</li>
<li>如果您暂时不使用 SCF 的服务，可以<a href="https://cloud.tencent.com/document/product/583/12283#.E6.89.8B.E5.8A.A8.E5.86.BB.E7.BB.93">手动冻结</a>云函数。</li>
</ol>
</blockquote>
<p>按照它这个意思，也就是 6、7、8 这三个月还是可以免费使用的，之后到了 9 月，应该就开始每个月收 12.8 了。</p>
<p>我里面只有一个服务在运行着，每天自动运行一次来签到，使用的资源非常的少，我一个月就调用 30 次，而免费用户是可以一个月调用 5 万次的。腾讯云看来玩不起呀，那对于我这种情况，我肯定不会去付费使用的，所以我就打算停用了。</p>
<p>它这里也挺贴心的，还有教怎么冻结，这样以后应该就不会被扣费了。</p>
<p>手动冻结</p>
<p><img src="/img/2022/image-20220531203309383.png" alt="image-20220531203309383"></p>
<p>冻结的时候有提示</p>
<blockquote>
<p><strong>服务冻结须知冻结后，该账户下所有地域的函数将会有以下限制，是否确认冻结?</strong></p>
<ul>
<li>函数无法被调用，通过云 API 等方式的调用，函数将报错并无法执行。</li>
<li>预置的函数实例将会被回收。</li>
<li>函数代码及相关配置会继续保留。</li>
<li>函数服务不会继续产生费用。</li>
</ul>
</blockquote>
<p><img src="/img/2022/image-20220531205635345.png" alt="image-20220531205635345"></p>
<p>根据了解阿里云好像也有云函数可以免费使用，但是网上好像没什么教程，不知道什么情况，是可以免费白嫖呢？还是至少每个月有付一块钱呢？这个我还没去了解，等其他人研究后我再去抄作业吧，目前签到服务还是运行在家里的服务器吧。</p>
<p>看到有人分享用华为云免费运行云函数了：<a href="https://blog.csdn.net/qq_28778001/article/details/124891438">https://blog.csdn.net/qq_28778001/article/details/124891438</a></p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让 qBittorrent 在 Linux 上连接更多的 tracker</title>
    <url>/2019/11/qb-more-tracker/</url>
    <content><![CDATA[<p>对于 Linux 上的 qBittorrent，它不同于我们在 Windows 和 Mac 上的桌面版，我们只能通过 web 来管理，基本的功能都一样，但是有一个问题比较麻烦，就是无法打开<strong>高级设置</strong>里的【总是向所有等级的 Tracker 汇报】。</p>
<p>❗️❗️注意，qb 4.2 以及之后的版本，webUI 已经可以管理<strong>高级设置</strong>了，所以想简单的，可以升级版本即可。我个人的建议也是直接升级即可，不过如果因为有特殊原因没法升级，可以继续看下面的方法折腾。</p>
<p>这对于我们下载 BT 任务，影响就比较大了。</p>
<p>但是在研究一番之后，我还是成功的开启了这个功能。</p>
<p>我的思路是这样的，Linux 上的 qb，它有一个配置文件：<code>qBittorrent.conf</code> ，我通过修改这个文件，应该也是可以开启这个功能的。但是，我不知道添加什么语句，才能开启。所以我想到看一下我电脑的 qb 配置文件，来参考一下。</p>
<p>那么我先查看一下我 Mac 上的配置文件：<code>qBittorrent.ini</code> ，它在用户目录下的隐藏文件夹<code>.config</code>里面，在这个文件里面，我找到了这一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=true</span><br></pre></td></tr></table></figure>

<p>它是放在 <code>[Preferences]</code>下面的，那么按理，我在 Linux 上也添加这一句，就可以开启这个功能了。</p>
<p>Linux 上可能不同的发行版本，它配置文件的位置有可能不同，想我的 N1 小钢炮，它的配置文件是在这的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/qbittorrent/.config/qBittorrent/qBittorrent.conf</span><br></pre></td></tr></table></figure>

<p>而我之前用脚本安装的 qb ，它的配置文件是在 home 目录下的某个位置，而如果在 docker 上面，它在容器中的位置可能也不一样吧。所以如果找不到，可以全局搜索一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -name qBittorrent.conf</span><br></pre></td></tr></table></figure>

<p>找到之后，用 vim 编辑这个文件，添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Advanced\AnnounceToAllTrackers=true</span><br></pre></td></tr></table></figure>

<p>保存，重启 qb（不会的话就重启机器）</p>
<p>然后就成功了，此时 qb 在下 BT 任务时，就可以连接多个 tracker 了。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>下载</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>今天是520，本博客的生日</title>
    <url>/2018/05/today-is-520/</url>
    <content><![CDATA[<p>昨晚成功弄好了企业邮箱，这样以后就拥有了带自己域名的邮箱，而且随意注册，哈哈</p>
<p>下午成功的弄好了之前弄了好多次都没弄好的个人 wordpress 网站，虽然有点久，不过总算弄好了。</p>
<p>然而后来由于嫌弃 WordPress 太重，所以现在我是把文章都复制一份到 hexo 这里来了。时隔不到两个月。已经折腾了许多。</p>
<p>hexo 博客可以生成 HTML 文件，推到 GitHub pages 就可以建立博客，免费，也不需要自己的域名。</p>
<p>后来看到国内 Gitee 也可以，也存一份到 Gitee 上面，但是，随着审查的加强，Gitee 也只能放弃了。</p>
<p>如今我还弄了一个备份博客，放在我一台香港的服务器上面，当 GitHub pages 无法访问的时候，还有备份博客可以顶上。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将文件传输到另外一台 Linux 设备上</title>
    <url>/2020/09/transfer-in-linux/</url>
    <content><![CDATA[<p>在 Linux 中，如何将文件从当前机器，传输到另外一台机器呢？用 U 盘、移动硬盘、网盘？可以是可以，不过要是用的是服务器，而且要传输的文件数量比较多，这样操作起来就比较麻烦了。还有其它方法吗？</p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>或许用 <code>tar</code> 先将文件打包成一个压缩包，传输到另外一台机器后，再解压也是不错的选择。</p>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>也可以使用 <code>scp</code> 来传输。例如，我现在有两台机器</p>
<ul>
<li>A：192.168.1.4</li>
<li>B：192.168.1.5</li>
</ul>
<p>我先通过 <code>ssh</code> 连接到 A 这台机器上，我想把 <code>/tmp/a.txt</code> 这个文件，传输到 B 这台机器上的 <code>/tmp</code> 文件夹中，我可以用这个命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /tmp/a.txt root@192.168.1.5:/tmp</span><br></pre></td></tr></table></figure>

<p>这里我是用 root 这个身份登录 B 这台机器。而且用的是 <code>22</code> 这个默认端口，如果机器的 ssh 是使用其它端口，得用 -p 这个参数。变成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -p 6655 /tmp/a.txt root@192.168.1.5:/tmp</span><br></pre></td></tr></table></figure>

<p>如果传输的是文件夹，则需要加 <code>-r</code> 参数</p>
<h3 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h3><p>rsync 是更好的选择，它把整个文件夹复制过去时，可以同步其所有者和用户组，而不需要像 scp 那样复制后再自己用 <code>chown</code> 和 <code>chgrp</code> 去修改。同时它也会同步文件的属性，如创建日期这些信息过去。</p>
<p>使用方法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync -av /tmp/one root@192.168.1.5:/tmp</span><br></pre></td></tr></table></figure>

<p>便可以将当前机器的 <code>one</code> 这个文件或者文件夹，传输到 B 这台机器的 <code>/tmp</code> 文件夹下，而且其文件属性不会改变。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>BT挂机利器 transmission docker 安装法</title>
    <url>/2019/09/transmission-docker/</url>
    <content><![CDATA[<p>本文主要介绍如何在服务器上安装 docker，并安装 transmission 来下载 BT 种子任务。并且取回本地。</p>
<blockquote>
<p>要想进行下面的操作，需要有一个服务器，如果你没有的话， <a href="https://www.vultr.com/?ref=8161953-4F">点此链接注册充值 10 美元送 50 美元</a><br>送的 50美元只有一个月的有效期。（所以不要省，开贵点的机器吧）</p>
</blockquote>
<p>上次已经用 docker 安装了 qbittorrent，这是一个非常强大的 BT 软件，我个人是非常喜欢的。但是，它占的内存比较大，如果服务器还要做一些其它的工作，用这个可能就不太合适了。</p>
<p>于是， transmission 是一个不错的选择。它对硬件的配置要求非常的低，甚至在路由器上面都可以运行。</p>
<blockquote>
<p>这次使用一台纯净系统的服务器来装。</p>
</blockquote>
<h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<h3 id="安装-transmission"><a href="#安装-transmission" class="headerlink" title="安装 transmission"></a>安装 transmission</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name transmission \</span><br><span class="line">-v /home/tr/torrents:/to_download \</span><br><span class="line">-v /home/tr/download:/output \</span><br><span class="line">-p 9091:9091 \</span><br><span class="line">-p 51413:51413 \</span><br><span class="line">-e USERNAME=admin \</span><br><span class="line">-e PASSWORD=admin \</span><br><span class="line">jaymoulin/transmission</span><br></pre></td></tr></table></figure>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>输入 IP:9091 即可进入 transmission 的管理界面</p>
<blockquote>
<p>由于未知原因，现在创建好 transmission 这个容器之后，在输入用户名和密码那里，会一直被卡住，点登录之后还是让你再输入，完全无法进入……</p>
</blockquote>
<blockquote>
<p>这不是最重要的问题，问题是，我发现我输入账户密码后，无法进入界面。然而，我直接什么都不输入，按回车，却可以进入……<br>为了确认，我还专门有手机流量试一下，发现确实，什么都不输入就可以进入……所以看重安全的朋友还是不要用这个 transmission 容器了。</p>
</blockquote>
<p>下载后的文件是保存在 <code>/home/tr/download</code> 这个路径下的</p>
<p>想要取回本地，可以和上一篇文章一样，安装 caddy ，或者也可以使用 FTP 的方法。</p>
<h3 id="取回本地"><a href="#取回本地" class="headerlink" title="取回本地"></a>取回本地</h3><p>但是下载好后文件是在服务器里，我想把它取回到电脑或者手机。那么，开启一个 http 服务即可。这里推荐两个方案：</p>
<h2 id="一、h5ai"><a href="#一、h5ai" class="headerlink" title="一、h5ai"></a>一、h5ai</h2><p>一行命令即可，最简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8055:80 -v /home/tr/download:/h5ai --name h5ai ilemonrain/h5ai:full -d</span><br></pre></td></tr></table></figure>
<p>装好后在浏览器输入 <code>ip:8085</code> 就可以看到里面的内容</p>
<h2 id="二、caddy"><a href="#二、caddy" class="headerlink" title="二、caddy"></a>二、caddy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh</span><br></pre></td></tr></table></figure>
<p>写入配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;:80 &#123;  </span><br><span class="line"> root /home/tr</span><br><span class="line"> timeouts none  </span><br><span class="line"> gzip  </span><br><span class="line"> browse  </span><br><span class="line">&#125;&quot; &gt; /usr/local/caddy/Caddyfile</span><br></pre></td></tr></table></figure>
<p>启动 caddy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/caddy start</span><br></pre></td></tr></table></figure>
<p>开放服务器 80 端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw allow 80</span><br></pre></td></tr></table></figure>
<p>完成后就可以在浏览器里，输入 <code>IP地址</code> 来访问下载好的文件了。如果是 MP4 文件的话，还可以支持在线播放。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
        <tag>BT</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 vim 报错</title>
    <url>/2020/10/vim-error/</url>
    <content><![CDATA[<p>vim 是我在 Linux 上面最常用的编辑器，如果想要更好地使用它，需要对它进行一些设置。具体的方法是修改用户目录下的 <code>.vimrc</code> ，默认情况下需要自己创建这个文件。</p>
<p>在里面添加这些设置，下次打开 vim 就能看到效果。例如（ <code>&quot;</code> 是注释符号）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set nu &quot;显示行数</span><br><span class="line">set showmatch &quot;显示匹配的括号([&#123;和&#125;])</span><br><span class="line">set hlsearch &quot;高亮显示搜索的内容</span><br><span class="line">&quot;...</span><br></pre></td></tr></table></figure>

<p>但是我有很多台 Linux 设备，每一台都自己去写一遍配置就太累了吧。于是我想把这个文件放在 gitee 上（ GitHub 有时连接不太上），之后其它的机器，只需要把这个文件下载下来即可。当然我还想放一些其它的配置，所以我新建一个 dotfiles 仓库，在里面放一些配置文件。</p>
<p>我直接在 gitee 上面新建仓库，用 readme 初始化，然后新建文件，将 vim 配置复制粘贴进去。</p>
<p>此时我在新设备上，就不只是单纯下载 <code>.vimrc</code> 这个文件了，我把整个 dotfiles 仓库克隆的 <code>/home</code> 目录下。然后用软链接的方式，将用户目录下的 <code>.vimrc</code> 指向 <code>/home/dotfiles/.vimrc</code> </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /home/dotfiles/.vimrc ~/.vimrc</span><br></pre></td></tr></table></figure>

<p> 之后如果我这个仓库更新了，我直接在 <code>/home/dotfiles/</code> 这个目录下用 <code>git pull</code> 更新即可。</p>
<p>但是这时我发现用 vim 报错了，每次使用都会输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Error detected while processing /root/.vimrc:</span><br><span class="line">line    3:</span><br><span class="line">E474: Invalid argument: encoding=utf-8^M</span><br><span class="line">line    8:</span><br><span class="line">E488: Trailing characters: number^M</span><br><span class="line">line    9:</span><br><span class="line">E488: Trailing characters: wildmenu^M</span><br><span class="line">line   10:</span><br><span class="line">E488: Trailing characters: autoread^M</span><br><span class="line">line   11:</span><br><span class="line">E488: Trailing characters: autoindent^M</span><br><span class="line">line   13:</span><br><span class="line">E474: Invalid argument: tabstop=4^M</span><br><span class="line">line   14:</span><br><span class="line">E539: Illegal character &lt;^M&gt;: mouse=a^M</span><br><span class="line">line   15:</span><br><span class="line">E492: Not an editor command: ^M</span><br><span class="line">line   18:</span><br><span class="line">E15: Invalid expression: has(&quot;autocmd&quot;)                                                          ^M</span><br><span class="line">line   22:</span><br><span class="line">E171: Missing :endif</span><br><span class="line">Press ENTER or type command to continue</span><br></pre></td></tr></table></figure>

<p>看来关键错误在于 ^M ，Google 一下，很快就发现问题所在了。因为用 gitee 创建的文件，使用的 <code>fileformat</code> 是 dos ，为了验证这个，我后来又在 gitee 创建一个 <code>.alias</code> 文件，拉取到 Linux 后，用 vim 打开这个文件，后看到底部显示</p>
<blockquote>
<p>“.alias” [noeol] [dos] 3L, 68C</p>
</blockquote>
<p>也可以使用 <code>set ff?</code> 命令来查看，在默认状态下，输入 <code>:</code>，再输入这条命令即可看到。</p>
<p>知道问题所在了，解决方法也很简单，用 vim 打开这个文件，将 <code>fileformat</code> 改为 <code>unix</code> 即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set ff=unix</span><br></pre></td></tr></table></figure>

<p>保存，退出。</p>
<p>此时 vim 就可以正常读取配置文件了。但是这么搞也不是办法啊，每台设备都去转换一下格式？那也够累的。于是我尝试在 GitHub 上创建文件看看，结果发现直接在 GitHub 网页上面创建的文件，<code>fileformat</code>  默认就是 <code>unix</code> ，看来还是切换到 GitHub 吧。</p>
<p>项目：<a href="https://github.com/powersee/dotfiles.git">https://github.com/powersee/dotfiles.git</a></p>
<p><code>.alias</code>文件也可以像 <code>.vimrc</code> 那样软链接到用户目录下，也可以不用，在 <code>.zshrc</code> or <code>.bashrc</code> 中，添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /home/dotfiles/.alias</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<p>这个的作用是自定义一些命令，少打些字。例如用 d 代替 docker，用 di 代替 docker images 。</p>
<p>完</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 修改默认终端</title>
    <url>/2021/07/vscode-change-default-terminal/</url>
    <content><![CDATA[<p>vscode 默认新建终端的话，开启的是一个 cmd 的 shell，如何将它改为其它的呢？例如 powershell。</p>
<p>首先点击左下角的进入设置，也可以用快捷键 <code>ctrl + ,</code> </p>
<p>点击【功能】，【终端】，修改如下图两个地方即可。</p>
<p><img src="/img/2021/vscode-settings.jpg" alt="vscode-settings"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>荣耀平板V7Pro 与华为 matepad paper USB 调试开启教程</title>
    <url>/2022/04/usb-debugging-honor-and-huawei/</url>
    <content><![CDATA[<p>手头上有一台荣耀的平板，以及一台华为的墨水屏平板，我发现它们想要和其它的设备一样开启 USB 调试，然后在电脑上使用 adb 来控制，似乎没那么容易。本文记录我折腾的过程，方便有同样需求的小伙伴。</p>
<h3 id="荣耀"><a href="#荣耀" class="headerlink" title="荣耀"></a>荣耀</h3><p>首先到【设置】【关于平板电脑】里，连续点击 5 次【版本号】，可以开启开发者模式。</p>
<p>然后到【系统和更新】【开发人员选项】打开【usb调试】以及 【“仅充电”模式下允许 ADB 调试】</p>
<p>最后用数据线连接平板与 windows 电脑，将会发现，它不按套路出牌，执行 <code>adb devices</code> 后并不能显示设备。</p>
<p><img src="/img/2022/2022-04-12_13-11-26.jpg" alt="2022-04-12_13-11-26"></p>
<p>打开 Android studio 也一样识别不到</p>
<p><img src="/img/2022/2022-04-12_13-16-38.jpg" alt="2022-04-12_13-16-38"></p>
<p>怎么搞呢？那么试试装一下此时显示在【此电脑】里面，多出来的那个盘符里的手机助理吧。装好后我发现可以连接了，而且这个过程中，平板上会弹出提示，它这个叫 HDB 验证。。。而平时我们在其他安卓手机、平板上的叫 ADB 验证。</p>
<p>那么它们是否都一样，只是荣耀这里改个名字而已呢？并不是，HDB 连接好后，可以通过电脑的手机助理来管理平板上的文件，应用等，好像还可以刷机。</p>
<p>但是这个时候如果我们再执行 <code>adb devices</code> ，会出现这个</p>
<p><img src="/img/2022/image-20220412134348799.png" alt="image-20220412134348799"></p>
<p>unauthorized ，adb 这边还是没有授权，依然没法使用 Android studio</p>
<p>我网上搜，别人有说手机上的怎么操作，需要在拨号界面输入 <code>*#*#2846579#*#*</code>，进入工程菜单</p>
<p>但问题是，我这是平板，没有拨号界面……</p>
<p>然后继续找，最后找到了。WIFI版平板进入计算器，横屏（科学计算器）模式下输入()()2846579()()即可进入工程模式。</p>
<p>来源：<a href="https://club.huawei.com/forum.php?mod=viewthread&tid=30717452&extra=page=1">花粉俱乐部</a></p>
<p>不过按照教程，应该把【USB端口设置】从 【Hisuite模式】改为 【生产模式】，但是我这台平板好像改不了，只能改为【默认模式】。不过好像不影响开启 adb，反正最后是成功了。</p>
<p><img src="/img/2022/2022-04-12_13-23-13.jpg" alt="2022-04-12_13-23-13"></p>
<p><img src="/img/2022/image-20220412134858390.png" alt="image-20220412134858390"></p>
<p>看来手机助理这个软件是完全没有必要安装的，关键点在于进入工程菜单。</p>
<h3 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h3><p>操作上基本一样。</p>
<p>点击版本号 5 次，打开开发者选项</p>
<p><img src="/img/2022/image-20220421153431809.png" alt="image-20220421153431809"></p>
<p>然后在【系统和更新】【开发人员选项】中打开 USB 调试</p>
<p><img src="/img/2022/image-20220421153531693.png" alt="image-20220421153531693"></p>
<p>到应用菜单里打开【计算机】，点击右上角进入【科学计算器】模式，输入 <code>()()2846579()()</code> 即可进入工程模式。</p>
<p><img src="/img/2022/image-20220421153730565.png" alt="image-20220421153730565"></p>
<p>此时在工程菜单里，点击【后台设置】【USB端口设置】，选择【生产模式】即可。</p>
<p><img src="/img/2022/image-20220421154105540.png" alt="image-20220421154105540"></p>
<p><img src="/img/2022/image-20220421154145072.png" alt="image-20220421154145072"></p>
<p>在 Android studio 里面也可以识别到了</p>
<p><img src="/img/2022/image-20220421154252687.png" alt="image-20220421154252687"></p>
]]></content>
      <tags>
        <tag>手机</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>visionfive 串口调试与编译内核</title>
    <url>/2022/04/visionfive-ttl-linux/</url>
    <content><![CDATA[<h3 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h3><p>开发板除了通过 HDMI 连接显示器，然后通过 usb 键盘来控制之外，还可以通过串口与电脑进行连接，将它的输出信息显示在电脑上，并且还可以直接用电脑键盘来控制。<br>想要进行这样的操作，需要买一个 USB 转 TTL， 我使用的是 CH340G，拼多多上面 6.3 包邮买的，平时也可以用来给路由器或者机顶盒刷机。</p>
<p><img src="/img/2022/ch340.jpg" alt="ch340"></p>
<p>另外我还有一个 CH341A，这个看起来就比较高级一点，两年前淘宝 18 块买的。</p>
<p><img src="/img/2022/image-20220411135344552.png" alt="image-20220411135344552"></p>
<p>不过只是用来调试开发板的话，它们用起来都一样的，连接到电脑的 usb 口之后，安装店家提供的驱动，顺利的话就可以在【设备管理器】的【端口】看到了。我们需要记住的是它对应的 com 口是多少，例如我图中的 12 和 13</p>
<p><img src="/img/2022/image-20220411132651192.png" alt="image-20220411132651192"></p>
<p>注：设备管理器可以通过点击，开始菜单旁边的放大镜，在里面搜索来打开。</p>
<p><img src="/img/2022/image-20220411132635593.png" alt="image-20220411132635593"></p>
<p>接下来需要它与开发板进行连接，这时就需要使用杜邦线，这个一般购买模块时都会赠送的，如果没有的话，也可以自己购买。拼多多或者淘宝搜【杜邦线母对母】就可以找到相对应的商品（个人建议购买比较长一点的，我之前用买模块送的杜邦线，只有十几厘米，有时候不太方面，所以后来我重新买了一排30厘米的）</p>
<p>连接的话只需要 3 根线，接序是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GND --- GND</span><br><span class="line">TX ---- RX</span><br><span class="line">RX ---- TX</span><br></pre></td></tr></table></figure>

<p><img src="/img/2022/image-20220411135551131.jpg" alt="image-20220411135551131"></p>
<p>按照这样连接好后，将模块插到电脑上，确认在设备管理器里可以看到。</p>
<p>然后我们还需要软件，才可以显示模块输出的信息。可以选择的软件非常多，我个人用过的有 putty、友善串口调试助手、以及我个人最常用的 xshell。我个人比较推荐 xshell，平时可以用来 ssh 连接开发板，需要串口调试时也可以用它。而且 xshell 个人在家庭或者学校使用的话，是完全免费的，到它的官网 <a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a> 填写邮箱后，收到邮件就可以下载。</p>
<p>下载安装后，进行如下操作</p>
<p><img src="/img/2022/image-20220411141221081.png" alt="image-20220411141221081"></p>
<p><img src="/img/2022/image-20220411141516299.png" alt="image-20220411141516299"></p>
<p>顺利的话应该会看到这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connecting to COM12...</span><br><span class="line">Connected.</span><br></pre></td></tr></table></figure>

<p>此时就可以给开发板接通电源开机了。然后我们可以看到 bootloader 的加载信息，以及不断出现的系统启动信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bootloader version:211102-0b86f96</span><br><span class="line">ddr 0x00000000, 1M test</span><br><span class="line">ddr 0x00100000, 2M test</span><br><span class="line">DDR clk 2133M,Version: 211102-d086aee                                                  </span><br><span class="line">0 crc flash: 5595e732, crc ddr: 5595e732</span><br><span class="line">crc check PASSED</span><br><span class="line"></span><br><span class="line">bootloader.</span><br><span class="line"></span><br><span class="line">OpenSBI v1.0</span><br><span class="line">   ____                    _____ ____ _____</span><br><span class="line">  / __ \                  / ____|  _ \_   _|</span><br><span class="line"> | |  | |_ __   ___ _ __ | (___ | |_) || |</span><br><span class="line"> | |  | | &#x27;_ \ / _ \ &#x27;_ \ \___ \|  _ &lt; | |</span><br><span class="line"> | |__| | |_) |  __/ | | |____) | |_) || |_</span><br><span class="line">  \____/| .__/ \___|_| |_|_____/|____/_____|</span><br><span class="line">        | |</span><br><span class="line">        |_|</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>等到开机完成，会出现这样的界面，在这里我们可以用电脑键盘输入用户名和密码来进行登录。</p>
<p><img src="/img/2022/image-20220411141936085.png" alt="image-20220411141936085"></p>
<h3 id="编译-Linux-内核"><a href="#编译-Linux-内核" class="headerlink" title="编译 Linux 内核"></a>编译 Linux 内核</h3><p>目前官方提供的 Fedora 镜像是</p>
<p><strong>2021-December-26:</strong> <a href="https://fedora.starfivetech.com/pub/downloads/VisionFive-release/Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw.zst">Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw.zst</a></p>
<p>使用的内核是 5.15，如果我们想要使用更新的内核，可以选择自己编译。</p>
<p>首先下载源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/starfive-tech/linux.git</span><br></pre></td></tr></table></figure>

<p>这时就得分情况了，我们是要在哪里进行编译呢？如果是在 x86 架构的机器编译，需要通过交叉编译。因为我们的开发板是 risc-v 架构的，如果直接在开发板编译就不需要。这两种我都又尝试过，分别讲一下。</p>
<h4 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h4><p>按照 GitHub 上的文档操作即可。</p>
<p><a href="https://github.com/starfive-tech/linux">https://github.com/starfive-tech/linux</a></p>
<p>先下载源代码，之后安装编译所需的工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Debian/Ubuntu</span><br><span class="line">sudo apt-get install libncurses-dev libssl-dev bc flex bison make gcc gcc-riscv64-linux-gnu</span><br><span class="line"># Fedora</span><br><span class="line">sudo dnf install ncurses-devel openssl openssl-devel bc flex bison make gcc gcc-riscv64-linux-gnu</span><br><span class="line"># Archlinux</span><br><span class="line">sudo pacman -S --needed ncurses openssl bc flex bison make gcc riscv64-linux-gnu-gcc</span><br></pre></td></tr></table></figure>

<p>配置与编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -j8 ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- visionfive_defconfig</span><br><span class="line">make -j8 ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu- nconfig</span><br><span class="line">make -j8 ARCH=riscv CROSS_COMPILE=riscv64-linux-gnu-</span><br></pre></td></tr></table></figure>

<p>我使用的处理器是 i5 8259U，四核八线程，第一次编译 3、4分钟就搞定了。</p>
<h4 id="原生编译"><a href="#原生编译" class="headerlink" title="原生编译"></a>原生编译</h4><p>同样下载源代码到设备上</p>
<p>安装编译所需的工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dnf install ncurses-devel openssl openssl-devel bc flex bison make gcc</span><br></pre></td></tr></table></figure>

<p>配置与编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make -j2 visionfive_defconfig</span><br><span class="line">make -j2 nconfig</span><br><span class="line">make -j2</span><br></pre></td></tr></table></figure>

<p>由于板子是双核双线程的，所以这里就改为 -j2 了。耗费的时间是两个半小时左右。</p>
<p>不管是交叉编译还是原生编译，编译完成我们都可以得到内核 <code>arch/riscv/boot/Image</code> 以及 dtb <code>arch/riscv/boot/dts/starfive/jh7100-starfive-visionfive-v1.dtb</code></p>
<p>那么要怎么使用它们呢？</p>
<p>我个人是这样操作的，在 &#x2F;boot 里新建一个文件夹，然后将这两个文件放到里面。我现在新编译的内核版本是 5.18，所以我新建一个 518 的文件夹，再将内核与 dtb 复制进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /boot/518</span><br><span class="line">cp arch/riscv/boot/Image /boot/518/</span><br><span class="line">cp arch/riscv/boot/dts/starfive/jh7100-starfive-visionfive-v1.dtb /boot/518/</span><br></pre></td></tr></table></figure>

<p>然后修改 <code>/boot/grub.cfg</code> ，在里面添加多一个 menuentry</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menuentry &#x27;5.18&#x27; &#123;</span><br><span class="line">    linux /518/Image earlycon console=ttyS0,115200n8 stmmac.chain_mode=1 root=/dd</span><br><span class="line">ev/mmcblk0p4 rootwait</span><br><span class="line">    devicetree /518/jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后这个文件前面 22 行的内容是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set default=0</span><br><span class="line">set timeout_style=menu</span><br><span class="line">set timeout=2</span><br><span class="line"></span><br><span class="line">set debug=&quot;linux,loader,mm&quot;</span><br><span class="line">set term=&quot;vt100&quot;</span><br><span class="line"></span><br><span class="line">menuentry &#x27;5.18&#x27; &#123;</span><br><span class="line">    linux /518/Image earlycon console=ttyS0,115200n8 stmmac.chain_mode=1 root=/dev/mmcblk0p4 rootwait</span><br><span class="line">    devicetree /518/jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menuentry &#x27;Fedora vmlinux-5.17.0&#x27; &#123;</span><br><span class="line">    linux /Image earlycon console=ttyS0,115200n8 stmmac.chain_mode=1 root=/dev/mmcblk0p4 rootwait</span><br><span class="line">    devicetree /jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menuentry &#x27;Fedora vmlinux-5.15.10+ visionfive&#x27; &#123;</span><br><span class="line">    linux /vmlinuz-5.15.10+ ro root=UUID=59fcd098-2f22-441a-ba45-4f7185baf23f rhgb console=tty0 console=ttyS0,115200 earlycon rootwait stmmaceth=chain_mode:1 selinux=0 LANG=en_US.UTF-8</span><br><span class="line">    devicetree /dtbs/5.15.10+/starfive/jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">        initrd /initramfs-5.15.10+.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面的 5.17 也是我之前自己添加的。此时重启机器</p>
<p>在启动过程中会出现一个选择菜单界面</p>
<p><img src="/img/2022/image-20220411151418548.png" alt="image-20220411151418548"></p>
<p>可以按上下键来选择不同的内核版本，如果不手动选的话，就会自动加载第一个。</p>
<p>进入系统后输入 <code>uname -sr</code> 可以查看当前的内核版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$uname -sr   </span><br><span class="line">Linux 5.18.0-rc1-visionfive-g7ff84520cb68</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>玩客云导航固件使用说明</title>
    <url>/2021/01/wankeyun-server/</url>
    <content><![CDATA[<h3 id="玩客云乱七八糟的坑"><a href="#玩客云乱七八糟的坑" class="headerlink" title="玩客云乱七八糟的坑"></a>玩客云乱七八糟的坑</h3><p>搞了一个腾讯文档，懒得复制过来了，已经设置了任何人都可以访问，可以在里面看看有没有适合自己的解决方案。</p>
<p><a href="https://docs.qq.com/doc/DWkhNSmRuQld0UEd0">https://docs.qq.com/doc/DWkhNSmRuQld0UEd0</a></p>
<h3 id="为什么我的主板和你不一样？"><a href="#为什么我的主板和你不一样？" class="headerlink" title="为什么我的主板和你不一样？"></a>为什么我的主板和你不一样？</h3><p>有些小伙伴看了视频，非常激动地跑去买玩客云，买来拆开后却发现，怎么和视频里的不一样呢？难道是被坑了？</p>
<p>其实不用慌，这是因为玩客云有分两版，我视频里展示的是老版，它的短接点是在主板的背面。</p>
<p><img src="/img/2020/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%9F%AD%E6%8E%A5.jpg" alt="玩客云短接"></p>
<p>另外还有一款新版，短接点是在正面。</p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%96%B0%E7%89%88%E7%9F%AD%E6%8E%A5%E7%82%B9.jpg" alt="玩客云新版短接点"></p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%96%B0%E7%89%88%E7%9F%AD%E6%8E%A5%E7%82%B945.jpg" alt="玩客云新版短接点45"></p>
<p>刷机方式一样的。</p>
<h3 id="为什么没有进入-U-盘中的系统？"><a href="#为什么没有进入-U-盘中的系统？" class="headerlink" title="为什么没有进入 U 盘中的系统？"></a>为什么没有进入 U 盘中的系统？</h3><p>如果你发现 led 灯每隔几秒就闪一下，那可能是你 U 盘没有插在靠近网口的 USB 口。</p>
<p><img src="/img/2021/wky-usb-1613448634572.png" alt="wky-usb"></p>
<p>如果这样还不行，你可以尝试换一个 U 盘，如果有内存卡加读卡器的话，也可以试试。</p>
<h3 id="总结一下玩客云的优劣"><a href="#总结一下玩客云的优劣" class="headerlink" title="总结一下玩客云的优劣"></a>总结一下玩客云的优劣</h3><p>优点</p>
<ul>
<li>便宜</li>
<li>省电，之前测试过功耗只有 1.5 w 左右</li>
<li>静音，没有风扇，自然不会有噪音</li>
</ul>
<p>缺点</p>
<ul>
<li>性能较弱</li>
<li>cpu 是 32 位的，能用的 docker 镜像有限</li>
<li>usb 2.0 速度慢</li>
</ul>
<p>由于这次视频的播放量还可以，很多没有关注我的观众在评论区里留言，说 N1 、树莓派这些比玩客云强。我当然知道这些比玩客云强啊，因为大多数矿渣设备我都有买，有兴趣的朋友可以去翻翻我以前的视频。</p>
<p>其实不用看参数也能知道 N1 、树莓派 这些比玩客云强，看价格就行呗。N1 现在应该要一百多，树莓派得两百多。所以没什么可比性嘛。</p>
<hr>
<h3 id="固件相关"><a href="#固件相关" class="headerlink" title="固件相关"></a>固件相关</h3><p>2021-01-25</p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%AF%BC%E8%88%AA.jpg" alt="玩客云导航"></p>
<p>固件和刷机工具下载链接</p>
<p>链接：<a href="https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA">https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA</a><br>提取码：6666 </p>
<p>访问导航：直接在浏览器输入 onecloud&#x2F; 或者输入玩客云的 ip 地址。</p>
<hr>
<p>文件管理器：账号密码都是 admin</p>
<p>portainer : 账号 admin 密码 powersee</p>
<p>transmission : 账号密码都是 admin</p>
<p>qbittorrent : 账号 admin 密码 adminadmin</p>
<p>ssh ：账号 root 密码 powersee233</p>
<hr>
<p>qiandao 这个容器并没有设置开机启动，如果想启动它，可以在 portainer 中启动，或者通过 ssh 使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start qiandao</span><br></pre></td></tr></table></figure>

<p>来启动。</p>
<p>这个自动签到平台我以前也有做过视频，有兴趣可以去翻翻看。</p>
<hr>
<h3 id="关于-SD-卡"><a href="#关于-SD-卡" class="headerlink" title="关于 SD 卡"></a>关于 SD 卡</h3><p>挂载 SD 卡有一点需要注意，有些卡套可能会有问题。插上去后，可以读取到 disk ，但是读取不到 part ，所以没法挂载。质量好的卡套，应该是可以显示 disk 和 part 的，如下图所示。</p>
<p><img src="/img/2021/%E6%8C%82%E8%BD%BDsd%E5%8D%A1.png" alt="挂载sd卡"></p>
<h3 id="如何挂载硬盘"><a href="#如何挂载硬盘" class="headerlink" title="如何挂载硬盘"></a>如何挂载硬盘</h3><p>其实视频里有讲了，先输入 <code>lsblk</code> 查看一下硬盘连接上没，一般会显示 sda 或者 sdb 这样。</p>
<p>假设显示的是 sda ，那么它下面应该有个 sda1 这个才对。这个 sda1 指的是分区，就像你在电脑上，你添加了一块硬盘，你可能把分为 D、E、F　三个盘。但是它都是属于同一块物理硬盘。而这里的 sda 就是指物理硬盘，你不能挂载它，只能挂载它里面的分区。</p>
<p>所以你应该使用的命令是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br><span class="line"># 或者</span><br><span class="line">mount /dev/sdb1 /mnt</span><br></pre></td></tr></table></figure>

<hr>
<p>系统装有 python3 和 pip3，同时我还安装了一个命令行的文件管理器 ranger，在终端输入 <code>ranger</code> 就可以打开这样的界面。</p>
<p><img src="/img/2021/ranger.jpg" alt="ranger"></p>
<p>按 q 退出</p>
<hr>
<h3 id="如何判断有没有刷成功"><a href="#如何判断有没有刷成功" class="headerlink" title="如何判断有没有刷成功"></a>如何判断有没有刷成功</h3><p>其实可以用通过玩客云的 hdmi 来判断，你可以把玩客云连接电视或者显示器。</p>
<p>当你刷好底层包之后，不插U盘，画面会显示这个几秒</p>
<p><img src="/img/2021/%E7%8E%A9%E5%AE%A2%E4%BA%91mxq.png" alt="玩客云mxq"></p>
<p>然后就没信号几秒，再显示这个画面几秒，再没信号……会这样一直重复。</p>
<p>如果你插上U盘，并且玩客云成功进入 U 盘里的系统，画面就会停留在上面这个图片这里，不会变化了。所以你可以通过这种方法来判断有没有成功进入 U 盘系统。</p>
<hr>
<h3 id="一直线刷失败？"><a href="#一直线刷失败？" class="headerlink" title="一直线刷失败？"></a>一直线刷失败？</h3><p>症状是什么呢？无法刷入 snail 底层包，也无法刷入 emmc 直刷包，线刷最后永远报错。这里有一张网友线刷失败的图片。</p>
<p><img src="/img/2021/wky-fail1.png" alt="wky-fail1"></p>
<p>里面的结果这一列，有好多个 5004。然后最近我收了一台有问题的玩客云，下午线刷，发现也是一堆 5004 的报错。所以我估计，可能报 5004 的，应该就是 emmc 有坏块，毕竟症状一样。</p>
<p>到目前为止，我见识过 4 台设备这样，我自己手上就有一台。唯有一个底层包可以刷，是一个 700多K的 img 包，我将它上传到了网盘。<a href="http://veger.ys168.com/">http://veger.ys168.com/</a> </p>
<p><img src="/img/2021/wky-pan1.png" alt="wky-pan1"></p>
<p>使用这个底层包，可以线刷进去。</p>
<p><img src="/img/2021/wky-%E7%BA%BF%E5%88%B7%E6%88%90%E5%8A%9F.png" alt="wky-线刷成功"></p>
<p>刷这个 700 多k 的底层包，开机是亮绿灯。由于 emmc 损坏，因此系统只能装在 U 盘里面使用。</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ol>
<li><p><a href="https://www.right.com.cn/forum/thread-4057492-1-1.html">https://www.right.com.cn/forum/thread-4057492-1-1.html</a></p>
</li>
<li><p><a href="https://github.com/AragonSnow/qiandao">https://github.com/AragonSnow/qiandao</a></p>
</li>
<li><p><a href="https://github.com/bituplink/OneHtmlNav">https://github.com/bituplink/OneHtmlNav</a></p>
</li>
<li><p><a href="https://www.right.com.cn/forum/thread-4058499-1-1.html">https://www.right.com.cn/forum/thread-4058499-1-1.html</a></p>
</li>
<li><p><a href="https://www.right.com.cn/FORUM/thread-4066518-1-1.html">https://www.right.com.cn/FORUM/thread-4066518-1-1.html</a></p>
</li>
</ol>
<h3 id="下期内容"><a href="#下期内容" class="headerlink" title="下期内容"></a>下期内容</h3><p>下一个版本会添加的内容</p>
<p>1、网页终端</p>
<p><img src="/img/2021/wky-ttyd.png" alt="wky-ttyd"></p>
<p>2、portainer 中文化</p>
<p><img src="/img/2021/portainer%E6%B1%89%E5%8C%96.png" alt="portainer汉化"></p>
<p>3、添加控制 led 功能</p>
<p>默认情况下，开机后会一直亮蓝灯。其实没什么用，我打算把这灯利用起来，所以设置了开机进入系统后，灯光会自动关闭。然后这灯就可以跑脚本的时候用。例如用 python 脚本来控制它，让它亮绿灯之类的。以后再说吧。</p>
<p><img src="/img/2021/wky-green.jpg" alt="wky-green"></p>
<p>4、aria2</p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>visionfive 开发板通过 gpio 控制 led 灯</title>
    <url>/2022/04/visionfive-gpio-led/</url>
    <content><![CDATA[<p>visionfive 是赛昉科技推出的一款开发板，使用的处理器是他们自家研发的【惊鸿 7100】（JH7100），这是一颗 risc-v 架构的处理器，双核 U74，U74 对标的是 ARM 的 Cortex-A55 。</p>
<p><img src="/img/2022/visionfive1.jpg" alt="visionfive1"></p>
<h3 id="写入镜像"><a href="#写入镜像" class="headerlink" title="写入镜像"></a>写入镜像</h3><p>这块板子的系统运行和树莓派一样，需要先将系统镜像写入内存卡，再插到板子上来运行。目前官方提供的只有 Fedora 这个发行版，可以在 GitHub 上找到下载链接。</p>
<p><a href="https://github.com/starfive-tech/Fedora_on_StarFive">https://github.com/starfive-tech/Fedora_on_StarFive</a></p>
<p>下载完是一个特殊的压缩格式，zst，我搜了一下</p>
<blockquote>
<p>当前这种 ZST 格式是一种 压缩文件 ，是由 ZStandard 研发，作为一种 ZStandard压缩文件使用，此文件流行程度是 50 分（0-100满分）。</p>
</blockquote>
<p>还得使用专门的工具才能解压，稍微麻烦了点。工具在这里有提供</p>
<p><a href="https://rvspace.org/en/Product/VisionFive/Technical_Documents/VisionFive_Single_Board_Computer_Quick_Start_Guide">https://rvspace.org/en/Product/VisionFive/Technical_Documents/VisionFive_Single_Board_Computer_Quick_Start_Guide</a></p>
<p>点击网页左侧的 <strong>Flashing Fedora OS to a Micro-SD Card</strong> 可以快速达到。</p>
<p><img src="/img/2022/Snipaste_22-04-11_09-21-44.jpg" alt="Snipaste_22-04-11_09-21-44"></p>
<p>我是在 win10 进行操作的，将下载好的解压工具，从压缩包里解压出来，和 zst 文件放在一起。</p>
<p><img src="/img/2022/2022-04-11_09-57-19.jpg" alt="2022-04-11_09-57-19"></p>
<p>此时在这个文件夹里的空白处，一只手按住键盘上的 shift 键，另一只手按一下鼠标的右键，在此处打开 powershell，就可以快速在当前文件夹打开一个命令行窗口。（此处我的 powershell 是自己升级过的，系统自带的是没有带 preview 的。）</p>
<p><img src="/img/2022/2022-04-11_09-58-00.jpg" alt="2022-04-11_09-58-00"></p>
<p>执行这条命令就可以解压了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./zstd.exe -d Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw\.zst -o Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw</span><br></pre></td></tr></table></figure>

<p>解压出来的文件差不多 13G，可以使用写盘工具将它写入内存卡中，例如 etcher。</p>
<h3 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h3><p>之后将内存卡插入开发板，使用 HDMI 线连接显示器，通电开机，便可进入 Fedora 了。</p>
<p>默认的用户名是 riscv</p>
<p>密码是 starfive</p>
<p>这台设备的桌面体验，我感觉还是比较差的，毕竟没有 GPU，而已本身也只是双核而已，所以桌面体验会有一些卡顿。很快我就放弃用鼠标来控制它了，而是选择在电脑上通过 ssh 来控制它。</p>
<p><img src="/img/2022/visionfive-neofetch.jpg" alt="visionfive-neofetch"></p>
<h3 id="如何通过-gpio-控制-LED-灯？"><a href="#如何通过-gpio-控制-LED-灯？" class="headerlink" title="如何通过 gpio 控制 LED 灯？"></a>如何通过 gpio 控制 LED 灯？</h3><p>通过这个网页，我们可以了解到这块板子的 GPIO 信息</p>
<p><a href="https://rvspace.org/en/Product/General/StarFive_40-Pin_GPIO_Header_User_Guide">https://rvspace.org/en/Product/General/StarFive_40-Pin_GPIO_Header_User_Guide</a></p>
<p><img src="/img/2022/visionfive-gpio.jpg" alt="img"></p>
<p>准备一颗 LED 灯，一头连接 34 号的 GND，一头连接 40 号的 GPIO0</p>
<p><img src="/img/2022/LED-off.jpg" alt="LED-off"></p>
<p>在终端里进行如下的操作（需要 root 身份来执行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /sys/class/gpio</span><br><span class="line">echo 448 &gt; export</span><br><span class="line">cd gpio448</span><br><span class="line">echo out &gt; direction</span><br><span class="line">echo 1 &gt; value</span><br></pre></td></tr></table></figure>

<p>这样便可以点亮 LED 灯</p>
<p><img src="/img/2022/LED-on.jpg" alt="LED-on"></p>
<p>如果想熄灭它，只需执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; value</span><br></pre></td></tr></table></figure>

<p>官方文档里的这个表格非常重要，刚才我们控制 GPIO0，操作的是 448，如果现在我们想控制 GPIO4，从表格可以查到是 452，那么只需将刚才的 448 换成 452 即可让 GPIO4 输出高电平。</p>
<p><img src="/img/2022/gpio%E8%A1%A8%E6%88%AA%E5%9B%BE.jpg" alt="gpio"></p>
<p>对此我写了一个 Python 脚本，作用是监控哔哩哔哩上面是否有人给我发私信，也就是我是否有未读消息，如果有的话，则点亮 LED 灯。而当我看完消息后，脚本检测到目前没有未读消息了，则会将 LED 灯熄灭。</p>
<p>脚本已放在 GitHub 上面，有兴趣的朋友可以参考一下。</p>
<p><a href="https://github.com/powersee/bilibili_unread/blob/master/bili-for-visionfive.py">https://github.com/powersee/bilibili_unread/blob/master/bili-for-visionfive.py</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>沦为废铁的玩客云还能拿来干什么？</title>
    <url>/2020/11/wankeyun-flash/</url>
    <content><![CDATA[<h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>玩客云原本的系统是 Android ，想要刷成 Linux 需要使用双公头 USB 线连接电脑，进行线刷。</p>
<p>而且似乎还不是直接连接就能刷，需要拆机，短接主板上的两个点。</p>
<p><img src="/img/2020/%E7%8E%A9%E5%AE%A2%E4%BA%91%E7%9F%AD%E6%8E%A5.jpg" alt="玩客云短接"></p>
<p>我的刷机步骤是先连接双公头 USB 线，然后用镊子按住主板上的两个短接点，电脑打开 USB Burning Tool ，然后玩客云通电。</p>
<p><img src="/img/2020/%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7%E6%9C%BA%E6%A8%A1%E5%BC%8F.jpg" alt="玩客云刷机模式"></p>
<p>虽然网上也能找到可以直接线刷的 armbian 固件，不过我个人还是喜欢先线刷 s805_flash_snail.img 这个镜像。刷入这个之后，玩客云便可以从 U 盘启动系统，因此只要你有多个 U 盘，便可以拥有多个系统。更多的系统镜像可以到 <a href="https://www.right.com.cn/forum/forum-175-1.html">恩山</a> 上找。</p>
<p>我目前使用的固件是 <a href="https://www.right.com.cn/forum/thread-4057492-1-1.html">Armbian 20.10 Buster with Linux 5.9.0-rc7 hdmi docker可用</a> ，先用 U 盘运行，没什么问题之后，再执行 <code>/boot/install/install.sh</code> 将固件写入 emmc 。</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>既然刷入了 armbian 了，那它可以和 N1 一样来使用吗？并不能，因为玩客云的 cpu 是 32 位的 ，能用的 docker 镜像相比于 N1 这种 64 位的，会少很多。</p>
<p>在 docker hub 上面搜镜像时，可以注意一下那些有标 arm 的才可以用。</p>
<p>玩客云安装 docker 也比较简单，可以直接在终端中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">armbian-config</span><br></pre></td></tr></table></figure>

<p>来安装 docker 、samba、transmission 等应用。</p>
<p>不过有时候好像会装不了，可以试一下用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install docker.io</span><br></pre></td></tr></table></figure>

<p>想知道有没有安装成功，可以用这个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p>我在玩客云上面尝试了这些 docker 镜像。</p>
<h3 id="1、博客——typecho"><a href="#1、博客——typecho" class="headerlink" title="1、博客——typecho"></a>1、博客——typecho</h3><p>typecho 是一款国产的 php 博客系统，开源免费，占用资源少，我个人挺喜欢的。不过之前灯大制作的 typecho 镜像不能用在玩客云上，我重新找了一个。</p>
<p>建议自己建立一个文件夹，用来存放 typecho 的相关文件，方便管理以及以后迁移。我建立在 &#x2F;root&#x2F;tyepcho</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /root/tyepcho</span><br></pre></td></tr></table></figure>

<p>然后便可以建立容器了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name typecho -v &quot;/root/tyepcho&quot;:/var/www/html yangxuan8282/typecho:php-arm</span><br></pre></td></tr></table></figure>

<p>此时便可以通过 ip 访问在玩客云里面建立好的博客。</p>
<h3 id="2、aria2"><a href="#2、aria2" class="headerlink" title="2、aria2"></a>2、aria2</h3><p>这是一个多线程的下载器，也是开源免费的，我们可以使用它来下载一些东西。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name aria2-pro \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    --log-opt max-size=1m \</span><br><span class="line">    --network host \</span><br><span class="line">    -e PUID=$UID \</span><br><span class="line">    -e PGID=$GID \</span><br><span class="line">    -e RPC_SECRET=12345 \</span><br><span class="line">    -e RPC_PORT=6800 \</span><br><span class="line">    -e LISTEN_PORT=6888 \</span><br><span class="line">    -v ~/aria2-config:/config \</span><br><span class="line">    -v /home/powersee:/downloads \</span><br><span class="line">    p3terx/aria2-pro</span><br></pre></td></tr></table></figure>

<p>我将下载的文件存放在 <code>/home/powersee</code> 中，之后只需要将这个文件夹通过 smb 共享出来，便可以在电脑、手机上面访问里面的内容了。</p>
<p>此时 aria2 已经在运行了，但是默认情况下，只能使用命令行的方式控制它，这种比较麻烦了。大多数人还是使用网页的来控制的。使用人数比较多是 AriaNg<strong>（如果有打算装浏览器插件的，这部分可以不看）</strong></p>
<p><a href="https://github.com/mayswind/AriaNg">https://github.com/mayswind/AriaNg</a></p>
<p>官方有提供 demo</p>
<p><a href="http://ariang.mayswind.net/latest">http://ariang.mayswind.net/latest</a></p>
<p>访问后添加自己的 aria2 rpc 即可控制 aria2 。其实这个控制面板就是一个 html 网页，可以自己把它下载到电脑上，双击打开就可以。在 GitHub 的 release 中可以下载，同时我也把它上传到网盘里面，方便无法从 GitHub 下载的朋友。（在【不仅限于盒子】——【玩客云】）里面。</p>
<p><strong>浏览器插件</strong></p>
<p>Aria2 还可以接管浏览器的下载，例如下载网盘的内容，这个以前百度网盘还可以轻松突破限速的时候，Aria2 经常被用在这方面。</p>
<p>用 chrome 的可以到商店下载 Aria2 for chrome 这个扩展插件。</p>
<p>用新版 Edge 的，可以到商店下载 Aria2 for edge</p>
<p><a href="https://microsoftedge.microsoft.com/addons/detail/aria2-for-edge/jjfgljkjddpcpfapejfkelkbjbehagbh?hl=zh-CN">https://microsoftedge.microsoft.com/addons/detail/aria2-for-edge/jjfgljkjddpcpfapejfkelkbjbehagbh?hl=zh-CN</a></p>
<p>使用这个插件，可以让平时用浏览器下载的文件，发送到 aria2 下载，很 idm 很像，都是多线程下载工具，很多时候可以让下载速度快一些。</p>
<p>但是 idm 只能在 windows 上面使用，而 aira2 大多数平台都可以安装，这样有一个好处，就是假如我的 aria2 是安装在 LInux 服务器上的，例如 N1 、我家云、贝壳云、玩客云 这样的设备上面，那么当我下载速度非常慢的资源，例如没有开会员的百度网盘文件，或者城通网盘文件。我可以将下载发送到 Linux 服务器后，电脑就可以关机了，让任务在 Linux 服务器上面慢慢下载就行。</p>
<h3 id="3、verysync"><a href="#3、verysync" class="headerlink" title="3、verysync"></a>3、verysync</h3><p>这是一个同步工具，这里使用 docker 来安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back_path=/mnt/verysync</span><br><span class="line">docker run -d \</span><br><span class="line">--restart=unless-stopped \</span><br><span class="line">--name verysync \</span><br><span class="line">-v $back_path:/data \</span><br><span class="line">-p 8886:8886 \</span><br><span class="line">unwenliu/verysync:armv7</span><br></pre></td></tr></table></figure>

<p>请将里面的 <code>/mnt/verysync</code> 修改为你自己的</p>
<h3 id="4、transmission"><a href="#4、transmission" class="headerlink" title="4、transmission"></a>4、transmission</h3><p>这是一个轻量级的 BT 下载工具，有些路由器里面也有内置它，可见其轻量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    --name transmission \</span><br><span class="line">    -p 9091:9091 \</span><br><span class="line">    -p 51413:51413 \</span><br><span class="line">    -v /mnt/tr_data:/data \</span><br><span class="line">    -e USERNAME=admin \</span><br><span class="line">    -e PASSWORD=admin \</span><br><span class="line">    gists/transmission</span><br></pre></td></tr></table></figure>

<p>这里我装了 3.0 版，如果想装 2.94 ，可以将最后一行后面添加标签 <code>:2.94</code> ，变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    -d \</span><br><span class="line">    --name transmission \</span><br><span class="line">    -p 9091:9091 \</span><br><span class="line">    -p 51413:51413 \</span><br><span class="line">    -v /mnt/tr_data:/data \</span><br><span class="line">    -e USERNAME=admin \</span><br><span class="line">    -e PASSWORD=admin \</span><br><span class="line">    gists/transmission:2.94</span><br></pre></td></tr></table></figure>

<h3 id="5、qbittorrent"><a href="#5、qbittorrent" class="headerlink" title="5、qbittorrent"></a>5、qbittorrent</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=qbittorrent \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Aisa/Shanghai \</span><br><span class="line">  -e WEBUI_PORT=8080 \</span><br><span class="line">  --network host \</span><br><span class="line">  -v /opt/docker/qb/config:/config \</span><br><span class="line">  -v /mnt/qb_downloads:/downloads \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  ghcr.io/linuxserver/qbittorrent</span><br></pre></td></tr></table></figure>



<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>后来我还在上面安装了 nginx 和 php ，可以搭建一些简单的网站。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install nginx php-fpm</span><br></pre></td></tr></table></figure>

<p>想让 nginx 可以解析 php 网页，需要修改 <code>/etc/nginx/sites-enabled/default</code> 这个配置文件。</p>
<p>默认情况下，nignx 的站点文件位置在 <code>/var/www/html/</code></p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>我家云设置贴吧自动签到</title>
    <url>/2020/03/wjy-python/</url>
    <content><![CDATA[<p>需要先安装pip</p>
<p>对于 Python3.x 的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install python3-pip</span><br></pre></td></tr></table></figure>

<p>装好后用 pip3 来装 requests 这个模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure>

<p>之后我们就可以到 github 上面拉取 tieba 签到脚本了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/powersee/some-scripts/master/baidutieba_signin.py</span><br></pre></td></tr></table></figure>

<p>然后需要填写 cookie ，之后就能用 Python 来运行这个脚本了。</p>
<p><img src="/img/2020/firefox-cookie.jpg" alt="firefox-cookie"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 baidutieba_signin.py</span><br></pre></td></tr></table></figure>

<p>一切顺利的话，就看到签到信息了。但是这还不够，我想让它每天自动执行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>之后会让你选择编辑器，默认是使用 nano ，这个比较容易使用。也可以选择第二个 vim 。当然这里选后不喜欢，可以用 select-editor 这个命令来重新选择。</p>
<p>进入编辑器后，在里面添加这一行，就可以在每天的 7 点和 8 点，自动执行这个脚本去签到，然后将输出的信息，保存在 /root/tieba.log 这个文件里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 7,8 * * * python3 /root/baidutieba_signin.py &gt;&gt; /root/tieba.log</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>小米WiFi6路由器--cr660x</title>
    <url>/2021/06/xiaomi-cr660x/</url>
    <content><![CDATA[<ul>
<li>6606 — 联通</li>
<li>6608 — 移动</li>
<li>6609 — 电信</li>
</ul>
<p>配置</p>
<blockquote>
<p>soc mt7621 双核 880mhz</p>
<p>rom 128M</p>
<p>ram 256M</p>
<p>全千兆 1 WAN   3 LAN</p>
<p>支持 WiFi6、mesh</p>
</blockquote>
<p>刷机的难点在于解锁 ssh ，不同于其它的小米路由器，这台解锁需要用到一台 openwrt 路由器来辅助，比较麻烦点。</p>
<p>xqsystem.lua</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module(&quot;luci.controller.admin.xqsystem&quot;, package.seeall)</span><br><span class="line"></span><br><span class="line">function index()</span><br><span class="line">    local page   = node(&quot;api&quot;)</span><br><span class="line">    page.target  = firstchild()</span><br><span class="line">    page.title   = (&quot;&quot;)</span><br><span class="line">    page.order   = 100</span><br><span class="line">    page.index = true</span><br><span class="line">    page   = node(&quot;api&quot;,&quot;xqsystem&quot;)</span><br><span class="line">    page.target  = firstchild()</span><br><span class="line">    page.title   = (&quot;&quot;)</span><br><span class="line">    page.order   = 100</span><br><span class="line">    page.index = true</span><br><span class="line">    entry(&#123;&quot;api&quot;, &quot;xqsystem&quot;, &quot;token&quot;&#125;, call(&quot;getToken&quot;), (&quot;&quot;), 103, 0x08)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">local LuciHttp = require(&quot;luci.http&quot;)</span><br><span class="line"></span><br><span class="line">function getToken()</span><br><span class="line">    local result = &#123;&#125;</span><br><span class="line">    result[&quot;code&quot;] = 0</span><br><span class="line">    result[&quot;token&quot;] = &quot;; nvram set ssh_en=1; nvram commit; sed -i &#x27;s/channel=.*/channel=\&quot;debug\&quot;/g&#x27; /etc/init.d/dropbear; /etc/init.d/dropbear start;&quot;</span><br><span class="line">    LuciHttp.write_json(result)</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>如果会用 vi 的话，自己 ssh 进去之后，创建文件，将内容粘贴进去即可。</p>
<p>不会的话，可以使用 winscp 连接旧路由器，将 <code>xqsystem.lua</code> 文件拖进去，放在这个目录里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/lib/lua/luci/controller/admin/</span><br></pre></td></tr></table></figure>

<p>之后修改修改旧路由器的 ip 地址为 <code>169.254.31.1</code> ，并且把 dhcp 关闭</p>
<p>用浏览器访问：<a href="http://169.254.31.1/cgi-bin/luci/api/xqsystem/token">http://169.254.31.1/cgi-bin/luci/api/xqsystem/token</a></p>
<blockquote>
<p>你可以将信息填写在下面三个框中，会自动生成链接</p>
</blockquote>
<p>考虑到有的人买的不是移动版，那么路由器的默认 ip 可能不是 10.1 结尾的。所以这里放多一个输入框，如果你的 ip 不是这个，请将它改为你路由器的 ip。</p>

    <style>
        input{
            border: solid 2px;
        }

        input:focus{
            border-color: #66afe9;
            outline: 0;
            -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);
            box-shadow: inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)
        }

        /* 通用样式 */
.input-group {
margin-bottom: 20px;
}

.input-group label {
display: block;
margin-bottom: 5px;
font-weight: bold;
}

.input-group input[type="text"] {
width: 100%;
padding: 10px;
border: 1px solid #ccc;
border-radius: 4px;
}
    </style>

	<script type="text/javascript">
	    function mergeText()
	    {
            const ipInput = document.getElementById('ip');
            const stokInput = document.getElementById('stok');
            const ssidInput = document.getElementById('ssid');
            const passwdInput = document.getElementById('passwd');
            const link1 = document.getElementById('link1');
            const link2 = document.getElementById('link2');

            const ipValue = ipInput.value;
            const stokValue = stokInput.value;
            const ssidValue = ssidInput.value;
            const passwdValue = passwdInput.value;

            const url1 = `http://${ipValue}/cgi-bin/luci/;stok=${stokValue}/api/misystem/extendwifi_connect?ssid=${ssidValue}&password=${passwdValue}`;

            const url2 = `http://${ipValue}/cgi-bin/luci/;stok=${stokValue}/api/xqsystem/oneclick_get_remote_token?username=xxx&password=xxx&nonce=xxx`;



            link1.innerText = url1;
            link1.href = url1;

            link2.innerText = url2;
            link2.href = url2;


	    }
	</script>
<!-- 你的 stok         <input type="text" id="stok" onkeyup="mergeText()" /><br/>

你的 wifi 名     <input type="text" id="ssid" onkeyup="mergeText()" /><br/>

你的 wifi 密码 <input type="text" id="passwd" onkeyup="mergeText()" /><br/> -->

<div class="input-group">
  <label for="ip">你的路由器 ip</label>
  <input type="text" id="ip" onkeyup="mergeText()" value="192.168.10.1"/>
</div>
<div class="input-group">
  <label for="stok">你的 stok</label>
  <input type="text" id="stok" onkeyup="mergeText()" />
</div>
<div class="input-group">
  <label for="ssid">你的 wifi 名</label>
  <input type="text" id="ssid" onkeyup="mergeText()" />
</div>
<div class="input-group">
  <label for="passwd">你的 wifi 密码</label>
  <input type="text" id="passwd" onkeyup="mergeText()" />
</div>

<!-- <pre id="link1">填好自动生成链接</pre> -->

<h4>第一个链接</h4>

<a id="link1" href="#" target='_blank'>填好自动生成链接</a>

<!-- <pre id="link2">填好自动生成链接</pre> -->
<!-- <blockquote>
<p id="link1">填好自动生成链接</p>
</blockquote> -->

<h4>第二个链接</h4>

<a id="link2" href="#" target='_blank'>填好自动生成链接</a>

<!-- <blockquote>
<p id="link2">填好自动生成链接</p>
</blockquote> -->






<p>之后使用 winscp 连接小米路由器，将 <code>pb-boot.img</code> 放到 <code>tmp</code> 目录中，接着使用命令将它写入 Bootloader</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mtd write /tmp/pb-boot.img Bootloader</span><br></pre></td></tr></table></figure>

<p>到此路由器的原系统就没了，现在断电重启，机器会自动进入 pb-boot ，在浏览器访问 192.168.1.1，可以进入刷机界面，如果要刷 openwrt 的话，需要先刷入 factory.bin 结尾的固件。</p>
<p><img src="/img/2021/cr6608.jpg" alt="cr6608"></p>
]]></content>
      <tags>
        <tag>路由器</tag>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>我家云相关</title>
    <url>/2020/03/wojiayun/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我家云，又名掉盘云，众多矿渣中的一款。其配置还算不错，但由于有一个严重的缺点——掉盘，即机器内的硬盘时不时地，就自动断开连接，导致获得【掉盘云】这个荣称。也因此而难以获得垃圾佬们的芳心，二手价格长期维持在百元以下。</p>
<p>不过现今有大佬开发了比较好用的固件，据说很多人解决了掉盘的问题，因此价格开始逐渐上升了。</p>
<p>恩山固件发布贴：<a href="https://www.right.com.cn/forum/thread-976714-1-1.html">粒子云，我家云omv自用备份稳定性佳</a></p>
<p>固件作者：Ride_Wind，<a href="https://www.right.com.cn/forum/space-uid-155217.html">恩山链接</a></p>
<p>博客：<a href="https://blog.windtech.cf/">https://blog.windtech.cf/</a></p>
<h2 id="刷机相关"><a href="#刷机相关" class="headerlink" title="刷机相关"></a>刷机相关</h2><blockquote>
<p>这里放置一个刷机所需工具和固件的备份：<br><a href="https://pan.baidu.com/s/1YTlrbDDN9p11CayfaD6vIQ">https://pan.baidu.com/s/1YTlrbDDN9p11CayfaD6vIQ</a></p>
</blockquote>
<p>【webpad】大佬的刷机教程 <a href="https://www.right.com.cn/forum/thread-341574-1-1.html">联想粒子矿云/我家云 线刷OMV（Open Media Vault），图文教程</a></p>
<p>推荐文章教程：来自 smzdm 的【阿文菌】 <a href="https://post.smzdm.com/p/az50epz5/">我家云 保姆级教程：完美OMV固件</a></p>
<p>第一次刷机如果只显示【发现一个 loader 设备】，可以点击高级功能，里面可以点【进入 maskrom】</p>
<p><img src="/img/2020/%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD.png" alt="高级功能"></p>
<p>不过我刷机的时候并不知道这个，我是把机器拆开，然后找一根很短的电线，短接主板后面的两个点。</p>
<p><img src="/img/2020/%E7%9F%AD%E6%8E%A5.jpg" alt="短接"></p>
<p>一手按住，一手通电，机器一启动就自动进入 maskrom 了，然后便可以愉快地刷机，这种方法也是终极的救砖方法。</p>
<h2 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h2><p>乘风大佬的固件，本身就修改好 docker 的镜像源了，因此我们可以直接拉取镜像。</p>
<h3 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data --restart always portainer/portainer:linux-arm</span><br></pre></td></tr></table></figure>

<h3 id="qbittorrent"><a href="#qbittorrent" class="headerlink" title="qbittorrent"></a>qbittorrent</h3><p>自带的 qb 是 4.1.7 ，它好像有个问题，没法通过链接的方式来下载种子。所以我想把它停了，改用 docker 来创建一个最新版的 qb 。</p>
<p>那么我需要先把自带的 qb 的开机自起取消，这个比较容易，改个名字它就不会启动了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /opt/bin/qbittorrent-nox /opt/bin/1qbittorrent-nox</span><br></pre></td></tr></table></figure>

<p>qb最重要的两个文件夹 <code>.config</code> 和 <code>.local</code> ，自带的 qb 是将其放在 <code>/root</code> 里，如果你使用 docker 版的 qb 后，想保留之前的种子信息，下方的 -v 参数自己修改一下。我就不保留了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IMAGE_NAME=80x86/qbittorrent:4.2.1-arm64</span><br><span class="line">#这里我原本的默认下载路径是 /sharedfolders/wjy/ 你应该改成自己的</span><br><span class="line">DOWNLOAD_PATH=/sharedfolders/wjy/</span><br><span class="line">QBT_AUTH_SERVER_ADDR=&quot;127.0.0.1&quot;</span><br><span class="line"></span><br><span class="line">docker run -d --name qbittorrent \</span><br><span class="line">        -e WEB_PORT=8080 \</span><br><span class="line">        -e BT_PORT=8998 \</span><br><span class="line">        -e QBT_AUTH_SERVER_ADDR=$QBT_AUTH_SERVER_ADDR \</span><br><span class="line">        --restart unless-stopped \</span><br><span class="line">        --network host \</span><br><span class="line">        -v /var/lib/qbittorrent/.config/qBittorrent:/config \</span><br><span class="line">        -v /var/lib/qbittorrent/.local/share/data/qBittorrent:/data \</span><br><span class="line">        -v &quot;$DOWNLOAD_PATH&quot;:/downloads \</span><br><span class="line">        -v &quot;$DOWNLOAD_PATH&quot;:&quot;$DOWNLOAD_PATH&quot; \</span><br><span class="line">        --mount type=tmpfs,destination=/tmp \</span><br><span class="line">        $&#123;IMAGE_NAME&#125;</span><br></pre></td></tr></table></figure>

<p>之后可能会出现文件夹权限问题，将会导致 qb 无法启动，给予 777 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /var/lib/qbittorrent/</span><br></pre></td></tr></table></figure>

<h2 id="导航相关"><a href="#导航相关" class="headerlink" title="导航相关"></a>导航相关</h2><p>在web导航页面添加或者删除图标，修改 /opt/wwwroot/navi/index.php</p>
<h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><h3 id="查看-CPU-温度"><a href="#查看-CPU-温度" class="headerlink" title="查看 CPU 温度"></a>查看 CPU 温度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cpu=$(&lt;/sys/class/thermal/thermal_zone0/temp)</span><br><span class="line">echo &quot;$((cpu/1000)) c&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>玩客云第二版固件说明</title>
    <url>/2021/02/wankeyun-2/</url>
    <content><![CDATA[<p>玩客云第二版固件已经发布。</p>
<p><img src="/img/2021/wky-2.jpg" alt="wky-2"></p>
<p>下载链接和上一版一样。</p>
<p>固件和刷机工具下载链接</p>
<p>链接：<a href="https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA">https://pan.baidu.com/s/1BNwv61YDj3b4r3IjmJjheA</a><br>提取码：6666 </p>
<p>固件天翼云盘分流：<a href="https://cloud.189.cn/t/eYfInuiuYFja">https://cloud.189.cn/t/eYfInuiuYFja</a></p>
<p>解压出来，名字是 <code>Armbian_s805_powersee_2021-01-31.img</code>  </p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>第二版的介绍已发布视频到 B站</p>
<p><a href="https://www.bilibili.com/video/BV1kT4y1P7RL?p=5">https://www.bilibili.com/video/BV1kT4y1P7RL?p=5</a></p>
<hr>
<p>博客用来作为补充和方便大家查询。</p>
<p>第二版更改了 led。开机后，灯自动熄灭，但是网口的灯是亮着的，而且一般网口两个灯都是亮着的。</p>
<p><img src="/img/2021/2021-02-02_19-29-14.jpg" alt="2021-02-02_19-29-14"></p>
<p>可以通过这来判断机器有没有进入U盘中的系统。</p>
<p>qbittorrent 使用原生安装，而不使用 docker 了。并且默认下载路径设置为 <code>/mnt</code> ，下载之前请注意网页底部显示的 <code>剩余磁盘空间</code> 。</p>
<p>添加了 Aria2 ，使用的是 P3TERX 大佬制作的<a href="https://github.com/P3TERX/aria2.sh">一键脚本</a>安装的。rpc 密钥是：12345</p>
<p>启动：<code>/etc/init.d/aria2 start</code> | <code>service aria2 start</code></p>
<p>停止：<code>/etc/init.d/aria2 stop</code> | <code>service aria2 stop</code></p>
<p>重启：<code>/etc/init.d/aria2 restart</code> | <code>service aria2 restart</code></p>
<hr>
<p>smb 添加多一个共享文件夹 <code>mnt-rw</code> ，访问路径依然是 <code>/mnt</code> ，这个文件夹需要账号密码才可以访问，账号 <code>root</code>，密码 <code>1234</code> </p>
<hr>
<h3 id="led-灯的控制"><a href="#led-灯的控制" class="headerlink" title="led 灯的控制"></a>led 灯的控制</h3><p>开机之后，系统会执行 <code>ledoff blue</code> 来关闭灯光。</p>
<p>如果想自己控制灯光，可以用 <code>ledon blue</code> 来打开蓝灯。打开绿灯就是 <code>ledon green</code>，红灯 <code>ledon red</code> 。关闭的话，就是将 <code>ledon</code> 换为 <code>ledoff</code></p>
<p>如果想要在 python 脚本中控制它，可以这样用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">os.system(&quot;ledon green&quot;)</span><br></pre></td></tr></table></figure>

<p>来自 B友 @<strong>猫肆音Moshin</strong> 反馈的问题：</p>
<blockquote>
<p>我反映一个玩客云1.3板子刷第二版固件无法网页启动的解决方法。<br>我试了U盘读卡器TF卡好几个，面板灯不亮，网口只一个灯闪后一直没法进入网页。<br>后来发现一个不识别网络设备MAC是123456789ABC，直接用xshell连接IP成功，然后写入emmc后就可以正常进入网页了。</p>
</blockquote>
<p>我简单的复述一下，就是玩客云其实已经获取到 ip 了，但是在路由器里面，它的设备名没有被路由器正确识别到，所以可以通过 mac 地址来判断新增加的 ip 是否为玩客云的。</p>
<h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p>1、<a href="https://www.right.com.cn/forum/thread-2881296-1-1.html">https://www.right.com.cn/forum/thread-2881296-1-1.html</a></p>
<p>2、<a href="https://github.com/P3TERX/aria2.sh">https://github.com/P3TERX/aria2.sh</a></p>
<p>3、<a href="https://github.com/qbittorrent/qBittorrent/wiki">https://github.com/qbittorrent/qBittorrent/wiki</a></p>
]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>蜗牛星际驱动核显，使用 jellyfin 和 qbittorrent</title>
    <url>/2020/06/xingjiwoniu/</url>
    <content><![CDATA[<p>最近入手了一台蜗牛星际，这里记录一些自己踩过的坑。</p>
<h2 id="驱动核显"><a href="#驱动核显" class="headerlink" title="驱动核显"></a>驱动核显</h2><h3 id="如何替换-lzma-文件"><a href="#如何替换-lzma-文件" class="headerlink" title="如何替换 lzma 文件"></a>如何替换 lzma 文件</h3><p>需要用到 pe ，这里我用的是 wepe</p>
<p>将pe系统写入U盘，插入蜗牛的usb口，连接键盘鼠标，开机一直按 del 键，进入bios，在最右边选择U盘，进入 pe。</p>
<p>之后打开桌面的 DG ，选中引导所在的硬盘或者U盘（我的话是将引导放在16G的 msata 硬盘里的）。选择分区1，点右边的浏览文件，可以看到里面有两个文件 <code>extra.lzma</code> 和 <code>extra2.lzma</code> </p>
<p><img src="/img/2020/%E9%A9%B1%E5%8A%A8%E6%A0%B8%E6%98%BE%E9%9C%80%E8%A6%81%E6%9B%BF%E6%8D%A2%E7%9A%84%E6%96%87%E4%BB%B6.jpg" alt="驱动核显需要替换的文件"></p>
<p>将这两个文件替换为网盘中的那两个即可。</p>
<p>网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a></p>
<p>可以右键然后选择【复制文件到当前分区】。</p>
<p>然后关机，拔掉 pe U盘，再次进入群晖系统，应该就能驱动核显了。</p>
<h3 id="如何判断已经驱动核显了？"><a href="#如何判断已经驱动核显了？" class="headerlink" title="如何判断已经驱动核显了？"></a>如何判断已经驱动核显了？</h3><p>用 ssh 连接群晖，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /dev/dri/</span><br></pre></td></tr></table></figure>

<p>如果能够看到 renderD128 就是驱动了。</p>
<h2 id="搭建媒体仓库——-jellyfin"><a href="#搭建媒体仓库——-jellyfin" class="headerlink" title="搭建媒体仓库—— jellyfin"></a>搭建媒体仓库—— jellyfin</h2><p>相比于 plex 和 emby ，jellyfin 的优势是调用硬件转码不用钱。</p>
<p>这里我是使用 docker 来安装的，容器建立时需要有这个命令，才能调用核显</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--device=/dev/dri/renderD128</span><br></pre></td></tr></table></figure>

<h2 id="BT下载器——qbittorent"><a href="#BT下载器——qbittorent" class="headerlink" title="BT下载器——qbittorent"></a>BT下载器——qbittorent</h2><p>用手动安装的 qb ，没法正常在 chrome 浏览器打开，只能在隐身模式下才能打开。所以我采用 docker   的方式来安装。</p>
<p>一开始老是没法设置好 /config 映射到宿主机的文件夹的权限，导致 qb 的 web 界面打开后残缺，而且也没法登录。明明我已经把映射的文件夹权限设置为 everyone 了，还是不行。。。</p>
<p>最后发现最简单的应该是不管 /config 了，只设置 /downloads 的映射就行。就可以正常使用 qb 。</p>
<p>但是，我不喜欢这样的方式，我还是喜欢把 /config 映射到宿主机的文件夹中。所以我采用命令行的方式来建立 docker 容器。</p>
<p>需要先确认文件夹的权限，也可以</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /xxx</span><br></pre></td></tr></table></figure>

<p>来更改文件夹 xxx 的权限。</p>
<p>如果想要 qb 能连接 ipv6 用户的话，得使用 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--network host</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>设备</tag>
        <tag>Linux</tag>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>中兴e8820s路由器</title>
    <url>/2021/07/zte-e8820s/</url>
    <content><![CDATA[<p><img src="/img/2021/zte-e8820s.jpg" alt="zte-e8820s"></p>
<p>参考帖子：<a href="https://www.right.com.cn/forum/thread-4046951-1-1.html">中兴8820S与8820V2比较及TTL刷机</a></p>
<p>相关文件：</p>
<p>网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a><br>个人下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top</a></p>
<p>padavan 固件下载：<a href="https://opt.cn2qq.com/padavan">https://opt.cn2qq.com/padavan</a></p>
<p>选择 ZTE_E8820S 开头的</p>
<p>这台路由器想刷机的话，需要自己焊接针脚。</p>
<p><img src="/img/2021/e8820s-ttl.jpg" alt="e8820s-ttl"></p>
<p>我使用的模块是 CH340</p>
<p><img src="/img/2021/e8820s-ttl2.jpg" alt="e8820s-ttl2"></p>
<p>软件的选择有很多，可以用 putty，也可以用 xshell。</p>
<ul>
<li>连接上之后，使用账号密码进行登录。</li>
<li>之后将 breed 放在 U 盘中，插入路由器</li>
<li>路由器进入 U 盘所在目录</li>
<li>备份原系统</li>
<li>写入 breed</li>
<li>重启</li>
</ul>
<p><img src="/img/2021/command-zte.png" alt="14.command-zte"></p>
]]></content>
      <tags>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>最强 shell 非 zsh 莫属</title>
    <url>/2020/03/zsh-note/</url>
    <content><![CDATA[<p>个人比较喜欢 zsh ，特别是自动补全的插件 zsh-autosuggestions ，感觉用了就回不去了。再也无法忍受用以前那些 shell 的各种不便。因此我尽量在常用的设备上安装 zsh ，比如电脑，虚拟机，家里的一堆矿渣设备，国内外的云服务器上。</p>
<p>由于每次的操作都基本一样，所以我之前都是将步骤写在笔记中，用到时就复制粘贴即可。现在将内容整理到博客中，方便有时没法打开笔记，可以通过访问博客来查看。</p>
<p>不同的发行版有不同的包管理工具，安装过程却都差不多，apt install zsh 像这样直接安装即可。</p>
<hr>
<p>下载 oh my zsh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>可恶的墙，哎，下载不了的使用这个吧</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://gitee.com/powersee/ohmyzsh/raw/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>下载 zsh-autosuggestions 这个插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>不行的话用这行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/powersee/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>编辑 .zshrc 启用插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>将 zsh-autosuggestions 添加到插件里，加在 git 后面即可，可以用空格，也可以换行。</p>
<p>然后由于有时连接的设备太多，不太容易分清楚哪一台，所以我喜欢用 <code>ys</code> 这个主题。一般修改第 11 行。</p>
<p>然后对于常用命令，可以用 alias 来自定义，比如找个空白处，写上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> d=<span class="string">&quot;docker&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后重新读取一下配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>此时输入 <code>d info</code> 就等于 输入 <code>docker info</code></p>
<p>如果后期配置文件搞得乱七八糟，或者误删了，可以使用这个来恢复成默认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>芝杜 z9x 手动升级固件，体验不错</title>
    <url>/2022/05/zidoo-z9x-update/</url>
    <content><![CDATA[<p>我的芝杜 z9x 有些问题，通过 smb 访问使用 d2550 搭建的黑群晖，经常提示“未知错误”，我在 smb 那里是弄了两个连接方式，一种是直接通过局域网主机名 <strong>d2550</strong> 这样来访问，另外一种是通过局域网 IP 地址 <strong>192.168.68.171</strong> 这样。</p>
<p>它也不是说完全不能访问，有时候我先点击 ip 的访问到第一层目录，然后就无法访问第二层目录了，之后我切换到主机名这种，就可以访问进去了，很烦人。</p>
<p>那么就尝试 NFS 吧，结果是 homes 文件夹里的可以显示出来，而我另外一个专门放影视资源的共享文件夹，是无法显示的，点进去后就是空白。挺难受的，之前用蜗牛星际当 nas 明明不会这样，难道是 d2550 的问题？可是我下载个当贝播放器，在里面用 smb 来播放 nas 里的视频却一直正常。</p>
<p>我一直在等芝杜推送系统更新，却一直没等到，昨晚实在烦了，就上网搜一下，到了芝杜的官方论坛，也没看到什么解决方案，接着又搜到了芝杜的贴吧 <strong>芝杜吧</strong> ，发现系统固件已经升级了很多次了，但是需要我们下载 ota 后自己去手动升级。</p>
<p><a href="https://tieba.baidu.com/p/7841671022">【图片】【220519 | 固件下载】芝杜Z9X 升级固件 v6.4.05 全量包_芝杜吧_百度贴吧 (baidu.com)</a></p>
<p>很新鲜，而且我从贴吧里了解到，目前新的固件是支持 webdav 的，而刚好我的 nas 就有启动 webdav 服务，所以我想的是，即使它没有修复 smb 和 NFS 的问题，那我还可以尝试通过 webdav 来播放 nas 里的视频，于是点击帖子中的链接，跳转到一个腾讯文档，里面有教程与下载链接</p>
<p><a href="https://docs.qq.com/doc/DSnhEdU10dkpvQVFN">芝杜Z9X 升级固件v6.4.05 v6.4.05G全量包 (qq.com)</a></p>
<p>用电脑网页版无法得到这个链接，我是在手机客服端点击才行的。</p>
<p>从文档里点击链接下载固件，放到 U 盘里，然后插到芝杜上面，点击桌面右边的“关于”，手动升级，选择 U 盘中的固件，会进行验证，然后将固件复制到机身内存，复制完再点一下升级。</p>
<p><a href="https://tieba.baidu.com/p/7127393998">【图片】【201203 | 教程攻略】芝杜播放器本地OTA升级教程_芝杜吧_百度贴吧 (baidu.com)</a></p>
<p><img src="/img/2022/image-20220521104308870.png" alt="image-20220521104308870"></p>
<p>系统升级完成后，打开文件管理器，此时在左侧可以看到一个 <strong>其它网络</strong> ，里面就有新的连接方式 webdav，我赶紧尝试通过它来连接 nas，很顺利，播放高清电影也很流畅。</p>
<p><img src="/img/2022/image-20220521114412831.png" alt="image-20220521114412831"></p>
<p><img src="/img/2022/image-20220521114437123.png" alt="image-20220521114437123"></p>
<p>不过我发现它不能像 smb 以及 NFS 那样，把某个文件夹收藏起来，方便下次直接访问。那也就是说，我每次访问 webdav 都得这样一层一层去打开文件夹，确实有点麻烦。</p>
<p>除了 webdav 之外，现在还可以直接访问 <strong>百度网盘</strong>、<strong>阿里云盘</strong> 里面的内容，这点感觉也不错嘛，如果平时收藏的视频是保存在网盘里的，现在可以直接播放还是挺方便的。不过我个人目前用不上这个功能，我的视频主要还是放在 nas 里的。</p>
<p><img src="/img/2022/rYDPf3z47r9GlCStnh3QMA.png" alt="img">        </p>
<p>接着最让我高兴的是，现在 smb 的问题好像都解决了，不会出现“未知错误”这样的提示了，直接点击就可以访问 nas 里的内容，NFS 这边也正常了，之前未升级的时候，点击后是显示空白的，现在可以正常显示 nas 的内容了。</p>
<p>其它的更新内容还挺多的，我就不想在这里重复了，有些更新的内容其实我也用不上，所以也不关心，我现在看到芝杜可以通过 smb、NFS、webdav 来访问 nas 里的文件，而且体验确实不错，就很满意了。</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>edge 浏览器访问不安全内容 https 报错没有强制访问</title>
    <url>/2022/11/edge-unsafe/</url>
    <content><![CDATA[<p>如今我的主力浏览器已经换位 edge 了，使用了很久，感觉挺好的。</p>
<p>最近发现，如果使用它访问证书已经失效的 https 网站，会报错，并且点击高级之后，没有继续访问的按钮了。</p>
<p>例如这样，我访问我局域网的 nas <code>https://192.168.68.172/</code></p>
<p><img src="/img/2022/link-unsafe.jpg"></p>
<p>那么要怎样才能继续访问呢？方法是，点击网页中空白的地方，然后键盘输入 <code>thisisunsafe</code> ，注意是在英文输入法的情况下，正常的话，输入完就自动访问了。</p>
<p>另外也可以在浏览器输入 <code>edge://settings/content/insecureContent</code> 来打开设置，将你想要访问的域名添加进去。</p>
<p><img src="/img/2022/edge-settings-insecureContent.jpg"></p>
<p>感觉现在就是限制更多了，不像以前那样方便，不过还好问题是可以解决的。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>如何找到手机淘宝 APP 保存的文件？</title>
    <url>/2023/01/taobao-files/</url>
    <content><![CDATA[<p>淘宝的店家发了个文件给我，我需要把文件弄到电脑上使用。结果没想到过程还挺曲折的。</p>
<p>在手机淘宝app上可以接收文件，但是文件没法打开。不过在底部显示【使用其它应用打开】的按钮，点击后会弹出一堆 app 可以选择，但是我实测没用。</p>
<p>店家给我的是 <code>HEX</code> 结尾的文件，手机里应该没有 app 可以打开它，我想尝试用手机自带的文件管理器、ES 文件管理器，来将文件保存到其他位置，但是都不行。</p>
<p>选择用浏览器打开，会自动下载这个文件，哦，那这样也行，但结果却是下载失败了。。。</p>
<p>然后我注意到，刚点击【使用其它应用打开】的按钮时，会弹出一个文件存放在哪里的提示，我注意到是在 <code>Android/data/com.taobao.taobao</code> </p>
<p>那既然这样，我自己去这里找找看吧。</p>
<p>结果我发现，使用手机自带的文件管理器、ES 文件管理器打开 <code>Android/data/</code> 后，里面是空白的。</p>
<p>我网上搜一下，发现这是 Android11 之后的改变，现在不给 data 文件夹的权限了。我是真没想到，miui 居然连自带的文件管理器都访问不了这个文件夹。</p>
<p>知乎网友的一段话我觉得挺认同的，<a href="https://www.zhihu.com/people/dong-jie-rong-59">来源</a></p>
<blockquote>
<p>非常后悔更新了11,这可能是我见过最恶心的设计了，完全意义不明。能轻松管理所有文件一直是我觉得安卓比ios好的一点</p>
</blockquote>
<p>那么最后我是怎么解决的呢？其实在自带文件管理器里，它有提示可以【前往安卓存储访问框架查看文件】，点击后使用框架还是可以查看文件的。</p>
<p>淘宝的文件是在 <code>Android/data/com.taobao.taobao/files/file/filetransfer/</code> 里面，之后我把文件复制出来，然后复制到 nas 里，电脑上再访问 nas 的共享文件夹，将文件复制到电脑。</p>
<p>而且完成后我网上搜一下，才知道用新版的 es 文件管理器，授权之后还是可以访问 data 文件夹的，我手机之前有下载一个 【ESuper文件】的app，应该是改版的 es 吧，确实授权后就可以访问。</p>
<p>不过，淘宝还真是够烂的，就不能给个选项，让把文件保存到手机的其它目录吗，费了我这么多时间。问店家，他居然告诉我自己去电脑上下载个阿里旺旺……</p>
<p>淘宝这么搞下去，迟早得被拼多多干倒。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>统计 Windows 电脑应用使用时长</title>
    <url>/2023/02/windows-tai/</url>
    <content><![CDATA[<p>前段时间发现一个可以统计电脑上，各个应用的使用时长的开源应用</p>
<p><a href="https://github.com/Planshit/Tai">https://github.com/Planshit/Tai</a></p>
<p><img src="/img/2023/2023-02-01_17-52-08.png"></p>
<p>我也使用了一段时间了，感觉还不错。平时占用的系统内存是 44MB 左右，在电脑的右下角状态栏会有图标，双击就可以打开软件界面。</p>
<p><img src="/img/2023/2023-02-02_15-14-47.png"></p>
<p>一月份我使用了 20 天，里面记录我电脑的使用时长是 132 个小时，其中使用最长的是原神，有 31 个小时。</p>
<p>切换到【按月】可以看到每天的统计时长。</p>
<blockquote>
<p><strong>需要注意的是，使用时长并不是软件的存活时间，而是软件从获得焦点时开始到失去焦点后这段时间</strong></p>
</blockquote>
<p>其中有一天，steam 被统计到使用了 13 个小时，估计是我电脑息屏的时候，steam 突然弹到前台，然后又是夜晚，所以被统计下来。虽然后来我们可以通过右键【忽略此应用】来让 tai 不再记录某些应用，但是之前记录的 steam 时长好像没法去掉。</p>
<p><img src="/img/2023/2023-02-02_15-20-41.png"></p>
<p>还有就是 steam 的游戏，有时候统计并不准确，像我这里 Beat Saber 这个游戏，我每天都是有玩的，而且都是超过半个小时的，但是在这里，统计出来的数据是这样的。</p>
<p><img src="/img/2023/2023-02-02_15-31-36.png"></p>
<p><a href="https://github.com/Planshit/Tai/issues/40">tai对steam里的游戏统计时长有问题 · Issue #40 · Planshit&#x2F;Tai (github.com)</a></p>
<p>虽然问题已经关闭了，但是问题好像并没有解决。</p>
<p>不过我认为瑕不掩瑜吧，我之后还是会继续使用它的。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>一个不错的 css 框架 Boltcss</title>
    <url>/2023/02/boltcss/</url>
    <content><![CDATA[<p>发现一个不错的 css 框架 boltcss <a href="https://boltcss.com/">Bolt.css (boltcss.com)</a></p>
<p>是从阮一峰老师的博客推荐发现的，看了官方的 demo，感觉挺不错，里面很多样式自己挺喜欢的。</p>
<p>于是我下载来研究看看，之后看看能否引入自己的博客里面。</p>
<p><a href="https://raw.githubusercontent.com/tbolt/boltcss/main/bolt.css">https://raw.githubusercontent.com/tbolt/boltcss/main/bolt.css</a></p>
<p>喜欢的点：</p>
<ul>
<li>支持日夜模式（会根据系统自动切换）</li>
<li>details – summary 标签不错，在博客中可以用来收起一些内容</li>
</ul>
<p>例如这样</p>
<details>呵呵哒🙂
  <summary>点击展开
  </summary>
</details>

<p>直接在 markdown 里面写标签即可。</p>
<p>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;呵呵哒🙂</span><br><span class="line">  &lt;summary&gt;点击展开</span><br><span class="line">  &lt;/summary&gt;</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure>

<p>由于直接把这个 css 引入博客，会和原来样式冲突，所以我目前只能，复制里面的代码到我博客自身的 css 里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Interactive elements */</span><br><span class="line">details &#123;</span><br><span class="line">  border: 1px solid #aaa;</span><br><span class="line">  border-radius: 7px;</span><br><span class="line">  padding: 0.5em 0.5em 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">summary &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin: -0.5em -0.5em 0;</span><br><span class="line">  padding: 0.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">details[open] &#123;</span><br><span class="line">  padding: 0.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">details[open] summary &#123;</span><br><span class="line">  border-bottom: 1px solid #aaa;</span><br><span class="line">  margin-bottom: 0.5em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建留言板 sayhello 进阶使用教程</title>
    <url>/2023/02/about-sayhello/</url>
    <content><![CDATA[<p>项目源码：<a href="https://github.com/powersee/sayhello">https://github.com/powersee/sayhello</a></p>
<p>用 docker 的话，一条命令即可运行起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --name sayhello powersee/sayhello</span><br></pre></td></tr></table></figure>

<p>第一个 5000 可以换为其它的端口，例如 6000，7000 等等，之后在浏览器通过 <code>IP:端口</code> 的形式来访问即可。</p>
<p><img src="/img/2023/sayhello10086.jpg"></p>
<h3 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h3><p>先来说说，怎么删除内容。需要做的是，进入 docker 容器里的，使用命令行对 sqlite 数据库的内容进行删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker ps                                                    </span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">1888c7d98fe8   powersee/sayhello   &quot;python3 -m flask ru…&quot;   2 months ago   Up 2 months   0.0.0.0:10086-&gt;5000/tcp, :::10086-&gt;5000/tcp   sayhello</span><br></pre></td></tr></table></figure>

<p>通过 <code>docker ps</code> 命令，可以查询到目前正在运行的容器有哪些。</p>
<p>进入容器内的交互终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it sayhello /bin/sh</span><br></pre></td></tr></table></figure>

<p>由于这个程序使用的是 sqlite 的数据库，所以需要先安装 sqlite，才能够对 <code>data.db</code> 进行修改。</p>
<p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add sqlite</span><br></pre></td></tr></table></figure>

<p><strong>查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite3 data.db</span><br><span class="line"></span><br><span class="line">select * from message;</span><br></pre></td></tr></table></figure>

<p>此时就会将所有的留言都显示出来，这里我随便找几条</p>
<blockquote>
<p>452|p|1|2023-02-14 14:55:37.930067<br>453|p|1|2023-02-14 14:55:38.022029<br>454|p|b 站旅游团路过|2023-02-14 15:18:19.983384</p>
</blockquote>
<p>可以看到，它的格式是这样的</p>
<blockquote>
<p>id | username | content | time</p>
</blockquote>
<p>所以我们要删除的话，可以使用它的 id，例如这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from message where id=452;</span><br></pre></td></tr></table></figure>

<p>删除多条，可以使用 in，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from message where id in(23,26,29);</span><br></pre></td></tr></table></figure>

<p>如果要删除大范围的，例如 id 从 200 到 450 都要删除掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete FROM message where id &gt; 199 and id &lt; 451;</span><br><span class="line">#或者</span><br><span class="line">delete FROM message where id &gt;= 200 and id &lt;= 450;</span><br></pre></td></tr></table></figure>

<p>如果要清空所有内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM message;</span><br></pre></td></tr></table></figure>

<h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><p>如果你现在是在容器里，也就是终端里左边是显示 <code>/sayhello #</code> ，想要退出可以按 <code>ctrl + D</code> （是两个按键同时按）</p>
<p>由于数据都是存放在 <code>data.db</code> 这个数据库里的，所以我们只要备份它就可以了。此时我们可以使用 <code>docker cp</code> 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp sayhello:/sayhello/data.db .</span><br></pre></td></tr></table></figure>

<p>此处的点 <code>.</code> 代表当前目录，也就是把数据库复制出来，放到当前目录，你也可以改为其它的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp sayhello:/sayhello/data.db /home/powersee</span><br></pre></td></tr></table></figure>

<p>这样就会把 <code>data.db</code> 放到 <code>/home/powersee</code> 这个目录下。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我收到许多诈骗邮件</title>
    <url>/2023/02/scam-email/</url>
    <content><![CDATA[<p>我的电子邮箱地址，一直放在 YouTube 和我的博客上面，所以我经常收到英文的邮件。例如这样的</p>
<blockquote>
<p>Good afternoon! Warner Bros. Interactive Entertainment is pleased to announce the release of a new game, Hogwarts Legacy.<br>I’ll tell you a little about the game. Set in the late 19th century, Hogwarts Legacy will tell the story of students of Hogwarts. The player will be allowed to choose their faculty at Hogwarts and attend classes at the school of wizardry and wizardry as well as explore the open world consisting of such locations as the village of Hogsmeade and the Forbidden Forest. In the game the character will learn to brew potions, cast various magical spells, tame magical beasts and master other combat abilities. Moral system will play an important role in the game. Players will also be able to customize their character’s voice, body type and whether they are a witch or a wizard.<br>We want to invite you to become a part of the story and dive into the universe of magic and enchantment together!<br>If you are interested, reply to this message!<br>I’m sure we’ll find common ground with you and become partners!</p>
</blockquote>
<p>翻译：</p>
<blockquote>
<p>下午好！华纳兄弟互动娱乐公司很高兴地宣布新游戏《霍格沃兹遗产》的发布。<br>我会告诉你一点关于这个游戏。《霍格华兹遗产》以19世纪末为背景，讲述的是霍格华兹学生的故事。玩家将被允许选择他们在霍格沃兹的院系，参加魔法学校的课程，以及探索开放的世界，包括霍格莫德村和禁林等地点。在游戏中，角色将学习调制药剂，施放各种魔法咒语，驯服魔法野兽，并掌握其他战斗能力。道德体系将在博弈中发挥重要作用。玩家还可以自定义角色的声音、身体类型以及他们是女巫还是巫师。<br>我们想邀请你成为故事的一部分，一起潜入魔法和魅力的宇宙！<br>有兴趣的话，回复此留言吧！<br>我相信我们会找到与你的共同点，成为合作伙伴！</p>
</blockquote>
<p>刚才翻了翻收件箱，发现里面居然还有魔咒之地 Forspored 的，邮件中部分内容的翻译：</p>
<blockquote>
<p>我们公司很高兴地宣布，你和你的YouTube频道，特别是已被选择来推广我们最新的游戏。</p>
<p>公司正在积极为我们即将发布的新游戏寻找推广人。2023年1月24日在PlayStation 5和Windows上发布。</p>
<p>Forspored讲述了一个纽约女孩Frey的故事，她发现自己在美丽而暴力的Atia中。</p>
<p>为了找到回家的路，弗雷必须穿越广阔的新世界，借助魔法与怪物战斗。</p>
<p>我们公司有兴趣与你合作。</p>
<p>我们希望你在视频剪辑的开头插入我们的预告片。</p>
<p>如果我们的合作成功，我们会给你30个Steam密钥，</p>
<p>这不仅让你可以访问我们的游戏，但也解锁绝对所有的官方插件的游戏。</p>
</blockquote>
<p>看着挺好的吧，给 30 个 steam 密钥。其实还有更吸引人的，说是要我接他们的广告，一次可以提供至少一千美元。当初我看到这样的邮件，不经感叹，还是外国的钱好赚呀。</p>
<p>不过随着我的了解，我发现这事实并非那么简单。</p>
<p>我记得之前有一封是 Opera 浏览器的邮件，搜了一下是去年 2 月份的邮件了。内容如下：</p>
<blockquote>
<p>Hello, I am the manager of OperaSoftware.</p>
<p>Our company has paid attention to your channel and decided to make an offer. Our OperaGX browser lacks popularity, so we offer you to cooperate with us.</p>
<p>If you agree to cooperate with our company, please let us know and we will send you our terms.</p>
<p>Best regards, manager of OperaSoftware.</p>
</blockquote>
<p>然后我就回复他了，之后他就给我发来了一个 PDF 文件，里面是这样的（下面是截图，不用担心👇🏻）</p>
<p><img src="/img/2023/2023-02-22_21-33-12.png" alt="骗子发的 PDF 文件内容"></p>
<p>我记得下方的链接那里，好像就是一个病毒链接，当然我没有点过，当时只是好奇他们发这些邮件的目的是什么。</p>
<p>总之呢，就是哪有那么好的事，不要整天想着天上会掉馅饼。</p>
<p>骗子一般都会假扮是大公司，然后给出丰厚的佣金，吸引人上钩，一旦有人点击了他们的链接，那电脑可能就中毒了。</p>
<p>之前还有一位讲技术的博主，好像就是中了这样的骗术，导致他 YouTube 上的所有视频被删了。</p>
<h2 id="对策1"><a href="#对策1" class="headerlink" title="对策1"></a>对策1</h2><p>在我知道这些都是骗局之后，我基本都不去点开这些邮件。但是，我却避免不了他们的骚扰，每隔几天就会收到一封。其中来自 BlueTwelve Studio 的非常多，我查了一下，这是一个游戏开发团队，有名的赛博猫咪《Stray》就是他们开发的。</p>
<p><img src="/img/2023/game-stray.jpeg" alt="Stray"></p>
<p>当然我收到的这些都是诈骗邮件，肯定不是这个游戏开发团队发的，因为我观察到，这些邮件的后缀都是 @vzonly.cz</p>
<p>我还搜到了一个 YouTube 视频：<a href="https://www.youtube.com/watch?v=G6S_KwiDTbs">volny.cz online.ua FRAUD email | SCAM alert - YouTube</a></p>
<p>里面是一位阿三哥在讲他也碰到诈骗邮件的事情，他除了收到来自 <code>@vzonly.cz</code> 的邮件，还有 <code>@online.ua</code> 的。并且他了解得更深入，骗子同样是发送一个 PDF 过来，里面也是有链接，如果点击这个链接，就会重定向然后下载 Windows 软件。大概就是这些内容吧。</p>
<p>同时我观察了他的视频说明，他也同样是把邮箱放在里面。所以骗子应该是用软件扫描 YouTube 视频，查到视频说明里有邮箱，就会发邮件过来之类吧。</p>
<p>这时我猜想，如果我把邮箱的 <code>@</code> 换成 <code>#</code> ，然后补充说明（请把 @ 换成 #）会不会降低收到这种诈骗邮件的频率？</p>
<p>毕竟如果是真人，真想发邮件的话，换个字符也不会带来多大的麻烦。</p>
<h2 id="对策2"><a href="#对策2" class="headerlink" title="对策2"></a>对策2</h2><p>其实我会来写这篇文章，是因为我突然想到，我能否把来自 @vzonly.cz 的所有邮件都拉黑？</p>
<p>由于我使用的是腾讯企业邮箱，所以用必应搜一下，很快就找到答案了。</p>
<p><a href="https://work.weixin.qq.com/help?person_id=0&doc_id=359&helpType=exmail">黑名单&#x2F;域名黑名单有什么作用？如何设置？-帮助中心-企业邮 (qq.com)</a></p>
<p>那么按照说明</p>
<blockquote>
<p>在“邮箱设置”-&gt;“反垃圾”-&gt;“黑名单”栏目中，点击“设置黑名单”</p>
</blockquote>
<p>就可以成功把域名添加进去</p>
<p><img src="/img/2023/2023-02-22_21-14-24.png" alt="成功将域名加入邮箱黑名单"></p>
<p>这么一番操作之后，以后我应该就不会被这些垃圾邮件打扰了吧。或者说能减少打扰的次数吧，毕竟来自诈骗邮件也有来自其他域名的，像前面提到的 Opera 这封邮件，它的域名是 <code>laposte.net</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>不要点击陌生链接</li>
<li>注意邮件的后缀</li>
<li>非必要的话，不要公开邮箱地址</li>
<li>或者把邮箱的 @ 换成 # 之类的</li>
<li>进入邮箱网站后台，设置域名黑名单</li>
</ol>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Play Store 自动更新如何关闭？</title>
    <url>/2023/03/google-play-store-auto-update/</url>
    <content><![CDATA[<p>我的手机里有两个 App Store，一个是 MIUI 自带的应用商店。另外一个是 Google 的 Play Store。</p>
<p>两者的设置中，我都把应用自动更新给关了，我并不喜欢更新 APP，特别是之前被一款国产记账软件「松鼠记账」给恶心到之后，<a href="/2022/01/songshujizhang/">之前的文章</a></p>
<p>但是当我现在的 Play Store，在我打开代理之后，老是自动给我更新 APP。我想按照以前的方法，关闭掉自动更新，但是没找到。我用中文到网上搜也没找到方法，最后还是用英文搜索，才找到的。位置在「设置」「网络偏好」「自动更新应用」里。</p>
<p><img src="/img/2023/auto-update-apps.jpg" alt="auto-update-apps"></p>
<p>其实也很容易发现，不过之前怎么老是忽略它了呢？</p>
<p>还有我发现，我的手机系统用的是中文，但是 Play Store 里显示的都是英文的，设置里好像也没地方改，不过这个不重要了，懒得去搜了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Python 读写剪贴板中的内容 pyperclip</title>
    <url>/2023/03/pyperclip/</url>
    <content><![CDATA[<p>之前了解到 Mac 上的两个命令 <a href="/2022/06/mac-pbcopy-pbpaste/">pbcopy &amp; pbpaste</a> ，我就在想，如果我把它整合到某些脚本里面，那就可以减少复制粘贴的步骤，节省一些时间。</p>
<p>此时我想到之前写的一个，用来下载贴吧图片的脚本。在之前介绍 <a href="/2021/12/about-kcc/">制作 kindle 漫画的文章</a> 里有提到它。</p>
<p><img src="/img/2021/tieba-img-download.jpg" alt="贴吧图片下载器"></p>
<p>在 Windows 上我是把它打包成一个图形应用，这样其他人使用它比较方便。但是同样的代码，我在 Mac 上打包后有一些问题，所以我就进行了一些修改。只通过命令行的方式来使用它，设置 alias 别名，我只需要在终端中执行 <code>tieba</code> 就可以启动，然后我需要把贴吧帖子的链接粘贴进去，就可以自动下载图片了。</p>
<p><img src="/img/2023/image-20230304160034037.png" alt="image-20230304160034037"></p>
<p>如果不需要下载就按回车直接退出程序。</p>
<p>现在为了节省粘贴这一步，我打算把 <code>pbpaste</code> 这个 Mac 命令整合进去。让程序运行时，自动读取剪贴板的内容，如果里面包含 tieba 这个词，就询问，例如这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ tieba</span><br><span class="line">您当前剪贴板的内容为： https://tieba.baidu.com/p/8288904408?frwh=index</span><br><span class="line">是否开始下载？是的话请按回车键，否则请输入新的链接。（退出输入 n）</span><br></pre></td></tr></table></figure>

<p>不过在这过程中，我发现其实 Python 可以引入 <code>pyperclip</code> 来进行读写剪贴板的操作。例如读写剪贴板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pyperclip</span><br><span class="line">&gt;&gt;&gt; str = pyperclip.paste()</span><br></pre></td></tr></table></figure>

<p>目前就是简单地判断一下，剪贴板中的字符串，是否包含 <code>tieba</code> 而已。是的话就打印出来，并询问是否下载。</p>
<p>这样修改后，我可以先在浏览器复制链接，然后再到终端执行程序，程序读取到我剪贴板的内容包含 <code>tieba</code> ，询问，我按一下回车键，就可以下载了。比起之前，少了一步 ctrl + v。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 环境变量</title>
    <url>/2023/03/windows-path/</url>
    <content><![CDATA[<p>今天，我在一台 win11 的电脑下载了 <code>git</code> <code>ffmpeg</code>，我选择的是免安装版本。所以下载完我需要自己去添加环境变量。</p>
<p>在 win11 上面，我右键资源管理器的 <code>此电脑</code>，属性。会自动跳转到 <code>设置</code>、<code>系统信息</code> 里面。</p>
<p>需要点击【高级系统设置】，就可以在下方看到【环境变量】了。</p>
<p>双击【用户变量】里面的 <code>Path</code>，会弹出一个【编辑环境变量】的窗口，在里面添加多一行即可，例如我这里添加 git 的</p>
<blockquote>
<p>用户变量只对当前用户有效，系统变量对所有用户有效，由于我电脑就我一个用户，所以添加到用户变量就行了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\xxx\xxx\git\bin</span><br></pre></td></tr></table></figure>

<p>这时我就发现 Windows 和 Mac、Linux 的不同了，在 Windows 的终端，我新建一个标签，是识别不到我刚才添加的环境变量的。必须得新建一个【终端】窗口才行，这点我们可以在 <code>cmd</code> 里，通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %PATH%</span><br><span class="line"># 直接执行 path 也行</span><br></pre></td></tr></table></figure>

<p>来判断。</p>
<p>在 <code>powershell</code> 里则是执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$env:path</span><br></pre></td></tr></table></figure>

<p>来查看环境变量。</p>
<p>而在 Mac、Linux 上面，我们甚至连新建一个标签都可以不用。因为可以使用使用 <code>source ~/.zshrc</code> 来加载新的环境变量。所以看到 Windows 需要新建窗口才行，感觉有点麻烦。</p>
<p>但是当我切换到 pycharm 里面，明明在【终端】里用 cmd 和 powershell 都可以识别到 git，在这里却怎么折腾都识别不到。</p>
<p>最终我选择了重启电脑，然后再次打开 pycharm，才终于可以在 pycharm 的终端识别到 git 。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell 的别名、函数与配置文件</title>
    <url>/2023/03/windows-powershell/</url>
    <content><![CDATA[<p>alias 别名，使用它我们可以提高使用命令行的效率。</p>
<p>例如在 Linux 中，我喜欢把 <code>d</code> 设置为 <code>docker</code>的别名。只需要在终端中执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias d=&#x27;docker&#x27;</span><br><span class="line">d ps</span><br></pre></td></tr></table></figure>

<p>那么此时 <code>d ps</code> 的作用就等于 <code>docker ps</code></p>
<p>那么在 Windows 上面要怎么使用呢？我现在<code>终端</code>这个程序一打开，默认使用的是 <code>powershell</code>，所以我也主要用它了。</p>
<h3 id="New-Alias"><a href="#New-Alias" class="headerlink" title="New-Alias"></a>New-Alias</h3><p>在这上面使用别名的命令是 <code>New-Alias</code>，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Alias d docker</span><br></pre></td></tr></table></figure>

<p>详细说明可看 <a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_aliases?view=powershell-7.2">官方文档</a></p>
<p>像有些程序，它的路径比较长，我们也可以通过别名的方式，来较快速地使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Alias whisper &quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot;</span><br></pre></td></tr></table></figure>

<p>但是，New-Alias 的值是不能包含空格的，还是用 docker 来举例子。</p>
<p>如果我在 Linux，我可以这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias di=&#x27;docker images&#x27;</span><br><span class="line">di</span><br></pre></td></tr></table></figure>

<p>后面的值只需要用引号包裹就行。但是在 <code>powershell</code> 里，alias 不能这样设置，此时得用函数 <code>function</code>。</p>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p><a href="https://learn.microsoft.com/zh-cn/powershell/scripting/learn/ps101/09-functions?view=powershell-7.2">官方文档</a>，示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function di &#123; docker images &#125;</span><br></pre></td></tr></table></figure>

<p>按我的理解，别名就是用来缩短命令的，因为 powershell 的命令都比较长，而且还用 <code>-</code> 连接，例如 <code>Get-ChildItem</code>。可读性确实比较强，但是敲起来就不是那么方便了。</p>
<p>函数就可以把长命令封装起来，其实相比 alias 也就多了花括号。</p>
<p>我这边想的是，缩短我使用 whisper 时需要输入的字符。所以我定义了一个函数 wme 意思是 whisper medium english。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wme &#123; &quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot; --model medium --language English &#125;</span><br></pre></td></tr></table></figure>

<p>那么按理来说，我之后只要执行 <code>wme xxx.mp3</code> 就等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot; --model medium --language English xxx.mp3</span><br></pre></td></tr></table></figure>

<p>然而在 function 里就不是这么用了，后面的 xxx.mp3 它其实是算一个参数。正确的写法应该是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wme &#123; &amp; &quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot; --model medium --language English $args[0]&#125;</span><br></pre></td></tr></table></figure>

<h3 id="powershell-的配置文件"><a href="#powershell-的配置文件" class="headerlink" title="powershell 的配置文件"></a>powershell 的配置文件</h3><p>我们定义的别名和函数，应该怎么保存下来，让我们下次打开 <code>powershell</code> 时，就自动加载呢？在 Linux 上面我们是将它们写入用户目录下的 <code>.bashrc</code> 或者 <code>.zshrc</code> 来实现的。</p>
<p>那么 powershell 里面，有没有类似 <code>.bashrc</code> 的文件呢？也是有的，但是默认情况下没有这个文件。可以先执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test-Path $profile</span><br></pre></td></tr></table></figure>

<p>判断一下有没有这个文件，有的话会输出 True。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$profile  # 查看它的路径</span><br><span class="line">notepad $profile  # 用记事本打开这个文件</span><br></pre></td></tr></table></figure>

<p>如果没有这个配置文件，可以使用命令来创建它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Item -path $profile -type file –force</span><br></pre></td></tr></table></figure>

<p>它一般的路径在用户目录下的 <code>Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code></p>
<p>之后我们只需将别名和函数粘贴到里面，下次启动 <code>powershell</code> 就会自动加载的。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>MIUI13 如何添加桌面小部件？</title>
    <url>/2023/03/MIUI13-Android-widget/</url>
    <content><![CDATA[<p>今天我想在手机上面，添加一个应用的小部件。但是，我死活找不到怎么添加。明明前段时间我还把 “原神战绩”这个小部件，添加到桌面过的。</p>
<p>一番搜索后，发现关键点在于【断网】。下面是详细的添加步骤：</p>
<p>在手机桌面，我们可以通过双指捏合、或长按桌面空白处，来呼出【添加小部件】按钮。</p>
<p><img src="/img/2023/Screenshot_2023-03-10-13-13-56-014-edit_com.miui.home.jpg" alt="添加小部件"></p>
<p>点击之后，有两个选项，【推荐】和【分类】，里面都是 MIUI 推荐的小部件，我们自己装的 app 的小部件，大多数是不会显示在这里的。</p>
<p><img src="/img/2023/Screenshot_2023-03-10-13-14-29-909-edit_com.miui.personalassistant.jpg" alt="推荐与分类"></p>
<p>那么不是还有个搜索吗？我直接搜呢？不好意思，也是搜不到的。这让我觉得非常恶心。</p>
<p>网上搜索了解之后，我找到了解决方案。先让手机处于断网状态，开飞行模式最直接，不过也可以关闭 WiFi 和数据就行了。此时再点击搜索，就会发现底部有一行【安卓小部件】。</p>
<p><img src="/img/2023/Screenshot_2023-03-10-13-58-19-696_com.miui.personalassistant.jpg" alt="断网下的搜索"></p>
<p>点击之后就可以看到我们自己装的 app 所带的小部件了。</p>
<p><img src="/img/2023/Screenshot_2023-03-10-13-58-52-006_com.miui.home.jpg" alt="其它应用的小部件"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖建立永久 root 账号</title>
    <url>/2023/03/synology-root-ssh/</url>
    <content><![CDATA[<p>每次 ssh 登录群晖，我们只能以管理员的身份登录。虽然输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<p>可以临时切换到 root 账号，但是需要输入一次管理员密码，还是麻烦了点。如果能够直接用 root 账号 ssh 登录就好了。</p>
<p>具体的操作如下：</p>
<p>先 ssh 连接上，输入 <code>sudo -i</code> 切换到 root 账号。</p>
<p>接着编辑 ssh 的配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>找到这一行（大概在 44 行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin yes</span><br></pre></td></tr></table></figure>

<p>把光标放到 <code>#</code> 上面，然后按一下 del 键可以删除掉这个井号。</p>
<p>另一种删除方法是，按键盘的 <code>i</code> 键，进入编辑模式，此时左下方会显示 <code>-- INSERT --</code>，然后按 退格键来删除（需要先把光标移动到 P），删除完成按 <code>ESC</code>  来退出编辑模式。</p>
<p><img src="/img/2023/image-20230310165517949.png" alt="PermitRootLogin"></p>
<p>两种方法都一样的，希望对不懂 vim 的小伙伴有帮助。删除之后，需要保存。方法是，在英文输入法的状态下，输入 <code>:</code>，先按住 <code>Shift</code> 键，再按一下 <code>;:</code> 键，应该可以看到左下角出现一个冒号 : 了。</p>
<p>接着输入 <code>wq</code> ，意思是保存并退出，再按回车键就可以了。</p>
<p>之后需要重启群晖</p>
<p>然后再一次 ssh 登录进来，执行 <code>sudo -i</code>，然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synouser --setpw root password</span><br></pre></td></tr></table></figure>

<p>意思是群晖用户，设置密码，把 root 用户的密码设置为 password，你可以把 password 改为自己想设置的密码。</p>
<p>执行完就可以直接用 root 账号登录了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建一个指定像素的矩形？Photoshop 和 Affinity Photo</title>
    <url>/2023/03/specified-pixels-rectangle/</url>
    <content><![CDATA[<p>在 Photoshop 里面，我们先在左边选择矩形工具，快捷键为 U</p>
<p><img src="/img/2023/image-20230312232057058.png" alt="矩形工具"></p>
<p>然后按住鼠标随意画出一个矩形。之后来到右边，直接在属性里面修改它的宽高值就行，例如我这里改成 1920 和 1080</p>
<p><img src="/img/2023/image-20230312231507993.png" alt="属性"></p>
<p>Affinity Photo 的方法差不多，左边选择矩形工具，快捷键为 U，画出矩形后，选中矩形，在右下角的「变换」里可以更改。</p>
<p><img src="/img/2023/Snipaste_23-03-09_23-07-19.jpg" alt="变换"></p>
<p>下面这张图，就是通过这种方式制作出来的，其实有一些不足，就是蓝色的有点偏右。想要它们对齐的，只要 X Y 保持一样的数值就可以了。</p>
<p><img src="/img/2023/720vs1296.jpg" alt="720vs1296"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>群晖 NAS 里怎么更新 Docker 容器</title>
    <url>/2023/03/synology-update-docker-container/</url>
    <content><![CDATA[<p>我在使用一款自建的开源备忘录应用 memos，我把它运行在群晖里面。使用的是 docker，一条命令即可运行起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest</span><br></pre></td></tr></table></figure>

<p>我在群晖里面，网络直接使用 host，因此不需要填写端口，只需在「存储空间」里选择一个目录，来映射到容器内的 <code>/var/opt/memos</code>。</p>
<p>目前使用了两周多了，感觉还挺不错的。</p>
<p>现在的问题是，我运行的是 <code>0.10.3</code> 的版本，目前最新的版本已经到 <code>0.11.2</code> 了，我想要升级到最新的版本。</p>
<p>下面是我的实际操作。</p>
<p>首先我们要拉取最新的镜像，依旧到注册表搜 memos，右键然后点「下载此映像」，或者直接双击也可以。</p>
<p><img src="/img/2023/image-20230313180358859.png" alt="search-memos"></p>
<p>镜像下载完成之后，我们把容器停掉，再重新打开，是没有效果的，依然还是旧版本的。此时应该做的是，创建一个新的容器。但是在群晖里面，我们不需要重新填写容器的配置，因为它可以直接复制。选中一个容器，然后上方的设置里面，有个「复制设置」的选项。</p>
<p><img src="/img/2023/image-20230313181037438.png" alt="copy-settings"></p>
<p>点击之后，它会让我们「输入新容器的名称」，我给它起名为 「memos-0.11.2」，因为我估计过段时间又得来升级的，那就每次复制后都填一下当前的版本吧。</p>
<p>然后我们可以启动这个新的容器，看看运行正不正常，正常的话，就可以删掉旧的容器了。</p>
<p>我这个容器比较简单，而且网络方面直接用 host，所以不用设置端口。</p>
<p>但是我发现其它需要设置端口的容器，复制之后，端口会发生变化的。例如我有一个容器的端口是 10086，复制之后，群晖自动给新的容器生成一个随机端口，如 <code>49155</code> ，所以看来，带端口的容器，复制之后，还得修改一下。</p>
<p><img src="/img/2023/image-20230313190505946.png" alt="port-10086"></p>
<p>但是我们不能直接修改新容器的端口，因为不能两个容器同时使用一个端口。例如我这里的 <code>10086 </code>已经被就容器占用了，新的容器就没法用。虽然直接把旧容器删除了，新容器就可以使用 <code>10086</code> 这个端口，但是现在并不清楚新容器，是否能正常运行，所以不建议删。</p>
<p>我们可以先修改旧容器的端口，例如改为 <code>10087</code>，然后再修改新容器的。这样新的容器应该就可以运行起来了。</p>
<p>不过，此时如果你用命令行或者 portainer 查询镜像，应该会发现，多出一个 TAG 为 none 的镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker images</span><br><span class="line">REPOSITORY                TAG               IMAGE ID       CREATED         SIZE</span><br><span class="line">neosmemo/memos            latest            8b795254a96c   2 days ago      34.5MB</span><br><span class="line">neosmemo/memos            &lt;none&gt;            50d503594da5   4 weeks ago     24.8MB</span><br></pre></td></tr></table></figure>

<p>从日期我们也可以判断出，none 就是那个旧的版本。想要删除它，我们需要把旧的容器删除掉。</p>
<p>之后如果你是用 portainer 的话，勾选然后删除即可。如果没装 portainer，那就用命令行来删除吧，因为群晖的 docker 面板里，在映像中是找不到它的。</p>
<p>先 ssh 连接群晖，执行 <code>sudo i</code> 切换到 root 用户。如果你也为每次都要这样操作一次而感到困扰，可以参考一下我之前的文章：<a href="/2023/03/synology-root-ssh/">群晖建立永久 root 账号</a></p>
<p>需要先列出设备中所有 docker 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>然后找到 none 的 IMAGE ID，像我这里是 <code>50d503594da5</code>，然后可以像这样来删除它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi 50d503594da5</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>群晖</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次清理服务器硬盘空间</title>
    <url>/2023/03/clean-up-the-server-disk/</url>
    <content><![CDATA[<p>服务器的硬盘空间告急，只剩下 100 多 M 可用。</p>
<p>我好像也没怎么存东西在里面呀，估计又是哪些软件生成日志之类的，占满了硬盘空间。</p>
<p>排查的话可以用 <code>ncdu</code> ，如果没有这个命令可以用 <code>apt</code> 装一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ncdu /</span><br></pre></td></tr></table></figure>

<p>让它直接分析整个根目录。完成后它会按占用空间从大到小排序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13.2 GiB [##########] /home                   </span><br><span class="line"> 3.8 GiB [##        ] /usr</span><br><span class="line"> 2.6 GiB [#         ] /var</span><br><span class="line">81.3 MiB [          ] /boot</span><br><span class="line">77.5 MiB [          ] /root</span><br><span class="line"> 9.0 MiB [          ] /etc</span><br></pre></td></tr></table></figure>

<p>我们可以很直观地看出哪些目录占用的空间大，然后根据实际情况清理。home 目录就比较简单了，不用的东西删掉就行。</p>
<p>而我这边发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/journal/</span><br></pre></td></tr></table></figure>

<p>居然占用了 1.4G 的空间，从名字也可以知道它是日志文件。</p>
<p>执行一下 <code>journalctl</code> 我发现了这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: tat_agent.service: Scheduled restart job, restart counter is at 10194343.</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: Stopped tat_agent.</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: Starting tat_agent...</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1632911]: tat_agent.service: Changing to the requested working directory failed: No such file or&gt;</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1632911]: tat_agent.service: Failed at step CHDIR spawning /usr/local/qcloud/tat_agent/tat_agent&gt;</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: tat_agent.service: Control process exited, code=exited, status=200/CHDIR</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: tat_agent.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: Failed to start tat_agent.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: tat_agent.service: Scheduled restart job, restart counter is at 10194344.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: Stopped tat_agent.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: Starting tat_agent...</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1632929]: tat_agent.service: Changing to the requested working directory failed: No such file or&gt;</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1632929]: tat_agent.service: Failed at step CHDIR spawning /usr/local/qcloud/tat_agent/tat_agent&gt;</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: tat_agent.service: Control process exited, code=exited, status=200/CHDIR</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: tat_agent.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: Failed to start tat_agent.</span><br></pre></td></tr></table></figure>

<p>这个 <code>tat_agent.service</code> 5、6 秒就执行一下，由于我使用的是腾讯的云服务器，而我之前把 <code>/usr/local/qcloud/</code> 这个目录给删除了，所它一直报错，一直重试……</p>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop tat_agent</span><br><span class="line">systemctl disable tat_agent</span><br><span class="line">rm -f /etc/systemd/system/tat_agent.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar 14 10:36:41 VM-4-3-ubuntu systemd[1]: Stopped tat_agent.</span><br></pre></td></tr></table></figure>

<p>至于 <code>/var/log/journal/</code> 我直接 <code>rm -r</code> 给删除了。</p>
<p>然后再清理一下 home 目录中的文件，硬盘可用空间变成了 8.8G 了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在 docker 中使用 Golang 编译 RISC-V 应用</title>
    <url>/2023/03/docker-golang-compile-riscv-app/</url>
    <content><![CDATA[<p>我想给 vision five 2 装个 web 服务器 caddy，结果发现它不提供 RISC-V 版的可执行文件下载。</p>
<p>那就只能自己编译咯，毕竟是开源应用嘛。</p>
<p>由于机器上也没有装 Go，所以我选择用其它的设备来交叉编译。</p>
<p>我编译的设备是 d2550，没想到它还能在这种地方发光发热。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it golang:alpine3.17</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/go # go version</span><br><span class="line">go version go1.20.2 linux/amd64</span><br></pre></td></tr></table></figure>

<p>用 docker 可以很方便就拥有一个可编译的环境，那么接着需要下载代码，下载需要使用到 wget，由于我下载了 zip 压缩包，所以还得装一个 unzip，如果下载 tar 包就不用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add wget upzip</span><br><span class="line">wget https://github.com/caddyserver/caddy/archive/refs/tags/v2.6.4.zip</span><br><span class="line">unzip v2.6.4.zip</span><br></pre></td></tr></table></figure>

<p>解压出来一个 caddy-2.6.4 的目录，那么进入这个目录，再进入 cmd&#x2F;caddy</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br><span class="line">go build</span><br></pre></td></tr></table></figure>

<p>编译完成就会多出一个名为 caddy 的文件，不过这样编译的是 amd64 版的，我想要编译 RISC-V 版。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGO_ENABLE=0 GOOS=linux GOARCH=riscv64 go build</span><br></pre></td></tr></table></figure>

<p>这样编译之后，caddy 这个文件就变成 RISC-V 版的了，使用 file 命令可以查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add file</span><br><span class="line"># file caddy</span><br><span class="line">caddy: ELF 64-bit LSB executable, UCB RISC-V, double-float ABI, version 1 (SYSV), statically linked, Go BuildID=Sl5DFjHtcm44runPVDQz/PtAVfjFrZ7ix6z2eqOtp/bjeL6tdqc9Bu0ZnsWsXf/--2q9FfQEXqHen90fHNn, with debug_info, not stripped</span><br></pre></td></tr></table></figure>

<p>此时这个文件是在 docker 容器中的，我们可以使用 docker cp 命令将它复制出来。这里我是多开一个 ssh 标签。</p>
<p>需要先去查一下容器的 ID，用 docker ps，我这里查到是 <code>bb95e6bfb7e9</code>，然后像这样复制出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp bb95e6bfb7e9:/go/caddy-2.6.4/cmd/caddy/caddy .</span><br></pre></td></tr></table></figure>

<p>之后再想办法将它传到 RISC-V 开发板上。这一切完成之后，可以直接把容器删掉，甚至把镜像也删掉也行，不会生出多余的文件，很不错。</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么使用 apt 安装某些应用的时候，不需要按 y 确认？</title>
    <url>/2023/03/why-apt-no-need-for-confirm/</url>
    <content><![CDATA[<p>例如我在 Ubuntu 18.04 里面，安装 ncdu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install ncdu</span><br></pre></td></tr></table></figure>

<p>它不需要我按 y，就可以直接安装完成。但如果我安装个 php，它就需要询问我，在我按 y 确认之后，才会进入安装。虽然我们可以通过在命令中加入 <code>-y</code> 参数来自动确认，例如这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install php -y</span><br></pre></td></tr></table></figure>

<p>但是我好奇的是，为什么有些时候需要确认，有些时候不需要？</p>
<p>这是来自 ChatGPT 的回答</p>
<blockquote>
<p>对于某些较小的软件包，apt 安装时不需要确认是因为它们没有与其他软件包发生依赖关系或冲突。这些软件包通常只包含一些脚本、配置文件或其他小型组件，因此安装它们不会对系统的其他部分造成影响。</p>
<p>当 apt 安装一个包时，它会检查该包是否需要依赖其他包或冲突于已安装的包。如果没有，则 apt 不会询问用户是否确认安装该包，并自动安装。</p>
<p>因此，在某些情况下，如果软件包非常小并且没有与其他包发生依赖关系或冲突，则在安装过程中不需要手动确认安装。但是，在安装任何软件包之前，最好检查其详细信息，以确保其不会对系统造成不良影响。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>自动纠正文章中的格式 autocorrect</title>
    <url>/2023/03/auto-correct/</url>
    <content><![CDATA[<p>发现一个好用的工具 <a href="https://github.com/huacnlee/autocorrect">autocorrect</a> ，是 GitHub 上一个开源项目。官方介绍：</p>
<blockquote>
<p>AutoCorrect 是一个基于 Rust 编写的工具，用于「自动纠正」或「检查并建议」文案，给 CJK（中文、日语、韩语）与英文混写的场景，补充正确的空格，纠正单词，同时尝试以安全的方式自动纠正标点符号等等。</p>
</blockquote>
<p>感觉好像挺不错的，我可以使用它，自动给文字中的英文加空格。</p>
<p>看了下 <a href="https://github.com/huacnlee/autocorrect/releases">https://github.com/huacnlee/autocorrect/releases</a> ，里面有提供 Windows 的可执行文件，当然是命令行版本的，这工具并没有 GUI 的程序。于是我下载来体验看看。</p>
<h4 id="基础用法-–lint"><a href="#基础用法-–lint" class="headerlink" title="基础用法 –lint"></a>基础用法 –lint</h4><p>lint 这个单词我查了一下</p>
<blockquote>
<p>n. 软麻布；线头；棉绒<br>vi. 飞散出棉线</p>
</blockquote>
<p>这里难道是指，我们文章中那些不规范的地方，就像是线头？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocorrect.exe --lint C:\text.md</span><br></pre></td></tr></table></figure>

<p>使用起来很简单，命令名 参数 文件路径，执行后会快速检查文本中的内容。我使用的是一个 markdown 文件，里面的字数有 2 万 3（由 typora 统计的）</p>
<p><img src="/img/2023/image-20230316204751544.png" alt="autocorrect"></p>
<p>检测只用了不到 55 毫秒，确实很快。红色的就是我原本的内容，绿色的就是它建议修改后的格式。<code>--lint</code> 只是显示建议而已，不会直接修改文件的。</p>
<p>感觉还不错：</p>
<ul>
<li>中英混写的，它会建议加空格。</li>
<li>汉字和阿拉伯数字也是建议加空格。</li>
<li>多余的空格会建议删掉</li>
</ul>
<p>我建立了个 txt 文件，写下这些内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">javascript</span><br><span class="line"></span><br><span class="line">你好，haha。。。。</span><br></pre></td></tr></table></figure>

<p>检测后是没有错误，我还预期它会改正写法呢，改为 Python，JavaScript。按理说这个应该不难，可能是有其它方面的考虑吧，例如改到代码之类。</p>
<p>不过我这四个句号 <code>。。。。</code>，肯定是不规范吧，我还期待看它会怎么改呢。</p>
<h4 id="完整参数"><a href="#完整参数" class="headerlink" title="完整参数"></a>完整参数</h4><p>通过执行 -h 可以查看说明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocorrect -h</span><br><span class="line">A linter and formatter for help you improve copywriting, to correct spaces, words, punctuations between CJK (Chinese, Japanese, Korean).</span><br><span class="line"></span><br><span class="line">Usage: autocorrect.exe [OPTIONS] [FILE]... [COMMAND]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  init    Initialize AutoCorrect config file.</span><br><span class="line">  update  Update AutoCorrect to latest version.</span><br><span class="line">  help    Print this message or the help of the given subcommand(s)</span><br><span class="line"></span><br><span class="line">Arguments:</span><br><span class="line">  [FILE]...  Target filepath or dir for format. [default: .]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --lint               Lint and output problems.</span><br><span class="line">      --fix                Automatically fix problems and rewrite file.</span><br><span class="line">      --debug              Print debug information.</span><br><span class="line">      --format &lt;FORMAT&gt;    Output format. [default: diff] [possible values: diff, json]</span><br><span class="line">      --threads &lt;THREADS&gt;  Number of threads, 0 - use number of CPU. [default: 0]</span><br><span class="line">  -c, --config &lt;CONFIG&gt;    Special config file. [default: .autocorrectrc]</span><br><span class="line">      --type &lt;FILETYPE&gt;    Directly use set file type.</span><br><span class="line">      --stdin              Input text from &lt;STDIN&gt;</span><br><span class="line">      --no-diff-bg-color   Disable diff background color for diff output.</span><br><span class="line">  -h, --help               Print help</span><br><span class="line">  -V, --version            Print version</span><br></pre></td></tr></table></figure>

<p>我们可以先使用 <code>lint</code>检测问题，确认之后，使用 <code>fix</code>来改正。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocorrect.exe --fix C:\text.md</span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>使用 <code>--config</code> 还能使用配置文件，需要先初始化一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\bin&gt; .\autocorrect.exe init</span><br><span class="line">Fetching https://github.com/huacnlee/autocorrect/raw/main/.autocorrectrc.template</span><br><span class="line">AutoCorrect init config: .autocorrectrc</span><br><span class="line">PS C:\bin&gt; ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: C:\bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a----         2023/3/16     21:10           2025 .autocorrectrc</span><br><span class="line">-a----          2023/2/9      0:19        9476096 autocorrect.exe</span><br></pre></td></tr></table></figure>

<p>这样它就会从 GitHub 下载模板，然后在当前目录下保存为 <code>.autocorrectrc</code>。此时我再来执行检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\powersee\Downloads\test.txt:3:1</span><br><span class="line">-javascript</span><br><span class="line">+JavaScript</span><br><span class="line"></span><br><span class="line">C:\Users\powersee\Downloads\test.txt:7:1</span><br><span class="line">-Youtube</span><br><span class="line">+YouTube</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Error: 0, Warning: 2</span><br></pre></td></tr></table></figure>

<p>下载模板之后，再来检测，就会出建议了。不过这里是 Warning，执行 fix 是不会改正的。</p>
<p>此时我只要修改配置文件，改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spellcheck: 1</span><br></pre></td></tr></table></figure>

<p>再次检测，刚才的两个 Warning，就变成 Error 了。再使用 fix 就可以改正了。</p>
<p>因为这个配置，是使用数字来控制的。</p>
<blockquote>
<p>0 - off, 1 - error, 2 - warning</p>
</blockquote>
<p>如果我不想要它检查英文的大小写，直接设置为 0 就行。</p>
<p>之所以之前检查 javascript 没问题，下载好配置文件后，就发现问题。是因为配置文件里有这部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spellcheck:</span><br><span class="line">  words:</span><br><span class="line">    # Please do not add a general English word (eg. apple, python) here.</span><br><span class="line">    # Users can add their special words to their .autocorrectrc file by their need.</span><br><span class="line">    - ActiveMQ</span><br><span class="line">    - AirPods</span><br><span class="line">    - Aliyun</span><br><span class="line">    ……</span><br><span class="line">    - JavaScript</span><br></pre></td></tr></table></figure>

<p>里面定义了 JavaScript 为正确写法。（看到这里我才意识到，python 是一个英文单词，蟒蛇，所以不应该被添加进配置文件里面。）</p>
<p>那在这个配置文件里，我们应该可以自己添加单词，例如我想把文章中，<code>powersee</code> 改为 <code>Powersee</code>，那我只需要把 <code>Powersee</code>添加进去就行。</p>
<p>然而当我添加进去之后，我发现，检查不出任何错误了……不管我添加了在开头，还是在结尾，都不行。甚至在中间也不行，反正只要我添加任何单词进去，这个配置文件就好像失效了。</p>
<p>所以目前我还没弄懂怎么回事，以后要是弄明白自己自定义这部分，再来更新吧。</p>
<h4 id="不用命令行"><a href="#不用命令行" class="headerlink" title="不用命令行"></a>不用命令行</h4><p>如果只是想改正一篇文章而已，那可以不用去下载这个命令行工具，直接访问 <a href="https://huacnlee.github.io/autocorrect">https://huacnlee.github.io/autocorrect</a> ，把文章内容粘贴进去，在网页里修改就行了。</p>
<p>而且它还有 <a href="https://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect">vscode 的插件</a>，我安装好后，直接用 vscode 打开我的文章就行了。</p>
<p>事实上，刚装好，我就把插件给停用了。</p>
<p>原因是我文章里有这么一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看了下 https://github.com/huacnlee/autocorrect/releases ，里面有提供 Windows 的可执行文件</span><br></pre></td></tr></table></figure>

<p>我的链接后面是加了空格，再用逗号的。那么使用插件的话，会检测到这个空格，它觉得是多余的，要求我删掉。那么删掉之后，我的链接就错误了，因为会把逗号以及后面的汉字，一起识别为 url 的一部分。也就是说这个空格是必须要有的。</p>
<p>但是，此时我没法把它加回来，因为加回空格之后，再保存，插件会自动把空格去掉……看来我这种情况，不适合使用这个插件。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>都什么年代了，还在手动修改 Linux 软件源？APT Proxy 使用体验</title>
    <url>/2023/03/apt-proxy/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote>
<p>APT Proxy 是一款轻量的、可靠的 APT &#x2F; YUM &#x2F; APK 包（Ubuntu &#x2F; Debian &#x2F; CentOS &#x2F; ALPINE ）缓存工具，能够在各种不同的操作系统环境中运行。</p>
</blockquote>
<p>这是来自 <a href="https://github.com/soulteary/apt-proxy/blob/main/README_CN.md">官方文档</a> 开头的介绍，现在的作者 <a href="https://soulteary.com/">苏洋</a> 是一位能力很强的博主，他对停留在 2015 年的原项目进行修改，有了现在这个版本。</p>
<p>而且已经不只是给 apt 用而已了，还可以给 centos 和 alpine 用，更加强大了。</p>
<p>想要更深入的了解，可以观看苏洋大佬的两篇文章：</p>
<p><a href="https://soulteary.com/2022/06/14/lightweight-and-small-zero-configuration-apt-acceleration-tool-apt-proxy.html">轻量小巧的零配置 APT 加速工具：APT Proxy - 苏洋博客 (soulteary.com)</a></p>
<p><a href="https://soulteary.com/2022/11/20/linux-package-download-acceleration-tool-apt-proxy.html">Linux 软件包下载加速工具：APT Proxy - 苏洋博客 (soulteary.com)</a></p>
<p>现在使用它，我们在本地装好服务器后，可以不用去修改软件源了。</p>
<p>平时我得到一个纯净的 Ubuntu 系统后，一般都会去修改 <code>/etc/apt/sources.list</code> ，将里面的内容改为清华或者阿里云的镜像源。现在使用这个工具，我们就可以不用去修改了。只要在使用 apt 的时候设置代理，指向这个工具，就会自动使用最快的镜像源。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行起来也很简单，用 docker 一条命令即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=apt-proxy -p 3142:3142 soulteary/apt-proxy</span><br></pre></td></tr></table></figure>

<p>只需要映射一个端口 <code>3142</code> 而已。查看容器的 log 可以看到这些。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023/03/14 06:15:43 running apt-proxy </span><br><span class="line">2023/03/14 06:15:44 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 using fastest Ubuntu mirror http://ftp.sjtu.edu.cn/ubuntu/</span><br><span class="line">2023/03/14 06:15:44 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 using fastest Debian mirror http://repo.huaweicloud.com/debian/</span><br><span class="line">2023/03/14 06:15:44 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 using fastest CentOS mirror https://mirrors.aliyun.com/centos/</span><br><span class="line">2023/03/14 06:15:45 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 using fastest Alpine mirror http://mirrors.aliyun.com/alpine/</span><br><span class="line">2023/03/14 06:15:45 proxy listening on 0.0.0.0:3142</span><br><span class="line">2023/03/14 06:15:45 Program has been started 🚀</span><br></pre></td></tr></table></figure>

<p>从日志可以看到，它会自动测出速度最快的镜像站。而且此时我们访问 3142 端口，还可以看到 web 界面。</p>
<p><img src="/img/2023/image-20230314141943091.png" alt="apt-proxy-web"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我运行 apt-proxy 的机器 IP 是 192.168.68.172，所以我可以这样这样来使用它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># `apt-get update` with apt-proxy service</span><br><span class="line">http_proxy=http://192.168.68.172:3142 apt-get -o pkgProblemResolver=true -o Acquire::http=true update </span><br><span class="line"># `apt-get install vim -y` with apt-proxy service</span><br><span class="line">http_proxy=http://192.168.68.172:3142 apt-get -o pkgProblemResolver=true -o Acquire::http=true install vim -y</span><br></pre></td></tr></table></figure>

<p>虽然执行之后输出的信息依然显示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get:1 http://archive.ubuntu.com/ubuntu jammy InRelease [270 kB]</span><br><span class="line">Get:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]</span><br><span class="line">Get:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]</span><br><span class="line">Get:4 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [829 kB]</span><br></pre></td></tr></table></figure>

<p>但是它因为使用了代理，其实是用了 <a href="http://ftp.sjtu.edu.cn/ubuntu/">http://ftp.sjtu.edu.cn/ubuntu/</a> 这个镜像源，从速度我们也可以明显感受到。或者直接查看 apt-proxy 的日志也能看到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023/03/18 03:01:30 rewrote &quot;http://archive.ubuntu.com/ubuntu/dists/jammy/InRelease&quot; to &quot;http://ftp.sjtu.edu.cn/ubuntu/dists/jammy/InRelease&quot;</span><br></pre></td></tr></table></figure>

<p>然后它另一个优势，就是它会缓存。如果我们有多台服务器的话，那么第一台安装 vim，apt-proxy 会将 vim 的安装文件缓存下来，而之后的第二台，它就可以直接使用缓存了，不需要去镜像源下载了，速度会快很多。</p>
<h3 id="缩短命令"><a href="#缩短命令" class="headerlink" title="缩短命令"></a>缩短命令</h3><p>不过它这命令也太长了吧，每次都得复制粘贴。我的解决方法是，使用 alias</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias aptp=&quot;http_proxy=http://192.168.68.172:3142 apt-get -o pkgProblemResolver=true -o Acquire::http=true&quot;</span><br></pre></td></tr></table></figure>

<p>我把这么一串命令，起个别名为 <code>aptp</code>，之后我可以这样来使用它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aptp update</span><br><span class="line">aptp install zsh</span><br></pre></td></tr></table></figure>

<p>非常好用的一款工具，推荐经常在本地折腾服务器的朋友，都可以去尝试一下。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>使用油猴脚本实现自动点击签到按钮</title>
    <url>/2023/03/tampermonkey-auto-signin/</url>
    <content><![CDATA[<p>有很多网站，需要我们打开网页之后，点击上面的签到按钮，来完成当天的签到。</p>
<p>如果利用油猴脚本，我们可以实现打开网页后，查找按钮，如果找到了，就自动点击。</p>
<p>首先打开想签到的网页，然后点击油猴插件，点击「添加新脚本」，给的默认模板是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ==UserScript==</span><br><span class="line">// @name         New Userscript</span><br><span class="line">// @namespace    http://tampermonkey.net/</span><br><span class="line">// @version      0.1</span><br><span class="line">// @description  try to take over the world!</span><br><span class="line">// @author       You</span><br><span class="line">// @match        https://www.xxx.com/</span><br><span class="line">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=xxx.com</span><br><span class="line">// @grant        none</span><br><span class="line">// ==/UserScript==</span><br><span class="line"></span><br><span class="line">(function() &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    // Your code here...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>由于我们需要等网页加载完成，再来查找按钮，所以需要添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// @run-at       document-idle</span><br></pre></td></tr></table></figure>

<p>可以加在 <code>// ==/UserScript==</code> 的上方，变成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// @grant        none</span><br><span class="line">// @run-at       document-idle</span><br><span class="line">// ==/UserScript==</span><br></pre></td></tr></table></figure>

<p>感觉也找不到合适网站来作为案例，就拿百度的那个「百度一下」来讲解吧，反正弄懂了原理，换其它网站也就没问题。</p>
<p>在浏览器按 F12，弹出来的开发者工具，按 <code>ctrl + shift + c</code> 这三颗按键，然后选中「百度一下」</p>
<p>可以发现它是一个 input</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn self-btn bg s_btn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种有 id 的最简单，因为网页中的 id 是唯一的。用 js 来选中它，然后点击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;su&#x27;).click()</span><br></pre></td></tr></table></figure>

<p>在「控制台」执行这行代码，就跟我们手动去点击「百度一下」的作用是一样的。</p>
<p>如果你要签到的网站也是这么简单，签到按钮有 id，那只需要把上面的 su 换为你找到的 id 就行。例如我有个网站，它的签到按钮 id 是 <code>sign_title</code> ，那我只需要改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;sign_title&#x27;).click()</span><br></pre></td></tr></table></figure>

<p>在 <code>// ==/UserScript==</code> 的下方，我们可以改为这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sign_title&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>很简单就可以实现一个自动点击的脚本了。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本——先判断文本内容</title>
    <url>/2023/03/tampermonkey-judge-text/</url>
    <content><![CDATA[<p>有时候，一些签到按钮，签到完成之后是依然可以点击的。如果只是用 id 来获取到元素，然后点击，就会导致明明签到完成了，还继续点击按钮。</p>
<p>此时我们可以加入一个判断条件。看来还是得拿个实际例子，<a href="https://xiage.yy.com/forum-234-1.html">王者荣耀 - 虾哥论坛</a></p>
<p>这个网站，我们没有账号也可以访问，我们可以看到它有一个「签到」按钮。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:to_sign(fid, uid)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkin-btn follow-show&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkin-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于它有 id ，所以获取起来很简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;checkin-btn&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我有这个论坛的账号，我知道点击之后，按钮的文字，会从<code>签到</code> 变成 <code>已签到</code>。</p>
<p>那么我们要做的就是，在执行点击之前，判断一下，里面的文字是否 <code>签到</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         王者荣耀-虾哥-点击签到</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       Powersee</span></span><br><span class="line"><span class="comment">// @match        https://xiage.yy.com/forum-234-1.html</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=yy.com</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;checkin-btn&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (btn.<span class="property">textContent</span> == <span class="string">&#x27;签到&#x27;</span>) btn.<span class="title function_">click</span>()</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>完整的代码如下，我发现用 <code>// @run-at       document-idle</code> 似乎有些问题，所以改成了事件监听。</p>
<p>有些签到按钮，点击之后文字就会发生变化。</p>
<table>
<thead>
<tr>
<th align="left">签到前</th>
<th align="left">签到后</th>
</tr>
</thead>
<tbody><tr>
<td align="left">签到</td>
<td align="left">已签到</td>
</tr>
<tr>
<td align="left">签到</td>
<td align="left">已签</td>
</tr>
</tbody></table>
<p>像这种我们可以直接用 <code>==</code> 来判断里面的字符串，但是有的时候，我们想要的是，判断里面的文字，是否包含某些字符串。</p>
<p>例如，有些网站，它的签到按钮文字是 <code>领取今日的登录奖励</code> </p>
<p>我们可以用 <code>includes()</code> 方法来判断。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (btn.<span class="property">textContent</span>.<span class="title function_">includes</span>(<span class="string">&#x27;领取今日&#x27;</span>)) btn.<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure>

<p>这行代码，就是判断是否包含 <code>领取今日</code> 这几个字，如果是，就点击。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 do-release-upgrade 升级 Ubuntu 版本</title>
    <url>/2023/03/do-release-upgrade-ubuntu/</url>
    <content><![CDATA[<p>最近给我的两台服务器，都升级了 Ubuntu 版本。个人感觉，如果服务器里的东西不多，还不如备份之后，重装系统，直接装个 22.04 可能会比一步一步升级快。</p>
<p>我目前有一台服务器用的是 Ubuntu 18.04 LTS，平时装应用有这样那样的问题，我打算给它升级一下。</p>
<p>平时 ssh 登录上之后，也经常能看到提示升级。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do-release-upgrade</span><br></pre></td></tr></table></figure>

<p>执行这个命令，就可以升级 Ubuntu 的版本。不过在此之前，我们需要先 update 和 upgrade。当我这些做完之后，却发现，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do-release-upgrade</span><br></pre></td></tr></table></figure>

<p>后提示这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please install all available updates for your release before upgrading</span><br></pre></td></tr></table></figure>

<p>可是我明明已经没东西可以再更新了……</p>
<p>网上搜索后，别人说试试这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">sudo do-release-upgrade</span><br></pre></td></tr></table></figure>

<p>结果试了也没用，最终发现，问题出现在第三方软件源上面。</p>
<p>因为之前直接用 apt 安装 nodejs，这样安装的是旧版本的。我现在运行的应用要求使用 node18。</p>
<p>所以之前根据教程，下载了这个脚本，执行后，会添加 node 的软件源。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh</span><br></pre></td></tr></table></figure>

<p>它就在 <code>/etc/apt/sources.list.d</code> 里面，执行下面的命令可以禁用第三方源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *.list; <span class="keyword">do</span> <span class="built_in">mv</span> <span class="variable">$&#123;i&#125;</span> <span class="variable">$&#123;i&#125;</span>.disabled; <span class="keyword">done</span> </span><br><span class="line">apt clean</span><br><span class="line">apt autoclean </span><br><span class="line">sudo do-release-upgrade </span><br></pre></td></tr></table></figure>

<p>不过我不是这么做的，我直接把里面的 node 源给删了，剩下的 docker 源没动它。之后再执行 <code>do-release-upgrade</code> 就可以继续进行了。</p>
<p>升级的过程中，有很多选项，还是挺麻烦的。不过好在最后升级成功了，从 18.04 升级到了 20.04.6。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>椰羊签到——群晖自动完成米游社任务</title>
    <url>/2023/03/cocogoat-signin-synology/</url>
    <content><![CDATA[<p>发现一个不错的项目，可以自动到米游社完成每日签到。</p>
<p>项目：<a href="https://github.com/Akegarasu/cocogoat-signin">椰羊签到 - 年轻人的第一款米游社签到工具</a></p>
<p>使用 Go 写的工具，我们直接运行可执行文件即可。程序用的是米游社的 cookie，获取方法可以看项目的 readme。</p>
<p>我打算把它放到群晖里，然后设置每天定时运行。</p>
<blockquote>
<p>经过测试，目前似乎无法签到，能做到的只有自动阅读，点赞，分享帖子。米游社签到和原神签到，还是得手动去做……</p>
</blockquote>
<p>下面开始教程</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先到 <a href="https://github.com/Akegarasu/cocogoat-signin/releases">https://github.com/Akegarasu/cocogoat-signin/releases</a> 下载程序，群晖 x86_64 的下载名字为 <code>cocogoat-signin_linux_amd64.tar.gz</code> 的，这是一个压缩包，可以用电脑解压。</p>
<p>电脑上我用 Bandizip 是可以打开的，把里面的 <code>cocogoat-signin</code> 解压出来。</p>
<p>也可以直接把压缩包传到群晖里，然后在 <code>File Station</code> 里面，右键压缩包，「解压缩」，「解压缩至此目录」。我们得到了一个 tar 结尾的压缩包，对这个新的压缩包，右键，「解压缩」，「解压缩至此目录」。就可以把里面的 <code>cocogoat-signin</code> 解压出来。</p>
<p><img src="/img/2023/cocogoat-decompress.png" alt="cocogoat-decompress"></p>
<p>我是在 docker 目录下，建立了一个 cocogoat 的目录，程序就放在里面。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>要运行它，需要有一个配置文件 <code>config.yml</code></p>
<p>这个配置文件，如果我们 ssh 连接群晖，然后执行一下程序，就会自动生成的。但是这里考虑到小白用户，我写个不用 ssh 的方法。</p>
<p>我们可以到群晖套件里面，安装一下「文本编辑器」。安装好后，打开它。新建，然后把下面的内容粘贴进去。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">tickets:</span></span><br><span class="line">        <span class="attr">cookie:</span> <span class="comment"># 在这个地方井号之前填写你按照教程获取的 cookie</span></span><br><span class="line">        <span class="attr">stuid:</span> <span class="comment"># 不用管 由程序自动填写</span></span><br><span class="line">        <span class="attr">stoken:</span> <span class="comment"># 不用管 由程序自动填写</span></span><br><span class="line">        <span class="attr">loginTicket:</span> <span class="comment"># 不用管 由程序自动填写</span></span><br><span class="line">      <span class="attr">BBSTaskConfig:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用米游社任务 true为启用 false为禁用 下面一样</span></span><br><span class="line">        <span class="attr">readPosts:</span> <span class="literal">true</span> <span class="comment"># 阅读帖子任务</span></span><br><span class="line">        <span class="attr">likePosts:</span> <span class="literal">true</span> <span class="comment"># 点赞帖子任务</span></span><br><span class="line">        <span class="attr">unlike:</span> <span class="literal">true</span> <span class="comment"># 点赞完毕后取消</span></span><br><span class="line">        <span class="attr">share:</span> <span class="literal">true</span> <span class="comment"># 分享任务</span></span><br><span class="line">      <span class="attr">SignTask:</span></span><br><span class="line">        <span class="attr">genshin:</span> <span class="literal">true</span> <span class="comment"># 原神签到</span></span><br></pre></td></tr></table></figure>

<p>然后选择保存，注意文件名改一下，位置选择程序所在的目录。这样程序和配置文件就都有了，还需要填写一下 cookie，只需要修改第三行就好</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">tickets:</span></span><br><span class="line">        <span class="attr">cookie:</span> <span class="string">aaaa……</span></span><br></pre></td></tr></table></figure>

<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>如果你会 ssh，可以在终端执行，看看有没有问题。不会也没关系，先看，我待会讲不用 ssh 的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /volume1/docker/cocogoat</span><br><span class="line">./cocogoat-signin</span><br></pre></td></tr></table></figure>

<p>这是我第一次执行的输出内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 加载配置文件成功<span class="punctuation">:</span> 共 <span class="number">1</span> 个账户 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 欢迎使用椰羊签到~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行米游社任务 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 账户 <span class="number">0</span> loginTicket 未配置<span class="punctuation">,</span> 尝试从 cookie 中读取 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">55</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 登录成功<span class="punctuation">,</span> 正在保存相关 ticket 至配置文件 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">55</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取任务列表 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">55</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 获取帖子成功<span class="punctuation">,</span> 共获取 <span class="number">18</span> 个帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日米游社任务<span class="punctuation">:</span> 点赞 (<span class="number">0</span>/<span class="number">5</span>) 看帖子 (<span class="number">2</span>/<span class="number">3</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享 (<span class="number">0</span>/<span class="number">1</span>) 签到 (<span class="number">1</span>/<span class="number">1</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞任务开始 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享任务开始 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 阅读帖子任务开始 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享帖子成功~ 帖子主题<span class="punctuation">:</span> 话说公子这种天赋分技能 命座莫名其妙是靠什么成为平民T0的 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 看第 <span class="number">1</span> 个帖子成功~ 帖子主题<span class="punctuation">:</span> 可恶啊！摆明骗我抽绫华嘛 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 求组！<span class="number">40</span>岁阿姨萌新让我叫她姐姐怎么办，急 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">59</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 我和大佬的恋与提瓦特 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">02</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 大佬们，融神一定要二命吗 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">05</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 可恶啊！摆明骗我抽绫华嘛 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">09</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 话说公子这种天赋分技能 命座莫名其妙是靠什么成为平民T0的 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日任务已经完成 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行原神签到 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 共获取到 <span class="number">1</span> 个绑定的原神账号 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>ERROR<span class="punctuation">]</span><span class="punctuation">:</span> UID<span class="punctuation">:</span> xxxx<span class="punctuation">,</span> 昵称<span class="punctuation">:</span> powersee 签到失败 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 运行完毕~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 按回车退出...</span><br></pre></td></tr></table></figure>

<p>第二次执行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 加载配置文件成功<span class="punctuation">:</span> 共 <span class="number">1</span> 个账户 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 欢迎使用椰羊签到~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行米游社任务 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取任务列表 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 获取帖子成功<span class="punctuation">,</span> 共获取 <span class="number">20</span> 个帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日米游社任务<span class="punctuation">:</span> 点赞 (<span class="number">5</span>/<span class="number">5</span>) 看帖子 (<span class="number">3</span>/<span class="number">3</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享 (<span class="number">1</span>/<span class="number">1</span>) 签到 (<span class="number">1</span>/<span class="number">1</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日任务已经完成 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行原神签到 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>ERROR<span class="punctuation">]</span><span class="punctuation">:</span> 获取原神账号列表失败米游社 cookie 错误 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 共获取到 <span class="number">0</span> 个绑定的原神账号 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>ERROR<span class="punctuation">]</span><span class="punctuation">:</span> 账户 <span class="number">0</span> 没有绑定原神账号 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 运行完毕~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 按回车退出..</span><br></pre></td></tr></table></figure>

<p>运行起来是没问题，不过目前这样，似乎不适合让它定时运行，因为每次执行完之后，需要按回车来退出。</p>
<h3 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h3><p>我看了一下代码，<code>main.go</code> 的最后是这么写的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> os.Getenv(<span class="string">&quot;TENCENTCLOUD_RUNENV&quot;</span>) != <span class="string">&quot;SCF&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> input <span class="type">string</span></span><br><span class="line">		log.Infoln(<span class="string">&quot;按回车退出...&quot;</span>)</span><br><span class="line">		_, _ = fmt.Scanln(&amp;input)</span><br><span class="line">	&#125;</span><br><span class="line">	os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作者估计之前是在腾讯云函数里面跑的吧，如果发现不是云函数，就会要求按回车才能退出。应该是打算给 Windows 用比较方便吧。</p>
<p>现在我要在群晖里运行，我想运行完直接退出，那么直接改代码吧，把 <code>if</code> 这一段去掉。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">	os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用 docker 拉取一个 golang 环境，然后代码放进去，<code>go build</code> 一下就行了。</p>
<p>那么不改代码行不行？其实也可以，设置一个环境变量呗。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TENCENTCLOUD_RUNENV=SCF &amp;&amp; ./cocogoat-signin</span><br></pre></td></tr></table></figure>

<p>我们在运行程序之前，设置了变量 <code>TENCENTCLOUD_RUNENV</code> 的值为 <code>SCF</code>，就可以运行完直接退出了。</p>
<p>现在弄明白了，就可以来设置它每天定时运行了。</p>
<h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>打开群晖的「控制面板」，点击「任务计划」，「新增」，「计划的任务」，「用户定义的脚本」</p>
<p><img src="/img/2023/image-20230320171130893.png" alt="新增-用户定义的脚本"></p>
<p>常规里面填写任务名，随便都行。计划设置每天几点运行，可以设置 3 点、7点之类的，最好不要设置 0 点运行。重点来到「任务设置」里，我们填写上这样的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /volume1/docker/cocogoat/ &amp;&amp; TENCENTCLOUD_RUNENV=SCF &amp;&amp; ./cocogoat-signin</span><br></pre></td></tr></table></figure>

<p>这样应该就 ok 了。</p>
<p>原本是打算保存一下日志的，像这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /volume1/docker/cocogoat/ &amp;&amp; TENCENTCLOUD_RUNENV=SCF &amp;&amp; ./cocogoat-signin &gt; $(date +%Y%m%d).log.txt</span><br></pre></td></tr></table></figure>

<p>但是测试了一下，发现日志无法保存下来。了解一番之后，发现代码里使用 <code>log.Infoln</code> 来输出日志的，这样的输出是没法使用 <code>&gt;</code> 或者 <code>tee</code> 来保存到日志里的。所以日志保存这部分暂时搞不定。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 中文字体名称</title>
    <url>/2023/03/css-chinese-font/</url>
    <content><![CDATA[<p>我平时挺喜欢在浏览器里面，按 F12 打开开发者工具，然后修改网页样式的。特别是有些网站，老是喜欢用宋体，作为文章内容的字体，字号还特别小。看起来很不舒服。</p>
<p>有时候我会把它们的字号调大一点</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="number">1.3em</span>;</span><br></pre></td></tr></table></figure>

<p>有时会直接更改字体</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;思源黑体&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在这过程中，我发现怎么有些中文字体，名称打上去后并不生效。例如我写 <code>霞骛文楷</code> 是不生效的，如果我写 <code>LXGW WenKai</code> 就可以生效。</p>
<p>后来我了解到这个 <a href="https://www.zhangxinxu.com/study/201703/font-family-chinese-english.html">CSS font-family中文字体对应的英文名称整理表 </a></p>
<p>这里面有些字体在「字体应用」里，是只能用英文名的，能直接在 css 里面用中文名的比较少。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;思源黑体&#x27;</span>, <span class="string">&#x27;思源宋体&#x27;</span>, <span class="string">&#x27;文泉驿微米黑&#x27;</span>, <span class="string">&#x27;楷体&#x27;</span>, <span class="string">&#x27;宋体&#x27;</span>, <span class="string">&#x27;黑体&#x27;</span></span><br></pre></td></tr></table></figure>

<p>目前找到一个更全的表： <a href="http://www.waiyyw.cn/?id=49">CSS font-family常用好看的中英文字体对照表</a></p>
<p>难道要这样每次都来查表？目前已经知道，在 css 中想用某些字体，只能用英文名。但是我又记不住它们的英文名……有没有什么办法，可以在我想使用的时候，可以查到它们的名字呢？</p>
<p><img src="/img/2023/image-20230321144629089.png" alt="汉仪文黑"></p>
<p>直接在 Windows 的设置里，查看字体的话，是不会显示英文名的。这里的汉仪文黑是原神里面的默认字体，在网页中使用同样得用英文名。明明我电脑里装了这款字体，我却没法直接查到它的英文名称。</p>
<p>目前我的解决方法是，在浏览器装一个 <a href="https://microsoftedge.microsoft.com/addons/detail/%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E6%9B%BF%E6%8D%A2/lkiifecdjjijjdceondieabmlndffgba">插件</a>，之前是用它来全局替换字体的。现在不替换了，只用来查字体名。</p>
<p><img src="/img/2023/image-20230321145430371.png" alt="网页字体替换"></p>
<p>在选项里面点一下，会列出当前电脑的字体，之后可以用鼠标选中名称的，这样就可以直接复制了。</p>
<p><img src="/img/2023/image-20230321145746968.png" alt="复制字体名称"></p>
<p>补充：</p>
<p>后来又进一步了解了一些。</p>
<p><img src="/img/2023/font-name.png" alt="font-name"></p>
<p>打开一个字体的时候，里面第一行显示的「字体名称」，就是可以用在网页 css 中的。</p>
<p>这样的名称，在设置的字体里面，也是可以看到的。</p>
<p><img src="/img/2023/LXGW-WenKai-Bold.png" alt="LXGW-WenKai-Bold"></p>
<p>之前 霞骛文楷 全称只显示英文，现有有些已经显示中文了。</p>
<p><img src="/img/2023/image-20230331153928787.png" alt="image-20230331153928787"></p>
<p>不过很奇怪，不管是「霞骛文楷」还是「霞骛文楷等宽」，都是只有 light 是显示中文，而且 Regular 和 Bold 都是英文的。</p>
<p>在 Mac 上面也是这样。</p>
<p><img src="/img/2023/mac-lxgw-wenkai-bold.webp" alt="mac-lxgw-wenkai-bold"></p>
<p>使用 Firefox 的 DevTools，会比 chrome 或者 Edge 多一个「字体」，这个功能很不错，还可以拉动控制条，来调整字体。</p>
<p><img src="/img/2023/Firefox-devtools-fonts.jpg" alt="Firefox-devtools-fonts"></p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 使用命令行进行拍照</title>
    <url>/2023/03/mac-command-line-take-photos/</url>
    <content><![CDATA[<p>最近翻出来一个 USB 摄像头，我把它插到我的 Mac mini 上面，可以用。</p>
<p>摄像头是免驱的，插上之后，可以用 obs 来捕获画面。也可以用 QuickTime Player，打开之后，点击「文件」「新建影片录制」，就可以看到画面了。</p>
<p><img src="/img/2023/QuickTime-player-camera.webp" alt="QuickTime-player-camera"></p>
<h2 id="imagesnap"><a href="#imagesnap" class="headerlink" title="imagesnap"></a>imagesnap</h2><p>我想通过命令行的方式，控制摄像头拍照。需要装一个工具 <code>imagesnap</code>，可以使用 homebrew 来安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install imagesnap</span><br></pre></td></tr></table></figure>

<p>装好之后，直接执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imagesnap</span><br></pre></td></tr></table></figure>

<p>就可以生成一张图片，名为 <code>snapshot.jpg</code>，保存在当前目录下。</p>
<p>参考：<a href="https://davidwalsh.name/mac-camera">Access Mac Camera by Command Line (davidwalsh.name)</a></p>
<h2 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ imagesnap -h</span><br><span class="line">USAGE: imagesnap [options] [filename-or-dir]</span><br><span class="line">Version: 0.2.16</span><br><span class="line">Captures an image from a video device and saves it in a file.</span><br><span class="line">If no device is specified, the system default will be used.</span><br><span class="line">If no filename is specfied, snapshot.jpg will be used.</span><br><span class="line">If timelapse is used, the filename argument can be a directory where files will be saved.</span><br><span class="line">JPEG is the only supported output type.</span><br><span class="line">  -h          This help message</span><br><span class="line">  -v          Verbose mode</span><br><span class="line">  -l          List available video devices</span><br><span class="line">  -t x.xx     Take a picture every x.xx seconds</span><br><span class="line">  -n num      Limit to &lt;num&gt; snapshots in -t timelapse mode</span><br><span class="line">  -q          Quiet mode. Do not output any text</span><br><span class="line">  -w x.xx     Warmup. Delay snapshot x.xx seconds after turning on camera (default 3sec)</span><br><span class="line">  -d device   Use named video device</span><br></pre></td></tr></table></figure>

<p>保存的图片命名为 powersee.jpg，可以这么写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imagesnap powersee.jpg</span><br></pre></td></tr></table></figure>



<h2 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h2><p>不加任何参数的情况下，默认是延迟 3 秒，我想它命令执行时立即拍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imagesnap -w 0.1</span><br></pre></td></tr></table></figure>

<p>使用 0.01 也可以，0.001 都行。</p>
<p>不过这样使用会有问题，因为摄像头如果发现没有程序在使用它，它会进入休眠状态，在有些设备上面的表现，就是摄像头上面的灯会熄灭。</p>
<p>如果我们在摄像头休眠状态下，使用 -w 0.1 来拍照，那么得到的是一张全黑的图片。因为它还没有准备好，所以程序才设置默认 3 秒延迟。</p>
<p>如果我们想快一点，那么延迟一秒应该就够了。那么 0.1、0.01 在什么情况下可以使用呢？在摄像头正在使用的情况下，例如 OBS 开着时。</p>
<h2 id="其它参数"><a href="#其它参数" class="headerlink" title="其它参数"></a>其它参数</h2><p><code>-t</code> 参数可以用来连续拍照，例如每隔三秒拍一张。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ imagesnap -t 3</span><br><span class="line">Capturing image from device &quot;PC-W3 Camera&quot;...Saving images to .</span><br><span class="line">./snapshot-00001.jpg</span><br><span class="line">./snapshot-00002.jpg</span><br><span class="line">./snapshot-00003.jpg</span><br><span class="line">./snapshot-00004.jpg</span><br><span class="line">./snapshot-00005.jpg</span><br></pre></td></tr></table></figure>

<p>使用 <code>-l</code> 可以列出所有摄像头。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ imagesnap -l</span><br><span class="line">Video Devices:</span><br><span class="line">=&gt; USB2.0 Camera #2</span><br><span class="line">=&gt; PC-W3 Camera</span><br></pre></td></tr></table></figure>

<p>当电脑有多个摄像头时，可以用 <code>-d</code> 来指定要使用哪一个。如果不指定，它会使用第一个。注意上面这两个，它们的名称是 <code>USB2.0</code> 和 <code>PC-W3</code> ，使用如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imagesnap -d PC-W3</span><br><span class="line">#或者</span><br><span class="line">imagesnap -d &quot;PC-W3 Camera&quot;</span><br></pre></td></tr></table></figure>

<h2 id="综合使用"><a href="#综合使用" class="headerlink" title="综合使用"></a>综合使用</h2><p>我想要，每隔 5 秒拍一张，一共拍一百张，然后终端不要输出信息，保持安静就好，拍好的图片保存到 Powersee 目录中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">imagesnap -d PC-W3 -w 1 -q -t 5 -n 100 Powersee</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>省流好助手，WebP 格式是真的强👍🏻</title>
    <url>/2023/03/about-webp/</url>
    <content><![CDATA[<p>WebP 是 Google 推出的图片格式，优势是图片体积小。在博客中使用 WebP 格式，可以使加载速度更快。兼容性方面我觉得应该不用怎么担心了，毕竟现在 Safari 都支持了。</p>
<p>所以我目前会把博客中一些图片，转换为 WebP 格式，主要是针对 png 格式的。而原本那些 jpg 图片就没必要去动它了，反正本来就很小。</p>
<p>接下来介绍我是怎么处理 WebP 图片的。</p>
<p>我有一张用相机拍的照片，分辨率是 5472×3080，在电脑上显示它的大小是 1.7MB（Mac 上显示的大小）</p>
<p><img src="/img/2023/image-20230324103524483.webp" alt="image-20230324103524483"></p>
<p>使用 identify 获取它的信息（安装 imagemagick 后有这个命令）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># identify DSC00097.JPG</span><br><span class="line">DSC00097.JPG JPEG 5472x3080 5472x3080+0+0 8-bit sRGB 1.57485MiB</span><br></pre></td></tr></table></figure>

<p>如果我把它压缩为 WebP 格式（我电脑已经装好了 cwebp）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ cwebp DSC00097.JPG -o vr.webp</span><br><span class="line">Saving file &#x27;vr.webp&#x27;</span><br><span class="line">File:      DSC00097.JPG</span><br><span class="line">Dimension: 5472 x 3080</span><br><span class="line">Output:    89162 bytes Y-U-V-All-PSNR 47.24 54.85 53.47   48.58 dB</span><br><span class="line">           (0.04 bpp)</span><br><span class="line">block count:  intra4:      12209  (18.50%)</span><br><span class="line">              intra16:     53797  (81.50%)</span><br><span class="line">              skipped:     44832  (67.92%)</span><br><span class="line">bytes used:  header:            171  (0.2%)</span><br><span class="line">             mode-partition:  41743  (46.8%)</span><br><span class="line"> Residuals bytes  |segment 1|segment 2|segment 3|segment 4|  total</span><br><span class="line">    macroblocks:  |       0%|       1%|       2%|      98%|   66006</span><br><span class="line">      quantizer:  |      36 |      36 |      34 |      25 |</span><br><span class="line">   filter level:  |      11 |       9 |      36 |      33 |</span><br></pre></td></tr></table></figure>

<p>执行过程中会输出这些信息。完成后我们再来看看压缩后的图片。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ identify vr.webp</span><br><span class="line">vr.webp WEBP 5472x3080 5472x3080+0+0 8-bit sRGB 89162B 0.100u 0:00.097</span><br></pre></td></tr></table></figure>

<p>只有 <code>89162B</code>，那么除以 1024 的话，89162&#x2F;1024&#x3D;87.07226562，差不多 87KB。分辨率依然还是 5472x3080，而且我在电脑上用 4k 显示器，全屏来看，感觉没什么区别。确实挺强的，这是压缩后的图片。</p>
<p><img src="/img/2023/vr.webp" alt="qiyu-vr"></p>
<p>不过可能是因为我这张图片，画面相对来说比较简单吧，很多地方都是白色的，所以压缩比才能做到这么高。</p>
<p>这样使用的过程中，我觉得有些不方便，因为它需要我输入 <code>-o new-filename.webp</code>。</p>
<p>我想要当我输入 <code>webp test.png</code> 的时候，shell 中执行的是 <code>cwebp test.png -o test.webp</code>，所以我写了个 shell 函数，来达到这个目的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">webp</span></span>() &#123;</span><br><span class="line">  cwebp <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.webp&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且还能这么用，先在终端输入 WebP 空格，然后再把图片的拖进来，再按回车。此时原图片旁边，就会多出一张同名的 WebP 图片。</p>
<p>WebP 格式，除了图片体积小之外，另外一个优势就是，它可以和 png 一样，保存透明通道，例如这样的图片。</p>
<p><img src="/img/2023/QuickTime-player-camera.webp" alt="QuickTime-player-camera"></p>
<p>这种图片需要在 Mac 上，使用 command + shift + 4，然后按一下空格键，点击想要的窗口，就可以截图得到。</p>
<p>而默认得到的是 png 格式，还是比较大的。把它转为为 jpg 的话，虽然能缩小，但是透明通道就没了。</p>
<p>现在我把它转换为 WebP，就可以既保持小体积，又保留透明通道。</p>
<p>其它参数：</p>
<p><code>-quiet</code> 不打印任何内容</p>
<p><code>-short</code> 仅输出文件大小和 PSNR</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cwebp DSC00097.JPG -o t.webp -short</span><br><span class="line">  89162 48.58</span><br></pre></td></tr></table></figure>

<p>官方文档：<a href="https://developers.google.com/speed/webp/docs/cwebp?hl=zh-cn">cwebp  | WebP  | Google Developers</a></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑无线网卡没有 WiFi 但是有蓝牙</title>
    <url>/2023/03/WLAN-driver/</url>
    <content><![CDATA[<p>突然发现，电脑没有 WiFi 选项了。右下角没有，进入设置里面也没有。难道是无线网卡坏了？</p>
<p>但是如果坏了，蓝牙应该也没法用才对。现在蓝牙是可以使用的。</p>
<p>于是我拔掉无线网卡，开机，蓝牙也没了。</p>
<p>再插上，蓝牙回来了，但是依然没有 WiFi。</p>
<p>打开设备管理器，发现网卡那里有个感叹号❕</p>
<p><img src="/../img/2023/2023-03-25_12-12-17.webp" alt="旧驱动"></p>
<p>看来是驱动问题，网卡驱动是一年前的了，可能需要升级。</p>
<p>刚好电脑里有装 360，那看看它能否帮忙升级驱动，结果并不能，而且 360 检测居然发现不了问题，说驱动一切正常……</p>
<p>没办法，只能到网上冲浪🏄🏻。然后在 B 站找到这篇文章：<a href="https://www.bilibili.com/read/cv15538455">https://www.bilibili.com/read/cv15538455</a></p>
<p>从这里下载了驱动，我下的是这个压缩包：MT792xDriver_20221118.zip</p>
<p>之后到设备管理器里面更新驱动，这样驱动版本就从 495 升级到了 713。</p>
<p><img src="/../img/2023/2023-03-25_12-12-58.png" alt="RZ608"></p>
<p>然后 WiFi 就可以用了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>将 Mac 上的 shell 脚本，变成原生 Mac 图形应用</title>
    <url>/2023/03/create-mac-app-from-command-line-scripts/</url>
    <content><![CDATA[<p>之前讲到 <a href="/2023/03/about-webp/">WebP 图片格式</a>，目前我博客里一些比较大的图片，我都会转换为 WebP，这样图片的体积会缩小很多，访问的时候速度能提快一些。</p>
<p>不过，每次要将图片转换为 WebP，我都需要打开终端，在 shell 里用 cwebp 来转换。如果能够把它变为一个 APP，我打开 APP 后，将图片拖进去，它就自动转换就好了。</p>
<p>很快啊，我就实现这个目的了。</p>
<p><img src="/img/2023/webp-mac-app.webp" alt="webp-mac-app"></p>
<p>实现起来也很简单，使用一个开源应用：<a href="https://github.com/sveinbjornt/Platypus">sveinbjornt&#x2F;Platypus: Create native Mac applications from command line scripts. (github.com)</a></p>
<p>这个应用名字挺有趣的，叫「鸭嘴兽」，它的目的是把命令行脚本转换为 Mac 原生应用。在 GitHub 上面有非常详细的<a href="https://github.com/sveinbjornt/Platypus/blob/master/Documentation/Documentation.md">说明文档</a>。</p>
<p><img src="/img/2023/Platypus-webp.webp" alt="Platypus-webp"></p>
<p>我是直接点击「+New」让它新建一个脚本的，里面写这些内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/opt/homebrew/bin/cwebp <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.webp&quot;</span></span><br></pre></td></tr></table></figure>

<p>Interface 就选 Droplet，这样 APP 打开后就是一个让我们把文件拖进去的界面。</p>
<p><img src="/img/2023/Suffixes.webp" alt="Suffixes"></p>
<p>然后在 <code>Accept dropped items</code> 后面的 settings 中，我们需要勾选 Accept dropped files。</p>
<p>Suffixes 下面的框，就是设置支持的文件后缀。我是怎么将 jpeg 和 png 加进去的呢？它下面的 + - 都是没法点击的。因此我是直接拖一张 jpeg 图片，和一张 png 图片进来，后缀就加上去了。</p>
<p><img src="/img/2023/only-264KB.webp" alt="only-264KB"></p>
<p>如果不加 APP 图标的话，这样创建的应用只有 264KB。不过我还是加图标了，这样比较美观。</p>
<p><img src="/img/2023/Platypus-webp.webp" alt="Platypus-webp"></p>
<p>这个图标居然要 1.3MB，我是从 <a href="https://macosicons.com/">https://macosicons.com/</a> 下载的，这网站也挺好的，本打算点击图标查看详情，没想到它直接就下载了。不仅免费，而且连注册账号都不用。见惯了国内的网站难看的吃相，遇到这种反到有点不习惯了。</p>
<p>一切设置好后，点击一下「Create App」，选择保存在哪里，就生成了一个 Mac APP。</p>
<p>我们可以把它放到「应用程序」里面，这样就可以在「启动台」里面找到它。而且只有这样，APP 打开后再退出，才会留在「程序坞」里面。</p>
<p><img src="/img/2023/WebP-dock.jpg" alt="WebP-dock"></p>
<p>如果经常使用，我们可以将它长期固定在「程序坞」。像我这种用来处理图片的，可以在不打开 APP 的情况下，直接将图片拖到 APP 上面，就会打开 APP 自动处理，确实提高了效率，很不错。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 ffmpeg 将图片合并为视频</title>
    <url>/2023/03/combine-pictures-into-a-video/</url>
    <content><![CDATA[<p>我需要合并图片为一个视频。我有很多张图片，像这样的命名：<code>2023-03-24-105322.jpg</code> <code>2023-03-24-105352.jpg</code> … 也就是(年-月-日-时分秒.jpg) 这样的来命名的。</p>
<p>我可以使用这样的命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -pattern_type glob -i <span class="string">&#x27;*.jpg&#x27;</span> output.mp4</span><br></pre></td></tr></table></figure>

<p>没有指定帧率，默认使用 25 帧。直接使用 * 会将当前目录中的所有 jpg 文件都匹配到。</p>
<p>如果我目录中还有其它图片，不想合并到视频里面，那么也可以这么写：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -pattern_type glob -i <span class="string">&#x27;????-??-??-??????.jpg&#x27;</span> output.mp4</span><br></pre></td></tr></table></figure>

<p><code>?</code>通配符表示匹配任意一个字符。</p>
<p>这样合并出来的视频，是一帧一张图片。这样太快了，一秒播放了 25 张图片。我想要它慢一点，可以通过调整帧率来实现。</p>
<p>此时需要使用 <code>-r</code> 参数，设置帧数为 10，这样一秒就只播放 10 张图片。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -r 10 -pattern_type glob -i &#x27;????-??-??-??????.jpg&#x27; output.mp4</span><br></pre></td></tr></table></figure>

<p>注意要放在 <code>-i</code> 前面。如果放在 <code>-i</code> 后面，会导致跳帧。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>给图片加时间戳水印</title>
    <url>/2023/03/add-timestamp-to-images/</url>
    <content><![CDATA[<p>在安装了 imageMagick 之后，可以使用命令来对图片进行修改。</p>
<p>例如，给图片加时间戳水印。需要使用到 <code>convert</code> 这个命令。</p>
<p>我在网上看到的教程，有教使用 <code>%[exif:datetime]</code>、<code>%[exif:dateTimeOriginal]</code>这些参数的。</p>
<p>但是我尝试之后都失败了。因为并不是所有的图片都有这些信息。</p>
<p>我们可以使用这个命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">identify -verbose your_image.jpg</span><br></pre></td></tr></table></figure>

<p>来查看图片有哪些元数据，这是我的一张图片，是使用命令行捕获摄像头画面保存下来的，信息比用相机拍的图片少很多。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Properties:</span><br><span class="line">  date:create: 2023-03-26T06:45:38+00:00</span><br><span class="line">  date:modify: 2023-03-26T06:45:38+00:00</span><br><span class="line">  date:timestamp: 2023-03-28T07:43:40+00:00</span><br><span class="line">  jpeg:colorspace: 2</span><br></pre></td></tr></table></figure>

<p>把 <code>2023-03-26T06:45:38+00:00</code> 这样的时间加到图片上，好像作用不大，因为我们这是 +08:00，弄个 0 时区的时间加上去……</p>
<p>另外还可以不用图片的日期，我想要将当前的时间，直接加到图片上，可以这么写</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">convert snapshot.jpg -gravity SouthEast -fill yellow -pointsize 20 -annotate +1+1  <span class="string">&quot;`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`&quot;</span> temp.jpg</span><br></pre></td></tr></table></figure>

<p>这样的命令可以把当前时间印在图片上。不过这么用的应该很少，按理说，一般应该使用图片的创建时间，也就是照片拍摄的时间。</p>
<p>如果使用相机、手机拍的照片，一般使用<code>DateTimeOriginal</code>会比较多。</p>
<p>这是一张使用索尼相机拍的照片，它有这些信息。可以发现</p>
<ul>
<li>DateTime</li>
<li>DateTimeDigitized</li>
<li>DateTimeOriginal</li>
</ul>
<p>的时间都是一样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Properties:</span><br><span class="line">  date:create: 2022-11-23T09:29:46+00:00</span><br><span class="line">  date:modify: 2022-07-05T06:35:22+00:00</span><br><span class="line">  date:timestamp: 2023-03-28T13:22:40+00:00</span><br><span class="line">  exif:BrightnessValue: 13884/2560</span><br><span class="line">  exif:ColorSpace: 1</span><br><span class="line">  exif:ComponentsConfiguration: ...</span><br><span class="line">  exif:CompressedBitsPerPixel: 1/1</span><br><span class="line">  exif:Contrast: 0</span><br><span class="line">  exif:CustomRendered: 0</span><br><span class="line">  exif:DateTime: 2022:07:05 14:35:23</span><br><span class="line">  exif:DateTimeDigitized: 2022:07:05 14:35:23</span><br><span class="line">  exif:DateTimeOriginal: 2022:07:05 14:35:23</span><br><span class="line">  exif:DigitalZoomRatio: 16/16</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>如果我们要加时间戳，直接使用这样的时间就行了。因此我建议先查看一下，图片有哪些元数据可以用，再看看选择哪个比较好。</p>
<hr>
<p>记录我遇到的一个坑，使用下面的命令，在 zsh 里面都会报错。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ convert snapshot.jpg -gravity SouthEast -fill yellow -pointsize 20 -annotate +1+1  %[<span class="built_in">date</span>:create] temp.jpg</span><br><span class="line"></span><br><span class="line">zsh: no matches found: %[<span class="built_in">date</span>:create]</span><br></pre></td></tr></table></figure>

<p>这个错误是因为 zsh 默认开启了文件名通配符的功能，其中 <code>%[</code> 是 zsh 文件名通配符的一部分，所以它会认为 <code>%[</code> 是一个通配符，然后去尝试匹配文件名，但是找不到符合这个模式的文件，于是就报错了。</p>
<p>为了解决这个问题，需要把 <code>%[</code> 用引号引起来，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">convert snapshot.jpg -gravity SouthEast -fill yellow -pointsize 20 -annotate +1+1 <span class="string">&quot;%[date:create]&quot;</span> temp.jpg</span><br></pre></td></tr></table></figure>

<p>这样，zsh 就不会把 <code>%[</code> 当成文件名通配符了，而是当成普通的字符串来处理，就不会报错了。</p>
<p>如果你使用的是 bash，就可以不用加。但即使在 bash 里面加了引号，也可以执行的。</p>
<h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>这条命令使用 ImageMagick 的 convert 工具对一张名为 snapshot.jpg 的图片进行操作，并将结果保存为 temp.jpg。</p>
<p>具体的操作包括：</p>
<ol>
<li><code>-gravity SouthEast</code>：将文字水印放在东南方，也就是图片的右下角。</li>
<li><code>-fill yellow</code>：将文字水印的颜色设置为黄色。</li>
<li><code>-pointsize 20</code>：设置文字水印的字体大小为 20。</li>
<li><code>-annotate +1+1</code>：往左和上偏移 1 个像素。</li>
<li><code>&quot;%[date:create]&quot;</code>：将图片创建日期和时间作为文字水印的内容，这里使用了 ImageMagick 的内置变量 %[date:create]，它会从图片的元数据中读取日期和时间信息。</li>
<li><code>temp.jpg</code>：保存处理后的图片为 temp.jpg。</li>
</ol>
<p>因此，这条命令的作用是在图片的右下角添加一个黄色文字水印，内容为该图片的创建日期和时间。</p>
<p>我这条命令，是用在分辨率只有 640×480 的图片上的，如果是分辨率高的图片，得改改。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">convert DSC00097.JPG -gravity SouthEast -fill yellow -pointsize 200 -annotate +10+10  <span class="string">&quot;%[exif:DateTime]&quot;</span> temp.jpg</span><br></pre></td></tr></table></figure>

<p>我这张图片的分辨率是 5472 × 3080，所以我把字体大小改为 200，偏移改为 10 像素，最终的效果是这样的。</p>
<p><img src="/img/2023/vr-add-timestamp.webp" alt="vr-add-timestamp"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>让 iTerm2 命令执行完之后，弹出通知</title>
    <url>/2023/03/iterm2-notification/</url>
    <content><![CDATA[<p>感觉这个功能超好用。</p>
<p>有些命令可能需要很久才能执行完，主要是安装之类的，例如 brew 或者 npm，按下回车之后，都不知道它要多久才能装好，我们可能需要时不时就回来看看。</p>
<p>而在 iTerm2 里面，我们可以设置命令执行完之后，弹出一条通知。这样一来，我们执行命令后，就可以去干其它事情了，等收到通知再回来就行。</p>
<p><img src="/img/2023/iTerm2-notification.png" alt="iTerm2-notification"></p>
<p>想要实现这个功能，需要在顶部菜单里，先点击「iTerm2」，再点击「Install Shell Integration」，意思是安装 shell 集合。</p>
<p>它会执行这样一条命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装好后多出这些功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You will also have these commands:</span><br><span class="line">imgcat filename</span><br><span class="line">  Displays the image inline.</span><br><span class="line">imgls</span><br><span class="line">  Shows a directory listing with image thumbnails.</span><br><span class="line">it2api</span><br><span class="line">  Command-line utility to manipulate iTerm2.</span><br><span class="line">it2attention start|stop|fireworks</span><br><span class="line">  Gets your attention.</span><br><span class="line">it2check</span><br><span class="line">  Checks if the terminal is iTerm2.</span><br><span class="line">it2copy [filename]</span><br><span class="line">  Copies to the pasteboard.</span><br><span class="line">it2dl filename</span><br><span class="line">  Downloads the specified file, saving it in your Downloads folder.</span><br><span class="line">it2setcolor ...</span><br><span class="line">  Changes individual color settings or loads a color preset.</span><br><span class="line">it2setkeylabel ...</span><br><span class="line">  Changes Touch Bar function key labels.</span><br><span class="line">it2tip</span><br><span class="line">  iTerm2 usage tips</span><br><span class="line">it2ul</span><br><span class="line">  Uploads a file.</span><br><span class="line">it2universion</span><br><span class="line">  Sets the current unicode version.</span><br><span class="line">it2profile</span><br><span class="line">  Change iTerm2 session profile on the fly.</span><br></pre></td></tr></table></figure>

<p><img src="/img/2023/shell-integration-install-complete.jpg" alt="shell-integration-install-complete"></p>
<p>然后我们新开一个窗口或者 tab，在菜单里面选择 Edit 、 Marks and Annotations 、 Alerts，打开 Alert on next mark</p>
<p><img src="/img/2023/alert-no-next-Mark.webp" alt="alert-no-next-Mark"></p>
<p>开启之后，就可以在右上角看到一个眼睛👁的图标。也可以使用快捷键 <code>cmd + alt + A</code> 来开启。</p>
<p><img src="/img/2023/iTerm2-marked.webp" alt="iTerm2-marked"></p>
<p>之后再执行命令，只要命令完成了，就会弹出一条通知。</p>
<p><img src="/img/2023/iTerm2-notification.png" alt="iTerm2-notification"></p>
<p>如果我们选择 「Show Modal Alert Box」，那么会出现这样一个提示窗口</p>
<p><img src="/img/2023/iTerm2-alert.webp" alt="iTerm2-alert"></p>
<p>点击 Reveal 就会跳转到 iTerm2 里面。不过这个应该先执行命令，在设置 Mark 出现眼睛👁。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 截图的相关了解</title>
    <url>/2023/03/mac-screenshot/</url>
    <content><![CDATA[<h3 id="为什么-Mac-截图后，图片在-Finder-里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的"><a href="#为什么-Mac-截图后，图片在-Finder-里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的" class="headerlink" title="为什么 Mac 截图后，图片在 Finder 里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的"></a>为什么 Mac 截图后，图片在 Finder 里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的</h3><p>在 Mac OS 中，如果一个文件或文件夹的名称是灰色的，这通常表示该文件或文件夹已被标记为“不可用”，这意味着它已被删除、移动或重命名。</p>
<p>但是，在截图之后，Finder 中显示的文件名虽然是灰色的，但文件本身并没有被标记为“不可用”。相反，灰色的名称在这种情况下表示该文件是新创建的，但尚未被编辑或重命名。当您对该文件进行任何编辑或更改文件名时，文件名将变为黑色。</p>
<p>因此，无需担心截图文件名灰色的问题，这只是 Mac OS 的一种普遍表现形式，并不意味着该文件已被标记为“不可用”。</p>
<h3 id="Mac-截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？"><a href="#Mac-截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？" class="headerlink" title="Mac 截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？"></a>Mac 截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？</h3><p>可以通过输入以下命令来更改截图的保存行为，并直接在桌面上显示它们，而无需等待几秒钟：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture show-thumbnail -bool FALSE &amp;&amp; killall SystemUIServer</span><br></pre></td></tr></table></figure>

<p>这会禁用截图缩略图并立即使更改生效。现在，您在截图后将立即在桌面上看到它们，而不是在弹出的缩略图中等待数秒。</p>
<p>请注意，在此更改生效后，您将无法通过双击屏幕截图缩略图来打开它。您需要手动打开存储截图的文件夹，然后找到并打开它们。但是，这个行为可以通过运行以下命令来恢复：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture show-thumbnail -bool TRUE &amp;&amp; killall SystemUIServer</span><br></pre></td></tr></table></figure>

<p>这里的 <code>-bool</code> 选项允许您将参数值设置为 <code>TRUE</code> 或 <code>FALSE</code>，以启用或禁用缩略图。</p>
<h3 id="如何更改截图保存位置？"><a href="#如何更改截图保存位置？" class="headerlink" title="如何更改截图保存位置？"></a>如何更改截图保存位置？</h3><p>默认情况下是保存在「桌面」目录中</p>
<p>我们可以按快捷键 <code>cmd + shift + 5</code> 来唤出截图界面，在「选项」里可以更改保存位置。</p>
<p><img src="/img/2023/screenshot-option.jpg" alt="screenshot-option"></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 打开 shell 之后，提示 You have new mail</title>
    <url>/2023/04/mac-shell-you-have-new-mail/</url>
    <content><![CDATA[<p>邮件？这里的邮件可不是指邮件 APP 里的邮件。而是指 <code>/var/mail</code> 里面的邮件，其实就 cron 计划任务的日志。</p>
<p>可以在 shell 里执行 <code>mail</code> 来查看。也可以把 <code>/var/mail</code> 里的文件，直接拉到文本编辑器来查看，例如我直接放到 vscode 来查看。</p>
<p>由于文件没有后缀名，（我的是我的账号名）所以 vscode 自动检测错，把它识别为 Python 文件。</p>
<p>可以点击底部来更改，改成 log。</p>
<p><img src="/img/2023/vscode-log.webp" alt="vscode-log"></p>
<p>看完之后，发现也没什么，可以直接把这个文件删除了，这样再打开 shell 就不会有提示了。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 ohmyposh 来美化 powershell</title>
    <url>/2023/04/powershell-ohmyposh/</url>
    <content><![CDATA[<p>通过安装 ohmyposh 来美化 powershell，最终效果如下。</p>
<p><img src="/img/2023/ohmyposh.png" alt="ohmyposh"></p>
<p>安装 Oh My Posh</p>
<p>可以到 Microsoft Store 安装</p>
<p><img src="/img/2023/oh-my-posh-app-store.png" alt="oh-my-posh-app-store"></p>
<p>或者通过命令行来安装，需要用管理员身份运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh -s winget</span><br></pre></td></tr></table></figure>

<p>不过，极大的可能会因为网络问题安装失败</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; winget install JanDeDobbeleer.OhMyPosh -s winget</span><br><span class="line">已找到 Oh My Posh [JanDeDobbeleer.OhMyPosh] 版本 14.24.0</span><br><span class="line">此应用程序由其所有者授权给你。</span><br><span class="line">Microsoft 对第三方程序包概不负责，也不向第三方程序包授予任何许可证。</span><br><span class="line">正在下载 https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/v14.24.0/install-amd64.exe</span><br><span class="line">执行此命令时发生意外错误：</span><br><span class="line">InternetOpenUrl() failed.</span><br><span class="line">0x80072efd : unknown error</span><br></pre></td></tr></table></figure>

<p>我是通过设置命令行走代理来解决的。</p>
<p>想要 <code>ls</code> 后显示的文件带图标，需要安装 <code>Terminal-Icons</code>（需要用管理员身份运行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Install-Module -Name Terminal-Icons -Repository PSGallery</span><br></pre></td></tr></table></figure>

<p><img src="/img/2023/ohmyposh-powershell.png" alt="ohmyposh-powershell"></p>
<p>需要输入两次 y，大小写随便。</p>
<p>装好后可以尝试在终端执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module -Name Terminal-Icons</span><br></pre></td></tr></table></figure>

<p>如果像这样报错了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Import-Module -Name Terminal-Icons</span><br><span class="line"></span><br><span class="line">Import-Module : 无法加载文件 C:\Program Files\WindowsPowerShell\Modules\Terminal-Icons\0.10.0\Terminal-Icons.psm1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line"></span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line"></span><br><span class="line">+ Import-Module -Name Terminal-Icons</span><br><span class="line"></span><br><span class="line">+ ~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">+ CategoryInfo : SecurityError: (:) [Import-Module]，PSSecurityException</span><br><span class="line"></span><br><span class="line">+ FullyQualifiedErrorId : UnauthorizedAccess,Microsoft.PowerShell.Commands.ImportModuleCommand</span><br></pre></td></tr></table></figure>

<p>需要更改执行策略，执行命令后输入 y 再按回车。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; set-executionpolicy remotesigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line"></span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line"></span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line"></span><br><span class="line">[Y] 是(Y) [A] 全是(A) [N] 否(N) [L] 全否(L) [S] 暂停(S) [?] 帮助 (默认值为“N”): y</span><br></pre></td></tr></table></figure>

<p>打开 PowerShell profile，加入这两行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oh-my-posh --init --shell pwsh --config ~\Documents\WindowsPowerShell\ohmyposhv3-v2.json | Invoke-Expression</span><br><span class="line">Import-Module -Name Terminal-Icons</span><br></pre></td></tr></table></figure>

<p>json 配置文件下载：<a href="https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c?WT.mc_id=-blog-scottha">ohmyposhv3-v2 (github.com)</a></p>
<p>直链：<a href="https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c/raw/8e9c9a8736ff4e9e5a863c20833d614549ccbc32/ohmyposhv3-v2.json">https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c/raw/8e9c9a8736ff4e9e5a863c20833d614549ccbc32/ohmyposhv3-v2.json</a></p>
<p>我也放一份到我的博客里面：<a href="/misc/ohmyposhv3-v2.json">ohmyposhv3-v2</a> 可以右键，「链接另存为…」来下载。</p>
<p>我是把这个文件直接放到 Documents\WindowsPowerShell 里面。</p>
<p>你也可以放在其它地方，只要改 <code>--config</code> 后面的路径就行。</p>
<p>这样修改之后，之后打开终端就自动加载 oh my posh 了。</p>
<p><img src="/img/2023/ohmyposh-1806.png" alt="ohmyposh-1806"></p>
<p>这里显示 1806 毫秒，后面我再新开两个 tab，都是 800 毫秒左右。</p>
<p>然后还需要设置字体，不然这些图标加载不出来。可以到<a href="https://www.nerdfonts.com/">这里</a>下载字体，选择自己喜欢的，下载后是压缩包，解压出来，选中所有字体，右键安装即可。</p>
<p><img src="/img/2023/win-terminal-font.png" alt="win-terminal-font"></p>
<p>之后到「设置」「默认值」「外观」里面更改字体。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>我的图片优化方案</title>
    <url>/2023/04/blog-image-optimize/</url>
    <content><![CDATA[<p>我现在的博客是用 hexo 生成的静态网页，部署在 GitHub pages。</p>
<p>而众所周知，国内访问 GitHub pages 一直不怎么好，所以优化非常重要。</p>
<p>我之前使用的博客主题，需要加载 font awesome 图标，导致网站打开后需要等很久才能看到图标。再加上用久了，有点审美疲劳，所以最近换了个主题，现在速度快了很多。</p>
<p>改完主题后，我又注意到另一个影响访问速度的因素——图片。</p>
<p>我博客的图片，都是放在 source&#x2F;img 目录中，按照年份建立目录。</p>
<p><img src="/img/2023/blog-source-img.jpg" alt="blog-source-img"></p>
<p>我可以通过按大小排序，来查出哪些图片占用的空间比较大。</p>
<p><img src="/img/2023/images-sort-by-size.webp" alt="images-sort-by-size"></p>
<p>现在看到的是我已经优化过的了，下面说说我的优化过程。</p>
<h3 id="Mac-自带「预览」"><a href="#Mac-自带「预览」" class="headerlink" title="Mac 自带「预览」"></a>Mac 自带「预览」</h3><p>在 Mac 上双击一张图片，会使用自带的「预览」来打开。可以点击「文件」「导出」，选择 JPEG 格式，可以更改它的质量来缩小图片体积。</p>
<p><img src="/img/2023/Mac-preview-export.webp" alt="Mac-preview-export"></p>
<h3 id="使用-Photoshop-或者-affinity-photo"><a href="#使用-Photoshop-或者-affinity-photo" class="headerlink" title="使用 Photoshop 或者 affinity photo"></a>使用 Photoshop 或者 affinity photo</h3><p><img src="/img/2023/affinity-photo.webp" alt="affinity-photo"></p>
<p>专业的图片处理软件，除非要修改图片内容，不然一般不会选择用它们来压缩图片。</p>
<h3 id="ImageOptim"><a href="#ImageOptim" class="headerlink" title="ImageOptim"></a>ImageOptim</h3><p><img src="/img/2023/ImageOptim.webp" alt="ImageOptim"></p>
<p>一个开源的图片优化工具，直接把图片拖进来就行。它只有 <a href="https://imageoptim.com/mac">Mac 版本</a>，在 <a href="https://github.com/ImageOptim/ImageOptim">GitHub</a> 上面有 8.3K star。</p>
<p>上面我拖了一张图片进来，它处理后，图片大小变成原来的 65.1% 了。这是在我开启微量有损的情况，不开的话，压缩比并不高。</p>
<p>然后我觉得它有两个缺点：</p>
<ul>
<li>压缩后直接替换掉原文件</li>
<li>压缩时间太长</li>
</ul>
<p>所以我不怎么用它。</p>
<h3 id="使用-WebP-格式"><a href="#使用-WebP-格式" class="headerlink" title="使用 WebP 格式"></a>使用 WebP 格式</h3><p>之前的<a href="/2023/03/about-webp/">文章</a>我已经介绍过它了，我目前博客新添加的图片，如果体积比较大，我都尽量把它们转为 WebP 格式。它的压缩比超级强。</p>
<p><img src="/img/2023/vr.webp" alt="qiyu-vr"></p>
<p>你能想象这样一张分辨率为 5472×3080 的图片，它只有 87KB 吗？</p>
<p>它可以做到图片很小的情况下，还保持着不错的图片质量，真心不错。</p>
<p>由于经常转换格式，所以我后来将它弄成一个 APP，图片拖进去就会自动转换为 WebP 格式。</p>
<p><img src="/img/2023/webp-mac-app.webp" alt="webp-mac-app"></p>
<p>感兴趣的可以看<a href="/2023/03/create-mac-app-from-command-line-scripts/">之前的文章</a>。这么一番优化，我目前整个博客的图片，只有 34MB，我手机开数据的情况下访问我的博客，速度方面感觉也还不错。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 上 where 命令</title>
    <url>/2023/04/windows-where/</url>
    <content><![CDATA[<p>在 Mac 和 Linux 我们可以使用 which 命令，来查看某个命令的绝对路径，例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">which</span> go</span><br><span class="line">/usr/local/go/bin/go</span><br></pre></td></tr></table></figure>

<p>在 Windows 上我们可以使用 where</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">where</span> node</span><br><span class="line">C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure>

<p>我测试了下，发现只有 cmd 支持，我用 powershell 和 nu shell 都不支持。</p>
<p>解决方法是，使用 <code>where.exe</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; where.exe node</span><br><span class="line">C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure>

<p>或者使用 <code>gcm</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; gcm node</span><br><span class="line"></span><br><span class="line">CommandType     Name        Version    Source</span><br><span class="line">-----------     ----        -------    ------</span><br><span class="line">Application     node.exe    19.8.1.0   C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>更改 Mac 截图快捷键、文件名、文件格式</title>
    <url>/2023/04/mac-screenshot2/</url>
    <content><![CDATA[<h3 id="更改截图默认快捷键"><a href="#更改截图默认快捷键" class="headerlink" title="更改截图默认快捷键"></a>更改截图默认快捷键</h3><p>Mac 默认的截图快捷键是 cmd+shift+3 全屏截图，cmd+shift+4 区域截图。按 3 颗按键还是有些不方便，对于我这种经常截图的人来说。</p>
<p><img src="/img/2023/screenshot-hotkey.webp" alt="screenshot-hotkey"></p>
<p>我们可以到「系统偏好设置」「键盘」「快捷键」「截屏」中，更改为自己喜欢的按键，我这边直接把区域截图改为<code>F9</code>。</p>
<h3 id="更改截图默认文件名"><a href="#更改截图默认文件名" class="headerlink" title="更改截图默认文件名"></a>更改截图默认文件名</h3><p>默认截图后得到的图片名称是这样的 <code>截屏2023-04-02 上午10.58.54.png</code>，如果在「语言与地区」里有勾选 ☑️ 24 小时制，那么是这样的 <code>截屏2023-04-02 11.08.06.png</code></p>
<p>在英文状态下是 <code>Screen Shot [date] at [time].png</code></p>
<p>我们能修改的，只有日期前面的文字而已，例如我不想要「截图」这两个字。</p>
<p>打开「终端」这个 APP，粘贴下面的命令，按回车键执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;&quot;</span><br></pre></td></tr></table></figure>

<p>之后截图得到的文件名会变成这样的 <code>2023-04-02 11.08.06.png</code></p>
<p>我们也可以改为自己的想设置的文字，例如我想在前面加上 <code>powersee-</code>，我可以这样做</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;powersee-&quot;</span><br></pre></td></tr></table></figure>

<p>之后截图得到的文件名会变成这样的 <code>powersee-2023-04-02 11.08.06.png</code></p>
<p><img src="/img/2023/change-screencapture-name.webp" alt="change-screencapture-name"></p>
<p>如果想改回原来的默认名称，可以用这条命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 1; killall SystemUIServer</span><br></pre></td></tr></table></figure>

<h3 id="更改截图默认文件格式"><a href="#更改截图默认文件格式" class="headerlink" title="更改截图默认文件格式"></a>更改截图默认文件格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type</span><br></pre></td></tr></table></figure>

<p>后面可以加 JPG, TIFF, GIF, PDF, PNG 这些，我没有改，还是用它默认的 png 就好。</p>
<h3 id="截图不要阴影"><a href="#截图不要阴影" class="headerlink" title="截图不要阴影"></a>截图不要阴影</h3><p>按 cmd shift 4 后，按空格键，此时按住 alt 键再点击窗口的话，保存下来的图片就是没有阴影的，图片体积会小很多。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 安装 Nu shell 与配置</title>
    <url>/2023/04/windows-install-nushell-and-config/</url>
    <content><![CDATA[<p>使用 nu shell 已经有一段时间，感觉还不错。它最为吸引我的就是，自带历史记录提示，就像 zsh 的 zsh-autosuggestions 插件。</p>
<p><img src="/img/2023/nushell-autosuggestions.png" alt="nushell-autosuggestions"></p>
<p>它的一条普通的 ls 命令，结果也和其它 shell 很不一样。</p>
<p><img src="/img/2023/nushell-ls.png" alt="nushell-ls"></p>
<p>输出的是一个表格。</p>
<p>安装可以查看官方文档：<a href="https://www.nushell.sh/zh-CN/book/installation.html">安装 Nu | Nushell</a></p>
<p>文档一共 6 种语言，中文就是其中一种。</p>
<p>我是到  <a href="https://github.com/nushell/nushell/releases">GitHub 的 Release 页</a> 下载并解压二进制文件，然后放到 <code>C:\bin\</code> 里面的。接着在「终端」里面添加 nushell。</p>
<p><img src="/img/2023/terminal-add-nushell.png" alt="terminal-add-nushell"></p>
<p>如果想让 nushell 作为默认的 shell，可以到「启动」，「默认配置文件」进行更改。</p>
<p><img src="/img/2023/terminal-default-shell.png" alt="terminal-default-shell"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Nu shell Oh My Posh</title>
    <url>/2023/04/nushell-ohmyposh/</url>
    <content><![CDATA[<p>给 Nu shell 配置上 Oh My Posh，完成后效果如下。</p>
<p><img src="/img/2023/nu-ohmyposh.webp" alt="nu-ohmyposh"></p>
<p>之前我已经给 powershell 配置好 ohmyposh 了，现在感觉还是 nu shell 比较好用，所以也来折腾一下。</p>
<p>官方文档：<a href="https://ohmyposh.dev/docs/installation/prompt">Change your prompt | Oh My Posh</a></p>
<p>有这些 shell 可以选择：</p>
<ul>
<li>bash</li>
<li>cmd</li>
<li>elvish</li>
<li>fish</li>
<li><code>nu</code></li>
<li>powershell</li>
<li>tcsh</li>
<li>xonsh</li>
<li>zsh</li>
</ul>
<p>点击中间的 nu 可以看到说明。</p>
<p>简单来说，就是修改 nushell 的两个配置文件就好。它们在 <code>~\AppData\Roaming\nushell</code> 里面。</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oh-my-posh init nu</span><br></pre></td></tr></table></figure>

<p>到 <code>env.nu</code> 里面，我直接写在第四行的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Nushell Environment Config File</span><br><span class="line">alias ll = ls -l</span><br><span class="line"></span><br><span class="line">oh-my-posh init nu</span><br></pre></td></tr></table></figure>

<p>然后再到 <code>config.nu</code> 的最后，添加这一行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.oh-my-posh.nu</span><br></pre></td></tr></table></figure>

<p>它会生成 <code>~/.oh-my-posh.nu</code> ，也就是在用户目录下。打开后里面是这些内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">export-env &#123;</span><br><span class="line">    let-env POWERLINE_COMMAND = <span class="string">&#x27;oh-my-posh&#x27;</span></span><br><span class="line">    let-env POSH_THEME = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    let-env PROMPT_INDICATOR = <span class="string">&quot;&quot;</span></span><br><span class="line">    let-env POSH_PID = (random uuid)</span><br><span class="line">    <span class="comment"># By default displays the right prompt on the first line</span></span><br><span class="line">    <span class="comment"># making it annoying when you have a multiline prompt</span></span><br><span class="line">    <span class="comment"># making the behavior different compared to other shells</span></span><br><span class="line">    let-env PROMPT_COMMAND_RIGHT = &#123;<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    let-env POSH_SHELL_VERSION = (version | get version)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PROMPTS</span></span><br><span class="line">    let-env PROMPT_MULTILINE_INDICATOR = (^<span class="string">&quot;C:/Users/nucx/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe&quot;</span> <span class="built_in">print</span> secondary $<span class="string">&quot;--config=(<span class="variable">$env</span>.POSH_THEME)&quot;</span> --shell=nu $<span class="string">&quot;--shell-version=(<span class="variable">$env</span>.POSH_SHELL_VERSION)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    let-env PROMPT_COMMAND = &#123;</span><br><span class="line">        <span class="comment"># We have to do this because the initial value of `$env.CMD_DURATION_MS` is always `0823`,</span></span><br><span class="line">        <span class="comment"># which is an official setting.</span></span><br><span class="line">        <span class="comment"># See https://github.com/nushell/nushell/discussions/6402#discussioncomment-3466687.</span></span><br><span class="line">        <span class="built_in">let</span> cmd_duration = <span class="keyword">if</span> <span class="variable">$env</span>.CMD_DURATION_MS == <span class="string">&quot;0823&quot;</span> &#123; 0 &#125; <span class="keyword">else</span> &#123; <span class="variable">$env</span>.CMD_DURATION_MS &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hack to set the cursor line to 1 when the user clears the screen</span></span><br><span class="line">        <span class="comment"># this obviously isn&#x27;t bulletproof, but it&#x27;s a start</span></span><br><span class="line">        <span class="built_in">let</span> clear = (<span class="built_in">history</span> | last 1 | get 0.<span class="built_in">command</span>) == <span class="string">&quot;clear&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> width = ((term size).columns | into string)</span><br><span class="line">        ^&quot;C:/Users/nucx/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe&quot; print primary $&quot;--config=(<span class="variable">$env</span>.POSH_THEME)&quot; --shell=nu $&quot;--shell-version=(<span class="variable">$env</span>.POSH_SHELL_VERSION)&quot; $&quot;--execution-time=(<span class="variable">$cmd_duration</span>)&quot; $&quot;--error=(<span class="variable">$env</span>.LAST_EXIT_CODE)&quot; $&quot;--terminal-width=(<span class="variable">$width</span>)&quot; $&quot;--cleared=(<span class="variable">$clear</span>)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if &quot;false&quot; == &quot;true&quot; &#123;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Nu shell 升级到 0.78.0，一堆麻烦</title>
    <url>/2023/04/nushell-0-78-0/</url>
    <content><![CDATA[<p>这一次的升级挺恼火的。</p>
<p>看到 nu shell 发布新版本了，看更新日志好像挺不错。于是我下载压缩包，解压，到「终端」改一下设置，就可以使用新版本了。</p>
<p>但是一上来就报错，真心看不懂，使用 0.78 加载以前的配置文件会报错，说要加 <code>||</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">42 │ # Use nushell functions to define your right and left prompt</span><br><span class="line">43 │ let-env PROMPT_COMMAND = &#123; create_left_prompt &#125;</span><br><span class="line">   ·                          ───────────┬──────────</span><br><span class="line">   ·                                     ╰── Parsing as a closure, but || is missing</span><br><span class="line">44 │ let-env PROMPT_COMMAND_RIGHT = &#123; create_right_prompt &#125;</span><br><span class="line">   ╰────</span><br><span class="line"> help: Try add || to the beginning of closure</span><br></pre></td></tr></table></figure>

<p>查看一下 GitHub issues ：<a href="https://github.com/nushell/nushell/issues/8767">Error: nu::parser::closure_missing_pipe (nushell v0.78.0) · Issue #8767 · nushell&#x2F;nushell (github.com)</a></p>
<p>means that it should be</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let-env PROMPT_COMMAND = &#123;|| create_left_prompt &#125;</span><br></pre></td></tr></table></figure>

<p>如果只是一行需要修改，那倒是无所谓，问题是很多地方需要改，那么一个一个加也不是办法呀，还是让它重新生成配置文件吧。</p>
<p>于是我把 <code>env.nu</code> 和 <code>config.nu</code> 改个名字，再新开一个 tab，就会提示是否新建配置文件。</p>
<p>使用新的配置文件之后，可以不报错了，但是，ohmyposh这边又有问题了。</p>
<p>修改 <code>env.nu</code> 和 <code>config.nu</code> 这两个文件，让 nu 启动时加载 ohmyposh，结果出现这样的报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: nu::parser::closure_missing_pipe</span><br><span class="line"></span><br><span class="line">  × Missing || inside closure</span><br><span class="line">    ╭─[.oh-my-posh.nu:8:1]</span><br><span class="line">  8 │     # making the behavior different compared to other shells</span><br><span class="line">  9 │     let-env PROMPT_COMMAND_RIGHT = &#123;&#x27;&#x27;&#125;</span><br><span class="line">    ·                                    ──┬─</span><br><span class="line">    ·                                      ╰── Parsing as a closure, but || is missing</span><br><span class="line"> 10 │     let-env POSH_SHELL_VERSION = (version | get version)</span><br><span class="line">    ╰────</span><br><span class="line">  help: Try add || to the beginning of closure</span><br></pre></td></tr></table></figure>

<p>也就是说，现在 <code>.oh-my-posh.nu</code> 里面的语法也是错误的了。</p>
<p>于是我到 <a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases/">https://github.com/JanDeDobbeleer/oh-my-posh/releases/</a> 查看一下。果然，它也刚刚更新了。</p>
<blockquote>
<h3 id="Bug-Fixes"><a href="#Bug-Fixes" class="headerlink" title="Bug Fixes"></a>Bug Fixes</h3><ul>
<li><strong>nushell:</strong> update syntax to for v0.78.0 (<a href="https://github.com/JanDeDobbeleer/oh-my-posh/commit/7e04bdc9f7a2c5541191a26e3e2f09a6dc278626">7e04bdc</a>)</li>
</ul>
</blockquote>
<p>于是我更新 oh-my-posh 到最新的版本，就解决问题了。</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS 设置允许「任何来源」</title>
    <url>/2023/04/mac-allow-apps-anywhere/</url>
    <content><![CDATA[<p>最近由于更新系统到 Ventura 13.3，我发现安全性里的「任何来源」又不见了。</p>
<p><img src="/img/2023/APP-allow1.webp" alt="APP-allow1"></p>
<p>于是又得去网上搜开启的命令，这里也顺便记录一下📝</p>
<p>考虑到以后也许有萌新搜到我这篇文章，这里写详细一点。</p>
<p>首先点击「启动台」，在顶部的搜索框里面输入「终端」，可以找到一个图标上面写 <code>&gt;_</code> 的 APP</p>
<p><img src="/img/2023/Mac-terminal.webp" alt="Mac-terminal"></p>
<p>点击打开它，然后复制下面这条命令，粘贴进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>

<p><img src="/img/2023/terminal-spctl.webp" alt="terminal-spctl"></p>
<p>然后按一下回车键，这时出现 Password:🔑，需要输入自己的用户密码，也就是开机后要进入桌面时的那个密码。</p>
<p><img src="/img/2023/terminal-spctl-Password.webp" alt="terminal-spctl-Password"></p>
<p>注意输入密码的时候，屏幕上不会显示任何内容的，既不会直接显示你的密码，也不会出现 <code>***</code> 或者 <code>···</code>，只管输入就行，完成后就再按一下回车键。</p>
<p>然后应该就可以看到出现「任何来源」了。</p>
<p><img src="/img/2023/APP-allow2.webp" alt="APP-allow2"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>升级 Calibre 到 6.15.1</title>
    <url>/2023/04/calibre-6-15-1-ebook-viewer/</url>
    <content><![CDATA[<p>我一直使用 calibre 来打开 epub 和 mobi 文件，我不喜欢 Mac 自带的「图书」APP。</p>
<p>目前电脑里装的是很久之前的版本了，一直没升级。这次把电脑系统升级到 13.3 之后，发现没法直接用 ebook-viewer 来打开 epub 文件了，选择 calibre 的话，是把书籍导入到 calibre 里面。</p>
<p><img src="/img/2023/epub-open-method.webp" alt="epub-open-method"></p>
<p>于是我打算升级一下，到官网下载时发现，2022 年的时候才支持苹果自研芯片的：<a href="https://calibre-ebook.com/whats-new">https://calibre-ebook.com/whats-new</a></p>
<blockquote>
<p>Release: 6.0 [11 Jul, 2022]</p>
<ul>
<li><strong>Support for new CPU architectures: Apple Silicon and ARM64 on Linux. Support for 32bit CPUs has been dropped because Qt 6 does not support them</strong></li>
</ul>
</blockquote>
<p>我现在用的是 5.31.1 的版本。</p>
<p><img src="/img/2023/calibre-5.31.1.webp" alt="calibre-5.31.1"></p>
<p>于是到官网下载新的安装包，直接替换就行。这个应用居然要占用接近 800M……</p>
<p><img src="/img/2023/calibre-6.15.1-need-800MB.jpg" alt="calibre-6.15.1-need-800MB"></p>
<p>之后在「活动监视器」里也可以看到它的种类显示为 Apple 了。之前是显示 Intel 的。</p>
<p><img src="/img/2023/calibre-Apple.webp" alt="calibre-Apple"></p>
<p>而且现在 epub 也默认改为用 ebook-viewer 来打开了。</p>
<p><img src="/img/2023/ebook-viewer.webp" alt="ebook-viewer"></p>
<p>不错，问题解决了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>自动操作 automator 快速将图片转为 webp</title>
    <url>/2023/04/automator-quick-webp/</url>
    <content><![CDATA[<p>最近在学习 Mac 上面的自动操作 automator 怎么使用。</p>
<p>bilibili 上面有一个非常好的教程视频：<a href="https://www.bilibili.com/video/BV1ps411J7gW">https://www.bilibili.com/video/BV1ps411J7gW</a></p>
<p>是 2018 年录制的，不过讲得挺好的，我可以学习学习他的教学方式。</p>
<p>不过他的视频中，没讲到我想了解的，执行 shell 命令。</p>
<p>我有这样的需求，需要经常把图片转换为 WebP 格式。然后我了解到用 automator 可以更快地做到，因此打算来研究看看。</p>
<p>一番折腾之后，终于弄好了，现在可以使用右键来将图片转为 WebP 格式了。</p>
<p>过程如下：</p>
<p>打开 Mac 自带的应用「自动操作」英文名是 automator，选择第三个「快速操作」。然后在左边的「实用工具」里面，找到「运行 Shell 脚本」，将它拖到右边。</p>
<p>右边我们有很多地方需要调整，可以参考我的设置↓</p>
<p><img src="/img/2023/automator-webp.webp" alt="automator-webp"></p>
<p>这是脚本内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">	/opt/homebrew/bin/cwebp <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.webp&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>虽然它使用了 for，但是我测试过，选中两张图片的时候，只有第一张能否转为 WebP，第二张不会。</p>
<p>完成之后保存一下即可，接着来到访达里面。</p>
<p>使用过程如下：</p>
<p>选中图片，右键「快速操作」，「转换为 WebP」这个名字是我们自己起的。然后旁边就多出一张 webp 格式的图片了。</p>
<p><img src="/img/2023/automator-quick-webp.gif" alt="automator-quick-webp"></p>
<p>然后根据我的了解，从 macOS 10.15（Catalina）开始，Apple 更改了 Automator 创建的服务的默认位置，将其移动到了右键菜单的「快速操作」下。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>自动操作 automator 出现输入框后再运行脚本</title>
    <url>/2023/04/automator-input-box/</url>
    <content><![CDATA[<p>由于我每天都写一篇博客文章，每次都需要我打开 vscode，然后在终端里面输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post title...</span><br></pre></td></tr></table></figure>

<p>我在想，能否使用 automator 让我这个过程变得更加流畅一些。</p>
<p>我的想法是，在 Mac 右上角，放一个图标，我点击图标后，弹出一个文本框，然后我输入文章名字，例如今天这篇的名字是 <code>automator-input-box</code></p>
<p>输入完成之后，后台就自动执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post automator-input-box</span><br></pre></td></tr></table></figure>

<p>感觉还是挺简单的，应该是可以实现的。</p>
<p>一番研究之后，终于实现了。</p>
<p><img src="/img/2023/automator-hexo-post.webp" alt="automator-hexo-post"></p>
<p>脚本内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.zshrc</span><br><span class="line"><span class="comment">#echo $PATH</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/hexobackup &amp;&amp; <span class="built_in">pwd</span></span><br><span class="line">hexo new post <span class="variable">$1</span></span><br></pre></td></tr></table></figure>

<p>首先放一个 「获得指定的文本」在最上面，然后下面是「运行Shell脚本」</p>
<p>第一行加载 <code>zsh</code> 的配置，是为了获取到 <code>node</code> 和 <code>hexo</code> 的环境变量，如果不加这一行，那么脚本运行的时候，它是找不到 <code>hexo</code> 的。当然我们也可以写出 <code>hexo</code> 的完整路径，例如 <code>/opt/homebrew/.../hexo</code> 之类，但是我发现这样会提示找不到 <code>node</code>，又得加 <code>node</code> 的环境变量。所以还是直接加载 <code>zsh</code> 的配置文件比较方便。</p>
<p>之后进入 <code>hexo</code> 博客所在的位置，我的是放在用户目录下的 <code>hexobackup</code> 中，所以可以写成 <code>$HOME/hexobackup</code></p>
<p>进入到博客目录之后，再执行命令创建文章。</p>
<p>本来到这里就结束了的，不过我后面还是加了些内容，让结果可以通过通知显示出来。</p>
<p>这里的关键点是设置一个变量，来接收输出结果，然后在显示通知里面，使用这个变量。</p>
<p>我创建的是「应用程序」，所以可以选择把它保存到自己想放置的地方。</p>
<p><img src="/img/2023/automator-APP.webp" alt="automator-APP"></p>
<p>之后我把这个 APP 拖到 Dock 栏上面，可以非常快速地打开它。</p>
<p><img src="/img/2023/hexo-post-dock.webp" alt="hexo-post-dock"></p>
<p>点击它之后，就会出现一个文本框，在这里我可以输入博客文章的文件名。不过它这里不能粘贴，只能手动输入。</p>
<p><img src="/img/2023/automator-input-box-getText.webp" alt="automator-input-box-getText"></p>
<p>当我输入完成后，点击「继续」按钮，就会去执行 shell 脚本。完成之后，会弹出一条通知。</p>
<p><img src="/img/2023/hexo-post-notification.webp" alt="hexo-post-notification"></p>
<p>感觉比较遗憾的地方是，不能粘贴，以及只能按「继续」按钮，而不能用按回车键来代替。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>如何去掉 iPhone iPad 上的越狱文件？</title>
    <url>/2023/04/iphone-ipad-remove-jailbreak/</url>
    <content><![CDATA[<p>我有一台 iPad，几年前就将它越狱了。由于越狱之后，就没法直接更新系统，所以目前还停留在 13.6.1</p>
<p><img src="/img/2023/iPad-13.6.1.jpg" alt="iPad-13.6.1"></p>
<p>现在提示可以更新的是 iPadOS 16.4.1，如果我直接点击升级，很可能待会就变砖了。</p>
<p>所以我开始了解怎么才能升级这台，已经越狱了的 iPad。我猜可能得进入 DFU 模式，然后重新刷一个干净的系统进去。</p>
<p>不过了解后发现，并不用这么麻烦，只需要先把系统的越狱去掉就行。</p>
<p>先在电脑上使用 checkra1n 让机器处于越狱状态，因为我们需要在设备里打开 checkra1n 这个 app。</p>
<p>官网：<a href="https://checkra.in/">checkra1n</a></p>
<p><img src="/img/2023/checkra1n-v-0.12.4.webp" alt="checkra1n-v-0.12.4"></p>
<p>还是熟悉的操作，按照说明进入 DUF 模式，之后机器重启，然后点击桌面的 checkra1n 这个 app，再点击红色的「Restore System」来恢复系统即可。</p>
<p><img src="/img/2023/iPad-checkra1n.png" alt="iPad-checkra1n"></p>
<p>然后机器会重启，并且删除越狱相关的文件。例如重启后桌面就没有 Cydia 了。</p>
<p>此时就可以到系统里面升级了，经过漫长地等待，我把 iPad 升级到了 16.4.1</p>
<p><img src="/img/2023/iPad-16.4.1.jpg" alt="iPad-16.4.1"></p>
]]></content>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何升级 macOS 到特定版本</title>
    <url>/2023/04/macos-update-to-specific-version/</url>
    <content><![CDATA[<p>直接在系统偏好设置里，点击「软件更新」的话，会检查当前最新的系统版本。例如我现在显示的是 Ventura。</p>
<p><img src="/img/2023/macOS-Monterey-Software-Update.webp" alt="macOS-Monterey-Software-Update"></p>
<p>而我现在的系统版本还是 Big Sur。</p>
<p>我其实不想更新的，所以我之前，是把「高级」里面的所有勾都取消掉，这样才可以保持这一年多来，没有任何系统升级提示。</p>
<p><img src="/img/2023/uncheck-macos-update.webp" alt="uncheck-macos-update"></p>
<p>但是刚才我点击进来了，它就自动检查更新，所以现在不更新的话，会有一个红色数字 1 在图标上。噢，不把它弄掉的话，我会相当别扭的。</p>
<p>我尝试着升级到 11 Big Sur 的最新版，11.7.5，看看会怎么样。</p>
<p><img src="/img/2023/macOS-Big-Sur-11.7.5.jpg" alt="macOS-Big-Sur-11.7.5"></p>
<p>升级是成功了，但是更新提示依然还在。</p>
<p>这时我了解到 13 版本，它的系统设置，变得和 iPad 上一样了，感觉不怎么喜欢，不知道我能否选择，只升级到 12 就行？</p>
<p>于是我查找看看 Mac 能否升级到特定版本。</p>
<p><a href="https://support.apple.com/zh-cn/HT211683">如何下载 macOS - 官方 Apple 支持 (中国)</a></p>
<p>直接到苹果官网，可以看到各个版本的系统，点击后跳转到 APP store。</p>
<p><img src="/img/2023/macOS-Monterey-app-store.webp" alt="macOS-Monterey-app-store"></p>
<p>商店里能下载的版本还挺多的。</p>
<p><a href="macappstores://apps.apple.com/app/macos-ventura/id1638787999?mt=12">Ventura 13</a></p>
<p><a href="macappstores://apps.apple.com/app/macos-monterey/id1576738294?mt=12">Monterey 12</a></p>
<p><a href="macappstores://apps.apple.com/app/macos-big-sur/id1526878132?mt=12">Big Sur 11</a></p>
<p><a href="macappstores://apps.apple.com/app/macos-catalina/id1466841314?mt=12">Catalina 10.15</a></p>
<p><a href="macappstores://apps.apple.com/app/macos-mojave/id1398502828?mt=12">Mojave 10.14</a></p>
<p><a href="macappstores://apps.apple.com/app/macos-high-sierra/id1246284741?mt=12">High Sierra 10.13</a></p>
<p>虽然知道怎么选择特定版本了，但是我在软件更新里面，已经下载好 Ventura 了。唉，那就升级看看吧，希望一切顺利。</p>
<p><img src="/img/2023/download-Ventura.webp" alt="download-Ventura"></p>
<p>等待了一段时间，升级成功了。升级后自动换了张默认壁纸，「系统偏好设置」也改名为「系统设置」了。</p>
<p><img src="/img/2023/system-setting.webp" alt="system-setting"></p>
<p>升级到 Ventura 13 居然比我刚才从 Big Sur 11.6 升级到 11.7.5 速度还快。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 如何复制和移动文件</title>
    <url>/2023/04/nodejs-copy-and-move/</url>
    <content><![CDATA[<p>建议在 nodejs 的交互环境中测试，直接在终端执行 node 就可以进入。</p>
<p><img src="/img/2023/node-RELP.gif" alt="node-RELP"></p>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p>需要用到 fs</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">copyFileSync</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;b.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>把当前目录下的 a.txt 复制为 b.txt</p>
<p>查询文件是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">existsSync</span>(<span class="string">&#x27;b.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>使用 renameSync</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;b/a.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>如上，将 a.txt 移动到 b 目录下。</p>
<p>或者使用 rename</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>将 one 重命名为 two</p>
<p>第三个参数是一个函数，这个不能缺，不像带 Sync 的，只需要两个参数就行。</p>
]]></content>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>tbz 如何解压</title>
    <url>/2023/04/tbz/</url>
    <content><![CDATA[<p>可以使用 bzip2 来解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bzip2 -d filename.tbz</span><br></pre></td></tr></table></figure>

<p>然后应该会得到一个 tar 压缩包，需要再使用 tar 解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xf filename.tar</span><br></pre></td></tr></table></figure>

<p>其实也可以直接一步到位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xf filename.tbz</span><br></pre></td></tr></table></figure>

<p>抄来一份定义</p>
<blockquote>
<p>tbz 格式是一种压缩文件格式，也称为 tarball。它是将 tar 和 bzip2 两种工具结合起来使用得到的一种格式，使用 bzip2 进行数据压缩，再使用 tar 把多个文件和目录打包在一起，最终形成一个 tbz 后缀的压缩包。</p>
<p>相比其他压缩格式，tbz 压缩率较高，压缩效果较优，扩展名为 .tbz 或 .tbz2，可在 Linux 和 macOS 等操作系统上使用 tar 和 bunzip2 命令对其进行解压缩。</p>
</blockquote>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 crontab 中执行 rsync 没有权限问题</title>
    <url>/2023/04/macos-crontab-not-permitted/</url>
    <content><![CDATA[<p>我在使用 rsync 备份文件到 nas 里。如果我手动在终端里执行的话，一切正常，可以把文件同步到 nas 里面。</p>
<p>但是，当我把同样的命令，添加到 crontab 中，却报错了。</p>
<p>问题其实是 cron 无法读取到 ~&#x2F;Documents&#x2F;screenshot-backup 里面的内容。因为现在 Mac 收紧了权限，其实我们平时使用一些 APP 的时候，如果要访问桌面或者下载文件夹，就会出现弹窗。</p>
<blockquote>
<p>在 macOS 中，某些应用程序在尝试读取或写入桌面、下载文件夹等敏感位置时，会触发系统的安全权限机制，导致弹出权限提示窗口。这是因为自 macOS 10.14 (Mojave) 版本开始，Apple 引入了更加严格的安全控制措施，以保护用户的隐私和数据安全。</p>
</blockquote>
<blockquote>
<p>除了桌面和下载文件夹之外，还有其他一些敏感位置，例如文稿、图片、文档、音乐、视频等文件夹。这些文件夹中的内容通常包含用户的个人数据和隐私信息。因此，当应用程序尝试访问这些敏感位置时，同样会触发权限提示窗口。</p>
</blockquote>
<p>那么回到我的问题，现在 cron 执行任务的时候，它可不会弹窗呀，而它又没有访问权限，所以任务就执行失败了。</p>
<p>方法一</p>
<p>不使用这个默认用户文件夹即可。例如我用户目录下有个 autosave 的文件夹，同样在 crontab 中用 rsync 备份，可以正常完成任务。</p>
<p>方法二</p>
<p>给 cron 完全磁盘权限</p>
<p>cron 的路径是 <code>/usr/sbin/cron</code>，我们可以在访达 Finder 里面，点击顶部菜单的「前往」「前往文件夹」，然后输入 <code>/usr/sbin</code> 来找到它。</p>
<p>如果想像我这样，显示隐藏文件夹，可以按快捷键 <code>command + shift + .</code>，就是 <code>&gt;</code> 这颗按键。</p>
<p><img src="/img/2023/cron-location-shadow.webp" alt="cron-location"></p>
<p>现在我们可以把 sbin 这个文件夹，拖到左侧的个人收藏那里。</p>
<p>然后打开「系统设置」，我的是 13.3 系统版本，以前叫「系统偏好设置」</p>
<p>找到 「隐私与安全性」里面的「完全磁盘访问权限」，点击下方的 + 来添加一个新的程序进去。</p>
<p><img src="/img/2023/full-disk-access.webp" alt="full-disk-access"></p>
<p>由于刚才我把 sbin 放到左侧的个人收藏了，所以现在找到 cron 很简单。</p>
<p><img src="/img/2023/Finder-cron.webp" alt="Finder-cron"></p>
<p>这样操作之后，使用 cron 来执行 rsync 命令备份Documents&#x2F;screenshot-backup 就没问题了，其它命令如果是需要访问文稿、桌面、下载这些文件夹，应该也是通过这样来解决问题的。</p>
<p>参考：<a href="https://apple.stackexchange.com/questions/378553/crontab-operation-not-permitted">macos - Crontab Operation not permitted - Ask Different (stackexchange.com)</a></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 imagemagick 给图片添加阴影</title>
    <url>/2023/04/imagemagick-shadow/</url>
    <content><![CDATA[<p>官方文档：<a href="https://legacy.imagemagick.org/Usage/blur/#shadow">Bluring and Sharpening – IM v6 Examples (imagemagick.org)</a></p>
<p>我有一张图片，名为 <code>test.jpg</code> 直接放到博客文章里面，效果是这样的</p>
<p><img src="/img/2023/shadow-test.jpg" alt="shadow-test"></p>
<p>如果加上阴影后，效果是这样的。</p>
<p><img src="/img/2023/convert-add-shadow.png" alt="convert-add-shadow"></p>
<p>看起来效果会好很多，特别是当网页背景是白色，图片背景也是白色时，加了阴影可以让图片更为突出。我使用的是这样一条命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert test.jpg \( +clone -background black -shadow 50x20+0+0 \) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure>

<p><code>-shadow</code> 后面的 <code>50x20+0+0</code> 指的是：</p>
<p>50：阴影的不透明度</p>
<p>20：阴影模糊度</p>
<p>第一个 +0：代表阴影左右偏移</p>
<p>第二个 +0：代表阴影上下偏移</p>
<p>假如我改为 <code>50x20+10+10</code>，那么得到的图片是这样的</p>
<p><img src="/img/2023/shadow-add10-add10.png" alt="shadow-add10-add10"></p>
<p>也就是阴影会往右下方偏移。</p>
<p>现在 <code>-background</code> 用的是 black，也可以改为其它颜色的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert shadow-test.jpg \( +clone -background red -shadow 50x20+10+10 \) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure>

<p><img src="/img/2023/shadow-red.webp" alt="shadow-red"></p>
<p>个人感觉用 grey 会比较合适，而且我不喜欢偏移，所以这是我使用的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert shadow-test.jpg \( +clone -background grey -shadow 70x20+0+0 \) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure>

<p><img src="/img/2023/shadow-grey-70.png" alt="shadow-grey-70"></p>
<p>在 Mac 上用 zsh 必须得加 \ 转义才行，在 Windows 上面就可以不用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert shadow-test.jpg ( +clone -background grey -shadow 70x20+0+0 ) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure>

<p>我可以把它封装为一个函数，但是输出名字要怎么设置呢？直接在后面加 <code>.png</code> 吗？</p>
<p>也就是 <code>test.jpg</code> 变 <code>test.jpg.png</code>，这样一般是没问题，不过这样的命名不太好。</p>
<p>另一种思路，在名字后面加 <code>-shadow</code>，也就是变 <code>test-shadow.png</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">shadow</span></span>() &#123;</span><br><span class="line">		convert <span class="variable">$1</span><span class="string">&quot; /( +clone -background grey -shadow 70x20+0+0 /) +swap -background none -layers merge +repage &quot;</span><span class="variable">$&#123;1%.*&#125;</span><span class="string">&quot;-shadow.png</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>此时将它封装为一个函数，那么之后如果要给图片加阴影，我可以这样来使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shadow powersee-test.jpg</span><br></pre></td></tr></table></figure>

<p>就可以得到一张名为 <code>powersee-test-shadow.png</code> 的带阴影图片。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>对象存储到底是什么东西？为何能轻松掏空我们的钱包？</title>
    <url>/2023/04/about-oss/</url>
    <content><![CDATA[<p>在网上闲逛看到对象存储，我之前以为这东西应该是企业什么的才需要用的吧，对于我们普通个人来说，应该不太会用到。</p>
<p>但是我对于它还是有些好奇的，然后最近一直在写博客，那我想着，要不把我博客上的图片，放到对象存储上，这样访问起来会快很多。</p>
<p>腾讯云好像没有免费空间，我的账号点进去没有，看别人好像有。</p>
<p>之后我看到这篇博文：<a href="https://www.cnblogs.com/Sky-seeker/p/15855538.html">国内外免费对象存储和CDN加速额度 - 梦幻之心星 - 博客园</a></p>
<p>里面讲到腾讯云可以花 1 块钱买一年 50G 的，于是我就买了一个。</p>
<p><img src="/img/2023/one-yuan-cos.webp" alt="one-yuan-cos"></p>
<p>但是还不知怎么使用，以及它的规则是怎么样的，流量超出了是不是会欠费？那么搜索看看别人是怎么用腾讯云 cos 来存博客图片的吧。</p>
<p>我找到了这篇文章，而且里面还讲了如何为博客的图片设置 CDN。</p>
<p><a href="https://jdhao.github.io/2020/03/16/tencent_cos_cdn_setup/">腾讯云对象存储博客图床开启 CDN 加速(不需要购买额外域名) - jdhao’s digital space</a></p>
<p>不过文章是 2020 年写的，到现在已经三年了。目前想要 cdn 只能使用自己已备案的域名才行，看来 cdn 部分难搞，估计只能使用 cos 了。</p>
<p>看来也挺容易理解，就是把图片放到腾讯云 cos，有点像我们把图片放到网盘里。但是对象存储，它会给我们一个链接，我们可以通过链接来访问放在对象存储中的文件，不需要登录或者输验证码什么的。</p>
<p>那我这一块钱买的套餐，有 50GB 的存储空间，可以放很多东西嘛。</p>
<p>可是收费方面我还是没明白。看了腾讯云的免费额度说明</p>
<blockquote>
<p>免费额度资源包不可抵扣 <strong>非标准存储容量</strong> 计费项，例如低频存储容量、归档存储容量、请求次数、流量等。</p>
</blockquote>
<p>估计就是说，我存 50G 在里面，这个可以免费，但是如果我要访问的话，就需要收费的。</p>
<p>主要就是——<strong>请求次数、流量</strong></p>
<p>我昨晚把博客里的 2023 年的图片，全部替换为 cos 的链接，自己测试了博客的速度，还是比较满意的。今天进入控制台看一下数据</p>
<p>显示外网流量 12.33 MB，请求次数 297。</p>
<p>腾讯云已经被扣钱了，看来很危险。</p>
<blockquote>
<p>【腾讯云】尊敬的腾讯云用户，您好。截至2023-04-13 08:30:24，您的账号（创建者账号ID：100xxx，昵称：powersee）已欠费0.05元，最新一笔扣费为COS 对象存储 结算扣费，扣费金额0.05元；轻量应用服务器-自定义镜像，对象存储，云函数SCF即将停服；轻量应用服务器-自定义镜像，对象存储停服后会继续对部分功能扣费，直至资源销毁。 您可前往“腾讯云助手”小程序查询扣费明细并快速充值，以免影响资源正常使用</p>
</blockquote>
<p>因为我的腾讯云账号里面没有余额，所以直接欠费了。欠费之后，连服务器都要给我停掉，明明我的服务器已经预付款了……</p>
<p>📝记录一下每天的扣费情况，注意⚠️是根据前一天的流量使用情况来扣费的。</p>
<table>
<thead>
<tr>
<th>日期</th>
<th>费用</th>
</tr>
</thead>
<tbody><tr>
<td>4.13</td>
<td>0.05</td>
</tr>
<tr>
<td>4.14</td>
<td>0.07</td>
</tr>
<tr>
<td>4.15</td>
<td>0.06</td>
</tr>
<tr>
<td>4.16</td>
<td>0.06</td>
</tr>
<tr>
<td>4.17</td>
<td>0.05</td>
</tr>
</tbody></table>
<p>根据后台的数据，每天的流量是 120MB 左右，每天的费用是 6 分钱左右，感觉还行，我充了一块钱进去，还能用挺多天的。如果一直保持这样，那一个月就 1.8 元。</p>
<p>想到既然需要按照流量以及访问次数收钱，那我还是开启防盗链吧。里面默认使用的是白名单，所以我填入这三行进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powersee.github.io</span><br><span class="line">blog.powersee.top</span><br><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure>

<p>这样我的博客、备份博客、本地调试都可以正常查看图片，如果别人搬运我的内容，或者通过 rss 订阅，就没法加载图片了。</p>
<p>后来想想，感觉不太好，又把防盗链给关了。</p>
<p><strong>试试其它的云</strong></p>
<p>之后我想着试试「阿里云」、「七牛云」，因为之前也有看到别人使用它们当博客图床。</p>
<p>但是我了解后感觉不好用。</p>
<p>阿里云我的账号没有免费试用的资格，甚至连像腾讯这种一块钱的体验套餐都没有，一上来就得花钱买……那既然都要花钱，我何必从腾讯云换到阿里云呢？</p>
<p>七牛云看着是挺好的，每个月有 10G 存储空间，给 10 万次 get 请求。所以一般个人博客使用是足够的。然而它给的链接是 HTTP 的，然后它好像提示，给的域名只有一个月而已。难道意味着如果想白嫖的话，就得每个月自己去更新一下图片域名？所以是在逼我们绑定自己的域名咯，但是域名又必须用备案的……</p>
<p>之后我搜到这篇文章：<a href="https://kuizuo.cn/why-i-dont-use-qiniu-cloud/">为什么我不用七牛云 - 愧怍的小站</a></p>
<p>作者讲到使用 HTTP 的图片在 chrome 会有问题，看来还是不要用七牛。</p>
<p>这里也吐槽一下，注册七年云，需要填写姓名和身份证号，注册完成后，还需要用微信小程序，人脸识别，才可以使用它的对象存储……当我做完这一切，才知道它只给 http 链接，并且域名只能用 30 天……</p>
<blockquote>
<p>七牛测试域名，每个域名每日限总流量 10GB，每个测试域名自创建起 30 个自然日后系统会自动回收，仅供测试使用</p>
</blockquote>
<p>而且我注册账号后一两个小时吧，七牛那边就打电话过来了，估计是想推广之类的，不过我说我只想拿来当博客图床，后面再敷衍几句就挂了。</p>
<p>然后我想着既然用不上，我把账号注销了吧，结果发现，整个网站找不到地方注销账号……总之体验很不好。</p>
<hr>
<p>目前还是继续用腾讯云 cos，先不搞， 看看腾讯云一块钱能用多久。实在不行就把图片放 vps 上，或者重新改回 GitHub pages。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 提取图片中的文字，断网也能用</title>
    <url>/2023/04/mac-image-to-text/</url>
    <content><![CDATA[<p>我之前一直以为这个功能是 iOS 才能用的，因为以前有看到 iOS 相关的介绍。</p>
<p>没想到 Mac 其实也可以使用。方法是：选中一张图片，按空格键预览，之后按 command + A 这两颗按键，也就是全选嘛，图片中的文字就会高亮。然后再按 command + C  复制即可。</p>
<p><img src="/img/2023/preview-cmd-a.webp" alt="preview-cmd-a"></p>
<p>了解了一下，原来是 macOS Monterey 12 才有的功能。我之前的系统一直保留在 Big Sur 11，所以没见过这样的功能。</p>
<p>然后我测试了一下，断网也可以使用的。而且也可以不用按 command + A，点击右下角的图标就行了。</p>
<p><img src="/img/2023/preview-button-text.webp" alt="preview-button-text"></p>
<p>或者直接用鼠标按住左键来选中文字即可。</p>
<p><img src="/img/2023/preview-select-text.webp" alt="preview-select-text"></p>
<p>官方介绍：<a href="https://support.apple.com/zh-cn/guide/preview/prvw625a5b2c/mac">在 Mac 上的“预览”中使用“实况文本”与照片中的文本交互 - 官方 Apple 支持 (中国)</a></p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>自建网站访问统计服务 fathom</title>
    <url>/2023/04/fathom/</url>
    <content><![CDATA[<p>最近给我的博客网站添加上网站统计服务，可以用来记录网站的访问情况。</p>
<p><img src="/img/2023/fathom-one-week-shadow.webp" alt="fathom-one-week-shadow"></p>
<p>这是一周的统计情况，比我预期的多。主要来源是：必应、百度、谷歌和 YouTube。访问最多的文章是<a href="/2023/03/tampermonkey-auto-signin/">油猴自动签到</a></p>
<p>我使用的是 fathom，是一个开源项目，在 <a href="https://github.com/usefathom/fathom">GitHub</a> 上面有 7 千多 star。</p>
<p>官方有提供一个预编译的 docker 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 usefathom/fathom:latest</span><br></pre></td></tr></table></figure>

<p>我观察了下，日常占用内存只有 15MiB，非常轻量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPU %     MEM USAGE / LIMIT     MEM %     NET I/O</span><br><span class="line">0.04%     15.09MiB / 969.6MiB   1.56%     49MB / 33.1MB</span><br></pre></td></tr></table></figure>

<p>docker 镜像也只有 31.2MB</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usefathom/fathom         latest    51cf88568278   3 years ago     31.2MB</span><br></pre></td></tr></table></figure>

<p>居然是 3 年前的镜像……</p>
<p>那么把代码克隆到本地，自己构建新的镜像吧。</p>
<p>结果失败了，看来是网络问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install: github.com/gobuffalo/packr/v2/packr2@latest: module github.com/gobuffalo/packr/v2/packr2: Get &quot;https://proxy.golang.org/github.com/gobuffalo/packr/v2/packr2/@v/list&quot;: dial tcp 142.251.43.17:443: i/o timeout</span><br><span class="line">The command &#x27;/bin/sh -c go install github.com/gobuffalo/packr/v2/packr2@latest&#x27; returned a non-zero code: 1</span><br></pre></td></tr></table></figure>

<p>在 vps 上构建就没问题。不过我也不知道更新了那些内容，从网页上看，好像没有任何变化。</p>
<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 fathom</span><br></pre></td></tr></table></figure>

<p>如果不是自己构建的，那么用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 usefathom/fathom:latest</span><br></pre></td></tr></table></figure>

<p>之后我使用反向代理，将 fathom.powersee.top 转发到 8080 端口。</p>
<p>于是我这样使用了一个星期，好像也没出现什么问题。通过上面的网址，可以访问到 fathom 的 web 界面。</p>
<p>第一次访问需要设置网站的域名，于是我填了我博客的域名 </p>
<blockquote>
<p>powersee.github.io</p>
</blockquote>
<p>之后它会给一段 js 代码，把它加入到博客网站的里面就行了。</p>
<p>我之所以选择它，主要是因为它用的数据库是 sqlite，很轻量，哪怕用 docker 容器运行，镜像大小也只有 30 多 MB。而其它的网站统计服务，很多都是需要使用 MySQL 或者 postgresql，容器很大，太占用服务器空间了。</p>
<p>相比之下，fathom 可以说是非常轻量小巧。</p>
<p>如果我们进入容器内，会发现在 &#x2F;app 目录下，就两个文件而已。一个 fathom 可以执行文件，以及 fathom.db 的 sqlite 数据库。</p>
<p>那看来如果要迁移的话，复制数据库应该就行了。</p>
<p>其实直接运行 docker 容器应该只是测试用用而已。官方有<a href="https://github.com/usefathom/fathom/blob/master/docs/Installation%20instructions.md">说明文档</a>：建议的用法是下载 release 中的可执行文件，放到 &#x2F;usr&#x2F;local&#x2F;bin，然后写配置文件 <code>.env</code> 设置 NGINX 方向代理、创建 systemd 服务……</p>
<p>步骤是有点多，但是按照说明一步一步来，也不难。</p>
<p>不过我目前犹豫是否继续用下去。因为它开源的是 lite 版，很多功能得 Pro 版本才有。例如统计浏览器型号、用户操作系统这些。</p>
<p>我点进去看它 Pro 版本的收费情况，好家伙，最低一个月 14 刀。</p>
<p>我打算换其它的统计服务了。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>自建 GitHub 代理服务</title>
    <url>/2023/04/github-proxy/</url>
    <content><![CDATA[<p>我的浏览器有装一个<a href="https://github.com/RC1844/FastGithub">油猴脚本</a></p>
<p>这样我在访问 GitHub 的时候，有一些代理选项。</p>
<p><img src="/img/2023/image-20230420172817331.webp" alt="image-20230420172817331"></p>
<p>因为大多数时候，我如果不用梯子，直接点击原链接，是没法下载成功的。</p>
<p>但是后面的代理链接，有时候也不是很好用，像这种套 cloudflare 的，一天 10 万次居然都能被用完。看来苦逼的国内用户需求还是挺大的。</p>
<p>它的原理其实也不难。</p>
<p>原链接：<a href="https://github.com/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_arm64.tar.gz">https://github.com/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_arm64.tar.gz</a></p>
<p>代理链接：<a href="https://github.rc1844.workers.dev/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_amd64.tar.gz">https://github.rc1844.workers.dev/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_amd64.tar.gz</a></p>
<p>也就是把 <a href="https://github.com/">https://github.com</a> 换成 <a href="https://github.rc1844.workers.dev/">https://github.rc1844.workers.dev</a></p>
<p>workers.dev 是 cloudflare 的域名，我们也可以自建自己的 worker 来代理 GitHub。需要使用开源项目：<a href="https://github.com/hunshcn/gh-proxy">https://github.com/hunshcn/gh-proxy</a></p>
<p>项目的 readme 里面也有写怎么自建 worker 代理。网上也有挺多人写教程的，我自己搭建了一个，结果发现，我的网络好像连访问 cf 都不流畅……</p>
<p>后来了解到，原来是 workers.dev 已经被墙了……</p>
<p>解决方法是绑定自己的域名，不过它要求域名的 DNS 解析，得是托管在 cloudflare 才行。</p>
<p>接着我想研究看看搭建在自己的服务器上，反正服务器的流量一般也用不完。</p>
<p>使用 docker 的话，很快，一行命令就行，没什么难度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=&quot;gh-proxy-py&quot; \</span><br><span class="line">  -p 0.0.0.0:80:80 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  hunsh/gh-proxy-py:latest</span><br></pre></td></tr></table></figure>

<p>不过这镜像有点大，居然要 910MB ……</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hunsh/gh-proxy-py        latest    745d6b4639c3   23 months ago   910MB</span><br></pre></td></tr></table></figure>

<p>体验一下看到有效果，赶紧把它删了，我这小小的服务器空间宝贵，舍不得。</p>
<p>我打算部署 python 版本，因为相比之下占用空间就小很多了。</p>
<p>先把项目克隆到服务器上，然后修改 <code>main.py</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hunshcn/gh-proxy</span><br></pre></td></tr></table></figure>

<p>需要安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask requests</span><br></pre></td></tr></table></figure>

<p>运行起来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 app/main.py</span><br></pre></td></tr></table></figure>

<p>也是很简单就可以运行起来，看到可以正常访问之后，我再次把 ip 改为 127.0.0.1 端口就随便设置一个，之后再使用反向代理。</p>
<p>目前我就使用 screen 让它在后台运行着，比较好的处理方式应该是用 systemd。</p>
<p>观察了下，感觉还行，占用的系统资源并不多。</p>
<p>我在自己的服务器上搭建了一个，在 cloudflare 的 workers 也搭建一个。之后可以将自己的链接添加到油猴脚本里面。</p>
<p><img src="/img/2023/my-github-proxy-shadow.webp" alt="my-github-proxy-shadow"></p>
<p>就是替换掉脚本中原来的，这样我可以在 GitHub 上面点击那个属于自己的按钮。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行中的文件管理器 ranger</title>
    <url>/2023/04/ranger/</url>
    <content><![CDATA[<p>ranger 一个开源的文件管理器，目前（2023年04月22日）在 <a href="https://github.com/ranger/ranger">GitHub</a> 上面有 13.2k 颗星。它特别的地方在于，它是在终端里面使用的文件管理器。</p>
<p>我们可以通过 pip 来安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install ranger-fm</span><br></pre></td></tr></table></figure>

<p>安装好后，输入 ranger 就可以打开它。</p>
<p><a href="https://github.com/ranger/ranger/wiki/Official-user-guide">官方用户指导</a></p>
<p>打开之后默认是分成两栏或者三栏的，我们可以使用方向键来移动。</p>
<p>其实和 vim 的使用方法很像的，例如输入冒号 : 之后，可以用 set 来开关各种功能。</p>
<p><img src="/img/2023/ranger-set-command.webp" alt="ranger-set-command"></p>
<p>我这里输入 <code>:set draw_borders both</code> 来打开边框。敲下回车键之后，边框就出来了。个人感觉这样比较好看，而且区别清晰，更直观。</p>
<p><img src="/img/2023/ranger-border.webp" alt="ranger-border"></p>
<p>其实从顶部和底部，我们还可以获取到很多信息。顶部就是当前的路径，和在 Windows 里使用「资源管理器」很像。</p>
<p>底部可以看到文件的修改时间。右边可以看到磁盘的剩余空间。</p>
<p>按下键盘上的 g 会弹出快捷指令。此时再按一下 h，就可以跳转到用户目录下。就是 go home。我经常使用它来切换路径。</p>
<p><img src="/img/2023/ranger-g.webp" alt="ranger-g"></p>
<p>按下 z 也会弹出指令，主要是更改一些设置</p>
<p><img src="/img/2023/ranger-z.webp" alt="ranger-z"></p>
<p>例如按 h 就可以显示隐藏文件。（除了使用 zh 之外，也可以使用退格键Backspace）</p>
<p>举一个例子，比如说我想查看 postgresql 的配置文件。那么以前我得这么做</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/postgresql</span><br><span class="line">ls</span><br><span class="line">cd 14</span><br><span class="line">ls</span><br><span class="line">cd main</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<p>不断地使用 cd 和 ls</p>
<p>但是我现在使用 ranger 的话，效率就提高很多了</p>
<p>先按 <code>ge</code> 就可以切换到 &#x2F;etc 里面，然后我可以再按 <code>zz</code> 调出过滤器，输入 post，它就会筛选出带 post 的文件或者文件夹。（比 search 好用，search 还得输入文字之后按回车键，filter 是实时的）</p>
<p><img src="/img/2023/ranger-filter.webp" alt="ranger-filter"></p>
<p>之后我只需要一直按方向键右 → 来进入文件夹，还可以预览文件的内容。</p>
<p><img src="/img/2023/ranger-pg-config.webp" alt="ranger-pg-config"></p>
<p>再说说一些基本操作</p>
<p>ranger 默认情况下，是使用 vim 来打开文本文件的，例如上面的 conf 或者 py 等等。如果我想使用 nano 来打开，那可以先按 <code>r</code> 再输入 nano 回车。</p>
<p>删除文件可以用 F8</p>
<p>复制粘贴，先复制 yy 再粘贴 pp</p>
<p>剪切粘贴 dd pp</p>
<p>不过这样只是对单个文件的操作，如果要操作多个，可以先用空格键标记文件，此时文件名会高亮，并且缩进一个字符。</p>
<p><img src="/img/2023/ranger-space-Mark.jpg" alt="ranger-space-Mark"></p>
<p>再按一次空格键可以取消标记。</p>
<p>重命名文件 cw</p>
<p>我自己给 ranger 设置了别名 rr</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias rr=&#x27;ranger&#x27;</span><br></pre></td></tr></table></figure>

<p>这样可以更快速地打开它。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>按 g 的时候会弹出很多路径让我们快捷切换。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key          command</span><br><span class="line"> L           cd -r %f</span><br><span class="line"> l           cd -r .</span><br><span class="line"> /           cd /</span><br><span class="line"> r           cd /</span><br><span class="line"> d           cd /dev</span><br><span class="line"> e           cd /etc</span><br><span class="line"> m           cd /media</span><br><span class="line"> M           cd /mnt</span><br><span class="line"> o           cd /opt</span><br><span class="line"> s           cd /srv</span><br><span class="line"> p           cd /tmp</span><br><span class="line"> u           cd /usr</span><br><span class="line"> ?           cd /usr/share/doc/ranger</span><br><span class="line"> v           cd /var</span><br><span class="line"> h           cd ~</span><br><span class="line"> i           eval fm.cd(&#x27;/run/media/&#x27; + os.getenv(&#x27;USER&#x27;))</span><br><span class="line"> R           eval fm.cd(ranger.RANGERDIR)</span><br><span class="line"> g           move to=0</span><br><span class="line"> c           tab_close</span><br><span class="line"> T           tab_move -1</span><br><span class="line"> t           tab_move 1</span><br><span class="line"> n           tab_new</span><br></pre></td></tr></table></figure>

<p>我们其实是可以自定义这些路径的。我们在终端执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ranger --copy-config=rc.conf</span><br></pre></td></tr></table></figure>

<p>然后到 ~&#x2F;.config&#x2F;ranger 里面找到这个文件，一共有 700 多行。到 450 行可以看到这些</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">450 map gh cd ~</span><br><span class="line">451 map ge cd /etc</span><br><span class="line">452 map gu cd /usr</span><br><span class="line">453 map gd cd /dev</span><br><span class="line">454 map gl cd -r .</span><br><span class="line">455 map gL cd -r %f</span><br><span class="line">456 map go cd /opt</span><br><span class="line">457 map gv cd /var/log/</span><br></pre></td></tr></table></figure>

<p>我们可以修改，或者添加都行，例如我添加多一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map g1 cd /etc/postgresql/14/main/</span><br></pre></td></tr></table></figure>

<p>那么我只要按 <code>g1</code> 就可以切换到 <code>/etc/postgresql/14/main/</code></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>chkservice 图形化管理 systemd</title>
    <url>/2023/04/chkservice/</url>
    <content><![CDATA[<p>我觉得使用 systemctl 来管理 systemd 服务太繁琐了，想了解有没有什么工具，可以更加方便的管理。</p>
<p>于是通过 Google 搜 systemd gui 发现了 <a href="https://github.com/linuxenko/chkservice">chkservice</a></p>
<p>是一个开源项目，有 300 多颗星，不过好久没更新了。</p>
<p>我们可以直接使用 apt 来安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install chkservice</span><br></pre></td></tr></table></figure>

<p>其它发行版可以编译后安装。</p>
<p>在终端直接执行 chkservice 就可以运行起来。</p>
<p><img src="/img/2023/chkservice.webp" alt="chkservice"></p>
<p>按上下键可以切换，这个不用说应该都会，但是其它的用法呢？GitHub 上面也没有文档。</p>
<p>其实只要我们输入 <code>?</code> 就能看到帮助菜单，也就是按住 shift 再按一下 <code>/?</code> 这颗按键。</p>
<p><img src="/img/2023/chkservice-help.webp" alt="chkservice-help"></p>
<p>挺好的，按 <code>s</code> 键可以启动或停止，空格键可以开启关闭「开机自启」。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Docker 运行 PostgreSQL 数据库</title>
    <url>/2023/04/docker-postgresql/</url>
    <content><![CDATA[<p>目前发现很多开源项目都使用 postgresql 来存放数据，因此我认为很有必要学习看看。</p>
<p>一开始我使用 Rock 5B 本地安装 postgresql，安装的是 14 的版本。之后要修改配置文件，才能够外部访问。感觉还有挺多需要折腾的。</p>
<p>后来我觉得，还是用 Docker 运行一个来学习好了，快捷方便。而且用完直接删除就行。</p>
<p>我们可以到 <a href="https://hub.docker.com/_/postgres/tags">Docker Hub</a> 查看 Docker 镜像的情况。我拉取了 4 个镜像，看来用 alpine 标签的镜像最省空间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker images postgres</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">postgres     15        ceccf204404e   12 days ago     379MB</span><br><span class="line">postgres     15.0      027eba2e8939   6 months ago    377MB</span><br><span class="line">postgres     alpine    1149d285a5f5   15 months ago   209MB</span><br><span class="line">postgres     latest    07e2ee723e2d   15 months ago   374MB</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=postgres-test -p 2345:5432 -e POSTGRES_PASSWORD=password postgres:alpine</span><br></pre></td></tr></table></figure>

<p>启动信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker logs postgres-test</span><br><span class="line">The files belonging to this database system will be owned by user &quot;postgres&quot;.</span><br><span class="line">This user must also own the server process.</span><br><span class="line"></span><br><span class="line">The database cluster will be initialized with locale &quot;en_US.utf8&quot;.</span><br><span class="line">The default database encoding has accordingly been set to &quot;UTF8&quot;.</span><br><span class="line">The default text search configuration will be set to &quot;english&quot;.</span><br><span class="line"></span><br><span class="line">Data page checksums are disabled.</span><br><span class="line"></span><br><span class="line">fixing permissions on existing directory /var/lib/postgresql/data ... ok</span><br><span class="line">creating subdirectories ... ok</span><br><span class="line">selecting dynamic shared memory implementation ... posix</span><br><span class="line">selecting default max_connections ... 100</span><br><span class="line">selecting default shared_buffers ... 128MB</span><br><span class="line">selecting default time zone ... UTC</span><br><span class="line">creating configuration files ... ok</span><br><span class="line">running bootstrap script ... ok</span><br><span class="line">sh: locale: not found</span><br><span class="line">2023-04-24 07:29:18.876 UTC [31] WARNING:  no usable system locales were found</span><br><span class="line">performing post-bootstrap initialization ... ok</span><br><span class="line">syncing data to disk ... ok</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Success. You can now start the database server using:</span><br><span class="line"></span><br><span class="line">    pg_ctl -D /var/lib/postgresql/data -l logfile start</span><br><span class="line"></span><br><span class="line">initdb: warning: enabling &quot;trust&quot; authentication for local connections</span><br><span class="line">You can change this by editing pg_hba.conf or using the option -A, or</span><br><span class="line">--auth-local and --auth-host, the next time you run initdb.</span><br><span class="line">waiting for server to start....2023-04-24 07:29:22.836 UTC [37] LOG:  starting PostgreSQL 14.1 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit</span><br><span class="line">2023-04-24 07:29:22.862 UTC [37] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">2023-04-24 07:29:22.890 UTC [38] LOG:  database system was shut down at 2023-04-24 07:29:21 UTC</span><br><span class="line">2023-04-24 07:29:22.910 UTC [37] LOG:  database system is ready to accept connections</span><br><span class="line"> done</span><br><span class="line">server started</span><br><span class="line"></span><br><span class="line">/usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*</span><br><span class="line"></span><br><span class="line">waiting for server to shut down...2023-04-24 07:29:23.015 UTC [37] LOG:  received fast shutdown request</span><br><span class="line">.2023-04-24 07:29:23.017 UTC [37] LOG:  aborting any active transactions</span><br><span class="line">2023-04-24 07:29:23.019 UTC [37] LOG:  background worker &quot;logical replication launcher&quot; (PID 44) exited with exit code 1</span><br><span class="line">2023-04-24 07:29:23.021 UTC [39] LOG:  shutting down</span><br><span class="line">2023-04-24 07:29:23.080 UTC [37] LOG:  database system is shut down</span><br><span class="line"> done</span><br><span class="line">server stopped</span><br><span class="line"></span><br><span class="line">PostgreSQL init process complete; ready for start up.</span><br><span class="line"></span><br><span class="line">2023-04-24 07:29:23.207 UTC [1] LOG:  starting PostgreSQL 14.1 on x86_64-pc-linux-musl, compiled by gcc (Alpine 10.3.1_git20211027) 10.3.1 20211027, 64-bit</span><br><span class="line">2023-04-24 07:29:23.208 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432</span><br><span class="line">2023-04-24 07:29:23.208 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432</span><br><span class="line">2023-04-24 07:29:23.211 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">2023-04-24 07:29:23.238 UTC [49] LOG:  database system was shut down at 2023-04-24 07:29:23 UTC</span><br><span class="line">2023-04-24 07:29:23.257 UTC [1] LOG:  database system is ready to accept connections</span><br></pre></td></tr></table></figure>

<p>进入容器内的 shell，切换到 postgres 用户，切换到 SQL Shell(psql)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker exec -it postgres-test bash</span><br><span class="line">bash-5.1# su postgres</span><br><span class="line">/ $ psql</span><br><span class="line">psql (14.1)</span><br><span class="line">Type &quot;help&quot; for help.</span><br><span class="line"></span><br><span class="line">postgres=#</span><br></pre></td></tr></table></figure>

<p>执行 <code>\l</code> 查看所有数据库，<code>\q</code> 退出 psql</p>
<p>如果我们想用图形化应用来连接 docker 中的 postgresql，需要用到刚才建立容器时使用的端口。例如我刚才用的是 <code>2345:5432</code>，那么我应该用此时服务器的 IP 地址和 2345 端口。</p>
<p>我使用的是免费的 <a href="https://dbeaver.io/">DBeaver</a>，它在 GitHub 上面有 3 万多颗星⭐️。</p>
<p>「新建数据库连接」选择 postgres，填写 IP 地址、端口和密码。</p>
<p><img src="/img/2023/postgresql-DBeaver.webp" alt="postgresql-DBeaver"></p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 DBeaver 只显示默认的一个数据库 postgres</title>
    <url>/2023/04/DBeaver-postgresql/</url>
    <content><![CDATA[<p>右键连接，编辑连接。在「连接设置」「PostgreSQL」里面，勾选上「显示非缺省的数据库」就可以了。</p>
<p><img src="/img/2023/postgresql-show-all-database.webp" alt="postgresql-show-all-database"></p>
<p>重新连接就可以看到所有数据库了。</p>
<p><img src="/img/2023/postgres-all-database.jpg" alt="postgres-all-database"></p>
<p>如果是在英文语境下，它的设置是 <code>Show all databases</code>，感觉就离谱，这玩意是怎么翻译成「显示非缺省的数据库」的？</p>
<p><img src="/img/2023/show-all-databases.jpg" alt="show-all-databases"></p>
<p>问题是没文化的我，还不知道「缺省」是什么意思，翻译一下，才知道是 default……</p>
<p><img src="/img/2023/default.webp" alt="default"></p>
<blockquote>
<p>缺省(quē shěng)，又译“默认”。</p>
<p>——百度百科</p>
</blockquote>
<p>知乎上也有不少的讨论：<a href="https://www.zhihu.com/question/20953160">「缺省」这个词是如何从英语 “Default” 翻译过来的？ - 知乎</a></p>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>如何禁止 Firefox 的更新提示</title>
    <url>/2023/04/Firefox-no-update/</url>
    <content><![CDATA[<p>火狐浏览器，非常烦人，每次打开都会提示更新。我不想更新，我不在乎安全，因为它不是我的主力浏览器。</p>
<p><img src="/img/2023/firefox-update.png" alt="firefox-update"></p>
<p>网上搜一下，还是有挺多人对此反感。好在解决方法不算麻烦，只需要修改一个文件。</p>
<p>首先在桌面或者开始菜单里面，找到 Firefox 的图标，右键「打开文件所在的位置」</p>
<p>然后进入 defaults 、 pref</p>
<p>我的是在 <code>C:\Program Files\Firefox Developer Edition\defaults\pref</code></p>
<p>我们可以使用记事本来打开里面的 <code>channel-prefs.js</code></p>
<p>我的里面最后一行显示的是这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pref(&quot;app.update.channel&quot;, &quot;aurora&quot;);</span><br></pre></td></tr></table></figure>

<p>那么我只需要把后面引号中的内容去掉即可，也就是把 aurora 删掉，变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pref(&quot;app.update.channel&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure>

<p>此时保存一下文件。（由于我浏览器装在 C:\Program Files\ 里面，所以需要管理员权限才能保存，如果你们是装在其它位置，也许可以不用）</p>
<p>之后再打开浏览器，就不会有更新提示了。</p>
<p><img src="/img/2023/firefox-no-update.png" alt="firefox-no-update"></p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 屏幕使用时间被 HelpViewer 占满</title>
    <url>/2023/04/screentime-helpviewer/</url>
    <content><![CDATA[<p>我打开 Mac 上面的屏幕使用时间，发现有一个叫「HelpViewer」的应用，占满了今天的使用时间。</p>
<p><img src="/img/2023/screentime-helpviewer.webp" alt="screentime-helpviewer"></p>
<p>而昨天居然占满了 24 小时。</p>
<p><img src="/img/2023/HelpViewer-24h.webp" alt="HelpViewer-24h"></p>
<p>这个问题我之前也遇过，不过重启机器后好像就好了。现在又再次出现，我觉得还是得查查怎么解决。</p>
<p>在苹果的社区里我看到这样的讨论：<a href="https://discussions.apple.com/thread/253321652">HelpViewer - Apple Community</a></p>
<p>里面提到，可以通过给这个 APP 限额来解决。直接限制它每天只能使用 1 分钟。</p>
<p><img src="/img/2023/HelpViewer-limit.webp" alt="HelpViewer-limit"></p>
<p>我尝试了，发现没有用，还是会继续统计 HelpViewer 的使用时间。</p>
<p>不过重启机器之后，好像就不会了。之后我又观察了几天，但是这几天的屏幕时间里都没有 HelpViewer，所以并不能证明给它限额有效。</p>
<p>但是，目前好像就只有这一个方法了。</p>
<p>这个 bug 存在快两年了，苹果居然还没修复。难道说是没法修复的？看有的网友说是内存泄露的问题。目前看来如果限额也没用，就只能重启了。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>将博客头像更改为 SVG</title>
    <url>/2023/04/blog-logo-svg/</url>
    <content><![CDATA[<p>现在的博客主题 <a href="https://github.com/imfycc/hexo-themes-yearn">yearn</a> 需要使用头像，我使用的是一张 jpeg logo 图片，大小是 8KB。</p>
<p>在访问首页的时候需要加载它，访问博客文章的时候也需要。</p>
<p>然而我观察到 GitHub pages 有时候访问速度只有 6、7KB，这就难顶了，一秒还没法将 logo 加载出来。看来这是一个急需解决的问题。</p>
<p>那么分析一下，我的头像其实很简单，就是黑色的背景，然后上面是我的昵称 Powersee，这其实可以用 svg 画出来。</p>
<p>我现在用这样的代码把它弄成 svg</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 180 180&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span> <span class="comment">&lt;!-- 黑色背景矩形 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="comment">&lt;!-- 文字 &quot;Power&quot;，居中对齐，白色填充，字号 48px，字体 sans-serif --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>_see<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<svg xmlns="http://www.w3.org/2000/svg" width="180" height="180" viewBox="0 0 180 180">
  <rect width="100%" height="100%" fill="black"></rect> <!-- 黑色背景矩形 -->
  <text x="50%" y="45%" text-anchor="middle" dy=".3em" fill="white" font-size="48" font-family="sans-serif">Power</text> <!-- 文字 "Power"，居中对齐，白色填充，字号 48px，字体 sans-serif -->
    <text x="50%" y="65%" text-anchor="middle" dy=".3em" fill="white" font-size="48" font-family="sans-serif">_see</text>
</svg>

<blockquote>
<p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</p>
</blockquote>
<p>不要注释的话，它只需要 393 字节，也就是 393Byte，不到 0.4KB，很不错。原本需要加载一张 8KB 的外部图片，现在改为 svg 可以直接写在 HTML 里面，而且需要加载的数据也只需原来的 5%。</p>
<p>那么就开始修改主题吧，需要修改 <code>index.ejs</code> 和 <code>ariticle.ejs</code> 这两个文件。</p>
<ul>
<li>index.ejs</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;div class=&quot;face-img&quot;&gt;&lt;img src=&quot;&lt;%=theme.avatar%&gt;&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;face-img&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 180 180&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span> <span class="comment">&lt;!-- 黑色背景矩形 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="comment">&lt;!-- 文字 &quot;Power&quot;，居中对齐，白色填充，字号 48px，字体 sans-serif --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>_see<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ariticle.ejs</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;img src=&quot;&lt;%=theme.avatar%&gt;&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 180 180&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>_see<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>找到里面引入 logo 的 img 位置，将它替换为 svg。</p>
<p>接着修改 css 文件，更改一下样式。就成功使用 svg 作为头像了。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>大聪明，用 js 替换图片链接，抛弃对象存储</title>
    <url>/2023/04/js-replace-img-link/</url>
    <content><![CDATA[<p>之前讲到<a href="/2023/04/about-oss/">对象存储</a>，我使用了腾讯云的对象存储来当博客图床。</p>
<p>用了一段时间后，我还是决定弃用了。一方面是担心待会别有用心的人，来盗刷我的对象存储流量，毕竟网上有很多人遇过了，谁叫对象存储是可以欠费的呢。</p>
<p>另一方面，我分析一下，现在对象存储选的是广州的服务器，而我自己有一台香港的服务器。如果我将博客图片，放到这台香港服务器上面，速度方面还是绰绰有余的。</p>
<p>那要怎么将图片放到自己的服务器上呢？🤔如果是其他人，可能需要去装个图床应用之类的。但是我不需要，因为我的备份博客就在这台服务器上面。😉</p>
<p><a href="https://powersee.github.io/">https://powersee.github.io/</a> 这个网址访问的是 GitHub Pages 上的网页文件。</p>
<p>而 <a href="https://blog.powersee.top/">https://blog.powersee.top/</a> 访问的是我服务器上面的网页文件。</p>
<p>我实现备份博客的方法也很简单，因为我的博客托管在 GitHub 上面，所以我在服务器上面设置定时任务，每天凌晨自动执行 git pull  来更新博客。🤗</p>
<p>那么我博客上的图片，服务器上都是有的。</p>
<p>此时简单的方法就是，将文章中的图片链接，都加上备份博客 <a href="https://blog.powersee.top/">https://blog.powersee.top/</a> 的前缀，在 vscode 里面批量替换可以很快处理完。</p>
<p>但是这样有些问题，就是当我写好文章后，在本地执行 <code>hexo s</code> 来预览时，图片就加载不出来，因为此时图片还没有传到服务器上。</p>
<p>所以我的想法是，当通过 <a href="https://powersee.github.io/">https://powersee.github.io/</a> 访问我的博客时，才替换图片链接。通过其它的域名访问，不会替换。</p>
<p>这样的要求，就需要使用 JavaScript 来实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> == <span class="string">&quot;powersee.github.io&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取当前网页中 body 的所有 img 标签</span></span><br><span class="line">	<span class="keyword">const</span> imgElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;body img&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 遍历每个 img 标签</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgElements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">const</span> imgElement = imgElements[i];</span><br><span class="line">	<span class="keyword">const</span> src = imgElement.<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查 img 标签的 src 是否以 /img/ 开头</span></span><br><span class="line">	<span class="keyword">if</span> (src.<span class="title function_">startsWith</span>(<span class="string">&#x27;/img/&#x27;</span>)) &#123;</span><br><span class="line">		imgElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, src.<span class="title function_">replace</span>(<span class="string">&#x27;/img/&#x27;</span>, <span class="string">&#x27;https://blog.powersee.top/img/&#x27;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>于是我在 js 文件中加入这段代码，就实现了我的目的。😘</p>
<p>假如我以后不需要替换了，那么只需要去掉这段代码就行。😎</p>
<p>如果我以后换域名了，也只需要修改这段代码，不需要去替换所有的文章原文本。</p>
<p>我个人对此还是比较满意的。😊</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 控制外接显示器亮度 MonitorControl</title>
    <url>/2023/05/MonitorControl/</url>
    <content><![CDATA[<p>发现一个可以在 Mac 上面控制外接显示器亮度的开源应用 <a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a></p>
<p>星星数量目前（2023年05月01日）有 21.4k。</p>
<p>使用这个要求显示器支持 ddc&#x2F;ci，可以打开显示器的设置看看有没有这个开关。我用的显示器是优派的，设置菜单里可以找到，默认就是打开的。</p>
<p><img src="/img/2023/ViewSonic-DDC:CI.webp" alt="ViewSonic-DDC:CI"></p>
<p>之后我使用 homebrew 来安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install MonitorControl</span><br></pre></td></tr></table></figure>

<p>装好后打开，可以在顶部找到一个灯光图标️</p>
<p><img src="/img/2023/MonitorControl-top.jpg" alt="MonitorControl-top"></p>
<p>拉动就可以调节显示器的亮度，但是音量调节并没有效果。（我是通过 HDMI 线连接 Mac min 和显示器的）</p>
<p>我发现拉到最亮时，就花屏了……</p>
<p><img src="/img/2023/MonitorControl-crash.webp" alt="MonitorControl-crash"></p>
<p>好像只有优派的这台显示器会这样，我另外通过 USB Type-C 线，将 Mac mini 连接到一台 sculptor 的便携显示器上，可以随意调节亮度，并没有出现花屏的情况。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>让 hexo 文章图片在 typora 里也能显示</title>
    <url>/2023/05/hexo-typora-img/</url>
    <content><![CDATA[<p>对于 hexo 文章的图片，我是在 source 目录下新建一个 img 目录，把图片都放在里面。然后我文章中的图片链接，都是 <code>/img/abc.png</code> 这种格式的。</p>
<p>它在博客网站上可以显示出来，但是在 typora 里面就没法显示。想要在 typora 里面可以显示图片，得把链接改为 <code>../img/abc.png</code> 这种格式的。</p>
<p>但是这样一改，我博客里就没法显示图片了，属于按下葫芦浮起瓢。</p>
<p>解决方法：</p>
<p>我们只需要在文章头部加入这一行，那么图片在 typora 里面就可以加载出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typora-root-url: ../</span><br></pre></td></tr></table></figure>

<p>图片的链接依然是 <code>/img/abc.png</code> 这种格式的。</p>
<p>它的原理就是 url 拼接，也就是说，在 typora 里面，加了这一行之后，图片的链接就变成 <code>../img/abc.png</code> 了。</p>
<p>或者说，typora 会去 <code>../</code> （也就是上一层目录）找 <code>/img/abc.png</code> 这张图片，找到了就显示出来。</p>
<p>而对于 hexo，它会忽略掉文章头部的 <code>typora-root-url</code>，所以没什么影响。</p>
<p>但要是每次都得手动去填写这一行，也很麻烦。一劳永逸的方法是，直接修改 <code>scaffolds/post.md</code> </p>
<p>这个是文章的模板，当我们执行 <code>hexo new post filename</code> 的时候，hexo 就会读取这个模板文件，创建一个新的文章文件。</p>
<p>我目前的模板是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">    - 随笔</span><br><span class="line">    -</span><br><span class="line">    - </span><br><span class="line">lock: false</span><br><span class="line">typora-root-url: ../</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab 中如何设置环境变量</title>
    <url>/2023/05/crontab-env/</url>
    <content><![CDATA[<p>我的 Python3 是装在 &#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F; 里面的，我发现在 crontab 中执行 Python 脚本。</p>
<p>使用的是 &#x2F;usr&#x2F;bin&#x2F;python3，这个的版本是 3.9.6。而我用 homebrew 装的是 3.11.2。</p>
<p>如果想让 crontab 优先使用 homebrew 的 Python3，有两种方法。</p>
<p>1、直接写出完整路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 7 * * * /opt/homebrew/bin/python3 /path/to/myscript.py</span><br></pre></td></tr></table></figure>

<p>2、在 crontab 头部定义环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH=/opt/homebrew/bin:/usr/bin:/bin</span><br></pre></td></tr></table></figure>

<p>当执行脚本时，会按照 PATH 环境变量的先后顺序在每个目录中查找命令，找到第一个版本即执行。</p>
<p>因此这里我把 &#x2F;opt&#x2F;homebrew&#x2F;bin 放最前面。可以写个脚本测试一下 Python 版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(sys.version)</span><br></pre></td></tr></table></figure>

<p>定义环境变量的好处，就是如果我们有多个脚本需要执行，就可以在 crontab 里面省掉很多字符。例如我现在这种情况，就不用在 crontab 中写一堆 <code>/opt/homebrew/bin/</code></p>
<p>如果我们要读取用户目录下的脚本，可以使用 <code>$HOME</code> 变量，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 $HOME/myscript.py</span><br></pre></td></tr></table></figure>

<p>那么我们也可以直接在 crontab 开头，加载 shell 配置文件，例如我使用的是 zsh，可以在 crontab 开头加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.zshrc</span><br></pre></td></tr></table></figure>

<p>这样的好处是，在 shell 能执行的命令，现在 crontab 应该也可以。而且也能使用 alias。所以看个人需要咯。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 更改 js、css 后不生效怎么解决</title>
    <url>/2023/05/hexo-js-css-no-work/</url>
    <content><![CDATA[<p>有时候我们修改好了 js、css 文件，执行 hexo s 预览一下效果，确认没问题。</p>
<p>但是执行 hexo g -d 更新博客之后，发现还是原来的样式，也就是说更改没有上传上去。此时可以到 GitHub pages 的仓库看看，是否 js、css 文件没有更新。如果是的话，此时如果按照官方的建议，是执行一下 hexo clean，然后再重新生成博客的 HTML 文件。</p>
<p>但是这么做，会导致之前的 git commit 记录都被删掉。</p>
<p>其实我们只是更改 js、css 而已，不需要这么麻烦。只需要把本地 public 文件夹中的 js 或者 css 文件删除掉。</p>
<p>再来执行 hexo g 就会生成新的。（可以通过输出日志判断）之后我们再执行 hexo d 来发布更新即可。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>贴吧图片批量下载器</title>
    <url>/2023/05/tieba-image-download/</url>
    <content><![CDATA[<p>之前为了制作漫画，放到 kindle 上面来观看，我写了这个程序。可以用来批量下载贴吧的图片。</p>
<p><img src="/img/2023/tieba-download.png" alt="tieba-download"></p>
<p>使用方法也很简单，把贴吧的链接粘贴进来，再点击下面的「开始下载」就可以了。</p>
<p><img src="/img/2023/tieba-download2.png" alt="tieba-download2"></p>
<p>也可以只输入帖子的 id 就行，软件会先判断的，发现不是完整的链接，它会自动补全的。</p>
<p>下载后，会在软件的同级文件夹下，多出一个文件夹，里面就是我们下载好的图片，它会按照顺序排好重命名。</p>
<p><img src="/img/2023/tieba-onepiece.webp" alt="tieba-onepiece"></p>
<p>前段时间有网友跟我反馈不能使用了，所以我更新了一下代码，并且把我修改软件的日期写上去。</p>
<p>目前软件可以从我的下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a> 里面下载到，在「windows应用」里面。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 自定义 js 脚本</title>
    <url>/2023/05/hexo-custom-script/</url>
    <content><![CDATA[<p>hexo 的官方文档，在插件部分有写</p>
<blockquote>
<p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p>
</blockquote>
<p>那么我在博客根目录，新建 <code>scripts</code> 目录，然后里面放一个 <code>test.js</code> 的 JavaScript 文件，内容就写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;haha, powersee&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>之后我执行 <code>hexo s</code> 启动 hexo 服务器，终端就会输出我自定义的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">haha, powersee</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>也就是说这个脚本成功执行了。</p>
<p>而且还可以建立多个 js 文件，例如 test2.js test3.js …</p>
<p>那我们可以通过建立脚本文件，来实现一些自动化操作。在 <a href="https://hexo.io/zh-cn/api/filter">过滤器（Filter） | Hexo</a> 里面有提供一些例子。用得比较多的应该是 before_post_render。</p>
<p>过滤器列表一共有这些：</p>
<ol>
<li><a href="https://hexo.io/zh-cn/api/filter#before-post-render">before_post_render</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#after-post-render">after_post_render</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#before-exit">before_exit</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#before-generate">before_generate</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#after-generate">after_generate</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#template-locals">template_locals</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#after-init">after_init</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#new-post-path">new_post_path</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#post-permalink">post_permalink</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#after-render">after_render</a></li>
<li><a href="https://hexo.io/zh-cn/api/filter#server-middleware">server_middleware</a></li>
</ol>
<p>前段时间我耗费了不少时间在研究这个，感觉还是挺有趣的。目前实现的功能有：检查文章中的图片链接、自动复制图片到 hexo 博客目录中。</p>
<p>后面整理整理再分享出来。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 使用自定义脚本，在渲染前检查图片链接</title>
    <url>/2023/05/hexo-img-before-render/</url>
    <content><![CDATA[<p>前篇：<a href="/2023/05/hexo-custom-script">hexo 自定义 js 脚本</a></p>
<p>我平时都是在 typora 里面写好文章内容，完成之后，再到 hexo 新建文章，然后将之前写好的内容复制粘贴过来。</p>
<p>但是图片的链接会发生变化，例如原本的链接是 ‘img&#x2F;2023&#x2F;mac-shortcut-key.webp’，复制后就变成了 ‘..&#x2F;..&#x2F;..&#x2F;Nutstore Files&#x2F;markdown&#x2F;img&#x2F;2023&#x2F;mac-shortcut-key.webp’ 这样的链接。想要让 hexo 渲染后能正常显示，需要把它变成 ‘&#x2F;img&#x2F;2023&#x2F;mac-shortcut-key.webp’</p>
<p>所以我之前都是手动修改图片链接的。如果文章中就一两张图，我就使用鼠标滑动选中，再删除。如果图片比较多，那就查找替换，也就几秒能搞定。</p>
<p>但这种机械重复的操作，肯定还是用代码来处理比较好。</p>
<p>我猜想应该也有其他人，也有同样的困扰吧。之后我在插件中心 <a href="https://hexo.io/plugins/">Plugins | Hexo</a>，搜索一下 img，我找到了这个项目：<a href="https://github.com/cocowool/hexo-image-link">cocowool&#x2F;hexo-image-link: 当MD中引用本地文件时，处理生成的html中的图片链接</a></p>
<p>查看他的代码，我发现里面使用了 <code>before_post_render</code> 这个参数。</p>
<p>处理的过程就是在渲染之前，查找一下图片链接，再处理图片链接。</p>
<p>于是我参考他的代码，最后达到了我的目的。这样会在渲染时，检查文章中所有的图片链接，如果发现有 <code>../../../Nutstore Files/markdown</code>，就将这个前缀去掉，但是不会修改源文件。我们的 md 文件还是原来的样子。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;../../../Nutstore Files/markdown&#x27;</span></span><br><span class="line"></span><br><span class="line">    data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(<span class="regexp">/!\[(.*?)\]\((.*?)\)/gi</span>, <span class="keyword">function</span>(<span class="params">match, p1, p2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p2.<span class="title function_">includes</span>(str)) &#123;</span><br><span class="line">            <span class="comment">// 替换图片链接</span></span><br><span class="line">            p2 = p2.<span class="title function_">replace</span>(str, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成对应的 &lt;img&gt; 标签</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;p2&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;p1&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> match; <span class="comment">// 返回原始的 Markdown 图片语法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不过后来由于坚果云自动升级，图片链接的前缀已经不是 <code>../../../Nutstore Files/markdown</code> 了，所以我需要修改一下脚本。可能其他人的链接也跟我不一样，只需要修改一下就行。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>威联通 qnap 使用 Python3</title>
    <url>/2023/05/qnap-python3/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我发现在威联通上面使用 Python3 还挺麻烦的。即使我已经在 App Center 里面安装好了，但是当我通过 ssh 连接威联通 nas 时，却发现找不到 Python3，Python2 倒是可以找到。</p>
<p><img src="/img/2023/qnap-Python3.webp" alt="qnap-Python3"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[~] # python3</span><br><span class="line">-sh: python3: command not found</span><br><span class="line">[~] # python</span><br><span class="line">Python 2.7.13 (default, Mar 24 2022, 10:03:40)</span><br><span class="line">[GCC 4.9.2] on linux2</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>那问题来了。</p>
<h4 id="安装好的-Python3-在哪里呢？"><a href="#安装好的-Python3-在哪里呢？" class="headerlink" title="安装好的 Python3 在哪里呢？"></a>安装好的 Python3 在哪里呢？</h4><p>答：在 <code>/share/CACHEDEV1_DATA/.qpkg/Python3</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # ls</span><br><span class="line">python3/  python3.bash	Python3.sh*  README.md	src/</span><br></pre></td></tr></table></figure>

<h4 id="那要如何使用它呢？"><a href="#那要如何使用它呢？" class="headerlink" title="那要如何使用它呢？"></a>那要如何使用它呢？</h4><p>通过查看 <code>README.md</code> 的内容，我们可以看到这些内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat README.md</span><br><span class="line">Run the following command to enter Python3 environment:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">$ . /etc/profile.d/python3.bash</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>也就是说，我们需要在 shell 里执行一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /etc/profile.d/python3.bash</span><br></pre></td></tr></table></figure>

<p>这条命令，才可以进入 Python3 环境（注意 <code>.</code> 之后有一个空格）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # . /etc/profile.d/python3.bash</span><br><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # python3</span><br><span class="line">Python 3.10.4 (main, May  6 2022, 08:22:01) [GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="进阶了解"><a href="#进阶了解" class="headerlink" title="进阶了解"></a>进阶了解</h4><p>其实这里的 <code>.</code> 也可以换为 source，它们是等价的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[~] # python3</span><br><span class="line">-sh: python3: command not found</span><br><span class="line">[~] # source /etc/profile.d/python3.bash</span><br><span class="line">[~] # python3</span><br><span class="line">Python 3.10.4 (main, May  6 2022, 08:22:01) [GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>而且我们可以发现，<code>/etc/profile.d/python3.bash</code> 其实是 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3.bash</code> 符号链接（Symbolic Link）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -alh /etc/profile.d/python3.bash</span><br><span class="line">lrwxrwxrwx 1 powersee administrators 48 2023-05-04 07:15 /etc/profile.d/python3.bash -&gt; /share/CACHEDEV1_DATA/.qpkg/Python3/python3.bash</span><br></pre></td></tr></table></figure>

<p>看看 python3.bash 里面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat python3.bash</span><br><span class="line">_PYTHON3_QPKG_CONF=/etc/config/qpkg.conf</span><br><span class="line">_PYTHON3_QPKG_NAME=&quot;Python3&quot;</span><br><span class="line">_PYTHON3_QPKG_ROOT=$(/sbin/getcfg $_PYTHON3_QPKG_NAME Install_Path -f $&#123;_PYTHON3_QPKG_CONF&#125;)</span><br><span class="line">_PYTHON3_QPKG_BIN=&quot;$&#123;_PYTHON3_QPKG_ROOT&#125;/python3/bin&quot;</span><br><span class="line">echo &quot;$&#123;PATH&#125;&quot; | grep -q  $&#123;_PYTHON3_QPKG_BIN&#125; || export PATH=$&#123;_PYTHON3_QPKG_BIN&#125;:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure>

<p>我尝试过将 <code>source /etc/profile.d/python3.bash</code> 这条命令，添加到 <code>.bash_profile</code> 里面，但是重新进行 ssh 连接，发现没有效果，并不能直接执行 python3 来进入交互界面。</p>
<p>之后我发现默认使用的是 <code>/bin/sh</code>，但是我执行 <code>bash</code> 之后，发现依然是 <code>/bin/sh</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[admin@qnap test]# echo $SHELL</span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure>

<p>之后我发现，里面的 bash 其实 sh 的符号链接……</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -al /bin/bash</span><br><span class="line">lrwxrwxrwx 1 admin administrators 2 2023-05-04 15:09 /bin/bash -&gt; sh*</span><br></pre></td></tr></table></figure>

<p>所以我应该把命令添加到 <code>~/.profile</code> 里面才对。之后再次 ssh 就可以直接使用 Python3 了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>威联通 qnap 定时执行 Python 脚本</title>
    <url>/2023/05/qnap-crontab/</url>
    <content><![CDATA[<p>在上期 <a href="/2023/05/qnap-python3">威联通 qnap 使用 Python3</a> 已经弄明白，怎么在 shell 里使用 Python3 了。但是我想要的是能够定时执行 Python3 脚本。</p>
<p>通过执行 <code>pip3 -V</code> 可以查找到它在哪个位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pip3 -V</span><br><span class="line">pip 22.0.4 from /opt/python3/lib/python3.10/site-packages/pip (python 3.10)</span><br><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # which python3</span><br><span class="line">/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/python3</span><br></pre></td></tr></table></figure>

<p>直接使用 <code>pip3 install xxx</code> 来安装模块的话，是安装到 <code>/opt/python3/lib/python3.10/site-packages/</code> 里面的。</p>
<p>而且它提示我更新 pip 版本给的命令是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/python3/bin/python3.10 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>跟我预期的不一样，我还以为会使用 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/python3.10</code> 呢。</p>
<p>查询一下，发现 <code>/opt/python3/bin/python3.10</code> 并不是软链接。那为什么 <code>/opt/python3/bin/</code> 里面的内容和 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/</code> 一模一样呢？</p>
<p>后来我知道了，原来 <code>/opt/python3</code> 就是一个符号链接而已。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -alh /opt/python3</span><br><span class="line">lrwxrwxrwx 1 admin administrators 43 2023-05-04 07:15 /opt/python3 -&gt; /share/CACHEDEV1_DATA/.qpkg/Python3/python3/</span><br></pre></td></tr></table></figure>

<p>为了命令比较简短一些，我还是用 <code>/opt/python3/bin/python3</code></p>
<p>执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>添加定时任务，例如我让它每天早上 7 点 18 分自动执行一个 Python 脚本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18 7 * * * /opt/python3/bin/python3 /share/CACHEDEV1_DATA/Multimedia/powersee_script.py</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 如何将 jfif 图片转换为 jpg</title>
    <url>/2023/05/Mac-jfif/</url>
    <content><![CDATA[<p>我发现 Mac 似乎无法直接预览 jfif 格式的图片，按空格键之后并不能显示图片内容。</p>
<p>不过 Mac 自带的「预览」APP 是可以直接打开 jfif 图片的。我们需要选中图片，右键「打开方式」「其他…」</p>
<p>之后在下方的「启用：」选择「所有应用程序」，再选「预览」就可以了。</p>
<p><img src="/img/2023/preview-jfif-shadow.webp" alt="preview-jfif"></p>
<p>此时我们就可以打开这样图片了，然后再通过「文件」「导出」就能保存为 jpg 或者 png 了。</p>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>威联通 qnap 使用 NFS 共享文件</title>
    <url>/2023/05/qnap-nfs/</url>
    <content><![CDATA[<p>在威联通的控制台里面，提供4种文件共享方式：Win&#x2F;Mac&#x2F;NFS&#x2F;WebDAV</p>
<p>其中 Windows 的 smb 是最通用，我之前也是一直使用 smb 而已，毕竟 win 和 mac 都能用。</p>
<p>最近我想研究一下怎么开启 nfs 服务，让我的芝杜播放器可以访问威联通里的视频。</p>
<p>首先到控制台里面，「激活NFS v2&#x2F;v3服务」，「激活NFS v4服务」两个勾我都打上了。之后再点击一下底部的「应用」。</p>
<p><img src="/img/2023/qnap-nfs-enable.png.webp" alt="qnap-nfs-enable.png"></p>
<p>这么多版本，那它们的区别是什么呢？我到网上搜索一番。</p>
<p>之后找到了一篇文章：<a href="https://blog.csdn.net/qq_20332637/article/details/107796651">NFS各个版本之间的比较_nfsv3和nfsv4的区别</a></p>
<table>
<thead>
<tr>
<th>编号</th>
<th>版本</th>
<th>RFC</th>
<th>时间</th>
<th>页数</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>NFSv2</td>
<td>rfc1094</td>
<td>1989年3月</td>
<td>27页</td>
</tr>
<tr>
<td>2</td>
<td>NFSv3</td>
<td>rfc1813</td>
<td>1995年6月</td>
<td>126页</td>
</tr>
<tr>
<td>3</td>
<td>NFSv4.0</td>
<td>rfc3530</td>
<td>2003年4月</td>
<td>275页</td>
</tr>
<tr>
<td>4</td>
<td>NFSv4.1</td>
<td>rfc5661</td>
<td>2010年1月</td>
<td>617页</td>
</tr>
</tbody></table>
<p>了解到的是：每个版本都在之前版本的基础上进行了改进，增加了新的功能和特性，提高了性能和安全性。</p>
<p>此时只是开启了 NFS 服务，还需要修改共享文件夹的权限。</p>
<p>到「控制台」「权限」「共享文件夹」里面，对想要共享的文件夹进行权限修改。例如我想改「Download」这个文件夹，需要点击右侧操作的第二个图标。然后按照下图这样修改。</p>
<p><img src="/img/2023/qnap-nfs-permission.png.webp" alt="qnap-nfs-permission.png"></p>
<p>IP 地址我填 <code>192.168.68.1/24</code> 也就是说我路由器里的所有设备都可以访问。因为 IP 地址是 32 位的，<code>/24</code> 就是说只要 IP 地址是 <code>192.168.68.</code> 开头的，都可以访问。</p>
<p>当然我们也可以设置只有一个 IP 可以访问，例如填写个 <code>192.168.68.123</code> 这样。</p>
<p>由于我只是想播放 nas 里面的视频而已，所以给只读权限就够了。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
