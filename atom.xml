<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="https://powersee.github.io/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2023-09-09T06:49:36.840Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何下载离线版 AMD 显卡驱动，以及旧版本驱动</title>
    <link href="https://powersee.github.io/2023/09/download-amd-drive/"/>
    <id>https://powersee.github.io/2023/09/download-amd-drive/</id>
    <published>2023-09-09T06:48:30.000Z</published>
    <updated>2023-09-09T06:49:36.840Z</updated>
    
    <content type="html"><![CDATA[<p>在 AMD 的官网 <a href="https://www.amd.com/zh-hans/support">https://www.amd.com/zh-hans/support</a> 如果我们直接点击「下载 WINDOWS 驱动程序」，那么得到的是一个类似这样的 exe 文件</p><blockquote><p>amd-software-adrenalin-edition-23.9.1-minimalsetup-230905_web.exe</p></blockquote><p>文件大小只有几十 MB，而且使用它来安装驱动需要联网才行。</p><p>那要怎样才能下载得到，像 Nvidia 驱动那样的完整驱动呢？离线也能安装的那种。</p><p><img src="/img/2023/2023-09-08_14-10-18.png" alt="2023-09-08_14-10-18"></p><p>我们先在下方选择我们的显卡，点击「提交」。然后便能得到不同操作系统的驱动下载链接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows 11 - 64 位版本</span><br><span class="line">Windows 10 64 位版本</span><br><span class="line">Windows 7 64 位版本</span><br><span class="line">RHEL x86 64 位</span><br><span class="line">Ubuntu x86 64 位</span><br><span class="line">SLED/SLES 15</span><br></pre></td></tr></table></figure><p>展开之后可以看到有</p><ul><li><strong>Auto-Detect and Install</strong></li><li><strong>AMD Software: Adrenalin Edition</strong></li><li><strong>AMD Software: PRO Edition</strong></li></ul><p>我们玩游戏的话一般选择 Adrenalin 版本，这样就能得到可以离线安装的显卡驱动了。</p><p><img src="/img/2023/2023-09-08_14-15-44.png" alt="2023-09-08_14-15-44"></p><p>不过这样下载的是最新版的驱动，如果我们想下载旧版的，可以点击 「驱动程序详细信息」下的 Release Notes，例如我这里点击之后，浏览器上方的地址栏就变成了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-9-1</span><br></pre></td></tr></table></figure><p>我们只需要更改链接最后面的数字就行，例如改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-8-1</span><br><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-5-1</span><br><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-22-5-1</span><br></pre></td></tr></table></figure><p>之前看到有网友说 22.5.1 这个版本好像比较好，游戏帧数会比新版本的驱动高，适合给 RX580 这类显卡使用，不过我没试过。</p><p>下载旧版本驱动点击 following links: 下方的链接即可。</p><p><img src="/img/2023/2023-09-08_14-25-38.png" alt="2023-09-08_14-25-38"></p><p>通过这种方法下载驱动，我们准备多个驱动，然后对比看看哪个好，毕竟 amd 的驱动更新确实比较频繁。留有完整的驱动安装包，要回退会比较方便。</p><p>驱动安装好后，C 盘的 AMD 文件夹可以删除的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 AMD 的官网 &lt;a href=&quot;https://www.amd.com/zh-hans/support&quot;&gt;https://www.amd.com/zh-hans/support&lt;/a&gt; 如果我们直接点击「下载 WINDOWS 驱动程序」，那么得到的是一个类似这样的 e</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在 alpine docker 容器中开启 ssh</title>
    <link href="https://powersee.github.io/2023/08/alpine-docker-ssh/"/>
    <id>https://powersee.github.io/2023/08/alpine-docker-ssh/</id>
    <published>2023-08-01T13:10:19.000Z</published>
    <updated>2023-08-01T13:14:28.410Z</updated>
    
    <content type="html"><![CDATA[<p>由于目前绿联官方没有开启 ssh 的方法，这样导致我想通过 rsync 备份文件到 NAS 里就没法做到了。</p><p>于是我想通过在 docker 里运行一个 alpine 容器，在容器里开启 ssh，而我只要将特定的目录挂载到容器内，就可以实现用 rsync 备份文件到 NAS。</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>先搜索并下载 alpine 容器镜像</p><p><img src="/img/2023/download-alpine.webp" alt="download-alpine"></p><p>之后点击创建，起一个名字</p><p><img src="/img/2023/Create.webp" alt="Create"></p><p>把 -i 和 -t 选上</p><p><img src="/img/2023/alpine-it-shadow.webp" alt="alpine-it-shadow"></p><p>网络选择 host，这样就不用去设置端口</p><p><img src="/img/2023/network-host-shadow.webp" alt="network-host-shadow"></p><p>存储空间，把想要操作的文件夹挂载到容器里面，我选择放在 &#x2F;mnt，注意后面要改为「读写」</p><p><img src="/img/2023/storage.jpg" alt="storage"></p><p>那么要填写的内容就这些而已，可以点下一步，完成创建后再启动，也可以勾选下方的「创建后启动容器」这个选项。</p><h3 id="配置与开启-ssh"><a href="#配置与开启-ssh" class="headerlink" title="配置与开启 ssh"></a>配置与开启 ssh</h3><p>之后在「容器管理」中找到我们刚才创建的容器，在它启动的情况下，点击详情，然后到最后的终端这里。</p><p><img src="/img/2023/ssh-and-rc.webp" alt="ssh-and-rc"></p><p>使用 apk add 来安装应用，这样装上 openssh 和 openrc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add openssh</span><br><span class="line">apk add openrc</span><br></pre></td></tr></table></figure><blockquote><p>OpenRC 是一个用于 Linux 系统的初始化系统和服务管理器。它最初是为 Gentoo Linux 开发的，后来也被广泛地用于其他 Linux 发行版，特别是一些轻量级的发行版，如 Alpine Linux。OpenRC 的目标是提供一种简单而可靠的初始化和服务管理解决方案，它与传统的 sysvinit 和较新的 systemd 相比，更轻量级且易于配置。</p></blockquote><p>之后修改 ssh 的配置文件，使用 vi 来打开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到 #PermitRootLogin prohibit-password 把前面的 # 去掉，然后把 prohibit-password 改为 yes。再把 PasswordAuthentication yes 前面的 # 去掉。</p><p><img src="/img/2023/sshd-config.webp" alt="sshd-config"></p><p>让 sshd 在容器启动时自启动（可以理解为开机自启，把容器当成一台机器）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-update add sshd</span><br></pre></td></tr></table></figure><p>此时如果直接用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>来启动 sshd 应该启动不了，会报错。需要先执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /run/openrc/softlevel</span><br></pre></td></tr></table></figure><p>然后就可以启动了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>查看状态可以用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd status</span><br></pre></td></tr></table></figure><p><img src="/img/2023/rc-sshd-status.webp" alt="rc-sshd-status"></p><p>此时就可以使用 ssh 来连接了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ ssh root@192.168.68.197</span><br><span class="line">The authenticity of host &#x27;192.168.68.197 (192.168.68.197)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:0h5hViR5234yJ3VqbuATQApvu+RONcbhhOygThKadjk.</span><br><span class="line">This key is not known by any other names</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.68.197&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">root@192.168.68.197&#x27;s password:</span><br></pre></td></tr></table></figure><p>但是容器的密码是什么呢？</p><p>其实并没有密码，如果我们想要使用密码得自己设置一个，输入 passwd 就可以设置密码。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># passwd</span></span><br><span class="line">Changing password <span class="keyword">for</span> root</span><br><span class="line">New password: </span><br><span class="line">Bad password: too short</span><br><span class="line">Retype password: </span><br><span class="line">passwd: password <span class="keyword">for</span> root changed by root</span><br><span class="line">/ <span class="comment"># </span></span><br></pre></td></tr></table></figure><p>这样我们就可以使用 root 用户名，加上自己设置的密码，来 ssh 连接上 alpine 容器。由于之前将 NAS 的特定文件夹挂载到 &#x2F;mnt，可以使用 ls &#x2F;mnt 命令，看看是否能在容器中看到 NAS 中的文件，可以的话就没问题了。</p><p>参考文档：<a href="https://www.cnblogs.com/zpcdbky/p/15568702.html">Alpine容器安装运行ssh - 同勉共进 - 博客园</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于目前绿联官方没有开启 ssh 的方法，这样导致我想通过 rsync 备份文件到 NAS 里就没法做到了。&lt;/p&gt;
&lt;p&gt;于是我想通过在 docker 里运行一个 alpine 容器，在容器里开启 ssh，而我只要将特定的目录挂载到容器内，就可以实现用 rsync 备份文</summary>
      
    
    
    
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
    <category term="NAS" scheme="https://powersee.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Windows 快捷方式如何使用相对路径</title>
    <link href="https://powersee.github.io/2023/06/windows-quick-access-relative-paths/"/>
    <id>https://powersee.github.io/2023/06/windows-quick-access-relative-paths/</id>
    <published>2023-06-24T04:44:00.000Z</published>
    <updated>2023-06-24T04:47:50.963Z</updated>
    
    <content type="html"><![CDATA[<p>现在我的有一个 a.exe 的程序，放在 C:\bin 里面。</p><p>直接选中按右键，在菜单中选择「创建快捷方式」，那么我们可以得到一个名为<code>a.exe - 快捷方式</code>的文件。此时它的属性是这样的</p><p><img src="/img/2023/image-20230618212051614.png" alt="image-20230618212051614"></p><p>可以观察到「目标」和「起始位置」都写上了完整路径。因此我们把这个快捷方式，放到其它地方，也可以双击来打开程序。</p><p>偶然间注意到，还有个备注选项。我在上面填写上 hehe，那么当我的鼠标放到快捷方式上面时，就会出现备注信息。</p><p><img src="/img/2023/image-20230618212612322.png" alt="image-20230618212612322"></p><p>想要使用相对路径，需要先把「起始位置」的内容删了。然后在「目标」后面的框加上 explorer.exe （注意有一个空格），然后再加上「要执行的程序相对于快捷方式的位置」。填写好后点右下角的「应用」。会自动加上「C:\Windows\」，并且图标也变成资源管理器的了。</p><p>这样一个使用相对路径的快捷方式就创建好了，我的用途是放在移动硬盘中，方便我在不同的电脑使用。</p><p><img src="/img/2023/image-20230618213144445.png" alt="image-20230618213144445"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在我的有一个 a.exe 的程序，放在 C:\bin 里面。&lt;/p&gt;
&lt;p&gt;直接选中按右键，在菜单中选择「创建快捷方式」，那么我们可以得到一个名为&lt;code&gt;a.exe - 快捷方式&lt;/code&gt;的文件。此时它的属性是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 拼接百度网盘链接</title>
    <link href="https://powersee.github.io/2023/05/js-baidu-netdisk-link/"/>
    <id>https://powersee.github.io/2023/05/js-baidu-netdisk-link/</id>
    <published>2023-05-24T15:55:58.000Z</published>
    <updated>2023-05-27T07:36:20.778Z</updated>
    
    <content type="html"><![CDATA[<p>有时在网页中，看到别人分享百度网盘链接。一般情况下，我点击链接之后，还需要输入提取码，才可以看到别人分享的文件。</p><p>我觉得应该可以通过代码，来减少一些步骤。举个例子，例如现在有这样的链接和提取码</p><blockquote><p><a href="https://pan.baidu.com/s/powersee_xxxx">https://pan.baidu.com/s/powersee_xxxx</a></p><p>提取码: psee</p></blockquote><p>那么只需要把链接改为 <a href="https://pan.baidu.com/s/powersee_xxxx?pwd=psee">https://pan.baidu.com/s/powersee_xxxx?pwd=psee</a> 就不需要手动输出提取码了。就是在原本链接后面加上「?pwd&#x3D;提取码」。</p><p>使用这样的代码可以实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link_area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link_area&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d_link = link_area.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> link_key = link_area.<span class="property">innerText</span>.<span class="title function_">match</span>(<span class="string">&#x27;提取码: (....)&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">d_link.<span class="property">target</span>=<span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line">d_link.<span class="property">href</span> += <span class="string">&#x27;?pwd=&#x27;</span> + link_key</span><br></pre></td></tr></table></figure><p>不过这样只能处理第一个链接。怎么修改代码让它可以处理多个链接？</p><p>思路：先查找到所有链接，再查找所有 「提取码」 ，只有再使用 for 循环遍历处理链接。最终代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link_area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link_area&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d_link = link_area.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> link_key = link_area.<span class="property">innerText</span>.<span class="title function_">match</span>(<span class="regexp">/提取码: (....)/g</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; d_link.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  d_link[i].<span class="property">target</span>=<span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line">  d_link[i].<span class="property">href</span> += <span class="string">&#x27;?pwd=&#x27;</span> + link_key[i].<span class="title function_">replace</span>(<span class="string">&#x27;提取码: &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取提取码部分比较麻烦，最终采用 replace 去掉多余的文字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时在网页中，看到别人分享百度网盘链接。一般情况下，我点击链接之后，还需要输入提取码，才可以看到别人分享的文件。&lt;/p&gt;
&lt;p&gt;我觉得应该可以通过代码，来减少一些步骤。举个例子，例如现在有这样的链接和提取码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>达芬奇如何处理升格、高帧率视频？</title>
    <link href="https://powersee.github.io/2023/05/DaVinci-High-frame-rate/"/>
    <id>https://powersee.github.io/2023/05/DaVinci-High-frame-rate/</id>
    <published>2023-05-17T03:29:47.000Z</published>
    <updated>2023-05-17T03:31:57.405Z</updated>
    
    <content type="html"><![CDATA[<p>假如我拍摄了一段 50 帧的视频，时长为 30 秒。此时如果我将视频放入时间线，那么肯定是占用 30 秒的时长。</p><p>由于我的时间线是设置 25 帧的，所以这段 50 帧的视频，我其实是可以让它以 50% 的速度播放的，这样 30 秒的视频就可以变成 60 秒了。</p><p>但如果我直接在时间线上，选中素材右键选择「更改片段速度」，将速度改为 50%，那么会发现，变成 12.5 帧每秒了。</p><p><img src="/img/2023/change-speed.jpg" alt="change-speed"></p><p>此时播放视频我们也可以明显感受到卡顿。</p><p>其实正确的做法是，在「媒体池」选中素材，右键选择「片段属性」，在「视频」标签下更改「视频帧率」的值。例如我改为 25。</p><p><img src="/img/2023/clip-attributes.jpg" alt="clip-attributes"></p><p>之后只需要将视频素材从媒体池，拖到时间线上，就会发现原来 30 秒的视频现在变成 60 秒了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如我拍摄了一段 50 帧的视频，时长为 30 秒。此时如果我将视频放入时间线，那么肯定是占用 30 秒的时长。&lt;/p&gt;
&lt;p&gt;由于我的时间线是设置 25 帧的，所以这段 50 帧的视频，我其实是可以让它以 50% 的速度播放的，这样 30 秒的视频就可以变成 60 秒了。</summary>
      
    
    
    
    
    <category term="视频" scheme="https://powersee.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>威联通添加 crontab 任务正确的做法</title>
    <link href="https://powersee.github.io/2023/05/qnap-crontab2/"/>
    <id>https://powersee.github.io/2023/05/qnap-crontab2/</id>
    <published>2023-05-16T09:03:27.000Z</published>
    <updated>2023-05-16T09:07:59.236Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2023/05/qnap-crontab/">之前的文章</a> 我在威联通里面直接用 <code>crontab -e</code> 添加定时任务，机器重启之后就会被覆盖掉。看来这种方式添加的任务不能持久保存。</p><p>想要永久保存，需要编辑 &#x2F;etc&#x2F;config&#x2F;crontab，可以使用 vi 或者 nano。</p><p>添加好任务后，执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab /etc/config/crontab &amp;&amp; /etc/init.d/crond.sh restart</span><br></pre></td></tr></table></figure><p>来重启 cron 守护进程。</p><p>这样重启机器任务也依然还在。</p><p>参考官方文档：<a href="https://wiki.qnap.com/wiki/Add_items_to_crontab">Add items to crontab - QNAPedia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/2023/05/qnap-crontab/&quot;&gt;之前的文章&lt;/a&gt; 我在威联通里面直接用 &lt;code&gt;crontab -e&lt;/code&gt; 添加定时任务，机器重启之后就会被覆盖掉。看来这种方式添加的任务不能持久保存。&lt;/p&gt;
&lt;p&gt;想要永久保存，需要编辑 &amp;</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的 some 方法</title>
    <link href="https://powersee.github.io/2023/05/javascript-some/"/>
    <id>https://powersee.github.io/2023/05/javascript-some/</id>
    <published>2023-05-15T02:30:49.000Z</published>
    <updated>2023-05-15T02:31:48.525Z</updated>
    
    <content type="html"><![CDATA[<p>假如我有一段字符串，我需要判断它是否以 one 开头的，可以这样写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.<span class="title function_">startsWith</span>(<span class="string">&#x27;one&#x27;</span>))</span><br></pre></td></tr></table></figure><p>假如我还需要判断是否以 two 开头：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.<span class="title function_">startsWith</span>(<span class="string">&#x27;one&#x27;</span>) || str.<span class="title function_">startsWith</span>(<span class="string">&#x27;two&#x27;</span>))</span><br></pre></td></tr></table></figure><p>如果后面还需要继续加，岂不是要写很多个 startsWith ？</p><p>更好的做法是使用 some() 方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixes = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;three body&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prefixes.<span class="title function_">some</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> str.<span class="title function_">startsWith</span>(prefix))) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处定义一个数组，用 some() 方法遍历数组中的每一个元素。如果存在任何一个前缀与字符串匹配，则返回 <code>true</code>，否则返回 <code>false</code>。</p><p>上面的代码，最后会打印出 str 的值，如果我还想获得 prefix 的值，此时是 three，可以这么写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixes = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;one three body&#x27;</span>;</span><br><span class="line"></span><br><span class="line">prefixes.<span class="title function_">some</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> &#123;</span><br><span class="line">    str.<span class="title function_">startsWith</span>(prefix) ? </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prefix&#125;</span> match ⭐️⭐️⭐️`</span>) : </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(prefix);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ? : 是 if else 的简短写法</span></span><br></pre></td></tr></table></figure><p>此时输出的结果是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">one match ⭐️⭐️⭐️</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure><p>可以发现，明明数组中第一个元素已经匹配到了，但是后面的元素还是继续判断。如果想要匹配到之后，后面的不判断，需要加一个 return。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixes = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;one three body&#x27;</span>;</span><br><span class="line"></span><br><span class="line">prefixes.<span class="title function_">some</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="title function_">startsWith</span>(prefix))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prefix&#125;</span> match ⭐️⭐️⭐️`</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(prefix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试的时候我使用这个网站：<a href="https://rextester.com/l/nodejs_online_compiler">compile nodejs online (rextester.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如我有一段字符串，我需要判断它是否以 one 开头的，可以这样写&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keywo</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>威联通 qnap 使用 NFS 共享文件</title>
    <link href="https://powersee.github.io/2023/05/qnap-nfs/"/>
    <id>https://powersee.github.io/2023/05/qnap-nfs/</id>
    <published>2023-05-13T16:29:37.000Z</published>
    <updated>2023-05-14T02:45:03.158Z</updated>
    
    <content type="html"><![CDATA[<p>在威联通的控制台里面，提供4种文件共享方式：Win&#x2F;Mac&#x2F;NFS&#x2F;WebDAV</p><p>其中 Windows 的 smb 是最通用，我之前也是一直使用 smb 而已，毕竟 win 和 mac 都能用。</p><p>最近我想研究一下怎么开启 nfs 服务，让我的芝杜播放器可以访问威联通里的视频。</p><p>首先到控制台里面，「激活NFS v2&#x2F;v3服务」，「激活NFS v4服务」两个勾我都打上了。之后再点击一下底部的「应用」。</p><p><img src="/img/2023/qnap-nfs-enable.png.webp" alt="qnap-nfs-enable.png"></p><p>这么多版本，那它们的区别是什么呢？我到网上搜索一番。</p><p>之后找到了一篇文章：<a href="https://blog.csdn.net/qq_20332637/article/details/107796651">NFS各个版本之间的比较_nfsv3和nfsv4的区别</a></p><table><thead><tr><th>编号</th><th>版本</th><th>RFC</th><th>时间</th><th>页数</th></tr></thead><tbody><tr><td>1</td><td>NFSv2</td><td>rfc1094</td><td>1989年3月</td><td>27页</td></tr><tr><td>2</td><td>NFSv3</td><td>rfc1813</td><td>1995年6月</td><td>126页</td></tr><tr><td>3</td><td>NFSv4.0</td><td>rfc3530</td><td>2003年4月</td><td>275页</td></tr><tr><td>4</td><td>NFSv4.1</td><td>rfc5661</td><td>2010年1月</td><td>617页</td></tr></tbody></table><p>了解到的是：每个版本都在之前版本的基础上进行了改进，增加了新的功能和特性，提高了性能和安全性。</p><p>此时只是开启了 NFS 服务，还需要修改共享文件夹的权限。</p><p>到「控制台」「权限」「共享文件夹」里面，对想要共享的文件夹进行权限修改。例如我想改「Download」这个文件夹，需要点击右侧操作的第二个图标。然后按照下图这样修改。</p><p><img src="/img/2023/qnap-nfs-permission.png.webp" alt="qnap-nfs-permission.png"></p><p>IP 地址我填 <code>192.168.68.1/24</code> 也就是说我路由器里的所有设备都可以访问。因为 IP 地址是 32 位的，<code>/24</code> 就是说只要 IP 地址是 <code>192.168.68.</code> 开头的，都可以访问。</p><p>当然我们也可以设置只有一个 IP 可以访问，例如填写个 <code>192.168.68.123</code> 这样。</p><p>由于我只是想播放 nas 里面的视频而已，所以给只读权限就够了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在威联通的控制台里面，提供4种文件共享方式：Win&amp;#x2F;Mac&amp;#x2F;NFS&amp;#x2F;WebDAV&lt;/p&gt;
&lt;p&gt;其中 Windows 的 smb 是最通用，我之前也是一直使用 smb 而已，毕竟 win 和 mac 都能用。&lt;/p&gt;
&lt;p&gt;最近我想研究一下怎么</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Mac 如何将 jfif 图片转换为 jpg</title>
    <link href="https://powersee.github.io/2023/05/Mac-jfif/"/>
    <id>https://powersee.github.io/2023/05/Mac-jfif/</id>
    <published>2023-05-12T16:39:11.000Z</published>
    <updated>2023-05-14T01:18:45.248Z</updated>
    
    <content type="html"><![CDATA[<p>我发现 Mac 似乎无法直接预览 jfif 格式的图片，按空格键之后并不能显示图片内容。</p><p>不过 Mac 自带的「预览」APP 是可以直接打开 jfif 图片的。我们需要选中图片，右键「打开方式」「其他…」</p><p>之后在下方的「启用：」选择「所有应用程序」，再选「预览」就可以了。</p><p><img src="/img/2023/preview-jfif-shadow.webp" alt="preview-jfif"></p><p>此时我们就可以打开这样图片了，然后再通过「文件」「导出」就能保存为 jpg 或者 png 了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我发现 Mac 似乎无法直接预览 jfif 格式的图片，按空格键之后并不能显示图片内容。&lt;/p&gt;
&lt;p&gt;不过 Mac 自带的「预览」APP 是可以直接打开 jfif 图片的。我们需要选中图片，右键「打开方式」「其他…」&lt;/p&gt;
&lt;p&gt;之后在下方的「启用：」选择「所有应用程序</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>威联通 qnap 定时执行 Python 脚本</title>
    <link href="https://powersee.github.io/2023/05/qnap-crontab/"/>
    <id>https://powersee.github.io/2023/05/qnap-crontab/</id>
    <published>2023-05-11T16:01:33.000Z</published>
    <updated>2023-05-16T09:07:44.217Z</updated>
    
    <content type="html"><![CDATA[<p>在上期 <a href="/2023/05/qnap-python3">威联通 qnap 使用 Python3</a> 已经弄明白，怎么在 shell 里使用 Python3 了。但是我想要的是能够定时执行 Python3 脚本。</p><p>通过执行 <code>pip3 -V</code> 可以查找到它在哪个位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pip3 -V</span><br><span class="line">pip 22.0.4 from /opt/python3/lib/python3.10/site-packages/pip (python 3.10)</span><br><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # which python3</span><br><span class="line">/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/python3</span><br></pre></td></tr></table></figure><p>直接使用 <code>pip3 install xxx</code> 来安装模块的话，是安装到 <code>/opt/python3/lib/python3.10/site-packages/</code> 里面的。</p><p>而且它提示我更新 pip 版本给的命令是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/python3/bin/python3.10 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>跟我预期的不一样，我还以为会使用 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/python3.10</code> 呢。</p><p>查询一下，发现 <code>/opt/python3/bin/python3.10</code> 并不是软链接。那为什么 <code>/opt/python3/bin/</code> 里面的内容和 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/</code> 一模一样呢？</p><p>后来我知道了，原来 <code>/opt/python3</code> 就是一个符号链接而已。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -alh /opt/python3</span><br><span class="line">lrwxrwxrwx 1 admin administrators 43 2023-05-04 07:15 /opt/python3 -&gt; /share/CACHEDEV1_DATA/.qpkg/Python3/python3/</span><br></pre></td></tr></table></figure><p>为了命令比较简短一些，我还是用 <code>/opt/python3/bin/python3</code></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>添加定时任务，例如我让它每天早上 7 点 18 分自动执行一个 Python 脚本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18 7 * * * /opt/python3/bin/python3 /share/CACHEDEV1_DATA/Multimedia/powersee_script.py</span><br></pre></td></tr></table></figure><p>这样添加重启机器后任务就没了，详见 <a href="/2023/05/qnap-crontab/">威联通添加 crontab 任务正确的做法</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上期 &lt;a href=&quot;/2023/05/qnap-python3&quot;&gt;威联通 qnap 使用 Python3&lt;/a&gt; 已经弄明白，怎么在 shell 里使用 Python3 了。但是我想要的是能够定时执行 Python3 脚本。&lt;/p&gt;
&lt;p&gt;通过执行 &lt;code&gt;pip</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>威联通 qnap 使用 Python3</title>
    <link href="https://powersee.github.io/2023/05/qnap-python3/"/>
    <id>https://powersee.github.io/2023/05/qnap-python3/</id>
    <published>2023-05-11T07:43:55.000Z</published>
    <updated>2023-05-11T07:49:46.133Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我发现在威联通上面使用 Python3 还挺麻烦的。即使我已经在 App Center 里面安装好了，但是当我通过 ssh 连接威联通 nas 时，却发现找不到 Python3，Python2 倒是可以找到。</p><p><img src="/img/2023/qnap-Python3.webp" alt="qnap-Python3"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[~] # python3</span><br><span class="line">-sh: python3: command not found</span><br><span class="line">[~] # python</span><br><span class="line">Python 2.7.13 (default, Mar 24 2022, 10:03:40)</span><br><span class="line">[GCC 4.9.2] on linux2</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>那问题来了。</p><h4 id="安装好的-Python3-在哪里呢？"><a href="#安装好的-Python3-在哪里呢？" class="headerlink" title="安装好的 Python3 在哪里呢？"></a>安装好的 Python3 在哪里呢？</h4><p>答：在 <code>/share/CACHEDEV1_DATA/.qpkg/Python3</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # ls</span><br><span class="line">python3/  python3.bashPython3.sh*  README.mdsrc/</span><br></pre></td></tr></table></figure><h4 id="那要如何使用它呢？"><a href="#那要如何使用它呢？" class="headerlink" title="那要如何使用它呢？"></a>那要如何使用它呢？</h4><p>通过查看 <code>README.md</code> 的内容，我们可以看到这些内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat README.md</span><br><span class="line">Run the following command to enter Python3 environment:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">$ . /etc/profile.d/python3.bash</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>也就是说，我们需要在 shell 里执行一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /etc/profile.d/python3.bash</span><br></pre></td></tr></table></figure><p>这条命令，才可以进入 Python3 环境（注意 <code>.</code> 之后有一个空格）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # . /etc/profile.d/python3.bash</span><br><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # python3</span><br><span class="line">Python 3.10.4 (main, May  6 2022, 08:22:01) [GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="进阶了解"><a href="#进阶了解" class="headerlink" title="进阶了解"></a>进阶了解</h4><p>其实这里的 <code>.</code> 也可以换为 source，它们是等价的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[~] # python3</span><br><span class="line">-sh: python3: command not found</span><br><span class="line">[~] # source /etc/profile.d/python3.bash</span><br><span class="line">[~] # python3</span><br><span class="line">Python 3.10.4 (main, May  6 2022, 08:22:01) [GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>而且我们可以发现，<code>/etc/profile.d/python3.bash</code> 其实是 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3.bash</code> 符号链接（Symbolic Link）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -alh /etc/profile.d/python3.bash</span><br><span class="line">lrwxrwxrwx 1 powersee administrators 48 2023-05-04 07:15 /etc/profile.d/python3.bash -&gt; /share/CACHEDEV1_DATA/.qpkg/Python3/python3.bash</span><br></pre></td></tr></table></figure><p>看看 python3.bash 里面的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat python3.bash</span><br><span class="line">_PYTHON3_QPKG_CONF=/etc/config/qpkg.conf</span><br><span class="line">_PYTHON3_QPKG_NAME=&quot;Python3&quot;</span><br><span class="line">_PYTHON3_QPKG_ROOT=$(/sbin/getcfg $_PYTHON3_QPKG_NAME Install_Path -f $&#123;_PYTHON3_QPKG_CONF&#125;)</span><br><span class="line">_PYTHON3_QPKG_BIN=&quot;$&#123;_PYTHON3_QPKG_ROOT&#125;/python3/bin&quot;</span><br><span class="line">echo &quot;$&#123;PATH&#125;&quot; | grep -q  $&#123;_PYTHON3_QPKG_BIN&#125; || export PATH=$&#123;_PYTHON3_QPKG_BIN&#125;:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>我尝试过将 <code>source /etc/profile.d/python3.bash</code> 这条命令，添加到 <code>.bash_profile</code> 里面，但是重新进行 ssh 连接，发现没有效果，并不能直接执行 python3 来进入交互界面。</p><p>之后我发现默认使用的是 <code>/bin/sh</code>，但是我执行 <code>bash</code> 之后，发现依然是 <code>/bin/sh</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[admin@qnap test]# echo $SHELL</span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure><p>之后我发现，里面的 bash 其实 sh 的符号链接……</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -al /bin/bash</span><br><span class="line">lrwxrwxrwx 1 admin administrators 2 2023-05-04 15:09 /bin/bash -&gt; sh*</span><br></pre></td></tr></table></figure><p>所以我应该把命令添加到 <code>~/.profile</code> 里面才对。之后再次 ssh 就可以直接使用 Python3 了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我发现在威联通上面使用 Python3 还挺麻烦的。即使我已经在 App Center 里面安装好了，但是当我通过 ssh 连接威联通 na</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用自定义脚本，在渲染前检查图片链接</title>
    <link href="https://powersee.github.io/2023/05/hexo-img-before-render/"/>
    <id>https://powersee.github.io/2023/05/hexo-img-before-render/</id>
    <published>2023-05-07T15:57:32.000Z</published>
    <updated>2023-05-07T16:08:55.101Z</updated>
    
    <content type="html"><![CDATA[<p>前篇：<a href="/2023/05/hexo-custom-script">hexo 自定义 js 脚本</a></p><p>我平时都是在 typora 里面写好文章内容，完成之后，再到 hexo 新建文章，然后将之前写好的内容复制粘贴过来。</p><p>但是图片的链接会发生变化，例如原本的链接是 ‘img&#x2F;2023&#x2F;mac-shortcut-key.webp’，复制后就变成了 ‘..&#x2F;..&#x2F;..&#x2F;Nutstore Files&#x2F;markdown&#x2F;img&#x2F;2023&#x2F;mac-shortcut-key.webp’ 这样的链接。想要让 hexo 渲染后能正常显示，需要把它变成 ‘&#x2F;img&#x2F;2023&#x2F;mac-shortcut-key.webp’</p><p>所以我之前都是手动修改图片链接的。如果文章中就一两张图，我就使用鼠标滑动选中，再删除。如果图片比较多，那就查找替换，也就几秒能搞定。</p><p>但这种机械重复的操作，肯定还是用代码来处理比较好。</p><p>我猜想应该也有其他人，也有同样的困扰吧。之后我在插件中心 <a href="https://hexo.io/plugins/">Plugins | Hexo</a>，搜索一下 img，我找到了这个项目：<a href="https://github.com/cocowool/hexo-image-link">cocowool&#x2F;hexo-image-link: 当MD中引用本地文件时，处理生成的html中的图片链接</a></p><p>查看他的代码，我发现里面使用了 <code>before_post_render</code> 这个参数。</p><p>处理的过程就是在渲染之前，查找一下图片链接，再处理图片链接。</p><p>于是我参考他的代码，最后达到了我的目的。这样会在渲染时，检查文章中所有的图片链接，如果发现有 <code>../../../Nutstore Files/markdown</code>，就将这个前缀去掉，但是不会修改源文件。我们的 md 文件还是原来的样子。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;../../../Nutstore Files/markdown&#x27;</span></span><br><span class="line"></span><br><span class="line">    data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(<span class="regexp">/!\[(.*?)\]\((.*?)\)/gi</span>, <span class="keyword">function</span>(<span class="params">match, p1, p2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p2.<span class="title function_">includes</span>(str)) &#123;</span><br><span class="line">            <span class="comment">// 替换图片链接</span></span><br><span class="line">            p2 = p2.<span class="title function_">replace</span>(str, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成对应的 &lt;img&gt; 标签</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;p2&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;p1&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> match; <span class="comment">// 返回原始的 Markdown 图片语法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过后来由于坚果云自动升级，图片链接的前缀已经不是 <code>../../../Nutstore Files/markdown</code> 了，所以我需要修改一下脚本。可能其他人的链接也跟我不一样，只需要修改一下就行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前篇：&lt;a href=&quot;/2023/05/hexo-custom-script&quot;&gt;hexo 自定义 js 脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我平时都是在 typora 里面写好文章内容，完成之后，再到 hexo 新建文章，然后将之前写好的内容复制粘贴过来。&lt;/p&gt;
&lt;p&gt;但是图片</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo 自定义 js 脚本</title>
    <link href="https://powersee.github.io/2023/05/hexo-custom-script/"/>
    <id>https://powersee.github.io/2023/05/hexo-custom-script/</id>
    <published>2023-05-06T07:53:23.000Z</published>
    <updated>2023-05-06T08:05:02.202Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 的官方文档，在插件部分有写</p><blockquote><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p></blockquote><p>那么我在博客根目录，新建 <code>scripts</code> 目录，然后里面放一个 <code>test.js</code> 的 JavaScript 文件，内容就写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;haha, powersee&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后我执行 <code>hexo s</code> 启动 hexo 服务器，终端就会输出我自定义的内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">haha, powersee</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>也就是说这个脚本成功执行了。</p><p>而且还可以建立多个 js 文件，例如 test2.js test3.js …</p><p>那我们可以通过建立脚本文件，来实现一些自动化操作。在 <a href="https://hexo.io/zh-cn/api/filter">过滤器（Filter） | Hexo</a> 里面有提供一些例子。用得比较多的应该是 before_post_render。</p><p>过滤器列表一共有这些：</p><ol><li><a href="https://hexo.io/zh-cn/api/filter#before-post-render">before_post_render</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-post-render">after_post_render</a></li><li><a href="https://hexo.io/zh-cn/api/filter#before-exit">before_exit</a></li><li><a href="https://hexo.io/zh-cn/api/filter#before-generate">before_generate</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-generate">after_generate</a></li><li><a href="https://hexo.io/zh-cn/api/filter#template-locals">template_locals</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-init">after_init</a></li><li><a href="https://hexo.io/zh-cn/api/filter#new-post-path">new_post_path</a></li><li><a href="https://hexo.io/zh-cn/api/filter#post-permalink">post_permalink</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-render">after_render</a></li><li><a href="https://hexo.io/zh-cn/api/filter#server-middleware">server_middleware</a></li></ol><p>前段时间我耗费了不少时间在研究这个，感觉还是挺有趣的。目前实现的功能有：检查文章中的图片链接、自动复制图片到 hexo 博客目录中。</p><p>后面整理整理再分享出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo 的官方文档，在插件部分有写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 &lt;code&gt;scripts&lt;/code&gt; 文件夹，在启动时就会自动载入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>贴吧图片批量下载器</title>
    <link href="https://powersee.github.io/2023/05/tieba-image-download/"/>
    <id>https://powersee.github.io/2023/05/tieba-image-download/</id>
    <published>2023-05-05T15:04:25.000Z</published>
    <updated>2023-05-05T15:05:50.209Z</updated>
    
    <content type="html"><![CDATA[<p>之前为了制作漫画，放到 kindle 上面来观看，我写了这个程序。可以用来批量下载贴吧的图片。</p><p><img src="/img/2023/tieba-download.png" alt="tieba-download"></p><p>使用方法也很简单，把贴吧的链接粘贴进来，再点击下面的「开始下载」就可以了。</p><p><img src="/img/2023/tieba-download2.png" alt="tieba-download2"></p><p>也可以只输入帖子的 id 就行，软件会先判断的，发现不是完整的链接，它会自动补全的。</p><p>下载后，会在软件的同级文件夹下，多出一个文件夹，里面就是我们下载好的图片，它会按照顺序排好重命名。</p><p><img src="/img/2023/tieba-onepiece.webp" alt="tieba-onepiece"></p><p>前段时间有网友跟我反馈不能使用了，所以我更新了一下代码，并且把我修改软件的日期写上去。</p><p>目前软件可以从我的下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a> 里面下载到，在「windows应用」里面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前为了制作漫画，放到 kindle 上面来观看，我写了这个程序。可以用来批量下载贴吧的图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/tieba-download.png&quot; alt=&quot;tieba-download&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用方法也很简单，把贴吧的</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo 更改 js、css 后不生效怎么解决</title>
    <link href="https://powersee.github.io/2023/05/hexo-js-css-no-work/"/>
    <id>https://powersee.github.io/2023/05/hexo-js-css-no-work/</id>
    <published>2023-05-04T15:09:07.000Z</published>
    <updated>2023-05-04T15:10:15.861Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们修改好了 js、css 文件，执行 hexo s 预览一下效果，确认没问题。</p><p>但是执行 hexo g -d 更新博客之后，发现还是原来的样式，也就是说更改没有上传上去。此时可以到 GitHub pages 的仓库看看，是否 js、css 文件没有更新。如果是的话，此时如果按照官方的建议，是执行一下 hexo clean，然后再重新生成博客的 HTML 文件。</p><p>但是这么做，会导致之前的 git commit 记录都被删掉。</p><p>其实我们只是更改 js、css 而已，不需要这么麻烦。只需要把本地 public 文件夹中的 js 或者 css 文件删除掉。</p><p>再来执行 hexo g 就会生成新的。（可以通过输出日志判断）之后我们再执行 hexo d 来发布更新即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时候我们修改好了 js、css 文件，执行 hexo s 预览一下效果，确认没问题。&lt;/p&gt;
&lt;p&gt;但是执行 hexo g -d 更新博客之后，发现还是原来的样式，也就是说更改没有上传上去。此时可以到 GitHub pages 的仓库看看，是否 js、css 文件没有更新</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://powersee.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>crontab 中如何设置环境变量</title>
    <link href="https://powersee.github.io/2023/05/crontab-env/"/>
    <id>https://powersee.github.io/2023/05/crontab-env/</id>
    <published>2023-05-02T16:52:46.000Z</published>
    <updated>2023-05-02T16:55:00.572Z</updated>
    
    <content type="html"><![CDATA[<p>我的 Python3 是装在 &#x2F;opt&#x2F;homebrew&#x2F;bin&#x2F; 里面的，我发现在 crontab 中执行 Python 脚本。</p><p>使用的是 &#x2F;usr&#x2F;bin&#x2F;python3，这个的版本是 3.9.6。而我用 homebrew 装的是 3.11.2。</p><p>如果想让 crontab 优先使用 homebrew 的 Python3，有两种方法。</p><p>1、直接写出完整路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 7 * * * /opt/homebrew/bin/python3 /path/to/myscript.py</span><br></pre></td></tr></table></figure><p>2、在 crontab 头部定义环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATH=/opt/homebrew/bin:/usr/bin:/bin</span><br></pre></td></tr></table></figure><p>当执行脚本时，会按照 PATH 环境变量的先后顺序在每个目录中查找命令，找到第一个版本即执行。</p><p>因此这里我把 &#x2F;opt&#x2F;homebrew&#x2F;bin 放最前面。可以写个脚本测试一下 Python 版本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">print(sys.version)</span><br></pre></td></tr></table></figure><p>定义环境变量的好处，就是如果我们有多个脚本需要执行，就可以在 crontab 里面省掉很多字符。例如我现在这种情况，就不用在 crontab 中写一堆 <code>/opt/homebrew/bin/</code></p><p>如果我们要读取用户目录下的脚本，可以使用 <code>$HOME</code> 变量，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 $HOME/myscript.py</span><br></pre></td></tr></table></figure><p>那么我们也可以直接在 crontab 开头，加载 shell 配置文件，例如我使用的是 zsh，可以在 crontab 开头加上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source $HOME/.zshrc</span><br></pre></td></tr></table></figure><p>这样的好处是，在 shell 能执行的命令，现在 crontab 应该也可以。而且也能使用 alias。所以看个人需要咯。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的 Python3 是装在 &amp;#x2F;opt&amp;#x2F;homebrew&amp;#x2F;bin&amp;#x2F; 里面的，我发现在 crontab 中执行 Python 脚本。&lt;/p&gt;
&lt;p&gt;使用的是 &amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python3，这个的版本是 </summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>让 hexo 文章图片在 typora 里也能显示</title>
    <link href="https://powersee.github.io/2023/05/hexo-typora-img/"/>
    <id>https://powersee.github.io/2023/05/hexo-typora-img/</id>
    <published>2023-05-02T10:10:45.000Z</published>
    <updated>2023-05-02T10:12:58.473Z</updated>
    
    <content type="html"><![CDATA[<p>对于 hexo 文章的图片，我是在 source 目录下新建一个 img 目录，把图片都放在里面。然后我文章中的图片链接，都是 <code>/img/abc.png</code> 这种格式的。</p><p>它在博客网站上可以显示出来，但是在 typora 里面就没法显示。想要在 typora 里面可以显示图片，得把链接改为 <code>../img/abc.png</code> 这种格式的。</p><p>但是这样一改，我博客里就没法显示图片了，属于按下葫芦浮起瓢。</p><p>解决方法：</p><p>我们只需要在文章头部加入这一行，那么图片在 typora 里面就可以加载出来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typora-root-url: ../</span><br></pre></td></tr></table></figure><p>图片的链接依然是 <code>/img/abc.png</code> 这种格式的。</p><p>它的原理就是 url 拼接，也就是说，在 typora 里面，加了这一行之后，图片的链接就变成 <code>../img/abc.png</code> 了。</p><p>或者说，typora 会去 <code>../</code> （也就是上一层目录）找 <code>/img/abc.png</code> 这张图片，找到了就显示出来。</p><p>而对于 hexo，它会忽略掉文章头部的 <code>typora-root-url</code>，所以没什么影响。</p><p>但要是每次都得手动去填写这一行，也很麻烦。一劳永逸的方法是，直接修改 <code>scaffolds/post.md</code> </p><p>这个是文章的模板，当我们执行 <code>hexo new post filename</code> 的时候，hexo 就会读取这个模板文件，创建一个新的文章文件。</p><p>我目前的模板是这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">    - 随笔</span><br><span class="line">    -</span><br><span class="line">    - </span><br><span class="line">lock: false</span><br><span class="line">typora-root-url: ../</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于 hexo 文章的图片，我是在 source 目录下新建一个 img 目录，把图片都放在里面。然后我文章中的图片链接，都是 &lt;code&gt;/img/abc.png&lt;/code&gt; 这种格式的。&lt;/p&gt;
&lt;p&gt;它在博客网站上可以显示出来，但是在 typora 里面就没法显示。</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Mac 控制外接显示器亮度 MonitorControl</title>
    <link href="https://powersee.github.io/2023/05/MonitorControl/"/>
    <id>https://powersee.github.io/2023/05/MonitorControl/</id>
    <published>2023-05-01T01:59:25.000Z</published>
    <updated>2023-05-01T04:43:38.264Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个可以在 Mac 上面控制外接显示器亮度的开源应用 <a href="https://github.com/MonitorControl/MonitorControl">MonitorControl</a></p><p>星星数量目前（2023年05月01日）有 21.4k。</p><p>使用这个要求显示器支持 ddc&#x2F;ci，可以打开显示器的设置看看有没有这个开关。我用的显示器是优派的，设置菜单里可以找到，默认就是打开的。</p><p><img src="/img/2023/ViewSonic-DDC:CI.webp" alt="ViewSonic-DDC:CI"></p><p>之后我使用 homebrew 来安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install MonitorControl</span><br></pre></td></tr></table></figure><p>装好后打开，可以在顶部找到一个灯光图标️</p><p><img src="/img/2023/MonitorControl-top.jpg" alt="MonitorControl-top"></p><p>拉动就可以调节显示器的亮度，但是音量调节并没有效果。（我是通过 HDMI 线连接 Mac min 和显示器的）</p><p>我发现拉到最亮时，就花屏了……</p><p><img src="/img/2023/MonitorControl-crash.webp" alt="MonitorControl-crash"></p><p>好像只有优派的这台显示器会这样，我另外通过 USB Type-C 线，将 Mac mini 连接到一台 sculptor 的便携显示器上，可以随意调节亮度，并没有出现花屏的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;发现一个可以在 Mac 上面控制外接显示器亮度的开源应用 &lt;a href=&quot;https://github.com/MonitorControl/MonitorControl&quot;&gt;MonitorControl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;星星数量目前（2023年05月01日）有 21</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>大聪明，用 js 替换图片链接，抛弃对象存储</title>
    <link href="https://powersee.github.io/2023/04/js-replace-img-link/"/>
    <id>https://powersee.github.io/2023/04/js-replace-img-link/</id>
    <published>2023-04-29T16:03:57.000Z</published>
    <updated>2023-04-29T16:10:29.090Z</updated>
    
    <content type="html"><![CDATA[<p>之前讲到<a href="/2023/04/about-oss/">对象存储</a>，我使用了腾讯云的对象存储来当博客图床。</p><p>用了一段时间后，我还是决定弃用了。一方面是担心待会别有用心的人，来盗刷我的对象存储流量，毕竟网上有很多人遇过了，谁叫对象存储是可以欠费的呢。</p><p>另一方面，我分析一下，现在对象存储选的是广州的服务器，而我自己有一台香港的服务器。如果我将博客图片，放到这台香港服务器上面，速度方面还是绰绰有余的。</p><p>那要怎么将图片放到自己的服务器上呢？🤔如果是其他人，可能需要去装个图床应用之类的。但是我不需要，因为我的备份博客就在这台服务器上面。😉</p><p><a href="https://powersee.github.io/">https://powersee.github.io/</a> 这个网址访问的是 GitHub Pages 上的网页文件。</p><p>而 <a href="https://blog.powersee.top/">https://blog.powersee.top/</a> 访问的是我服务器上面的网页文件。</p><p>我实现备份博客的方法也很简单，因为我的博客托管在 GitHub 上面，所以我在服务器上面设置定时任务，每天凌晨自动执行 git pull  来更新博客。🤗</p><p>那么我博客上的图片，服务器上都是有的。</p><p>此时简单的方法就是，将文章中的图片链接，都加上备份博客 <a href="https://blog.powersee.top/">https://blog.powersee.top/</a> 的前缀，在 vscode 里面批量替换可以很快处理完。</p><p>但是这样有些问题，就是当我写好文章后，在本地执行 <code>hexo s</code> 来预览时，图片就加载不出来，因为此时图片还没有传到服务器上。</p><p>所以我的想法是，当通过 <a href="https://powersee.github.io/">https://powersee.github.io/</a> 访问我的博客时，才替换图片链接。通过其它的域名访问，不会替换。</p><p>这样的要求，就需要使用 JavaScript 来实现。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span> == <span class="string">&quot;powersee.github.io&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前网页中 body 的所有 img 标签</span></span><br><span class="line"><span class="keyword">const</span> imgElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;body img&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历每个 img 标签</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgElements.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">const</span> imgElement = imgElements[i];</span><br><span class="line"><span class="keyword">const</span> src = imgElement.<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 img 标签的 src 是否以 /img/ 开头</span></span><br><span class="line"><span class="keyword">if</span> (src.<span class="title function_">startsWith</span>(<span class="string">&#x27;/img/&#x27;</span>)) &#123;</span><br><span class="line">imgElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, src.<span class="title function_">replace</span>(<span class="string">&#x27;/img/&#x27;</span>, <span class="string">&#x27;https://blog.powersee.top/img/&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是我在 js 文件中加入这段代码，就实现了我的目的。😘</p><p>假如我以后不需要替换了，那么只需要去掉这段代码就行。😎</p><p>如果我以后换域名了，也只需要修改这段代码，不需要去替换所有的文章原文本。</p><p>我个人对此还是比较满意的。😊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前讲到&lt;a href=&quot;/2023/04/about-oss/&quot;&gt;对象存储&lt;/a&gt;，我使用了腾讯云的对象存储来当博客图床。&lt;/p&gt;
&lt;p&gt;用了一段时间后，我还是决定弃用了。一方面是担心待会别有用心的人，来盗刷我的对象存储流量，毕竟网上有很多人遇过了，谁叫对象存储是可以欠费</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>将博客头像更改为 SVG</title>
    <link href="https://powersee.github.io/2023/04/blog-logo-svg/"/>
    <id>https://powersee.github.io/2023/04/blog-logo-svg/</id>
    <published>2023-04-28T16:11:04.000Z</published>
    <updated>2023-04-28T16:14:19.923Z</updated>
    
    <content type="html"><![CDATA[<p>现在的博客主题 <a href="https://github.com/imfycc/hexo-themes-yearn">yearn</a> 需要使用头像，我使用的是一张 jpeg logo 图片，大小是 8KB。</p><p>在访问首页的时候需要加载它，访问博客文章的时候也需要。</p><p>然而我观察到 GitHub pages 有时候访问速度只有 6、7KB，这就难顶了，一秒还没法将 logo 加载出来。看来这是一个急需解决的问题。</p><p>那么分析一下，我的头像其实很简单，就是黑色的背景，然后上面是我的昵称 Powersee，这其实可以用 svg 画出来。</p><p>我现在用这样的代码把它弄成 svg</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 180 180&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span> <span class="comment">&lt;!-- 黑色背景矩形 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="comment">&lt;!-- 文字 &quot;Power&quot;，居中对齐，白色填充，字号 48px，字体 sans-serif --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>_see<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><svg xmlns="http://www.w3.org/2000/svg" width="180" height="180" viewBox="0 0 180 180">  <rect width="100%" height="100%" fill="black"></rect> <!-- 黑色背景矩形 -->  <text x="50%" y="45%" text-anchor="middle" dy=".3em" fill="white" font-size="48" font-family="sans-serif">Power</text> <!-- 文字 "Power"，居中对齐，白色填充，字号 48px，字体 sans-serif -->    <text x="50%" y="65%" text-anchor="middle" dy=".3em" fill="white" font-size="48" font-family="sans-serif">_see</text></svg><blockquote><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</p></blockquote><p>不要注释的话，它只需要 393 字节，也就是 393Byte，不到 0.4KB，很不错。原本需要加载一张 8KB 的外部图片，现在改为 svg 可以直接写在 HTML 里面，而且需要加载的数据也只需原来的 5%。</p><p>那么就开始修改主题吧，需要修改 <code>index.ejs</code> 和 <code>ariticle.ejs</code> 这两个文件。</p><ul><li>index.ejs</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;div class=&quot;face-img&quot;&gt;&lt;img src=&quot;&lt;%=theme.avatar%&gt;&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;face-img&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 180 180&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span> <span class="comment">&lt;!-- 黑色背景矩形 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="comment">&lt;!-- 文字 &quot;Power&quot;，居中对齐，白色填充，字号 48px，字体 sans-serif --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>_see<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ariticle.ejs</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;img src=&quot;&lt;%=theme.avatar%&gt;&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span> <span class="attr">height</span>=<span class="string">&quot;180&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 180 180&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;45%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">y</span>=<span class="string">&quot;65%&quot;</span> <span class="attr">text-anchor</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">dy</span>=<span class="string">&quot;.3em&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span> <span class="attr">font-size</span>=<span class="string">&quot;48&quot;</span> <span class="attr">font-family</span>=<span class="string">&quot;sans-serif&quot;</span>&gt;</span>_see<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到里面引入 logo 的 img 位置，将它替换为 svg。</p><p>接着修改 css 文件，更改一下样式。就成功使用 svg 作为头像了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在的博客主题 &lt;a href=&quot;https://github.com/imfycc/hexo-themes-yearn&quot;&gt;yearn&lt;/a&gt; 需要使用头像，我使用的是一张 jpeg logo 图片，大小是 8KB。&lt;/p&gt;
&lt;p&gt;在访问首页的时候需要加载它，访问博客文章的</summary>
      
    
    
    
    
    <category term="web" scheme="https://powersee.github.io/tags/web/"/>
    
  </entry>
  
</feed>
