<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2023-03-22T02:52:41.582Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>椰羊签到——群晖自动完成米游社任务</title>
    <link href="https://powersee.github.io/2023/03/cocogoat-signin-synology/"/>
    <id>https://powersee.github.io/2023/03/cocogoat-signin-synology/</id>
    <published>2023-03-22T02:36:34.000Z</published>
    <updated>2023-03-22T02:52:41.582Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个不错的项目，可以自动到米游社完成每日签到。</p><p>项目：<a href="https://github.com/Akegarasu/cocogoat-signin">椰羊签到 - 年轻人的第一款米游社签到工具</a></p><p>使用 Go 写的工具，我们直接运行可执行文件即可。程序用的是米游社的 cookie，获取方法可以看项目的 readme。</p><p>我打算把它放到群晖里，然后设置每天定时运行。</p><blockquote><p>经过测试，目前似乎无法签到，能做到的只有自动阅读，点赞，分享帖子。米游社签到和原神签到，还是得手动去做……</p></blockquote><p>下面开始教程</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先到 <a href="https://github.com/Akegarasu/cocogoat-signin/releases">https://github.com/Akegarasu/cocogoat-signin/releases</a> 下载程序，群晖 x86_64 的下载名字为 <code>cocogoat-signin_linux_amd64.tar.gz</code> 的，这是一个压缩包，可以用电脑解压。</p><p>电脑上我用 Bandizip 是可以打开的，把里面的 <code>cocogoat-signin</code> 解压出来。</p><p>也可以直接把压缩包传到群晖里，然后在 <code>File Station</code> 里面，右键压缩包，「解压缩」，「解压缩至此目录」。我们得到了一个 tar 结尾的压缩包，对这个新的压缩包，右键，「解压缩」，「解压缩至此目录」。就可以把里面的 <code>cocogoat-signin</code> 解压出来。</p><p><img src="/img/2023/d973de1ea79d7a44b4c9fb7fbb01b3665ff0d735.png@942w_449h_progressive.png" alt="d973de1ea79d7a44b4c9fb7fbb01b3665ff0d735.png@942w_449h_progressive"></p><p>我是在 docker 目录下，建立了一个 cocogoat 的目录，程序就放在里面。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>要运行它，需要有一个配置文件 <code>config.yml</code></p><p>这个配置文件，如果我们 ssh 连接群晖，然后执行一下程序，就会自动生成的。但是这里考虑到小白用户，我写个不用 ssh 的方法。</p><p>我们可以到群晖套件里面，安装一下「文本编辑器」。安装好后，打开它。新建，然后把下面的内容粘贴进去。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">tickets:</span></span><br><span class="line">        <span class="attr">cookie:</span> <span class="comment"># 在这个地方井号之前填写你按照教程获取的 cookie</span></span><br><span class="line">        <span class="attr">stuid:</span> <span class="comment"># 不用管 由程序自动填写</span></span><br><span class="line">        <span class="attr">stoken:</span> <span class="comment"># 不用管 由程序自动填写</span></span><br><span class="line">        <span class="attr">loginTicket:</span> <span class="comment"># 不用管 由程序自动填写</span></span><br><span class="line">      <span class="attr">BBSTaskConfig:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用米游社任务 true为启用 false为禁用 下面一样</span></span><br><span class="line">        <span class="attr">readPosts:</span> <span class="literal">true</span> <span class="comment"># 阅读帖子任务</span></span><br><span class="line">        <span class="attr">likePosts:</span> <span class="literal">true</span> <span class="comment"># 点赞帖子任务</span></span><br><span class="line">        <span class="attr">unlike:</span> <span class="literal">true</span> <span class="comment"># 点赞完毕后取消</span></span><br><span class="line">        <span class="attr">share:</span> <span class="literal">true</span> <span class="comment"># 分享任务</span></span><br><span class="line">      <span class="attr">SignTask:</span></span><br><span class="line">        <span class="attr">genshin:</span> <span class="literal">true</span> <span class="comment"># 原神签到</span></span><br></pre></td></tr></table></figure><p>然后选择保存，注意文件名改一下，位置选择程序所在的目录。这样程序和配置文件就都有了，还需要填写一下 cookie，只需要修改第三行就好</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">accounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">tickets:</span></span><br><span class="line">        <span class="attr">cookie:</span> <span class="string">aaaa……</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>如果你会 ssh，可以在终端执行，看看有没有问题。不会也没关系，先看，我待会讲不用 ssh 的方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /volume1/docker/cocogoat</span><br><span class="line">./cocogoat-signin</span><br></pre></td></tr></table></figure><p>这是我第一次执行的输出内容</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 加载配置文件成功<span class="punctuation">:</span> 共 <span class="number">1</span> 个账户 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 欢迎使用椰羊签到~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行米游社任务 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">54</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 账户 <span class="number">0</span> loginTicket 未配置<span class="punctuation">,</span> 尝试从 cookie 中读取 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">55</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 登录成功<span class="punctuation">,</span> 正在保存相关 ticket 至配置文件 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">55</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取任务列表 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">55</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 获取帖子成功<span class="punctuation">,</span> 共获取 <span class="number">18</span> 个帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日米游社任务<span class="punctuation">:</span> 点赞 (<span class="number">0</span>/<span class="number">5</span>) 看帖子 (<span class="number">2</span>/<span class="number">3</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享 (<span class="number">0</span>/<span class="number">1</span>) 签到 (<span class="number">1</span>/<span class="number">1</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞任务开始 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享任务开始 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 阅读帖子任务开始 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享帖子成功~ 帖子主题<span class="punctuation">:</span> 话说公子这种天赋分技能 命座莫名其妙是靠什么成为平民T0的 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 看第 <span class="number">1</span> 个帖子成功~ 帖子主题<span class="punctuation">:</span> 可恶啊！摆明骗我抽绫华嘛 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 求组！<span class="number">40</span>岁阿姨萌新让我叫她姐姐怎么办，急 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">16</span><span class="punctuation">:</span><span class="number">59</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 我和大佬的恋与提瓦特 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">02</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 大佬们，融神一定要二命吗 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">05</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 可恶啊！摆明骗我抽绫华嘛 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">09</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 点赞成功 帖子主题<span class="punctuation">:</span> 话说公子这种天赋分技能 命座莫名其妙是靠什么成为平民T0的 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日任务已经完成 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行原神签到 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 共获取到 <span class="number">1</span> 个绑定的原神账号 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>ERROR<span class="punctuation">]</span><span class="punctuation">:</span> UID<span class="punctuation">:</span> xxxx<span class="punctuation">,</span> 昵称<span class="punctuation">:</span> powersee 签到失败 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 运行完毕~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">14</span><span class="punctuation">:</span><span class="number">17</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 按回车退出...</span><br></pre></td></tr></table></figure><p>第二次执行</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 加载配置文件成功<span class="punctuation">:</span> 共 <span class="number">1</span> 个账户 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 欢迎使用椰羊签到~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行米游社任务 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取任务列表 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">48</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 正在获取帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 获取帖子成功<span class="punctuation">,</span> 共获取 <span class="number">20</span> 个帖子 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日米游社任务<span class="punctuation">:</span> 点赞 (<span class="number">5</span>/<span class="number">5</span>) 看帖子 (<span class="number">3</span>/<span class="number">3</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 分享 (<span class="number">1</span>/<span class="number">1</span>) 签到 (<span class="number">1</span>/<span class="number">1</span>) </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 今日任务已经完成 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 开始进行原神签到 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>ERROR<span class="punctuation">]</span><span class="punctuation">:</span> 获取原神账号列表失败米游社 cookie 错误 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 共获取到 <span class="number">0</span> 个绑定的原神账号 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>ERROR<span class="punctuation">]</span><span class="punctuation">:</span> 账户 <span class="number">0</span> 没有绑定原神账号 </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 运行完毕~ </span><br><span class="line"><span class="punctuation">[</span>椰羊签到<span class="punctuation">]</span><span class="punctuation">[</span><span class="number">2023</span><span class="number">-03</span><span class="number">-20</span> <span class="number">16</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">:</span><span class="number">49</span><span class="punctuation">]</span><span class="punctuation">[</span>INFO<span class="punctuation">]</span><span class="punctuation">:</span> 按回车退出..</span><br></pre></td></tr></table></figure><p>运行起来是没问题，不过目前这样，似乎不适合让它定时运行，因为每次执行完之后，需要按回车来退出。</p><h3 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h3><p>我看了一下代码，<code>main.go</code> 的最后是这么写的</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exit</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> os.Getenv(<span class="string">&quot;TENCENTCLOUD_RUNENV&quot;</span>) != <span class="string">&quot;SCF&quot;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> input <span class="type">string</span></span><br><span class="line">log.Infoln(<span class="string">&quot;按回车退出...&quot;</span>)</span><br><span class="line">_, _ = fmt.Scanln(&amp;input)</span><br><span class="line">&#125;</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作者估计之前是在腾讯云函数里面跑的吧，如果发现不是云函数，就会要求按回车才能退出。应该是打算给 Windows 用比较方便吧。</p><p>现在我要在群晖里运行，我想运行完直接退出，那么直接改代码吧，把 <code>if</code> 这一段去掉。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Exit</span><span class="params">()</span></span> &#123;</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 docker 拉取一个 golang 环境，然后代码放进去，<code>go build</code> 一下就行了。</p><p>那么不改代码行不行？其实也可以，设置一个环境变量呗。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TENCENTCLOUD_RUNENV=SCF &amp;&amp; ./cocogoat-signin</span><br></pre></td></tr></table></figure><p>我们在运行程序之前，设置了变量 <code>TENCENTCLOUD_RUNENV</code> 的值为 <code>SCF</code>，就可以运行完直接退出了。</p><p>现在弄明白了，就可以来设置它每天定时运行了。</p><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>打开群晖的「控制面板」，点击「任务计划」，「新增」，「计划的任务」，「用户定义的脚本」</p><p><img src="/img/2023/image-20230320171130893.png" alt="新增-用户定义的脚本"></p><p>常规里面填写任务名，随便都行。计划设置每天几点运行，可以设置 3 点、7点之类的，最好不要设置 0 点运行。重点来到「任务设置」里，我们填写上这样的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /volume1/docker/cocogoat/ &amp;&amp; TENCENTCLOUD_RUNENV=SCF &amp;&amp; ./cocogoat-signin</span><br></pre></td></tr></table></figure><p>这样应该就 ok 了。</p><p>原本是打算保存一下日志的，像这样。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /volume1/docker/cocogoat/ &amp;&amp; TENCENTCLOUD_RUNENV=SCF &amp;&amp; ./cocogoat-signin &gt; $(date +%Y%m%d).log.txt</span><br></pre></td></tr></table></figure><p>但是测试了一下，发现日志无法保存下来。了解一番之后，发现代码里使用 <code>log.Infoln</code> 来输出日志的，这样的输出是没法使用 <code>&gt;</code> 或者 <code>tee</code> 来保存到日志里的。所以日志保存这部分暂时搞不定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现一个不错的项目，可以自动到米游社完成每日签到。&lt;/p&gt;
&lt;p&gt;项目：&lt;a href=&quot;https://github.com/Akegarasu/cocogoat-signin&quot;&gt;椰羊签到 - 年轻人的第一款米游社签到工具&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用 Go 写的工具，我们
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>通过 do-release-upgrade 升级 Ubuntu 版本</title>
    <link href="https://powersee.github.io/2023/03/do-release-upgrade-ubuntu/"/>
    <id>https://powersee.github.io/2023/03/do-release-upgrade-ubuntu/</id>
    <published>2023-03-20T16:19:46.000Z</published>
    <updated>2023-03-20T16:21:33.695Z</updated>
    
    <content type="html"><![CDATA[<p>最近给我的两台服务器，都升级了 Ubuntu 版本。个人感觉，如果服务器里的东西不多，还不如备份之后，重装系统，直接装个 22.04 可能会比一步一步升级快。</p><p>我目前有一台服务器用的是 Ubuntu 18.04 LTS，平时装应用有这样那样的问题，我打算给它升级一下。</p><p>平时 ssh 登录上之后，也经常能看到提示升级。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do-release-upgrade</span><br></pre></td></tr></table></figure><p>执行这个命令，就可以升级 Ubuntu 的版本。不过在此之前，我们需要先 update 和 upgrade。当我这些做完之后，却发现，执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">do-release-upgrade</span><br></pre></td></tr></table></figure><p>后提示这个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please install all available updates for your release before upgrading</span><br></pre></td></tr></table></figure><p>可是我明明已经没东西可以再更新了……</p><p>网上搜索后，别人说试试这个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">sudo do-release-upgrade</span><br></pre></td></tr></table></figure><p>结果试了也没用，最终发现，问题出现在第三方软件源上面。</p><p>因为之前直接用 apt 安装 nodejs，这样安装的是旧版本的。我现在运行的应用要求使用 node18。</p><p>所以之前根据教程，下载了这个脚本，执行后，会添加 node 的软件源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh</span><br></pre></td></tr></table></figure><p>它就在 <code>/etc/apt/sources.list.d</code> 里面，执行下面的命令可以禁用第三方源</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt/sources.list.d </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> *.list; <span class="keyword">do</span> <span class="built_in">mv</span> <span class="variable">$&#123;i&#125;</span> <span class="variable">$&#123;i&#125;</span>.disabled; <span class="keyword">done</span> </span><br><span class="line">apt clean</span><br><span class="line">apt autoclean </span><br><span class="line">sudo do-release-upgrade </span><br></pre></td></tr></table></figure><p>不过我不是这么做的，我直接把里面的 node 源给删了，剩下的 docker 源没动它。之后再执行 <code>do-release-upgrade</code> 就可以继续进行了。</p><p>升级的过程中，有很多选项，还是挺麻烦的。不过好在最后升级成功了，从 18.04 升级到了 20.04.6。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近给我的两台服务器，都升级了 Ubuntu 版本。个人感觉，如果服务器里的东西不多，还不如备份之后，重装系统，直接装个 22.04 可能会比一步一步升级快。&lt;/p&gt;
&lt;p&gt;我目前有一台服务器用的是 Ubuntu 18.04 LTS，平时装应用有这样那样的问题，我打算给它升
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>油猴脚本——先判断文本内容</title>
    <link href="https://powersee.github.io/2023/03/tampermonkey-judge-text/"/>
    <id>https://powersee.github.io/2023/03/tampermonkey-judge-text/</id>
    <published>2023-03-20T13:29:34.000Z</published>
    <updated>2023-03-20T13:31:46.475Z</updated>
    
    <content type="html"><![CDATA[<p>有时候，一些签到按钮，签到完成之后是依然可以点击的。如果只是用 id 来获取到元素，然后点击，就会导致明明签到完成了，还继续点击按钮。</p><p>此时我们可以加入一个判断条件。看来还是得拿个实际例子，<a href="https://xiage.yy.com/forum-234-1.html">王者荣耀 - 虾哥论坛</a></p><p>这个网站，我们没有账号也可以访问，我们可以看到它有一个「签到」按钮。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:to_sign(fid, uid)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;checkin-btn follow-show&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkin-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于它有 id ，所以获取起来很简单</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;checkin-btn&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我有这个论坛的账号，我知道点击之后，按钮的文字，会从<code>签到</code> 变成 <code>已签到</code>。</p><p>那么我们要做的就是，在执行点击之前，判断一下，里面的文字是否 <code>签到</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         王者荣耀-虾哥-点击签到</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       Powersee</span></span><br><span class="line"><span class="comment">// @match        https://xiage.yy.com/forum-234-1.html</span></span><br><span class="line"><span class="comment">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=yy.com</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;checkin-btn&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (btn.<span class="property">textContent</span> == <span class="string">&#x27;签到&#x27;</span>) btn.<span class="title function_">click</span>()</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>完整的代码如下，我发现用 <code>// @run-at       document-idle</code> 似乎有些问题，所以改成了事件监听。</p><p>有些签到按钮，点击之后文字就会发生变化。</p><table><thead><tr><th align="left">签到前</th><th align="left">签到后</th></tr></thead><tbody><tr><td align="left">签到</td><td align="left">已签到</td></tr><tr><td align="left">签到</td><td align="left">已签</td></tr></tbody></table><p>像这种我们可以直接用 <code>==</code> 来判断里面的字符串，但是有的时候，我们想要的是，判断里面的文字，是否包含某些字符串。</p><p>例如，有些网站，它的签到按钮文字是 <code>领取今日的登录奖励</code> </p><p>我们可以用 <code>includes()</code> 方法来判断。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (btn.<span class="property">textContent</span>.<span class="title function_">includes</span>(<span class="string">&#x27;领取今日&#x27;</span>)) btn.<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>这行代码，就是判断是否包含 <code>领取今日</code> 这几个字，如果是，就点击。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候，一些签到按钮，签到完成之后是依然可以点击的。如果只是用 id 来获取到元素，然后点击，就会导致明明签到完成了，还继续点击按钮。&lt;/p&gt;
&lt;p&gt;此时我们可以加入一个判断条件。看来还是得拿个实际例子，&lt;a href=&quot;https://xiage.yy.com/forum
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用油猴脚本实现自动点击签到按钮</title>
    <link href="https://powersee.github.io/2023/03/tampermonkey-auto-signin/"/>
    <id>https://powersee.github.io/2023/03/tampermonkey-auto-signin/</id>
    <published>2023-03-19T13:14:27.000Z</published>
    <updated>2023-03-19T13:17:58.789Z</updated>
    
    <content type="html"><![CDATA[<p>有很多网站，需要我们打开网页之后，点击上面的签到按钮，来完成当天的签到。</p><p>如果利用油猴脚本，我们可以实现打开网页后，查找按钮，如果找到了，就自动点击。</p><p>首先打开想签到的网页，然后点击油猴插件，点击「添加新脚本」，给的默认模板是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ==UserScript==</span><br><span class="line">// @name         New Userscript</span><br><span class="line">// @namespace    http://tampermonkey.net/</span><br><span class="line">// @version      0.1</span><br><span class="line">// @description  try to take over the world!</span><br><span class="line">// @author       You</span><br><span class="line">// @match        https://www.xxx.com/</span><br><span class="line">// @icon         https://www.google.com/s2/favicons?sz=64&amp;domain=xxx.com</span><br><span class="line">// @grant        none</span><br><span class="line">// ==/UserScript==</span><br><span class="line"></span><br><span class="line">(function() &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    // Your code here...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>由于我们需要等网页加载完成，再来查找按钮，所以需要添加一行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// @run-at       document-idle</span><br></pre></td></tr></table></figure><p>可以加在 <code>// ==/UserScript==</code> 的上方，变成这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// @grant        none</span><br><span class="line">// @run-at       document-idle</span><br><span class="line">// ==/UserScript==</span><br></pre></td></tr></table></figure><p>感觉也找不到合适网站来作为案例，就拿百度的那个「百度一下」来讲解吧，反正弄懂了原理，换其它网站也就没问题。</p><p>在浏览器按 F12，弹出来的开发者工具，按 <code>ctrl + shift + c</code> 这三颗按键，然后选中「百度一下」</p><p>可以发现它是一个 input</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百度一下&quot;</span> <span class="attr">id</span>=<span class="string">&quot;su&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn self-btn bg s_btn&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种有 id 的最简单，因为网页中的 id 是唯一的。用 js 来选中它，然后点击</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;su&#x27;).click()</span><br></pre></td></tr></table></figure><p>在「控制台」执行这行代码，就跟我们手动去点击「百度一下」的作用是一样的。</p><p>如果你要签到的网站也是这么简单，签到按钮有 id，那只需要把上面的 su 换为你找到的 id 就行。例如我有个网站，它的签到按钮 id 是 <code>sign_title</code> ，那我只需要改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;sign_title&#x27;).click()</span><br></pre></td></tr></table></figure><p>在 <code>// ==/UserScript==</code> 的下方，我们可以改为这样</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;sign_title&#x27;</span>).<span class="title function_">click</span>()</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>很简单就可以实现一个自动点击的脚本了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有很多网站，需要我们打开网页之后，点击上面的签到按钮，来完成当天的签到。&lt;/p&gt;
&lt;p&gt;如果利用油猴脚本，我们可以实现打开网页后，查找按钮，如果找到了，就自动点击。&lt;/p&gt;
&lt;p&gt;首先打开想签到的网页，然后点击油猴插件，点击「添加新脚本」，给的默认模板是这样的&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>都什么年代了，还在手动修改 Linux 软件源？APT Proxy 使用体验</title>
    <link href="https://powersee.github.io/2023/03/apt-proxy/"/>
    <id>https://powersee.github.io/2023/03/apt-proxy/</id>
    <published>2023-03-17T16:46:47.000Z</published>
    <updated>2023-03-20T13:54:03.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>APT Proxy 是一款轻量的、可靠的 APT &#x2F; YUM &#x2F; APK 包（Ubuntu &#x2F; Debian &#x2F; CentOS &#x2F; ALPINE ）缓存工具，能够在各种不同的操作系统环境中运行。</p></blockquote><p>这是来自 <a href="https://github.com/soulteary/apt-proxy/blob/main/README_CN.md">官方文档</a> 开头的介绍，现在的作者 <a href="https://soulteary.com/">苏洋</a> 是一位能力很强的博主，他对停留在 2015 年的原项目进行修改，有了现在这个版本。</p><p>而且已经不只是给 apt 用而已了，还可以给 centos 和 alpine 用，更加强大了。</p><p>想要更深入的了解，可以观看苏洋大佬的两篇文章：</p><p><a href="https://soulteary.com/2022/06/14/lightweight-and-small-zero-configuration-apt-acceleration-tool-apt-proxy.html">轻量小巧的零配置 APT 加速工具：APT Proxy - 苏洋博客 (soulteary.com)</a></p><p><a href="https://soulteary.com/2022/11/20/linux-package-download-acceleration-tool-apt-proxy.html">Linux 软件包下载加速工具：APT Proxy - 苏洋博客 (soulteary.com)</a></p><p>现在使用它，我们在本地装好服务器后，可以不用去修改软件源了。</p><p>平时我得到一个纯净的 Ubuntu 系统后，一般都会去修改 <code>/etc/apt/sources.list</code> ，将里面的内容改为清华或者阿里云的镜像源。现在使用这个工具，我们就可以不用去修改了。只要在使用 apt 的时候设置代理，指向这个工具，就会自动使用最快的镜像源。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>运行起来也很简单，用 docker 一条命令即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=apt-proxy -p 3142:3142 soulteary/apt-proxy</span><br></pre></td></tr></table></figure><p>只需要映射一个端口 <code>3142</code> 而已。查看容器的 log 可以看到这些。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023/03/14 06:15:43 running apt-proxy </span><br><span class="line">2023/03/14 06:15:44 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 using fastest Ubuntu mirror http://ftp.sjtu.edu.cn/ubuntu/</span><br><span class="line">2023/03/14 06:15:44 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:44 using fastest Debian mirror http://repo.huaweicloud.com/debian/</span><br><span class="line">2023/03/14 06:15:44 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 using fastest CentOS mirror https://mirrors.aliyun.com/centos/</span><br><span class="line">2023/03/14 06:15:45 Start benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 Finished benchmarking mirrors</span><br><span class="line">2023/03/14 06:15:45 using fastest Alpine mirror http://mirrors.aliyun.com/alpine/</span><br><span class="line">2023/03/14 06:15:45 proxy listening on 0.0.0.0:3142</span><br><span class="line">2023/03/14 06:15:45 Program has been started 🚀</span><br></pre></td></tr></table></figure><p>从日志可以看到，它会自动测出速度最快的镜像站。而且此时我们访问 3142 端口，还可以看到 web 界面。</p><p><img src="/img/2023/image-20230314141943091.png" alt="apt-proxy-web"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我运行 apt-proxy 的机器 IP 是 192.168.68.172，所以我可以这样这样来使用它。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># `apt-get update` with apt-proxy service</span><br><span class="line">http_proxy=http://192.168.68.172:3142 apt-get -o pkgProblemResolver=true -o Acquire::http=true update </span><br><span class="line"># `apt-get install vim -y` with apt-proxy service</span><br><span class="line">http_proxy=http://192.168.68.172:3142 apt-get -o pkgProblemResolver=true -o Acquire::http=true install vim -y</span><br></pre></td></tr></table></figure><p>虽然执行之后输出的信息依然显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get:1 http://archive.ubuntu.com/ubuntu jammy InRelease [270 kB]</span><br><span class="line">Get:2 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]</span><br><span class="line">Get:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]</span><br><span class="line">Get:4 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [829 kB]</span><br></pre></td></tr></table></figure><p>但是它因为使用了代理，其实是用了 <a href="http://ftp.sjtu.edu.cn/ubuntu/">http://ftp.sjtu.edu.cn/ubuntu/</a> 这个镜像源，从速度我们也可以明显感受到。或者直接查看 apt-proxy 的日志也能看到。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023/03/18 03:01:30 rewrote &quot;http://archive.ubuntu.com/ubuntu/dists/jammy/InRelease&quot; to &quot;http://ftp.sjtu.edu.cn/ubuntu/dists/jammy/InRelease&quot;</span><br></pre></td></tr></table></figure><p>然后它另一个优势，就是它会缓存。如果我们有多台服务器的话，那么第一台安装 vim，apt-proxy 会将 vim 的安装文件缓存下来，而之后的第二台，它就可以直接使用缓存了，不需要去镜像源下载了，速度会快很多。</p><h3 id="缩短命令"><a href="#缩短命令" class="headerlink" title="缩短命令"></a>缩短命令</h3><p>不过它这命令也太长了吧，每次都得复制粘贴。我的解决方法是，使用 alias</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias aptp=&quot;http_proxy=http://192.168.68.172:3142 apt-get -o pkgProblemResolver=true -o Acquire::http=true&quot;</span><br></pre></td></tr></table></figure><p>我把这么一串命令，起个别名为 <code>aptp</code>，之后我可以这样来使用它</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aptp update</span><br><span class="line">aptp install zsh</span><br></pre></td></tr></table></figure><p>非常好用的一款工具，推荐经常在本地折腾服务器的朋友，都可以去尝试一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;APT Proxy 是一款轻量的、可靠的 APT &amp;#x2F; YUM &amp;#x2F; APK 包（Ubuntu &amp;
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>自动纠正文章中的格式 autocorrect</title>
    <link href="https://powersee.github.io/2023/03/auto-correct/"/>
    <id>https://powersee.github.io/2023/03/auto-correct/</id>
    <published>2023-03-17T05:58:56.000Z</published>
    <updated>2023-03-18T02:10:57.986Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个好用的工具 <a href="https://github.com/huacnlee/autocorrect">autocorrect</a> ，是 GitHub 上一个开源项目。官方介绍：</p><blockquote><p>AutoCorrect 是一个基于 Rust 编写的工具，用于「自动纠正」或「检查并建议」文案，给 CJK（中文、日语、韩语）与英文混写的场景，补充正确的空格，纠正单词，同时尝试以安全的方式自动纠正标点符号等等。</p></blockquote><p>感觉好像挺不错的，我可以使用它，自动给文字中的英文加空格。</p><p>看了下 <a href="https://github.com/huacnlee/autocorrect/releases">https://github.com/huacnlee/autocorrect/releases</a> ，里面有提供 Windows 的可执行文件，当然是命令行版本的，这工具并没有 GUI 的程序。于是我下载来体验看看。</p><h4 id="基础用法-–lint"><a href="#基础用法-–lint" class="headerlink" title="基础用法 –lint"></a>基础用法 –lint</h4><p>lint 这个单词我查了一下</p><blockquote><p>n. 软麻布；线头；棉绒<br>vi. 飞散出棉线</p></blockquote><p>这里难道是指，我们文章中那些不规范的地方，就像是线头？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocorrect.exe --lint C:\text.md</span><br></pre></td></tr></table></figure><p>使用起来很简单，命令名 参数 文件路径，执行后会快速检查文本中的内容。我使用的是一个 markdown 文件，里面的字数有 2 万 3（由 typora 统计的）</p><p><img src="/img/2023/image-20230316204751544.png" alt="autocorrect"></p><p>检测只用了不到 55 毫秒，确实很快。红色的就是我原本的内容，绿色的就是它建议修改后的格式。<code>--lint</code> 只是显示建议而已，不会直接修改文件的。</p><p>感觉还不错：</p><ul><li>中英混写的，它会建议加空格。</li><li>汉字和阿拉伯数字也是建议加空格。</li><li>多余的空格会建议删掉</li></ul><p>我建立了个 txt 文件，写下这些内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"></span><br><span class="line">javascript</span><br><span class="line"></span><br><span class="line">你好，haha。。。。</span><br></pre></td></tr></table></figure><p>检测后是没有错误，我还预期它会改正写法呢，改为 Python，JavaScript。按理说这个应该不难，可能是有其它方面的考虑吧，例如改到代码之类。</p><p>不过我这四个句号 <code>。。。。</code>，肯定是不规范吧，我还期待看它会怎么改呢。</p><h4 id="完整参数"><a href="#完整参数" class="headerlink" title="完整参数"></a>完整参数</h4><p>通过执行 -h 可以查看说明</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocorrect -h</span><br><span class="line">A linter and formatter for help you improve copywriting, to correct spaces, words, punctuations between CJK (Chinese, Japanese, Korean).</span><br><span class="line"></span><br><span class="line">Usage: autocorrect.exe [OPTIONS] [FILE]... [COMMAND]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  init    Initialize AutoCorrect config file.</span><br><span class="line">  update  Update AutoCorrect to latest version.</span><br><span class="line">  help    Print this message or the help of the given subcommand(s)</span><br><span class="line"></span><br><span class="line">Arguments:</span><br><span class="line">  [FILE]...  Target filepath or dir for format. [default: .]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --lint               Lint and output problems.</span><br><span class="line">      --fix                Automatically fix problems and rewrite file.</span><br><span class="line">      --debug              Print debug information.</span><br><span class="line">      --format &lt;FORMAT&gt;    Output format. [default: diff] [possible values: diff, json]</span><br><span class="line">      --threads &lt;THREADS&gt;  Number of threads, 0 - use number of CPU. [default: 0]</span><br><span class="line">  -c, --config &lt;CONFIG&gt;    Special config file. [default: .autocorrectrc]</span><br><span class="line">      --type &lt;FILETYPE&gt;    Directly use set file type.</span><br><span class="line">      --stdin              Input text from &lt;STDIN&gt;</span><br><span class="line">      --no-diff-bg-color   Disable diff background color for diff output.</span><br><span class="line">  -h, --help               Print help</span><br><span class="line">  -V, --version            Print version</span><br></pre></td></tr></table></figure><p>我们可以先使用 <code>lint</code>检测问题，确认之后，使用 <code>fix</code>来改正。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">autocorrect.exe --fix C:\text.md</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>使用 <code>--config</code> 还能使用配置文件，需要先初始化一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\bin&gt; .\autocorrect.exe init</span><br><span class="line">Fetching https://github.com/huacnlee/autocorrect/raw/main/.autocorrectrc.template</span><br><span class="line">AutoCorrect init config: .autocorrectrc</span><br><span class="line">PS C:\bin&gt; ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: C:\bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-a----         2023/3/16     21:10           2025 .autocorrectrc</span><br><span class="line">-a----          2023/2/9      0:19        9476096 autocorrect.exe</span><br></pre></td></tr></table></figure><p>这样它就会从 GitHub 下载模板，然后在当前目录下保存为 <code>.autocorrectrc</code>。此时我再来执行检测</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\powersee\Downloads\test.txt:3:1</span><br><span class="line">-javascript</span><br><span class="line">+JavaScript</span><br><span class="line"></span><br><span class="line">C:\Users\powersee\Downloads\test.txt:7:1</span><br><span class="line">-Youtube</span><br><span class="line">+YouTube</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Error: 0, Warning: 2</span><br></pre></td></tr></table></figure><p>下载模板之后，再来检测，就会出建议了。不过这里是 Warning，执行 fix 是不会改正的。</p><p>此时我只要修改配置文件，改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spellcheck: 1</span><br></pre></td></tr></table></figure><p>再次检测，刚才的两个 Warning，就变成 Error 了。再使用 fix 就可以改正了。</p><p>因为这个配置，是使用数字来控制的。</p><blockquote><p>0 - off, 1 - error, 2 - warning</p></blockquote><p>如果我不想要它检查英文的大小写，直接设置为 0 就行。</p><p>之所以之前检查 javascript 没问题，下载好配置文件后，就发现问题。是因为配置文件里有这部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spellcheck:</span><br><span class="line">  words:</span><br><span class="line">    # Please do not add a general English word (eg. apple, python) here.</span><br><span class="line">    # Users can add their special words to their .autocorrectrc file by their need.</span><br><span class="line">    - ActiveMQ</span><br><span class="line">    - AirPods</span><br><span class="line">    - Aliyun</span><br><span class="line">    ……</span><br><span class="line">    - JavaScript</span><br></pre></td></tr></table></figure><p>里面定义了 JavaScript 为正确写法。（看到这里我才意识到，python 是一个英文单词，蟒蛇，所以不应该被添加进配置文件里面。）</p><p>那在这个配置文件里，我们应该可以自己添加单词，例如我想把文章中，<code>powersee</code> 改为 <code>Powersee</code>，那我只需要把 <code>Powersee</code>添加进去就行。</p><p>然而当我添加进去之后，我发现，检查不出任何错误了……不管我添加了在开头，还是在结尾，都不行。甚至在中间也不行，反正只要我添加任何单词进去，这个配置文件就好像失效了。</p><p>所以目前我还没弄懂怎么回事，以后要是弄明白自己自定义这部分，再来更新吧。</p><h4 id="不用命令行"><a href="#不用命令行" class="headerlink" title="不用命令行"></a>不用命令行</h4><p>如果只是想改正一篇文章而已，那可以不用去下载这个命令行工具，直接访问 <a href="https://huacnlee.github.io/autocorrect">https://huacnlee.github.io/autocorrect</a> ，把文章内容粘贴进去，在网页里修改就行了。</p><p>而且它还有 <a href="https://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect">vscode 的插件</a>，我安装好后，直接用 vscode 打开我的文章就行了。</p><p>事实上，刚装好，我就把插件给停用了。</p><p>原因是我文章里有这么一段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">看了下 https://github.com/huacnlee/autocorrect/releases ，里面有提供 Windows 的可执行文件</span><br></pre></td></tr></table></figure><p>我的链接后面是加了空格，再用逗号的。那么使用插件的话，会检测到这个空格，它觉得是多余的，要求我删掉。那么删掉之后，我的链接就错误了，因为会把逗号以及后面的汉字，一起识别为 url 的一部分。也就是说这个空格是必须要有的。</p><p>但是，此时我没法把它加回来，因为加回空格之后，再保存，插件会自动把空格去掉……看来我这种情况，不适合使用这个插件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现一个好用的工具 &lt;a href=&quot;https://github.com/huacnlee/autocorrect&quot;&gt;autocorrect&lt;/a&gt; ，是 GitHub 上一个开源项目。官方介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AutoCorrect 是一个基于
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>为什么使用 apt 安装某些应用的时候，不需要按 y 确认？</title>
    <link href="https://powersee.github.io/2023/03/why-apt-no-need-for-confirm/"/>
    <id>https://powersee.github.io/2023/03/why-apt-no-need-for-confirm/</id>
    <published>2023-03-16T02:33:21.000Z</published>
    <updated>2023-03-16T02:34:28.454Z</updated>
    
    <content type="html"><![CDATA[<p>例如我在 Ubuntu 18.04 里面，安装 ncdu</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install ncdu</span><br></pre></td></tr></table></figure><p>它不需要我按 y，就可以直接安装完成。但如果我安装个 php，它就需要询问我，在我按 y 确认之后，才会进入安装。虽然我们可以通过在命令中加入 <code>-y</code> 参数来自动确认，例如这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install php -y</span><br></pre></td></tr></table></figure><p>但是我好奇的是，为什么有些时候需要确认，有些时候不需要？</p><p>这是来自 ChatGPT 的回答</p><blockquote><p>对于某些较小的软件包，apt 安装时不需要确认是因为它们没有与其他软件包发生依赖关系或冲突。这些软件包通常只包含一些脚本、配置文件或其他小型组件，因此安装它们不会对系统的其他部分造成影响。</p><p>当 apt 安装一个包时，它会检查该包是否需要依赖其他包或冲突于已安装的包。如果没有，则 apt 不会询问用户是否确认安装该包，并自动安装。</p><p>因此，在某些情况下，如果软件包非常小并且没有与其他包发生依赖关系或冲突，则在安装过程中不需要手动确认安装。但是，在安装任何软件包之前，最好检查其详细信息，以确保其不会对系统造成不良影响。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;例如我在 Ubuntu 18.04 里面，安装 ncdu&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt install ncdu
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://powersee.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>在 docker 中使用 Golang 编译 RISC-V 应用</title>
    <link href="https://powersee.github.io/2023/03/docker-golang-compile-riscv-app/"/>
    <id>https://powersee.github.io/2023/03/docker-golang-compile-riscv-app/</id>
    <published>2023-03-15T07:14:38.000Z</published>
    <updated>2023-03-15T07:18:10.335Z</updated>
    
    <content type="html"><![CDATA[<p>我想给 vision five 2 装个 web 服务器 caddy，结果发现它不提供 RISC-V 版的可执行文件下载。</p><p>那就只能自己编译咯，毕竟是开源应用嘛。</p><p>由于机器上也没有装 Go，所以我选择用其它的设备来交叉编译。</p><p>我编译的设备是 d2550，没想到它还能在这种地方发光发热。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it golang:alpine3.17</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/go # go version</span><br><span class="line">go version go1.20.2 linux/amd64</span><br></pre></td></tr></table></figure><p>用 docker 可以很方便就拥有一个可编译的环境，那么接着需要下载代码，下载需要使用到 wget，由于我下载了 zip 压缩包，所以还得装一个 unzip，如果下载 tar 包就不用了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add wget upzip</span><br><span class="line">wget https://github.com/caddyserver/caddy/archive/refs/tags/v2.6.4.zip</span><br><span class="line">unzip v2.6.4.zip</span><br></pre></td></tr></table></figure><p>解压出来一个 caddy-2.6.4 的目录，那么进入这个目录，再进入 cmd&#x2F;caddy</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn</span><br><span class="line">go build</span><br></pre></td></tr></table></figure><p>编译完成就会多出一个名为 caddy 的文件，不过这样编译的是 amd64 版的，我想要编译 RISC-V 版。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGO_ENABLE=0 GOOS=linux GOARCH=riscv64 go build</span><br></pre></td></tr></table></figure><p>这样编译之后，caddy 这个文件就变成 RISC-V 版的了，使用 file 命令可以查看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add file</span><br><span class="line"># file caddy</span><br><span class="line">caddy: ELF 64-bit LSB executable, UCB RISC-V, double-float ABI, version 1 (SYSV), statically linked, Go BuildID=Sl5DFjHtcm44runPVDQz/PtAVfjFrZ7ix6z2eqOtp/bjeL6tdqc9Bu0ZnsWsXf/--2q9FfQEXqHen90fHNn, with debug_info, not stripped</span><br></pre></td></tr></table></figure><p>此时这个文件是在 docker 容器中的，我们可以使用 docker cp 命令将它复制出来。这里我是多开一个 ssh 标签。</p><p>需要先去查一下容器的 ID，用 docker ps，我这里查到是 <code>bb95e6bfb7e9</code>，然后像这样复制出来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp bb95e6bfb7e9:/go/caddy-2.6.4/cmd/caddy/caddy .</span><br></pre></td></tr></table></figure><p>之后再想办法将它传到 RISC-V 开发板上。这一切完成之后，可以直接把容器删掉，甚至把镜像也删掉也行，不会生出多余的文件，很不错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我想给 vision five 2 装个 web 服务器 caddy，结果发现它不提供 RISC-V 版的可执行文件下载。&lt;/p&gt;
&lt;p&gt;那就只能自己编译咯，毕竟是开源应用嘛。&lt;/p&gt;
&lt;p&gt;由于机器上也没有装 Go，所以我选择用其它的设备来交叉编译。&lt;/p&gt;
&lt;p&gt;我编译
      
    
    </summary>
    
    
      <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>记一次清理服务器硬盘空间</title>
    <link href="https://powersee.github.io/2023/03/clean-up-the-server-disk/"/>
    <id>https://powersee.github.io/2023/03/clean-up-the-server-disk/</id>
    <published>2023-03-14T06:06:45.000Z</published>
    <updated>2023-03-15T17:30:39.052Z</updated>
    
    <content type="html"><![CDATA[<p>服务器的硬盘空间告急，只剩下 100 多 M 可用。</p><p>我好像也没怎么存东西在里面呀，估计又是哪些软件生成日志之类的，占满了硬盘空间。</p><p>排查的话可以用 <code>ncdu</code> ，如果没有这个命令可以用 <code>apt</code> 装一下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ncdu /</span><br></pre></td></tr></table></figure><p>让它直接分析整个根目录。完成后它会按占用空间从大到小排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13.2 GiB [##########] /home                   </span><br><span class="line"> 3.8 GiB [##        ] /usr</span><br><span class="line"> 2.6 GiB [#         ] /var</span><br><span class="line">81.3 MiB [          ] /boot</span><br><span class="line">77.5 MiB [          ] /root</span><br><span class="line"> 9.0 MiB [          ] /etc</span><br></pre></td></tr></table></figure><p>我们可以很直观地看出哪些目录占用的空间大，然后根据实际情况清理。home 目录就比较简单了，不用的东西删掉就行。</p><p>而我这边发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/log/journal/</span><br></pre></td></tr></table></figure><p>居然占用了 1.4G 的空间，从名字也可以知道它是日志文件。</p><p>执行一下 <code>journalctl</code> 我发现了这个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: tat_agent.service: Scheduled restart job, restart counter is at 10194343.</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: Stopped tat_agent.</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: Starting tat_agent...</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1632911]: tat_agent.service: Changing to the requested working directory failed: No such file or&gt;</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1632911]: tat_agent.service: Failed at step CHDIR spawning /usr/local/qcloud/tat_agent/tat_agent&gt;</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: tat_agent.service: Control process exited, code=exited, status=200/CHDIR</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: tat_agent.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class="line">Mar 14 10:30:14 VM-4-3-ubuntu systemd[1]: Failed to start tat_agent.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: tat_agent.service: Scheduled restart job, restart counter is at 10194344.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: Stopped tat_agent.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: Starting tat_agent...</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1632929]: tat_agent.service: Changing to the requested working directory failed: No such file or&gt;</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1632929]: tat_agent.service: Failed at step CHDIR spawning /usr/local/qcloud/tat_agent/tat_agent&gt;</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: tat_agent.service: Control process exited, code=exited, status=200/CHDIR</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: tat_agent.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class="line">Mar 14 10:30:20 VM-4-3-ubuntu systemd[1]: Failed to start tat_agent.</span><br></pre></td></tr></table></figure><p>这个 <code>tat_agent.service</code> 5、6 秒就执行一下，由于我使用的是腾讯的云服务器，而我之前把 <code>/usr/local/qcloud/</code> 这个目录给删除了，所它一直报错，一直重试……</p><p>解决方法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop tat_agent</span><br><span class="line">systemctl disable tat_agent</span><br><span class="line">rm -f /etc/systemd/system/tat_agent.service</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar 14 10:36:41 VM-4-3-ubuntu systemd[1]: Stopped tat_agent.</span><br></pre></td></tr></table></figure><p>至于 <code>/var/log/journal/</code> 我直接 <code>rm -r</code> 给删除了。</p><p>然后再清理一下 home 目录中的文件，硬盘可用空间变成了 8.8G 了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务器的硬盘空间告急，只剩下 100 多 M 可用。&lt;/p&gt;
&lt;p&gt;我好像也没怎么存东西在里面呀，估计又是哪些软件生成日志之类的，占满了硬盘空间。&lt;/p&gt;
&lt;p&gt;排查的话可以用 &lt;code&gt;ncdu&lt;/code&gt; ，如果没有这个命令可以用 &lt;code&gt;apt&lt;/code&gt; 
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>群晖 NAS 里怎么更新 Docker 容器</title>
    <link href="https://powersee.github.io/2023/03/synology-update-docker-container/"/>
    <id>https://powersee.github.io/2023/03/synology-update-docker-container/</id>
    <published>2023-03-13T11:25:36.000Z</published>
    <updated>2023-03-15T17:30:56.960Z</updated>
    
    <content type="html"><![CDATA[<p>我在使用一款自建的开源备忘录应用 memos，我把它运行在群晖里面。使用的是 docker，一条命令即可运行起来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest</span><br></pre></td></tr></table></figure><p>我在群晖里面，网络直接使用 host，因此不需要填写端口，只需在「存储空间」里选择一个目录，来映射到容器内的 <code>/var/opt/memos</code>。</p><p>目前使用了两周多了，感觉还挺不错的。</p><p>现在的问题是，我运行的是 <code>0.10.3</code> 的版本，目前最新的版本已经到 <code>0.11.2</code> 了，我想要升级到最新的版本。</p><p>下面是我的实际操作。</p><p>首先我们要拉取最新的镜像，依旧到注册表搜 memos，右键然后点「下载此映像」，或者直接双击也可以。</p><p><img src="/img/2023/image-20230313180358859.png" alt="search-memos"></p><p>镜像下载完成之后，我们把容器停掉，再重新打开，是没有效果的，依然还是旧版本的。此时应该做的是，创建一个新的容器。但是在群晖里面，我们不需要重新填写容器的配置，因为它可以直接复制。选中一个容器，然后上方的设置里面，有个「复制设置」的选项。</p><p><img src="/img/2023/image-20230313181037438.png" alt="copy-settings"></p><p>点击之后，它会让我们「输入新容器的名称」，我给它起名为 「memos-0.11.2」，因为我估计过段时间又得来升级的，那就每次复制后都填一下当前的版本吧。</p><p>然后我们可以启动这个新的容器，看看运行正不正常，正常的话，就可以删掉旧的容器了。</p><p>我这个容器比较简单，而且网络方面直接用 host，所以不用设置端口。</p><p>但是我发现其它需要设置端口的容器，复制之后，端口会发生变化的。例如我有一个容器的端口是 10086，复制之后，群晖自动给新的容器生成一个随机端口，如 <code>49155</code> ，所以看来，带端口的容器，复制之后，还得修改一下。</p><p><img src="/img/2023/image-20230313190505946.png" alt="port-10086"></p><p>但是我们不能直接修改新容器的端口，因为不能两个容器同时使用一个端口。例如我这里的 <code>10086 </code>已经被就容器占用了，新的容器就没法用。虽然直接把旧容器删除了，新容器就可以使用 <code>10086</code> 这个端口，但是现在并不清楚新容器，是否能正常运行，所以不建议删。</p><p>我们可以先修改旧容器的端口，例如改为 <code>10087</code>，然后再修改新容器的。这样新的容器应该就可以运行起来了。</p><p>不过，此时如果你用命令行或者 portainer 查询镜像，应该会发现，多出一个 TAG 为 none 的镜像。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker images</span><br><span class="line">REPOSITORY                TAG               IMAGE ID       CREATED         SIZE</span><br><span class="line">neosmemo/memos            latest            8b795254a96c   2 days ago      34.5MB</span><br><span class="line">neosmemo/memos            &lt;none&gt;            50d503594da5   4 weeks ago     24.8MB</span><br></pre></td></tr></table></figure><p>从日期我们也可以判断出，none 就是那个旧的版本。想要删除它，我们需要把旧的容器删除掉。</p><p>之后如果你是用 portainer 的话，勾选然后删除即可。如果没装 portainer，那就用命令行来删除吧，因为群晖的 docker 面板里，在映像中是找不到它的。</p><p>先 ssh 连接群晖，执行 <code>sudo i</code> 切换到 root 用户。如果你也为每次都要这样操作一次而感到困扰，可以参考一下我之前的文章：<a href="/2023/03/synology-root-ssh/">群晖建立永久 root 账号</a></p><p>需要先列出设备中所有 docker 镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>然后找到 none 的 IMAGE ID，像我这里是 <code>50d503594da5</code>，然后可以像这样来删除它</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi 50d503594da5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我在使用一款自建的开源备忘录应用 memos，我把它运行在群晖里面。使用的是 docker，一条命令即可运行起来&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="群晖" scheme="https://powersee.github.io/tags/%E7%BE%A4%E6%99%96/"/>
    
  </entry>
  
  <entry>
    <title>如何创建一个指定像素的矩形？Photoshop 和 Affinity Photo</title>
    <link href="https://powersee.github.io/2023/03/specified-pixels-rectangle/"/>
    <id>https://powersee.github.io/2023/03/specified-pixels-rectangle/</id>
    <published>2023-03-12T15:23:05.000Z</published>
    <updated>2023-03-12T15:37:25.695Z</updated>
    
    <content type="html"><![CDATA[<p>在 Photoshop 里面，我们先在左边选择矩形工具，快捷键为 U</p><p><img src="/img/2023/image-20230312232057058.png" alt="矩形工具"></p><p>然后按住鼠标随意画出一个矩形。之后来到右边，直接在属性里面修改它的宽高值就行，例如我这里改成 1920 和 1080</p><p><img src="/img/2023/image-20230312231507993.png" alt="属性"></p><p>Affinity Photo 的方法差不多，左边选择矩形工具，快捷键为 U，画出矩形后，选中矩形，在右下角的「变换」里可以更改。</p><p><img src="/img/2023/Snipaste_23-03-09_23-07-19.jpg" alt="变换"></p><p>下面这张图，就是通过这种方式制作出来的，其实有一些不足，就是蓝色的有点偏右。想要它们对齐的，只要 X Y 保持一样的数值就可以了。</p><p><img src="/img/2023/720vs1296.jpg" alt="720vs1296"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Photoshop 里面，我们先在左边选择矩形工具，快捷键为 U&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/image-20230312232057058.png&quot; alt=&quot;矩形工具&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后按住鼠标随意画出一个矩形。之后来到右边，直接在属性
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>群晖建立永久 root 账号</title>
    <link href="https://powersee.github.io/2023/03/synology-root-ssh/"/>
    <id>https://powersee.github.io/2023/03/synology-root-ssh/</id>
    <published>2023-03-11T02:15:47.000Z</published>
    <updated>2023-03-11T02:19:02.975Z</updated>
    
    <content type="html"><![CDATA[<p>每次 ssh 登录群晖，我们只能以管理员的身份登录。虽然输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p>可以临时切换到 root 账号，但是需要输入一次管理员密码，还是麻烦了点。如果能够直接用 root 账号 ssh 登录就好了。</p><p>具体的操作如下：</p><p>先 ssh 连接上，输入 <code>sudo -i</code> 切换到 root 账号。</p><p>接着编辑 ssh 的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到这一行（大概在 44 行）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin yes</span><br></pre></td></tr></table></figure><p>把光标放到 <code>#</code> 上面，然后按一下 del 键可以删除掉这个井号。</p><p>另一种删除方法是，按键盘的 <code>i</code> 键，进入编辑模式，此时左下方会显示 <code>-- INSERT --</code>，然后按 退格键来删除（需要先把光标移动到 P），删除完成按 <code>ESC</code>  来退出编辑模式。</p><p><img src="/img/2023/image-20230310165517949.png" alt="PermitRootLogin"></p><p>两种方法都一样的，希望对不懂 vim 的小伙伴有帮助。删除之后，需要保存。方法是，在英文输入法的状态下，输入 <code>:</code>，先按住 <code>Shift</code> 键，再按一下 <code>;:</code> 键，应该可以看到左下角出现一个冒号 : 了。</p><p>接着输入 <code>wq</code> ，意思是保存并退出，再按回车键就可以了。</p><p>之后需要重启群晖</p><p>然后再一次 ssh 登录进来，执行 <code>sudo -i</code>，然后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synouser --setpw root password</span><br></pre></td></tr></table></figure><p>意思是群晖用户，设置密码，把 root 用户的密码设置为 password，你可以把 password 改为自己想设置的密码。</p><p>执行完就可以直接用 root 账号登录了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次 ssh 登录群晖，我们只能以管理员的身份登录。虽然输入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo -i&lt;/span&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>MIUI13 如何添加桌面小部件？</title>
    <link href="https://powersee.github.io/2023/03/MIUI13-Android-widget/"/>
    <id>https://powersee.github.io/2023/03/MIUI13-Android-widget/</id>
    <published>2023-03-10T06:07:36.000Z</published>
    <updated>2023-03-10T06:12:25.864Z</updated>
    
    <content type="html"><![CDATA[<p>今天我想在手机上面，添加一个应用的小部件。但是，我死活找不到怎么添加。明明前段时间我还把 “原神战绩”这个小部件，添加到桌面过的。</p><p>一番搜索后，发现关键点在于【断网】。下面是详细的添加步骤：</p><p>在手机桌面，我们可以通过双指捏合、或长按桌面空白处，来呼出【添加小部件】按钮。</p><p><img src="/img/2023/Screenshot_2023-03-10-13-13-56-014-edit_com.miui.home.jpg" alt="添加小部件"></p><p>点击之后，有两个选项，【推荐】和【分类】，里面都是 MIUI 推荐的小部件，我们自己装的 app 的小部件，大多数是不会显示在这里的。</p><p><img src="/img/2023/Screenshot_2023-03-10-13-14-29-909-edit_com.miui.personalassistant.jpg" alt="推荐与分类"></p><p>那么不是还有个搜索吗？我直接搜呢？不好意思，也是搜不到的。这让我觉得非常恶心。</p><p>网上搜索了解之后，我找到了解决方案。先让手机处于断网状态，开飞行模式最直接，不过也可以关闭 WiFi 和数据就行了。此时再点击搜索，就会发现底部有一行【安卓小部件】。</p><p><img src="/img/2023/Screenshot_2023-03-10-13-58-19-696_com.miui.personalassistant.jpg" alt="断网下的搜索"></p><p>点击之后就可以看到我们自己装的 app 所带的小部件了。</p><p><img src="/img/2023/Screenshot_2023-03-10-13-58-52-006_com.miui.home.jpg" alt="其它应用的小部件"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我想在手机上面，添加一个应用的小部件。但是，我死活找不到怎么添加。明明前段时间我还把 “原神战绩”这个小部件，添加到桌面过的。&lt;/p&gt;
&lt;p&gt;一番搜索后，发现关键点在于【断网】。下面是详细的添加步骤：&lt;/p&gt;
&lt;p&gt;在手机桌面，我们可以通过双指捏合、或长按桌面空白处，来
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>powershell 的别名与函数</title>
    <link href="https://powersee.github.io/2023/03/windows-powershell/"/>
    <id>https://powersee.github.io/2023/03/windows-powershell/</id>
    <published>2023-03-09T06:13:11.000Z</published>
    <updated>2023-03-09T06:16:20.679Z</updated>
    
    <content type="html"><![CDATA[<p>alias 别名，使用它我们可以提高使用命令行的效率。</p><p>例如在 Linux 中，我喜欢把 <code>d</code> 设置为 <code>docker</code>的别名。只需要在终端中执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias d=&#x27;docker&#x27;</span><br><span class="line">d ps</span><br></pre></td></tr></table></figure><p>那么此时 <code>d ps</code> 的作用就等于 <code>docker ps</code></p><p>那么在 Windows 上面要怎么使用呢？我现在<code>终端</code>这个程序一打开，默认使用的是 <code>powershell</code>，所以我也主要用它了。</p><h3 id="New-Alias"><a href="#New-Alias" class="headerlink" title="New-Alias"></a>New-Alias</h3><p>在这上面使用别名的命令是 <code>New-Alias</code>，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Alias d docker</span><br></pre></td></tr></table></figure><p>详细说明可看 <a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_aliases?view=powershell-7.2">官方文档</a></p><p>像有些程序，它的路径比较长，我们也可以通过别名的方式，来较快速地使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Alias whisper &quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot;</span><br></pre></td></tr></table></figure><p>但是，New-Alias 的值是不能包含空格的，还是用 docker 来举例子。</p><p>如果我在 Linux，我可以这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias di=&#x27;docker images&#x27;</span><br><span class="line">di</span><br></pre></td></tr></table></figure><p>后面的值只需要用引号包裹就行。但是在 <code>powershell</code> 里，alias 不能这样设置，此时得用函数 <code>function</code>。</p><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p><a href="https://learn.microsoft.com/zh-cn/powershell/scripting/learn/ps101/09-functions?view=powershell-7.2">官方文档</a>，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function di &#123; docker images &#125;</span><br></pre></td></tr></table></figure><p>按我的理解，别名就是用来缩短命令的，因为 powershell 的命令都比较长，而且还用 <code>-</code> 连接，例如 <code>Get-ChildItem</code>。可读性确实比较强，但是敲起来就不是那么方便了。</p><p>函数就可以把长命令封装起来，其实相比 alias 也就多了花括号。</p><p>我这边想的是，缩短我使用 whisper 时需要输入的字符。所以我定义了一个函数 wme 意思是 whisper medium english。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wme &#123; &quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot; --model medium --language English &#125;</span><br></pre></td></tr></table></figure><p>那么按理来说，我之后只要执行 <code>wme xxx.mp3</code> 就等同于</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot; --model medium --language English xxx.mp3</span><br></pre></td></tr></table></figure><p>然而在 Windows 这边它不是这么用的，后面的 xxx.mp3 它其实是算一个参数。正确的写法应该是这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wme &#123; &amp; &quot;C:\Users\powersee\PycharmProjects\pythonProject\venv\Scripts\whisper.exe&quot; --model medium --language English $args[0]&#125;</span><br></pre></td></tr></table></figure><h3 id="powershell-的配置文件"><a href="#powershell-的配置文件" class="headerlink" title="powershell 的配置文件"></a>powershell 的配置文件</h3><p>我们定义的别名和函数，应该怎么保存下来，让我们下次打开 <code>powershell</code> 时，就自动加载呢？在 Linux 上面我们是将它们写入用户目录下的 <code>.bashrc</code> 或者 <code>.zshrc</code> 来实现的。</p><p>那么 powershell 里面，有没有类似 <code>.bashrc</code> 的文件呢？也是有的，但是默认情况下没有这个文件。可以先执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Test-Path $profile</span><br></pre></td></tr></table></figure><p>判断一下有没有这个文件，有的话会输出 True。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$profile  # 查看它的路径</span><br><span class="line">notepad $profile  # 用记事本打开这个文件</span><br></pre></td></tr></table></figure><p>如果没有这个配置文件，可以使用命令来创建它</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Item -path $profile -type file –force</span><br></pre></td></tr></table></figure><p>它一般的路径在用户目录下的 <code>Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</code></p><p>之后我们只需将别名和函数粘贴到里面，下次启动 <code>powershell</code> 就会自动加载的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;alias 别名，使用它我们可以提高使用命令行的效率。&lt;/p&gt;
&lt;p&gt;例如在 Linux 中，我喜欢把 &lt;code&gt;d&lt;/code&gt; 设置为 &lt;code&gt;docker&lt;/code&gt;的别名。只需要在终端中执行&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Windows 环境变量</title>
    <link href="https://powersee.github.io/2023/03/windows-path/"/>
    <id>https://powersee.github.io/2023/03/windows-path/</id>
    <published>2023-03-08T15:31:04.000Z</published>
    <updated>2023-03-08T15:37:56.688Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我在一台 win11 的电脑下载了 <code>git</code> <code>ffmpeg</code>，我选择的是免安装版本。所以下载完我需要自己去添加环境变量。</p><p>在 win11 上面，我右键资源管理器的 <code>此电脑</code>，属性。会自动跳转到 <code>设置</code>、<code>系统信息</code> 里面。</p><p>需要点击【高级系统设置】，就可以在下方看到【环境变量】了。</p><p>双击【用户变量】里面的 <code>Path</code>，会弹出一个【编辑环境变量】的窗口，在里面添加多一行即可，例如我这里添加 git 的</p><blockquote><p>用户变量只对当前用户有效，系统变量对所有用户有效，由于我电脑就我一个用户，所以添加到用户变量就行了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\xxx\xxx\git\bin</span><br></pre></td></tr></table></figure><p>这时我就发现 Windows 和 Mac、Linux 的不同了，在 Windows 的终端，我新建一个标签，是识别不到我刚才添加的环境变量的。必须得新建一个【终端】窗口才行，这点我们可以在 <code>cmd</code> 里，通过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %PATH%</span><br><span class="line"># 直接执行 path 也行</span><br></pre></td></tr></table></figure><p>来判断。</p><p>在 <code>powershell</code> 里则是执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$env:path</span><br></pre></td></tr></table></figure><p>来查看环境变量。</p><p>而在 Mac、Linux 上面，我们甚至连新建一个标签都可以不用。因为可以使用使用 <code>source ~/.zshrc</code> 来加载新的环境变量。所以看到 Windows 需要新建窗口才行，感觉有点麻烦。</p><p>但是当我切换到 pycharm 里面，明明在【终端】里用 cmd 和 powershell 都可以识别到 git，在这里却怎么折腾都识别不到。</p><p>最终我选择了重启电脑，然后再次打开 pycharm，才终于可以在 pycharm 的终端识别到 git 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天，我在一台 win11 的电脑下载了 &lt;code&gt;git&lt;/code&gt; &lt;code&gt;ffmpeg&lt;/code&gt;，我选择的是免安装版本。所以下载完我需要自己去添加环境变量。&lt;/p&gt;
&lt;p&gt;在 win11 上面，我右键资源管理器的 &lt;code&gt;此电脑&lt;/code&gt;，属性。会
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用 Python 读写剪贴板中的内容 pyperclip</title>
    <link href="https://powersee.github.io/2023/03/pyperclip/"/>
    <id>https://powersee.github.io/2023/03/pyperclip/</id>
    <published>2023-03-04T07:50:18.000Z</published>
    <updated>2023-03-04T08:15:14.593Z</updated>
    
    <content type="html"><![CDATA[<p>之前了解到 Mac 上的两个命令 <a href="/2022/06/mac-pbcopy-pbpaste/">pbcopy &amp; pbpaste</a> ，我就在想，如果我把它整合到某些脚本里面，那就可以减少复制粘贴的步骤，节省一些时间。</p><p>此时我想到之前写的一个，用来下载贴吧图片的脚本。在之前介绍 <a href="/2021/12/about-kcc/">制作 kindle 漫画的文章</a> 里有提到它。</p><p><img src="/img/2021/tieba-img-download.jpg" alt="贴吧图片下载器"></p><p>在 Windows 上我是把它打包成一个图形应用，这样其他人使用它比较方便。但是同样的代码，我在 Mac 上打包后有一些问题，所以我就进行了一些修改。只通过命令行的方式来使用它，设置 alias 别名，我只需要在终端中执行 <code>tieba</code> 就可以启动，然后我需要把贴吧帖子的链接粘贴进去，就可以自动下载图片了。</p><p><img src="/img/2023/image-20230304160034037.png" alt="image-20230304160034037"></p><p>如果不需要下载就按回车直接退出程序。</p><p>现在为了节省粘贴这一步，我打算把 <code>pbpaste</code> 这个 Mac 命令整合进去。让程序运行时，自动读取剪贴板的内容，如果里面包含 tieba 这个词，就询问，例如这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ tieba</span><br><span class="line">您当前剪贴板的内容为： https://tieba.baidu.com/p/8288904408?frwh=index</span><br><span class="line">是否开始下载？是的话请按回车键，否则请输入新的链接。（退出输入 n）</span><br></pre></td></tr></table></figure><p>不过在这过程中，我发现其实 Python 可以引入 <code>pyperclip</code> 来进行读写剪贴板的操作。例如读写剪贴板</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import pyperclip</span><br><span class="line">&gt;&gt;&gt; str = pyperclip.paste()</span><br></pre></td></tr></table></figure><p>目前就是简单地判断一下，剪贴板中的字符串，是否包含 <code>tieba</code> 而已。是的话就打印出来，并询问是否下载。</p><p>这样修改后，我可以先在浏览器复制链接，然后再到终端执行程序，程序读取到我剪贴板的内容包含 <code>tieba</code> ，询问，我按一下回车键，就可以下载了。比起之前，少了一步 ctrl + v。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前了解到 Mac 上的两个命令 &lt;a href=&quot;/2022/06/mac-pbcopy-pbpaste/&quot;&gt;pbcopy &amp;amp; pbpaste&lt;/a&gt; ，我就在想，如果我把它整合到某些脚本里面，那就可以减少复制粘贴的步骤，节省一些时间。&lt;/p&gt;
&lt;p&gt;此时我想到之
      
    
    </summary>
    
    
      <category term="Python" scheme="https://powersee.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Google Play Store 自动更新如何关闭？</title>
    <link href="https://powersee.github.io/2023/03/google-play-store-auto-update/"/>
    <id>https://powersee.github.io/2023/03/google-play-store-auto-update/</id>
    <published>2023-03-03T03:38:00.000Z</published>
    <updated>2023-03-03T10:21:48.236Z</updated>
    
    <content type="html"><![CDATA[<p>我的手机里有两个 App Store，一个是 MIUI 自带的应用商店。另外一个是 Google 的 Play Store。</p><p>两者的设置中，我都把应用自动更新给关了，我并不喜欢更新 APP，特别是之前被一款国产记账软件「松鼠记账」给恶心到之后，<a href="/2022/01/songshujizhang/">之前的文章</a></p><p>但是当我现在的 Play Store，在我打开代理之后，老是自动给我更新 APP。我想按照以前的方法，关闭掉自动更新，但是没找到。我用中文到网上搜也没找到方法，最后还是用英文搜索，才找到的。位置在「设置」「网络偏好」「自动更新应用」里。</p><p><img src="/img/2023/auto-update-apps.jpg" alt="auto-update-apps"></p><p>其实也很容易发现，不过之前怎么老是忽略它了呢？</p><p>还有我发现，我的手机系统用的是中文，但是 Play Store 里显示的都是英文的，设置里好像也没地方改，不过这个不重要了，懒得去搜了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的手机里有两个 App Store，一个是 MIUI 自带的应用商店。另外一个是 Google 的 Play Store。&lt;/p&gt;
&lt;p&gt;两者的设置中，我都把应用自动更新给关了，我并不喜欢更新 APP，特别是之前被一款国产记账软件「松鼠记账」给恶心到之后，&lt;a href=
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>关于我收到许多诈骗邮件</title>
    <link href="https://powersee.github.io/2023/02/scam-email/"/>
    <id>https://powersee.github.io/2023/02/scam-email/</id>
    <published>2023-02-22T15:44:41.000Z</published>
    <updated>2023-02-22T16:36:09.739Z</updated>
    
    <content type="html"><![CDATA[<p>我的电子邮箱地址，一直放在 YouTube 和我的博客上面，所以我经常收到英文的邮件。例如这样的</p><blockquote><p>Good afternoon! Warner Bros. Interactive Entertainment is pleased to announce the release of a new game, Hogwarts Legacy.<br>I’ll tell you a little about the game. Set in the late 19th century, Hogwarts Legacy will tell the story of students of Hogwarts. The player will be allowed to choose their faculty at Hogwarts and attend classes at the school of wizardry and wizardry as well as explore the open world consisting of such locations as the village of Hogsmeade and the Forbidden Forest. In the game the character will learn to brew potions, cast various magical spells, tame magical beasts and master other combat abilities. Moral system will play an important role in the game. Players will also be able to customize their character’s voice, body type and whether they are a witch or a wizard.<br>We want to invite you to become a part of the story and dive into the universe of magic and enchantment together!<br>If you are interested, reply to this message!<br>I’m sure we’ll find common ground with you and become partners!</p></blockquote><p>翻译：</p><blockquote><p>下午好！华纳兄弟互动娱乐公司很高兴地宣布新游戏《霍格沃兹遗产》的发布。<br>我会告诉你一点关于这个游戏。《霍格华兹遗产》以19世纪末为背景，讲述的是霍格华兹学生的故事。玩家将被允许选择他们在霍格沃兹的院系，参加魔法学校的课程，以及探索开放的世界，包括霍格莫德村和禁林等地点。在游戏中，角色将学习调制药剂，施放各种魔法咒语，驯服魔法野兽，并掌握其他战斗能力。道德体系将在博弈中发挥重要作用。玩家还可以自定义角色的声音、身体类型以及他们是女巫还是巫师。<br>我们想邀请你成为故事的一部分，一起潜入魔法和魅力的宇宙！<br>有兴趣的话，回复此留言吧！<br>我相信我们会找到与你的共同点，成为合作伙伴！</p></blockquote><p>刚才翻了翻收件箱，发现里面居然还有魔咒之地 Forspored 的，邮件中部分内容的翻译：</p><blockquote><p>我们公司很高兴地宣布，你和你的YouTube频道，特别是已被选择来推广我们最新的游戏。</p><p>公司正在积极为我们即将发布的新游戏寻找推广人。2023年1月24日在PlayStation 5和Windows上发布。</p><p>Forspored讲述了一个纽约女孩Frey的故事，她发现自己在美丽而暴力的Atia中。</p><p>为了找到回家的路，弗雷必须穿越广阔的新世界，借助魔法与怪物战斗。</p><p>我们公司有兴趣与你合作。</p><p>我们希望你在视频剪辑的开头插入我们的预告片。</p><p>如果我们的合作成功，我们会给你30个Steam密钥，</p><p>这不仅让你可以访问我们的游戏，但也解锁绝对所有的官方插件的游戏。</p></blockquote><p>看着挺好的吧，给 30 个 steam 密钥。其实还有更吸引人的，说是要我接他们的广告，一次可以提供至少一千美元。当初我看到这样的邮件，不经感叹，还是外国的钱好赚呀。</p><p>不过随着我的了解，我发现这事实并非那么简单。</p><p>我记得之前有一封是 Opera 浏览器的邮件，搜了一下是去年 2 月份的邮件了。内容如下：</p><blockquote><p>Hello, I am the manager of OperaSoftware.</p><p>Our company has paid attention to your channel and decided to make an offer. Our OperaGX browser lacks popularity, so we offer you to cooperate with us.</p><p>If you agree to cooperate with our company, please let us know and we will send you our terms.</p><p>Best regards, manager of OperaSoftware.</p></blockquote><p>然后我就回复他了，之后他就给我发来了一个 PDF 文件，里面是这样的（下面是截图，不用担心👇🏻）</p><p><img src="/img/2023/2023-02-22_21-33-12.png" alt="骗子发的 PDF 文件内容"></p><p>我记得下方的链接那里，好像就是一个病毒链接，当然我没有点过，当时只是好奇他们发这些邮件的目的是什么。</p><p>总之呢，就是哪有那么好的事，不要整天想着天上会掉馅饼。</p><p>骗子一般都会假扮是大公司，然后给出丰厚的佣金，吸引人上钩，一旦有人点击了他们的链接，那电脑可能就中毒了。</p><p>之前还有一位讲技术的博主，好像就是中了这样的骗术，导致他 YouTube 上的所有视频被删了。</p><h2 id="对策1"><a href="#对策1" class="headerlink" title="对策1"></a>对策1</h2><p>在我知道这些都是骗局之后，我基本都不去点开这些邮件。但是，我却避免不了他们的骚扰，每隔几天就会收到一封。其中来自 BlueTwelve Studio 的非常多，我查了一下，这是一个游戏开发团队，有名的赛博猫咪《Stray》就是他们开发的。</p><p><img src="/img/2023/game-stray.jpeg" alt="Stray"></p><p>当然我收到的这些都是诈骗邮件，肯定不是这个游戏开发团队发的，因为我观察到，这些邮件的后缀都是 @vzonly.cz</p><p>我还搜到了一个 YouTube 视频：<a href="https://www.youtube.com/watch?v=G6S_KwiDTbs">volny.cz online.ua FRAUD email | SCAM alert - YouTube</a></p><p>里面是一位阿三哥在讲他也碰到诈骗邮件的事情，他除了收到来自 <code>@vzonly.cz</code> 的邮件，还有 <code>@online.ua</code> 的。并且他了解得更深入，骗子同样是发送一个 PDF 过来，里面也是有链接，如果点击这个链接，就会重定向然后下载 Windows 软件。大概就是这些内容吧。</p><p>同时我观察了他的视频说明，他也同样是把邮箱放在里面。所以骗子应该是用软件扫描 YouTube 视频，查到视频说明里有邮箱，就会发邮件过来之类吧。</p><p>这时我猜想，如果我把邮箱的 <code>@</code> 换成 <code>#</code> ，然后补充说明（请把 @ 换成 #）会不会降低收到这种诈骗邮件的频率？</p><p>毕竟如果是真人，真想发邮件的话，换个字符也不会带来多大的麻烦。</p><h2 id="对策2"><a href="#对策2" class="headerlink" title="对策2"></a>对策2</h2><p>其实我会来写这篇文章，是因为我突然想到，我能否把来自 @vzonly.cz 的所有邮件都拉黑？</p><p>由于我使用的是腾讯企业邮箱，所以用必应搜一下，很快就找到答案了。</p><p><a href="https://work.weixin.qq.com/help?person_id=0&doc_id=359&helpType=exmail">黑名单/域名黑名单有什么作用？如何设置？-帮助中心-企业邮 (qq.com)</a></p><p>那么按照说明</p><blockquote><p>在“邮箱设置”-&gt;“反垃圾”-&gt;“黑名单”栏目中，点击“设置黑名单”</p></blockquote><p>就可以成功把域名添加进去</p><p><img src="/img/2023/2023-02-22_21-14-24.png" alt="成功将域名加入邮箱黑名单"></p><p>这么一番操作之后，以后我应该就不会被这些垃圾邮件打扰了吧。或者说能减少打扰的次数吧，毕竟来自诈骗邮件也有来自其他域名的，像前面提到的 Opera 这封邮件，它的域名是 <code>laposte.net</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不要点击陌生链接</li><li>注意邮件的后缀</li><li>非必要的话，不要公开邮箱地址</li><li>或者把邮箱的 @ 换成 # 之类的</li><li>进入邮箱网站后台，设置域名黑名单</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的电子邮箱地址，一直放在 YouTube 和我的博客上面，所以我经常收到英文的邮件。例如这样的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good afternoon! Warner Bros. Interactive Entertainment is pleased to
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建留言板 sayhello 进阶使用教程</title>
    <link href="https://powersee.github.io/2023/02/about-sayhello/"/>
    <id>https://powersee.github.io/2023/02/about-sayhello/</id>
    <published>2023-02-20T03:59:48.000Z</published>
    <updated>2023-02-20T04:04:40.269Z</updated>
    
    <content type="html"><![CDATA[<p>项目源码：<a href="https://github.com/powersee/sayhello">https://github.com/powersee/sayhello</a></p><p>用 docker 的话，一条命令即可运行起来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 5000:5000 --name sayhello powersee/sayhello</span><br></pre></td></tr></table></figure><p>第一个 5000 可以换为其它的端口，例如 6000，7000 等等，之后在浏览器通过 <code>IP:端口</code> 的形式来访问即可。</p><p><img src="/img/2023/sayhello10086.jpg"></p><h3 id="删除内容"><a href="#删除内容" class="headerlink" title="删除内容"></a>删除内容</h3><p>先来说说，怎么删除内容。需要做的是，进入 docker 容器里的，使用命令行对 sqlite 数据库的内容进行删除。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker ps                                                    </span><br><span class="line">CONTAINER ID   IMAGE               COMMAND                  CREATED        STATUS        PORTS                                         NAMES</span><br><span class="line">1888c7d98fe8   powersee/sayhello   &quot;python3 -m flask ru…&quot;   2 months ago   Up 2 months   0.0.0.0:10086-&gt;5000/tcp, :::10086-&gt;5000/tcp   sayhello</span><br></pre></td></tr></table></figure><p>通过 <code>docker ps</code> 命令，可以查询到目前正在运行的容器有哪些。</p><p>进入容器内的交互终端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it sayhello /bin/sh</span><br></pre></td></tr></table></figure><p>由于这个程序使用的是 sqlite 的数据库，所以需要先安装 sqlite，才能够对 <code>data.db</code> 进行修改。</p><p><strong>安装</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add sqlite</span><br></pre></td></tr></table></figure><p><strong>查询</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite3 data.db</span><br><span class="line"></span><br><span class="line">select * from message;</span><br></pre></td></tr></table></figure><p>此时就会将所有的留言都显示出来，这里我随便找几条</p><blockquote><p>452|p|1|2023-02-14 14:55:37.930067<br>453|p|1|2023-02-14 14:55:38.022029<br>454|p|b 站旅游团路过|2023-02-14 15:18:19.983384</p></blockquote><p>可以看到，它的格式是这样的</p><blockquote><p>id | username | content | time</p></blockquote><p>所以我们要删除的话，可以使用它的 id，例如这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from message where id=452;</span><br></pre></td></tr></table></figure><p>删除多条，可以使用 in，例如</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from message where id in(23,26,29);</span><br></pre></td></tr></table></figure><p>如果要删除大范围的，例如 id 从 200 到 450 都要删除掉</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete FROM message where id &gt; 199 and id &lt; 451;</span><br><span class="line">#或者</span><br><span class="line">delete FROM message where id &gt;= 200 and id &lt;= 450;</span><br></pre></td></tr></table></figure><p>如果要清空所有内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM message;</span><br></pre></td></tr></table></figure><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><p>如果你现在是在容器里，也就是终端里左边是显示 <code>/sayhello #</code> ，想要退出可以按 <code>ctrl + D</code> （是两个按键同时按）</p><p>由于数据都是存放在 <code>data.db</code> 这个数据库里的，所以我们只要备份它就可以了。此时我们可以使用 <code>docker cp</code> 命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp sayhello:/sayhello/data.db .</span><br></pre></td></tr></table></figure><p>此处的点 <code>.</code> 代表当前目录，也就是把数据库复制出来，放到当前目录，你也可以改为其它的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp sayhello:/sayhello/data.db /home/powersee</span><br></pre></td></tr></table></figure><p>这样就会把 <code>data.db</code> 放到 <code>/home/powersee</code> 这个目录下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目源码：&lt;a href=&quot;https://github.com/powersee/sayhello&quot;&gt;https://github.com/powersee/sayhello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用 docker 的话，一条命令即可运行起来&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>一个不错的 css 框架 Boltcss</title>
    <link href="https://powersee.github.io/2023/02/boltcss/"/>
    <id>https://powersee.github.io/2023/02/boltcss/</id>
    <published>2023-02-19T04:00:08.000Z</published>
    <updated>2023-02-20T04:53:56.325Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个不错的 css 框架 boltcss <a href="https://boltcss.com/">Bolt.css (boltcss.com)</a></p><p>是从阮一峰老师的博客推荐发现的，看了官方的 demo，感觉挺不错，里面很多样式自己挺喜欢的。</p><p>于是我下载来研究看看，之后看看能否引入自己的博客里面。</p><p><a href="https://raw.githubusercontent.com/tbolt/boltcss/main/bolt.css">https://raw.githubusercontent.com/tbolt/boltcss/main/bolt.css</a></p><p>喜欢的点：</p><ul><li>支持日夜模式（会根据系统自动切换）</li><li>details – summary 标签不错，在博客中可以用来收起一些内容</li></ul><p>例如这样</p><details>呵呵哒🙂  <summary>点击展开  </summary></details><p>直接在 markdown 里面写标签即可。</p><p>如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;呵呵哒🙂</span><br><span class="line">  &lt;summary&gt;点击展开</span><br><span class="line">  &lt;/summary&gt;</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><p>由于直接把这个 css 引入博客，会和原来样式冲突，所以我目前只能，复制里面的代码到我博客自身的 css 里面。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Interactive elements */</span><br><span class="line">details &#123;</span><br><span class="line">  border: 1px solid #aaa;</span><br><span class="line">  border-radius: 7px;</span><br><span class="line">  padding: 0.5em 0.5em 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">summary &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin: -0.5em -0.5em 0;</span><br><span class="line">  padding: 0.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">details[open] &#123;</span><br><span class="line">  padding: 0.5em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">details[open] summary &#123;</span><br><span class="line">  border-bottom: 1px solid #aaa;</span><br><span class="line">  margin-bottom: 0.5em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现一个不错的 css 框架 boltcss &lt;a href=&quot;https://boltcss.com/&quot;&gt;Bolt.css (boltcss.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是从阮一峰老师的博客推荐发现的，看了官方的 demo，感觉挺不错，里面很多样式自己挺喜欢的。&lt;/p
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
