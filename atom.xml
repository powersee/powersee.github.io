<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2022-04-12T10:23:40.571Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>risc-v 开源软件安装与自行编译</title>
    <link href="https://powersee.github.io/2022/04/riscv-apps/"/>
    <id>https://powersee.github.io/2022/04/riscv-apps/</id>
    <published>2022-04-13T02:42:58.000Z</published>
    <updated>2022-04-12T10:23:40.571Z</updated>
    
    <content type="html"><![CDATA[<p>risc-v 开发板虽然可以运行 Linux 发行版，但是毕竟还是处于起步阶段，生态是没法跟 arm 以及 x86 相比的。</p><p>这段时间在研究这台 visionfive，在软件这方面也折腾了不少，本文记录一下心得。</p><p>以前拿到开发板或者可以运行 Linux 的机顶盒时，我喜欢在上面装下载软件，以及开启 smb 共享，让它作为一台简易 NAS 来使用。这次在 visionfive 上面我也有进行尝试。</p><p>首先 BT 下载软件 transmission 和 qbittorrent 在这上面想要安装都非常简单，直接用 dnf 就行</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">dnf <span class="keyword">install</span> transmission-daemon</span><br><span class="line">dnf <span class="keyword">install</span> qbittorrent-nox</span><br></pre></td></tr></table></figure><p><img src="/img/2022/image-20220412155348270.png" alt="image-20220412155348270"></p><p><img src="/img/2022/image-20220412155459647.png" alt="image-20220412155459647"></p><p>samba 也可以直接用 dnf 安装</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">dnf <span class="keyword">install</span> samba</span><br></pre></td></tr></table></figure><p><img src="/img/2022/image-20220412160053966.png" alt="image-20220412160053966"></p><p>这种是比较简单的，这里就不多细讲了。</p><p>像有些开源软件，它是托管在 GitHub 上面的，这类软件，我们可以到它的 GitHub release 里面，下载 riscv 架构的可执行文件。这里举两个例子</p><h4 id="syncthing"><a href="#syncthing" class="headerlink" title="syncthing"></a>syncthing</h4><p>这是一个多平台同步软件，之前有一段时间，我经常使用它将我手机里的照片、视频，同步到电脑上面。</p><p>想要让它在 visionfive 上面运行，需要到 <a href="https://github.com/syncthing/syncthing/releases">https://github.com/syncthing/syncthing/releases</a> 里面找名字带 riscv64 的，目前最新的是这个</p><p><a href="https://github.com/syncthing/syncthing/releases/download/v1.19.2/syncthing-linux-riscv64-v1.19.2.tar.gz">https://github.com/syncthing/syncthing/releases/download/v1.19.2/syncthing-linux-riscv64-v1.19.2.tar.gz</a></p><p>我们可以通过 wget 将它下载到本地，然后使用 tar 解压</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://github.com/syncthing/syncthing/releases/download/v<span class="number">1</span>.<span class="number">19</span>.<span class="number">2</span>/syncthing-linux-riscv<span class="number">64</span>-v<span class="number">1</span>.<span class="number">19</span>.<span class="number">2</span>.tar.gz</span><br><span class="line"><span class="attribute">tar</span> xf syncthing-linux-riscv<span class="number">64</span>-v<span class="number">1</span>.<span class="number">19</span>.<span class="number">2</span>.tar.gz</span><br></pre></td></tr></table></figure><p>此时我们得到的是一个文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">l syncthing-linux-riscv64-v1.19.1</span></span><br><span class="line">total 23M</span><br><span class="line">drwxr-xr-x   5 riscv riscv 4.0K Mar  1 14:45 .</span><br><span class="line">drwx------. 19 riscv riscv 4.0K Apr 10 10:45 ..</span><br><span class="line">-rw-r--r--   1 riscv riscv  14K Mar  1 14:38 AUTHORS.txt</span><br><span class="line">drwxr-xr-x  11 riscv riscv 4.0K Mar  1 14:45 etc</span><br><span class="line">drwxr-xr-x   2 riscv riscv 4.0K Mar  1 14:45 extra</span><br><span class="line">-rw-r--r--   1 riscv riscv  17K Mar  1 14:38 LICENSE.txt</span><br><span class="line">drwxr-xr-x   2 riscv riscv 4.0K Mar  1 14:45 .metadata</span><br><span class="line">-rw-r--r--   1 riscv riscv 4.7K Mar  1 14:38 README.txt</span><br><span class="line">-rwxr-xr-x   1 riscv riscv  23M Mar  1 14:44 syncthing</span><br></pre></td></tr></table></figure><p>执行文件夹里的 syncthing 即可启动这个软件，然后它会输出一些启动信息</p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">➜ cd syncthing-linux-riscv64-v1.19.1 </span><br><span class="line">➜ syncthing-linux-riscv64-v1.19.1 ./syncthing </span><br><span class="line">[start] 16:13:15 INFO: syncthing v1.19.1 <span class="string">&quot;Fermium Flea&quot;</span> (go1.17.7 linux-riscv64) teamcity@build.syncthing.net 2022-02-21 13:57:21 UTC</span><br><span class="line">[start] 16:13:15 INFO: Generating ECDSA key<span class="built_in"> and </span>certificate for syncthing...</span><br><span class="line">[start] 16:13:16 INFO: Default folder created<span class="built_in"> and/or </span>linked to<span class="built_in"> new </span>config</span><br><span class="line">[start] 16:13:16 INFO: Default config saved. Edit /root/.config/syncthing/config.xml to taste (with Syncthing stopped)<span class="built_in"> or </span>use the GUI</span><br><span class="line">[start] 16:13:16 INFO: Archiving a copy of old config file format at: /root/.config/syncthing/config.xml.v0</span><br></pre></td></tr></table></figure><p>等一会会出现一条比较重要的信息</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="number">6</span>RXV3] <span class="number">16</span>:<span class="number">13</span>:<span class="number">32</span> <span class="keyword">INFO</span>: <span class="keyword">Access</span> the GUI via the <span class="keyword">following</span> URL: http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8384</span>/</span><br></pre></td></tr></table></figure><p>它表示我们只能在 visionfive 上面使用浏览器访问这个网址，才可以打开 syncthing 的图形化界面。如果你像我一样，并没有给 visionfive 接显示器，一直都是 ssh 连接来操作的。此时这一步就没有进行下去了。</p><p>所以我们需要先停止软件，改一下配置文件后，再来启动。按 <code>ctrl + c</code> 这两个按键可以退出软件，然后我们使用 nano 来修改配置文件。</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">nano ~<span class="regexp">/.config/</span>syncthing/config.xml</span><br></pre></td></tr></table></figure><p>找到 <code>&lt;address&gt;127.0.0.1:8384&lt;/address&gt;</code> 这一行，改为 <code>&lt;address&gt;0.0.0.0:8384&lt;/address&gt;</code> ，再次输入 <code>./syncthing</code> 启动软件</p><p>此时就可以用电脑的浏览器来访问运行在 visionfive 上面的 syncthing 了。</p><p><img src="/img/2022/image-20220412162500139.png" alt="image-20220412162500139"></p><h4 id="miniserve"><a href="#miniserve" class="headerlink" title="miniserve"></a>miniserve</h4><p>这个软件是我个人非常喜欢的文件展示应用，它的主要功能就是将某个文件夹通过 web 的方式共享出来，但是功能远不止于此。它还是支持上传功能，以及添加用户名密码验证，所以也可以把它当一个简易网盘来使用。</p><p>项目：<a href="https://github.com/svenstaro/miniserve">https://github.com/svenstaro/miniserve</a></p><p>安装方法：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/svenstaro/mi</span>niserve<span class="regexp">/releases/</span>download<span class="regexp">/v0.19.4/mi</span>niserve-v0.<span class="number">19.4</span>-riscv64gc-unknown-linux-gnu</span><br><span class="line">mv miniserve-* miniserve</span><br><span class="line">chmod +x miniserve</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./miniserve</span></span><br></pre></td></tr></table></figure><p>非常简单，下载后赋予它可执行权限，然后直接 <code>./</code> 就可以运行了。这样它会将你当前所在的文件夹，通过 <code>8080</code> 端口共享出来。</p><p>如果想使用其它端口，可以使用 <code>-p</code> 来指定，想添加上传功能，使用 <code>-u</code> ，想共享其它的文件夹，直接将文件夹路径写上去即可。</p><p>示例：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">➜ .<span class="regexp">/miniserve -u -p 9527 /</span>tmp/test</span><br><span class="line">miniserve v0.<span class="number">19.3</span></span><br><span class="line">Bound to [::]:<span class="number">9527</span>, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9527</span></span><br><span class="line">Serving path <span class="regexp">/tmp/</span>test</span><br><span class="line">Available at (non-exhaustive list):</span><br><span class="line">    http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9527</span></span><br><span class="line">    http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">68.178</span>:<span class="number">9527</span></span><br><span class="line">    http:<span class="regexp">//</span>[::<span class="number">1</span>]:<span class="number">9527</span></span><br><span class="line"></span><br><span class="line">Quit by pressing CTRL-C</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/img/2022/image-20220412163658298.png" alt="image-20220412163658298"></p><h3 id="自行编译"><a href="#自行编译" class="headerlink" title="自行编译"></a>自行编译</h3><p>上面讲到的 syncthing 和 miniserve，它们的 release 里都有提供 riscv 的可执行文件，所以我们使用起来还算是比较容易。</p><p>但这类还是比较少数的，其它开源软件大多数目前都是没有提供 riscv 版的，所以如果我们想要使用的话，就需要自行编译。</p><p>先来一个简单的——<a href="https://github.com/zerotier/ZeroTierOne">zerotier</a></p><p>这个软件的功能是组虚拟局域网，让家里没有公网 ip 的用户，也可以远程访问家里设备。</p><p>想让它在 visionfive 上面运行我们需要自行编译，很简单，下载源代码到本地，进入项目文件夹，执行 make 编译就行</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone --depth=<span class="number">1</span> https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zerotier/</span>ZeroTierOne.git</span><br><span class="line">cd ZeroTierOne</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成后当前目前下多出 <code>zerotier-one</code> 和 <code>zerotier-cli</code></p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">./zerotier-<span class="keyword">cli</span> -v                   </span><br><span class="line"><span class="number">1.8</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p>另外我还尝试编译 <a href="https://github.com/fatedier/frp">frp</a> 这款软件，这个耗费了我不少的时间。由于它是用 go 写的，想要编译它需要有 go 环境，然后我就想到 golang 的官网下载，却发现并没有提供 riscv 版的。</p><p>走了一堆弯路之后，我才发现 visionfive 的 Fedora 里竟然自带 go</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="keyword">go</span> <span class="keyword">version</span></span><br><span class="line"><span class="keyword">go</span> <span class="keyword">version</span> go1.<span class="number">14.6</span> gccgo (GCC) <span class="number">10.3</span>.<span class="number">1</span> <span class="number">20210422</span> (Red Hat <span class="number">10.3</span>.<span class="number">1</span>-<span class="number">1</span>) linux/riscv64</span><br></pre></td></tr></table></figure><p>不过我使用它并没法成功编译 frp，想使用自带的 go1.14.6 编译现在最新的 go1.18 也没成功。</p><p>之后又发现在 x86 上面是可以使用 go 设定交叉编译，来编译 riscv64 的可执行文件的。</p><p>最终我使用这两条命令，成功编译出 riscv 版的 frp 服务器端和客户端</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -<span class="keyword">w</span> GOPROXY=http<span class="variable">s:</span>//goproxy.<span class="keyword">cn</span></span><br></pre></td></tr></table></figure><p>网络问题，先设置代理</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CGO_ENABLE</span>=0 <span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=riscv64 go build ./cmd/frpc</span><br><span class="line"><span class="attribute">CGO_ENABLE</span>=0 <span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=riscv64 go build ./cmd/frps</span><br></pre></td></tr></table></figure><p>这样编译出来的文件是在当前目录下的，想存放在其它地方，应该使用 -o 参数</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CGO_ENABLE</span>=0 <span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=riscv64 go build -o bin/frpc-riscv64 ./cmd/frpc</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">➜ frpc -v         </span><br><span class="line"><span class="number">0.41</span>.<span class="number">0</span></span><br><span class="line">➜ <span class="keyword">file</span> frpc       </span><br><span class="line">frpc: ELF <span class="number">64</span>-bit LSB executable, UCB RISC-V, version <span class="number">1</span> (SYSV), statically linked, Go BuildID=Pwh5MYcPoYJ1E09FI1rO<span class="regexp">/vrYuoTbR0yxAguZ0ck9D/</span>DeYARJeTJfCF72R2PXOv/<span class="number">9</span>mZ673VwFshYBrO5Grjy, not stripped</span><br></pre></td></tr></table></figure><p>那么用同样的方法，也可以编译 <a href="https://github.com/filebrowser/filebrowser">filebrowser</a> 的后端部分</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=riscv64 go build</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">➜ <span class="keyword">file</span> filebrowser</span><br><span class="line">filebrowser: ELF <span class="number">64</span>-bit LSB executable, UCB RISC-V, version <span class="number">1</span> (SYSV), statically linked, Go BuildID=<span class="number">8</span>ohLL6OaYPgPR1ZtkIRd<span class="regexp">/d9lcK8Ocz9YIDVZqMFFv/</span>cB4dn0G6WtNCIXUJsvX-/Xo17t9_I87svg4x4zqx_, not stripped</span><br></pre></td></tr></table></figure><p>前端部分需要 nodejs 和 npm ，这个官方没有提供 riscv 版，GitHub 上面有修改版，说是可以给 riscv 用，不过我没弄成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;risc-v 开发板虽然可以运行 Linux 发行版，但是毕竟还是处于起步阶段，生态是没法跟 arm 以及 x86 相比的。&lt;/p&gt;
&lt;p&gt;这段时间在研究这台 visionfive，在软件这方面也折腾了不少，本文记录一下心得。&lt;/p&gt;
&lt;p&gt;以前拿到开发板或者可以运行 Li
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>visionfive 串口调试与编译内核</title>
    <link href="https://powersee.github.io/2022/04/visionfive-ttl-linux/"/>
    <id>https://powersee.github.io/2022/04/visionfive-ttl-linux/</id>
    <published>2022-04-12T09:36:52.000Z</published>
    <updated>2022-04-12T10:23:56.994Z</updated>
    
    <content type="html"><![CDATA[<h3 id="串口调试"><a href="#串口调试" class="headerlink" title="串口调试"></a>串口调试</h3><p>开发板除了通过 HDMI 连接显示器，然后通过 usb 键盘来控制之外，还可以通过串口与电脑进行连接，将它的输出信息显示在电脑上，并且还可以直接用电脑键盘来控制。<br>想要进行这样的操作，需要买一个 USB 转 TTL， 我使用的是 CH340G，拼多多上面 6.3 包邮买的，平时也可以用来给路由器或者机顶盒刷机。</p><p><img src="/img/2022/ch340.jpg" alt="ch340"></p><p>另外我还有一个 CH341A，这个看起来就比较高级一点，两年前淘宝 18 块买的。</p><p><img src="/img/2022/image-20220411135344552.png" alt="image-20220411135344552"></p><p>不过只是用来调试开发板的话，它们用起来都一样的，连接到电脑的 usb 口之后，安装店家提供的驱动，顺利的话就可以在【设备管理器】的【端口】看到了。我们需要记住的是它对应的 com 口是多少，例如我图中的 12 和 13</p><p><img src="/img/2022/image-20220411132651192.png" alt="image-20220411132651192"></p><p>注：设备管理器可以通过点击，开始菜单旁边的放大镜，在里面搜索来打开。</p><p><img src="/img/2022/image-20220411132635593.png" alt="image-20220411132635593"></p><p>接下来需要它与开发板进行连接，这时就需要使用杜邦线，这个一般购买模块时都会赠送的，如果没有的话，也可以自己购买。拼多多或者淘宝搜【杜邦线母对母】就可以找到相对应的商品（个人建议购买比较长一点的，我之前用买模块送的杜邦线，只有十几厘米，有时候不太方面，所以后来我重新买了一排30厘米的）</p><p>连接的话只需要 3 根线，接序是这样的</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">GND <span class="comment">--- GND</span></span><br><span class="line">TX <span class="comment">---- RX</span></span><br><span class="line">RX <span class="comment">---- TX</span></span><br></pre></td></tr></table></figure><p><img src="/img/2022/image-20220411135551131.jpg" alt="image-20220411135551131"></p><p>按照这样连接好后，将模块插到电脑上，确认在设备管理器里可以看到。</p><p>然后我们还需要软件，才可以显示模块输出的信息。可以选择的软件非常多，我个人用过的有 putty、友善串口调试助手、以及我个人最常用的 xshell。我个人比较推荐 xshell，平时可以用来 ssh 连接开发板，需要串口调试时也可以用它。而且 xshell 个人在家庭或者学校使用的话，是完全免费的，到它的官网 <a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a> 填写邮箱后，收到邮件就可以下载。</p><p>下载安装后，进行如下操作</p><p><img src="/img/2022/image-20220411141221081.png" alt="image-20220411141221081"></p><p><img src="/img/2022/image-20220411141516299.png" alt="image-20220411141516299"></p><p>顺利的话应该会看到这个</p><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">Connecting to COM12...</span><br><span class="line">Connected.</span><br></pre></td></tr></table></figure><p>此时就可以给开发板接通电源开机了。然后我们可以看到 bootloader 的加载信息，以及不断出现的系统启动信息。</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">bootloader version:211102-0b86f96</span><br><span class="line">ddr 0x00000000, 1M test</span><br><span class="line">ddr 0x00100000, 2M test</span><br><span class="line">DDR clk 2133M,Version: 211102-d086aee                                                  </span><br><span class="line">0 crc flash: 5595e732, crc ddr: 5595e732</span><br><span class="line">crc check PASSED</span><br><span class="line"></span><br><span class="line">bootloader.</span><br><span class="line"></span><br><span class="line">OpenSBI v1.0</span><br><span class="line">   ____                    _____ ____ _____</span><br><span class="line">  / __ \                  / ____|<span class="string">  _ \_   _</span>|</span><br><span class="line"> |<span class="string"> </span>|<span class="string">  </span>|<span class="string"> </span>|<span class="string">_ __   ___ _ __ </span>|<span class="string"> (___ </span>|<span class="string"> </span>|<span class="string">_) </span>||<span class="string"> </span>|</span><br><span class="line"> |<span class="string"> </span>|<span class="string">  </span>|<span class="string"> </span>|<span class="string"> &#x27;_ \ / _ \ &#x27;_ \ \___ \</span>|<span class="string">  _ &lt; </span>|<span class="string"> </span>|</span><br><span class="line"> |<span class="string"> </span>|<span class="string">__</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">_) </span>|<span class="string">  __/ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">____) </span>|<span class="string"> </span>|<span class="string">_) </span>||<span class="string"> </span>|_</span><br><span class="line">  \____/|<span class="string"> .__/ \___</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">_____/</span>|<span class="string">____/_____</span>|</span><br><span class="line">        |<span class="string"> </span>|</span><br><span class="line">        |<span class="string">_</span>|</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>等到开机完成，会出现这样的界面，在这里我们可以用电脑键盘输入用户名和密码来进行登录。</p><p><img src="/img/2022/image-20220411141936085.png" alt="image-20220411141936085"></p><h3 id="编译-Linux-内核"><a href="#编译-Linux-内核" class="headerlink" title="编译 Linux 内核"></a>编译 Linux 内核</h3><p>目前官方提供的 Fedora 镜像是</p><p><strong>2021-December-26:</strong> <a href="https://fedora.starfivetech.com/pub/downloads/VisionFive-release/Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw.zst">Fedora-riscv64-jh7100-developer-xfce-Rawhide-20211226-214100.n.0-sda.raw.zst</a></p><p>使用的内核是 5.15，如果我们想要使用更新的内核，可以选择自己编译。</p><p>首先下载源代码</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone --depth=<span class="number">1</span> https:<span class="regexp">//gi</span>thub.com<span class="regexp">/starfive-tech/</span>linux.git</span><br></pre></td></tr></table></figure><p>这时就得分情况了，我们是要在哪里进行编译呢？如果是在 x86 架构的机器编译，需要通过交叉编译。因为我们的开发板是 risc-v 架构的，如果直接在开发板编译就不需要。这两种我都又尝试过，分别讲一下。</p><h4 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h4><p>按照 GitHub 上的文档操作即可。</p><p><a href="https://github.com/starfive-tech/linux">https://github.com/starfive-tech/linux</a></p><p>先下载源代码，之后安装编译所需的工具</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">sudo apt-get <span class="keyword">install </span>libncurses-dev libssl-dev <span class="keyword">bc </span>flex <span class="keyword">bison </span>make gcc gcc-riscv64-linux-gnu</span><br><span class="line"><span class="comment"># Fedora</span></span><br><span class="line">sudo dnf <span class="keyword">install </span>ncurses-devel openssl openssl-devel <span class="keyword">bc </span>flex <span class="keyword">bison </span>make gcc gcc-riscv64-linux-gnu</span><br><span class="line"><span class="comment"># Archlinux</span></span><br><span class="line">sudo pacman -S --needed ncurses openssl <span class="keyword">bc </span>flex <span class="keyword">bison </span>make gcc riscv64-linux-gnu-gcc</span><br></pre></td></tr></table></figure><p>配置与编译</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">make -j8 <span class="attribute">ARCH</span>=riscv <span class="attribute">CROSS_COMPILE</span>=riscv64-linux-gnu- visionfive_defconfig</span><br><span class="line">make -j8 <span class="attribute">ARCH</span>=riscv <span class="attribute">CROSS_COMPILE</span>=riscv64-linux-gnu- nconfig</span><br><span class="line">make -j8 <span class="attribute">ARCH</span>=riscv <span class="attribute">CROSS_COMPILE</span>=riscv64-linux-gnu-</span><br></pre></td></tr></table></figure><p>我使用的处理器是 i5 8259U，四核八线程，第一次编译 3、4分钟就搞定了。</p><h4 id="原生编译"><a href="#原生编译" class="headerlink" title="原生编译"></a>原生编译</h4><p>同样下载源代码到设备上</p><p>安装编译所需的工具</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo dnf <span class="keyword">install </span>ncurses-devel openssl openssl-devel <span class="keyword">bc </span>flex <span class="keyword">bison </span>make gcc</span><br></pre></td></tr></table></figure><p>配置与编译</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">make</span> -j<span class="number">2</span> visionfive_defconfig</span><br><span class="line"><span class="attribute">make</span> -j<span class="number">2</span> nconfig</span><br><span class="line"><span class="attribute">make</span> -j<span class="number">2</span></span><br></pre></td></tr></table></figure><p>由于板子是双核双线程的，所以这里就改为 -j2 了。耗费的时间是两个半小时左右。</p><p>不管是交叉编译还是原生编译，编译完成我们都可以得到内核 <code>arch/riscv/boot/Image</code> 以及 dtb <code>arch/riscv/boot/dts/starfive/jh7100-starfive-visionfive-v1.dtb</code></p><p>那么要怎么使用它们呢？</p><p>我个人是这样操作的，在 /boot 里新建一个文件夹，然后将这两个文件放到里面。我现在新编译的内核版本是 5.18，所以我新建一个 518 的文件夹，再将内核与 dtb 复制进去。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/boot/</span><span class="number">518</span></span><br><span class="line">cp arch<span class="regexp">/riscv/</span>boot<span class="regexp">/Image /</span>boot<span class="regexp">/518/</span></span><br><span class="line">cp arch<span class="regexp">/riscv/</span>boot<span class="regexp">/dts/</span>starfive<span class="regexp">/jh7100-starfive-visionfive-v1.dtb /</span>boot<span class="regexp">/518/</span></span><br></pre></td></tr></table></figure><p>然后修改 <code>/boot/grub.cfg</code> ，在里面添加多一个 menuentry</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">menuentry <span class="string">&#x27;5.18&#x27;</span> &#123;</span><br><span class="line">    linux /518/Image earlycon <span class="attribute">console</span>=ttyS0,115200n8 stmmac.<span class="attribute">chain_mode</span>=1 <span class="attribute">root</span>=/dd</span><br><span class="line">ev/mmcblk0p4 rootwait</span><br><span class="line">    devicetree /518/jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后这个文件前面 22 行的内容是这样的</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">default</span>=0</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">timeout_style</span>=menu</span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">timeout</span>=2</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">debug</span>=<span class="string">&quot;linux,loader,mm&quot;</span></span><br><span class="line"><span class="builtin-name">set</span> <span class="attribute">term</span>=<span class="string">&quot;vt100&quot;</span></span><br><span class="line"></span><br><span class="line">menuentry <span class="string">&#x27;5.18&#x27;</span> &#123;</span><br><span class="line">    linux /518/Image earlycon <span class="attribute">console</span>=ttyS0,115200n8 stmmac.<span class="attribute">chain_mode</span>=1 <span class="attribute">root</span>=/dev/mmcblk0p4 rootwait</span><br><span class="line">    devicetree /518/jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menuentry <span class="string">&#x27;Fedora vmlinux-5.17.0&#x27;</span> &#123;</span><br><span class="line">    linux /Image earlycon <span class="attribute">console</span>=ttyS0,115200n8 stmmac.<span class="attribute">chain_mode</span>=1 <span class="attribute">root</span>=/dev/mmcblk0p4 rootwait</span><br><span class="line">    devicetree /jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">menuentry <span class="string">&#x27;Fedora vmlinux-5.15.10+ visionfive&#x27;</span> &#123;</span><br><span class="line">    linux /vmlinuz-5.15.10+ ro <span class="attribute">root</span>=UUID=59fcd098-2f22-441a-ba45-4f7185baf23f rhgb <span class="attribute">console</span>=tty0 <span class="attribute">console</span>=ttyS0,115200 earlycon rootwait <span class="attribute">stmmaceth</span>=chain_mode:1 <span class="attribute">selinux</span>=0 <span class="attribute">LANG</span>=en_US.UTF-8</span><br><span class="line">    devicetree /dtbs/5.15.10+/starfive/jh7100-starfive-visionfive-v1.dtb</span><br><span class="line">        initrd /initramfs-5.15.10+.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面的 5.17 也是我之前自己添加的。此时重启机器</p><p>在启动过程中会出现一个选择菜单界面</p><p><img src="/img/2022/image-20220411151418548.png" alt="image-20220411151418548"></p><p>可以按上下键来选择不同的内核版本，如果不手动选的话，就会自动加载第一个。</p><p>进入系统后输入 <code>uname -sr</code> 可以查看当前的内核版本。</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$uname</span> -sr   </span></span><br><span class="line">Linux <span class="number">5.18</span><span class="number">.0</span>-rc1-visionfive-g7ff84520cb68</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;串口调试&quot;&gt;&lt;a href=&quot;#串口调试&quot; class=&quot;headerlink&quot; title=&quot;串口调试&quot;&gt;&lt;/a&gt;串口调试&lt;/h3&gt;&lt;p&gt;开发板除了通过 HDMI 连接显示器，然后通过 usb 键盘来控制之外，还可以通过串口与电脑进行连接，将它的输出信息显示在电
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>visionfive 开发板通过 gpio 控制 led 灯</title>
    <link href="https://powersee.github.io/2022/04/visionfive-gpio-led/"/>
    <id>https://powersee.github.io/2022/04/visionfive-gpio-led/</id>
    <published>2022-04-11T01:14:38.000Z</published>
    <updated>2022-04-13T01:16:35.450Z</updated>
    
    <content type="html"><![CDATA[<p>visionfive 是赛昉科技推出的一款开发板，使用的处理器是他们自家研发的【惊鸿 7100】（JH7100），这是一颗 risc-v 架构的处理器，双核 U74，U74 对标的是 ARM 的 Cortex-A55 。</p><p><img src="/img/2022/visionfive1.jpg" alt="visionfive1"></p><h3 id="写入镜像"><a href="#写入镜像" class="headerlink" title="写入镜像"></a>写入镜像</h3><p>这块板子的系统运行和树莓派一样，需要先将系统镜像写入内存卡，再插到板子上来运行。目前官方提供的只有 Fedora 这个发行版，可以在 GitHub 上找到下载链接。</p><p><a href="https://github.com/starfive-tech/Fedora_on_StarFive">https://github.com/starfive-tech/Fedora_on_StarFive</a></p><p>下载完是一个特殊的压缩格式，zst，我搜了一下</p><blockquote><p>当前这种 ZST 格式是一种 压缩文件 ，是由 ZStandard 研发，作为一种 ZStandard压缩文件使用，此文件流行程度是 50 分（0-100满分）。</p></blockquote><p>还得使用专门的工具才能解压，稍微麻烦了点。工具在这里有提供</p><p><a href="https://rvspace.org/en/Product/VisionFive/Technical_Documents/VisionFive_Single_Board_Computer_Quick_Start_Guide">https://rvspace.org/en/Product/VisionFive/Technical_Documents/VisionFive_Single_Board_Computer_Quick_Start_Guide</a></p><p>点击网页左侧的 <strong>Flashing Fedora OS to a Micro-SD Card</strong> 可以快速达到。</p><p><img src="/img/2022/Snipaste_22-04-11_09-21-44.jpg" alt="Snipaste_22-04-11_09-21-44"></p><p>我是在 win10 进行操作的，将下载好的解压工具，从压缩包里解压出来，和 zst 文件放在一起。</p><p><img src="/img/2022/2022-04-11_09-57-19.jpg" alt="2022-04-11_09-57-19"></p><p>此时在这个文件夹里的空白处，一只手按住键盘上的 shift 键，另一只手按一下鼠标的右键，在此处打开 powershell，就可以快速在当前文件夹打开一个命令行窗口。（此处我的 powershell 是自己升级过的，系统自带的是没有带 preview 的。）</p><p><img src="/img/2022/2022-04-11_09-58-00.jpg" alt="2022-04-11_09-58-00"></p><p>执行这条命令就可以解压了</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">./zstd<span class="selector-class">.exe</span> -d Fedora-riscv64-jh7100-developer-xfce-Rawhide-<span class="number">20211226</span>-<span class="number">214100</span><span class="selector-class">.n</span>.<span class="number">0</span>-sda.raw\<span class="selector-class">.zst</span> -o Fedora-riscv64-jh7100-developer-xfce-Rawhide-<span class="number">20211226</span>-<span class="number">214100</span><span class="selector-class">.n</span>.<span class="number">0</span>-sda.raw</span><br></pre></td></tr></table></figure><p>解压出来的文件差不多 13G，可以使用写盘工具将它写入内存卡中，例如 etcher。</p><h3 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h3><p>之后将内存卡插入开发板，使用 HDMI 线连接显示器，通电开机，便可进入 Fedora 了。</p><p>默认的用户名是 riscv</p><p>密码是 starfive</p><p>这台设备的桌面体验，我感觉还是比较差的，毕竟没有 GPU，而已本身也只是双核而已，所以桌面体验会有一些卡顿。很快我就放弃用鼠标来控制它了，而是选择在电脑上通过 ssh 来控制它。</p><p><img src="/img/2022/visionfive-neofetch.jpg" alt="visionfive-neofetch"></p><h3 id="如何通过-gpio-控制-LED-灯？"><a href="#如何通过-gpio-控制-LED-灯？" class="headerlink" title="如何通过 gpio 控制 LED 灯？"></a>如何通过 gpio 控制 LED 灯？</h3><p>通过这个网页，我们可以了解到这块板子的 GPIO 信息</p><p><a href="https://rvspace.org/en/Product/General/StarFive_40-Pin_GPIO_Header_User_Guide">https://rvspace.org/en/Product/General/StarFive_40-Pin_GPIO_Header_User_Guide</a></p><p><img src="/img/2022/visionfive-gpio.jpg" alt="img"></p><p>准备一颗 LED 灯，一头连接 34 号的 GND，一头连接 40 号的 GPIO0</p><p><img src="/img/2022/LED-off.jpg" alt="LED-off"></p><p>在终端里进行如下的操作（需要 root 身份来执行）</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cd /sys/<span class="keyword">class</span>/<span class="symbol">gpio</span></span><br><span class="line"><span class="symbol">echo</span> <span class="symbol">448</span> &gt; <span class="symbol">export</span></span><br><span class="line"><span class="symbol">cd</span> <span class="symbol">gpio448</span></span><br><span class="line"><span class="symbol">echo</span> <span class="symbol">out</span> &gt; <span class="symbol">direction</span></span><br><span class="line"><span class="symbol">echo</span> <span class="symbol">1</span> &gt; <span class="symbol">value</span></span><br></pre></td></tr></table></figure><p>这样便可以点亮 LED 灯</p><p><img src="/img/2022/LED-on.jpg" alt="LED-on"></p><p>如果想熄灭它，只需执行</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">echo</span> <span class="number">0</span> &gt; value</span><br></pre></td></tr></table></figure><p>官方文档里的这个表格非常重要，刚才我们控制 GPIO0，操作的是 448，如果现在我们想控制 GPIO4，从表格可以查到是 452，那么只需将刚才的 448 换成 452 即可让 GPIO4 输出高电平。</p><p><img src="/img/2022/gpio%E8%A1%A8%E6%88%AA%E5%9B%BE.jpg" alt="gpio"></p><p>对此我写了一个 Python 脚本，作用是监控哔哩哔哩上面是否有人给我发私信，也就是我是否有未读消息，如果有的话，则点亮 LED 灯。而当我看完消息后，脚本检测到目前没有未读消息了，则会将 LED 灯熄灭。</p><p>脚本已放在 GitHub 上面，有兴趣的朋友可以参考一下。</p><p><a href="https://github.com/powersee/bilibili_unread/blob/master/bili-for-visionfive.py">https://github.com/powersee/bilibili_unread/blob/master/bili-for-visionfive.py</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;visionfive 是赛昉科技推出的一款开发板，使用的处理器是他们自家研发的【惊鸿 7100】（JH7100），这是一颗 risc-v 架构的处理器，双核 U74，U74 对标的是 ARM 的 Cortex-A55 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2022
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="python" scheme="https://powersee.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pve去除订阅提示</title>
    <link href="https://powersee.github.io/2022/04/pve-remove-notice/"/>
    <id>https://powersee.github.io/2022/04/pve-remove-notice/</id>
    <published>2022-04-09T13:45:14.000Z</published>
    <updated>2022-04-09T13:48:21.063Z</updated>
    
    <content type="html"><![CDATA[<p>pve 每次登录时，都会弹出一个提示</p><p><img src="/img/2022/pve-subscription-notice.jpg"></p><p>看着挺烦的，如何去掉它呢？网上一搜很容易就找到解决方案，这里记录一下。我目前使用的版本是 7.1-7</p><p>参考文章：<a href="https://johnscs.com/remove-proxmox51-subscription-notice/">Remove Proxmox Subscription Notice (Tested to 7.1-10) | John’s Computer Services (johnscs.com)</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -Ezi.bak &quot;s/(Ext.Msg.show\(\&#123;\s+title: gettext\(&#x27;No valid sub)/void\(\&#123; \/\/\1/g&quot; /usr/share/javascript/proxmox-widget-toolkit/proxmoxlib.js</span><br></pre></td></tr></table></figure><p>上面这一步是备份 <code>proxmoxlib.js</code> 为 <code>proxmoxlib.js.bak</code>，然后修改 <code>proxmoxlib.js</code> 里的 “Ext.Msg.show” 为 “void”</p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> pveproxy.service</span><br></pre></td></tr></table></figure><p>之后重启一下服务即可。</p><p>这里记录一个坑，之前看到另外一个教程，是修改 <code>/usr/share/pve-manager/js/pvemanagerlib.js</code> 这个文件的，但是要修改的内容我找不到，然后我自己摸索，看到可能是这个提示相关的代码，我就用 <code>#</code>将它注释掉。结果悲剧了。</p><p>本来打算修改 js 文件，去掉 pve 的订阅提示，却不小心在 js 里面用 # 来注释，导致了重启 pve 的管理面板服务之后，web 端打开时一片空白，什么都不显示，重启机器也没用。</p><p>好在 ssh 还可以连接进去，所以我再次修改 js 文件，将之前的 <code>#</code> 去掉，再执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart pveproxy.service</span><br></pre></td></tr></table></figure><p>就救回来了。看来 pve 的版本不同，js 内容也会不同的，大家找教程的时候记得留意一下版本是否对应。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pve 每次登录时，都会弹出一个提示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2022/pve-subscription-notice.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;看着挺烦的，如何去掉它呢？网上一搜很容易就找到解决方案，这里记录一下。我目前使用的版本是 7.1-7&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>千万别用松鼠记账</title>
    <link href="https://powersee.github.io/2022/01/songshujizhang/"/>
    <id>https://powersee.github.io/2022/01/songshujizhang/</id>
    <published>2022-01-24T08:43:35.000Z</published>
    <updated>2022-01-24T08:46:30.279Z</updated>
    
    <content type="html"><![CDATA[<p>松鼠记账，这是一款记账app，我平时主要用来记录日常支出与收入，使用的时间也不短了。到现在应该有一年多了。</p><p>由于我的手机取消了应用商店自动更新 app 的功能，所以一直都是使用旧版本，感觉还不错，没有广告，而且 APP 的推送通知功能，也被我屏蔽了，平时根本不会被打扰到。</p><p>有一天，我心血来潮，试着将它的一个权限【读写手机存储】给关闭了，因为这个功能是用来读取手机里的相片，或者内部存储空间的其它文件的。作为一款记账软件，我记账并不需要上传图片，所以我就把它关了。</p><p>然后就悲剧了，再次打开软件，所有的记账记录全部丢失了。。。一年多快两年的记录，全部都没了。。。</p><p>其实这款软件也是可以注册账号的，登录之后就可以将数据同步在服务器里，不过我之前看到它要求必须用手机号注册才行，就没有注册账号，一直都是单机使用，所以现在数据丢失，也就完全没法找回了，全没了。</p><p>那么是因为关闭这个权限，导致软件没法正常运行吗？其实并不是，因为我丢失数据之后，继续关闭这个权限使用，是可以正常用的，这个权限并不是必须的。总之这点我就当作是它的一个 bug 吧，之后我就老老实实用手机号注册一个账号，避免以后又发现数据丢失的情况。</p><p>那么就这样使用了一段时间，然后又发生了一件事。我的手机一直提示我，可以升级 miui12.5 稳定版了，快点升级快点升级，但是我不想升级，因为我没看到升级后能给我带来什么新的功能。</p><p>然而它也不会放任我不升级，它每天都会给我来一条推送，我想禁止它的通知功能，但是因为【系统升级】是系统级应用，没法禁止。我只能每天都手动把这条升级通知给清除掉。</p><p>终于有一天，我忍受不了了，我想砸手机，但是舍不得，所以还是被逼得只能去升级系统了，垃圾 MIUI。</p><p>那么回到主线，升级之后，松鼠记账这个 APP 会闪退。那么我想到的是，可能是 APP 版本太老了吧，毕竟我一直没去升级 APP 版本，可能和现在的 MIUI 12.5 有冲突吧。于是我就升级 APP 到最新的。</p><p>于是我升级完 APP 回来了，然后我震惊了。现在打开 APP 有开屏广告了，APP 底部多了返利的标签页，记账页面显示开通 VIP 可以无广告，你不开通的话，每记一次帐，就给你弹一次广告。那么就开通 VIP 吧，毕竟人开发一款 APP 也不容易嘛。</p><p>价格是多少呢？</p><p>11.9 元，每个月，每个月，<strong>每个月</strong></p><p>我他妈震惊了，人家 B 站会员，打折的时候一年一百出头，购买后大量动漫、电影、电视剧可以观看。人家百度网盘每年 11 月购买会员有优惠，一年 svip 价格不到 200 ，购买后可以扩大网盘空间，可以高速下载从网上转存的大量资源。</p><p>而你一个记账软件，一个月会员费收 12 块，主要作用是去掉记账时的广告…… 我觉得我要是去充值那我肯定就是智障了。而且我也后悔了，升级之前为什么没有看看应用商店里，其它网友的评论呢？要是早看到我肯定不会去升级的。</p><p><img src="/img/2022/Screenshot_2022-01-24-13-14-37-156_com.xiaomi.market.jpg" alt="com.xiaomi.market"></p><p>不过也好，越早知道它们吃相这么难看，才能够越早转移。于是我开始寻找其它的记账 APP 来替代它。然而我并没有立刻找到，所以暂时还是需要用到它，于是我把这款软件的联网功能禁止了，不能联网它也没广告了，不过每次打开 APP 到可以记账的页面，大概需要 10 秒才行，因为它好像设定了开屏时会定住几秒，用来显示开屏广告，如果没法联网加载广告图片，会停在那里显示 APP 的开屏页面。</p><h3 id="替代方案——那样记账"><a href="#替代方案——那样记账" class="headerlink" title="替代方案——那样记账"></a>替代方案——那样记账</h3><p>了解来源——GitHub</p><p>我之前在搜索引擎里找，没找到合适的，感觉大多数都是商业公司的产品，我是再也不想 APP 用着用着就给我来一堆广告了，所以那些我都不太想去尝试。然后今天我尝试在 GitHub 上面搜索，因为我想可能也会有人和我一样，只需要一个简单的记录收入和支出的应用而已，并不需要那些花里胡哨的功能。那么应该也有人会尝试自己写一个吧。</p><p>果然，在 GitHub 搜索记账后，出来很多的项目，而第一个结果就是我想要的了</p><p><a href="https://github.com/purezhi/MoneyKeeper">https://github.com/purezhi/MoneyKeeper</a></p><p>不过它最后的更新在 2018 年的 6 月，距今都快 4 年了。然后我根据 readme 跳转到酷安，发现原来作者是一直有更新的，最近的更新是 2021-12-20，版本 6.8.5</p><p><a href="https://www.coolapk.com/apk/188475">那样记账 - 纯粹的记账软件(me.bakumon.moneykeeper) - 6.8.5 - 应用 - 酷安 (coolapk.com)</a></p><p>应用介绍里有这么一段话</p><blockquote><p>没有任何多余的权限，没有广告，没有用户系统，不保存用户任何信息，只是单纯的记录收支情况，做一些明了的统计，通过清楚的了解钱花在了哪，来建立起良好的消费习惯。 </p></blockquote><p>我很喜欢这样的软件，很纯粹，很轻量，安装包只有 5.3M，里面不会弹广告，备份可以使用本地备份和云备份，数据都是备份为 zip 压缩包的。云备份是通过 webdav 来实现的，使用我非常熟悉的坚果云就行。里面可以开通永久会员，价格是 21 元，不是一个月，也不是一年，而是 21 元买断。承诺永久无广告，不过目前这个 APP 好像也没有广告，所以目前会员的作用是可以使用不同的主题和图标包。不过我认为默认的图标就挺好看的了。</p><p>设置里面可以把【快速记账】的设置勾选上，这样打开 APP 时就自动进入记账页面了，填上金额和选择一个类别就行。软件的速度也很快，从桌面点击打开到记账页面，耗时不到一秒，对比松鼠记账的 10 秒，呵呵。</p><p>我的手机里还有另外一款 APP，也是在 GitHub 了解到的，是一款日记软件，模仿电影《你的名字》里面的 APP 开发的，这款是完全开源的。</p><p><a href="https://github.com/DaxiaK/MyDiary">DaxiaK/MyDiary: In the Movie “-your name.-“ (君の名は。, 你的名字) , “My Diary” of android version. (github.com)</a></p><p>它的备份方式也是通过将数据导出为 zip 压缩包，然后到其它的手机上，导入这个 zip 压缩包就可以恢复数据。也挺好的，开源软件虽然后续就没人维护了，但是只要基本功能都有，不更新也无所谓了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;松鼠记账，这是一款记账app，我平时主要用来记录日常支出与收入，使用的时间也不短了。到现在应该有一年多了。&lt;/p&gt;
&lt;p&gt;由于我的手机取消了应用商店自动更新 app 的功能，所以一直都是使用旧版本，感觉还不错，没有广告，而且 APP 的推送通知功能，也被我屏蔽了，平时根本不
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>品胜 WPR001N 折腾与刷机</title>
    <link href="https://powersee.github.io/2022/01/pisen-wpr001n/"/>
    <id>https://powersee.github.io/2022/01/pisen-wpr001n/</id>
    <published>2022-01-17T14:19:44.000Z</published>
    <updated>2022-01-18T03:19:05.461Z</updated>
    
    <content type="html"><![CDATA[<p>之前买了台品胜路由器，买来之后系统是有缺陷的，没法进入 web 管理界面，最终没办法，只能刷机，于是刷了个 breed 进去。</p><p>但是只有 breed，没有系统固件可以用……所以就放着吃灰了。</p><p>今天有网友说可以帮我编译固件，所以又来折腾它了。</p><p>因为不知道编译好的固件，刷入后会不会出问题，为了避免待会完全变砖，无法挽回。所以先研究一下怎么 ttl 串口连接。</p><p>首先需要拆机，带二维码的为背面，沿着缝隙撬开，有三颗螺丝，拧开后再撬正面的外壳。</p><p>主板上面有三个金属接触点，分别是 RXD, TXD, GND</p><p><img src="/img/2022/Snipaste_22-01-17_22-14-57.jpg" alt="主板"></p><p>一开始我拿杜邦线将它与 CH340G 模块进行连接（GND–GND, TX–RX, RX–TX），我是直接用手按着，然而我还需要接通电源以及操控鼠标，所以一直没法按稳。</p><p>没办法，还是拿出了电烙铁，焊点锡上去吧。结果成了这样（其实也没多牢固，不过比用手按着好很多了）</p><p><img src="/img/2022/Snipaste_22-01-17_22-18-01.jpg" alt="焊锡好"></p><p>之后连接好模块，电脑上可以使用 putty 或者 xshell 来进行串口调试。由于我之前以及刷好 breed 进去了，所以给路由器通电，然后在几秒内按回车键，就可以进入 breed，在浏览器可以通过 <code>192.168.1.1</code> 来访问。</p><p>如果不按回车键的话，就会启动闪存中的系统。然后我就发现了，原来我之前刷进去的 openwrt 固件，是可以启动的</p><p><img src="/img/2022/2022-01-17_19-04-24.jpg" alt="2022-01-17_19-04-24"></p><p><img src="/img/2022/2022-01-17_19-10-16.jpg" alt="2022-01-17_19-10-16"></p><p>通过 ttl 我才知道的，不过它的 web 服务和 wifi 都没有开启，系统能启动成功也没什么用。</p><p>那么 ttl 连接没问题，就可以来折腾看看了。于是我将 @<strong>大电视姬</strong>  发过来的固件，在 breed 中刷入路由器。</p><p>之后路由器自动重启，成功了。</p><p><img src="/img/2022/2022-01-17_20-06-28.jpg" alt="2022-01-17_20-06-28"></p><p>然后，索然无味……就算刷机成功了，又怎样呢？我又不会去使用它，家里面基本所有路由器都比它强，没什么意思。</p><p>固件放到网盘和下载站里，在【路由器】【品胜路由器】中，再次感谢 @<strong>大电视姬</strong></p><p>网盘：<a href="http://veger.ysepan.com/">http://veger.ysepan.com/</a></p><p>下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前买了台品胜路由器，买来之后系统是有缺陷的，没法进入 web 管理界面，最终没办法，只能刷机，于是刷了个 breed 进去。&lt;/p&gt;
&lt;p&gt;但是只有 breed，没有系统固件可以用……所以就放着吃灰了。&lt;/p&gt;
&lt;p&gt;今天有网友说可以帮我编译固件，所以又来折腾它了。&lt;/p
      
    
    </summary>
    
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="路由器" scheme="https://powersee.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>买了两款品胜路由器</title>
    <link href="https://powersee.github.io/2022/01/pisen-router/"/>
    <id>https://powersee.github.io/2022/01/pisen-router/</id>
    <published>2022-01-14T05:54:39.000Z</published>
    <updated>2022-01-14T08:49:19.680Z</updated>
    
    <content type="html"><![CDATA[<p>最近从小黄鱼收了台路由器，挺特别的，带耳机孔。</p><p>不过我买的是 WPR001N ，这款只有的 WiFi 速率只有 150M，而另外有一款外形和它一样的，但是速率是 300M。</p><p><img src="/img/2022/001N.jpg" alt="001N"></p><p>原本以为它们就这点区别而已，买来后才发现并不是，区别还是挺多的。</p><p>首先它们的外形还有一点不同的，就是 300M 这款是有两个网口的，而我的这款 150M 的，它的网口只有一个。其次它们的型号也不同，我这个是 WPR001N ，而那款是 WPR003N，所以导致了，它们的固件是不通用的。</p><p><img src="/img/2022/001N-rj45.jpg" alt="001N"></p><p>所以如果你是为了刷机，那么应该多花点钱买 300M 那款。不过其实我个人并不建议买这玩意来刷 openwrt，毕竟它最大的价值是那个 3.5mm 耳机接口，而刷机之后，接口就没法用了。只能作为普通的路由器使用。</p><p>但是作为普通路由器，它在目前看来，又太弱了。比它更好的选择有太多了，例如同样百兆的路由器有：斐讯 k2、极路由、小米路由器等等，这些都是几十块就能买到的，而且网上的固件也很多，很容易找。</p><p>如果价格升到 50 块，那中兴 e8820s 是一个非常好的选择，千兆，带 USB 接口。</p><p>然后说回来，目前我手里的这款，刷机方法教程应该只有恩山的这个帖子：<a href="https://www.right.com.cn/forum/thread-7717621-1-1.html">https://www.right.com.cn/forum/thread-7717621-1-1.html</a></p><p>里面并没有提供 breed ，我自己网上搜了下。</p><hr><p>hackpascal自建的http服务器：<a href="http://breed.hackpascal.net/">http://breed.hackpascal.net/</a></p><p>breed 备份下载地址：</p><p><a href="https://pan.powersee.top/">https://pan.powersee.top/</a></p><p><a href="http://veger.ysepan.com/">http://veger.ysepan.com/</a></p><p>在 【路由器】【品胜路由器wrp001N-breed】里面</p><hr><p>不过目前没找到它可以用的固件，可能得自己去编译才行……</p><h3 id="更奇葩的路由器"><a href="#更奇葩的路由器" class="headerlink" title="更奇葩的路由器"></a>更奇葩的路由器</h3><p>后来我又买了品胜的另外一款路由器——净 音 云路由</p><p><img src="/img/2022/%E5%93%81%E8%83%9C%E8%B7%AF%E7%94%B1%E5%99%A8.jpg" alt="两款路由器"></p><p>这款里面内置风扇，配有海绵，可以用当空气净化器……脑洞非常的大</p><p>当然，它同样有音频输出接口，所以可以连接一个音响，然后使用它配套的 APP——Pisen Cloud，使用这个 APP 可以访问到，插在路由器上面的 U 盘，或者移动硬盘中的文件。它这个 APP 应该是相当古老的，在现在的全面屏手机上面使用时，下面的一节是黑的，不显示内容。</p><p><img src="/img/2022/pisen_cloud_app.png" alt="APP底部"></p><p>我记得下载时官网好像提示要求 Android 版本要在 4.0 及以上。然后我还发现了，这款 APP 似乎完全没要求过权限。如果是其它的 APP，想要获取定位、访问相册、访问手机里的其它文件，手机应该会弹出一个提示权限要求才对。但是这个 APP 完全没有，直接就可以访问了。原来只要保持 APP 兼容旧版本的 Android，就可以无视这些权限要求，还是挺可怕的，陌生 APP 安装要谨慎点。</p><p>对了，这款 APP 想要识别到路由器，需要手机连接到【净 音 云路由】的 WiFi 上，同时还要把手机的定位功能打开，这点是 Android 6 之后的要求，可能这个 APP 诞生时 Android 6 还没发布吧，所以它也没有提示什么的。</p><p>在 APP 里面的闪电互传里，可以播放手机里面的音乐，点击右上角可以将音乐推送到路由器上，也就可以让连接在路由器上的音响出声。其实它就是 dlna 而且，用 网易云音乐 也可以推送，点击歌词界面的右上角就行。但是手机必须连接在品胜路由器的 WiFi 下才行，才可以识别并推送。如果手机和连接在品胜路由器的上级路由，此时是发现不了 dlna 信号的。</p><p><img src="/img/2022/pisen-dlna.jpg" alt="dlna"></p><p>总体体验下来，不是什么好东西，并不实用，不建议购买。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近从小黄鱼收了台路由器，挺特别的，带耳机孔。&lt;/p&gt;
&lt;p&gt;不过我买的是 WPR001N ，这款只有的 WiFi 速率只有 150M，而另外有一款外形和它一样的，但是速率是 300M。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2022/001N.jpg&quot; alt=&quot;0
      
    
    </summary>
    
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="路由器" scheme="https://powersee.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客2022年瞎折腾</title>
    <link href="https://powersee.github.io/2022/01/hexo-2022/"/>
    <id>https://powersee.github.io/2022/01/hexo-2022/</id>
    <published>2022-01-12T03:21:54.000Z</published>
    <updated>2022-01-12T08:40:27.245Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我的博客一直使用 hexo 部署的，之前还有同步到 gitee 上，后来 gitee 提示我说有内容违规，把 gitee page 给我关了，还要我自己去审查我哪里违规。。。</p><p>那就算了，不用 gitee 了，现在主要部署在 GitHub 上面。</p><h3 id="为什么使用-hexo？"><a href="#为什么使用-hexo？" class="headerlink" title="为什么使用 hexo？"></a>为什么使用 hexo？</h3><p>主要原因有，文档可以使用 Markdown，博客可以部署到 GitHub pages（免费），迁移不难（相对于 WordPress 来说）。说起来我这博客还真的迁移了好几次了，之前在黑苹果上，后来迁移到 win7，之后到 win10，现在迁移到 Mac mini M1</p><p>前段时间也了解到有一个和 hexo 差不多的，可以将 Markdown 渲染为 HTML，然后可以部署到 GitHub pages 的项目——<a href="https://vuepress.vuejs.org/zh/">VuePress (vuejs.org)</a></p><p>不过我还没去深入了解，毕竟 hexo 我也用了好几年了，其实主题方面也花了不少时间去折腾，才达到了自己勉强满意的效果，如果换其它的，之前的时间感觉就白费了，而且可以又得花时间去了解、去调整到自己满意的效果。</p><p>所以既然现在 hexo 还能用，就继续用就行了。</p><h3 id="本次迁移过程中遇到的问题"><a href="#本次迁移过程中遇到的问题" class="headerlink" title="本次迁移过程中遇到的问题"></a>本次迁移过程中遇到的问题</h3><p>步骤是安装 nodejs 先，我是直接下载 tar 压缩包，解压后将 bin 文件夹路径添加到环境变量中的，执行 node -v 和 npm -v 查看版本，成功显示既可。</p><p>之后参考 hexo 官网安装，然后把之前备份的 hexo 博客项目拉取回来，进入博客根目录，执行 npm install 安装依赖。</p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>完成后就碰到问题了，执行 hexo d 无法将内容部署到 GitHub 上面。显示</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Copying <span class="built_in">files</span> <span class="built_in">from</span> public <span class="built_in">folder</span></span><br></pre></td></tr></table></figure><p>后就报错了</p><p>那么就网上搜搜看别人的解决方法，于是找到了。</p><p><a href="https://www.zhihu.com/question/443396119">求解hexo d把文件复制到deploy文件夹就没用然后了？ - 知乎 (zhihu.com)</a></p><blockquote><p>我也遇到了这个问题，这是我在GitHub上看到的某位大佬的办法，先把原来的hexo-deployer-git插件卸载了，然后直接从 master 分支安装<br>npm un hexo-deployer-git<br>npm i hexojs/hexo-deployer-git</p><p>作者：cc666<br>链接：<a href="https://www.zhihu.com/question/443396119/answer/1721530396">https://www.zhihu.com/question/443396119/answer/1721530396</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>接着遇到了第二个问题，就是 public 文件夹内的 html 文件，内容都是空白的。</p><p>那么这个具体是怎么解决的呢？其实我也不太清楚，我的操作过程是，升级看看。</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> audit fix</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> audit fix --force</span><br></pre></td></tr></table></figure><p>然后查看 <code>package.json</code> 发现里的 hexo 版本是 3.7，对比一下 hexo 官网，最新的好像已经是 6 点几了，于是我执行一下</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure><p>然后它就自动变为 6.0.0 了</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hexo&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;6.0.0&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>那么看来已经把 hexo 升级了，于是再来试试 <code>hexo g</code></p><p>这一次生成的 html 文件就又内容了，在执行 <code>hexo d</code> 部署到 GitHub pages，就完成了。</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>然后部署到 GitHub pages 的内容，打开后发现图片没法加载。</p><p>原因是我的博客文章里，图片链接都是以这种方式</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">![Mac_M1_kcc](<span class="symbol">\i</span>mg<span class="symbol">\2</span>021<span class="symbol">\M</span>ac_M1_kcc.png)</span><br></pre></td></tr></table></figure><p>之所以是反斜杠 <code>\</code> ，是因为我之前用的是 win10 ，Windows 里面文件的路径就是用反斜杠的，而在 Linux 或者 macOS 里面，文件路径则是 <code>/</code> ，所以导致现在在浏览器里面，图片的加载路径变为像</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>powersee.github.io<span class="regexp">/2021/</span><span class="number">07</span><span class="regexp">/zte-e8820s/</span>\img\<span class="number">2021</span>\e8820s-ttl.jpg</span><br></pre></td></tr></table></figure><p>这样的了，自然就没法加载出来图片。不过也是很奇怪，我刚才没有升级 hexo 的时候，明明图片是可以加载出来的（刚才在电脑里通过 hexo s 访问 localhost:4000 的时候，图片什么的都是正常的……）</p><p>然后我又查看了一下我的备份博客，我设置它每天凌晨同步 GitHub 上的网页，所以刚才更新的内容，它还没同步过去。然后我发现，其实之前的图片也是有反斜杠的，并且图片可以正常加载。</p><p><img src="/img/2022/%E4%BD%BF%E7%94%A8%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5.jpg"></p><p>等了一会之后，我再去刷新 GitHub pages 搭建的博客，图片大多数也可以加载了。有点莫名其妙。不过我还是使用 vscode 里的查找替换功能，将 <code>\img\2021\</code> 全部替换为 <code>/img/2021/</code> ，以及 2020 年的。</p><p>其实想想也不怎么省心呀，不过还好问题能够解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;我的博客一直使用 hexo 部署的，之前还有同步到 gitee 上，后来 gitee 提示我说有内容违规，把 gitee page 给我关了
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>kindle 漫画制作软件 kindle comic converter 汉化版</title>
    <link href="https://powersee.github.io/2021/12/about-kcc/"/>
    <id>https://powersee.github.io/2021/12/about-kcc/</id>
    <published>2021-12-10T12:20:37.000Z</published>
    <updated>2022-01-12T08:29:09.975Z</updated>
    
    <content type="html"><![CDATA[<p>Kindle Comic Converter 是漫画制作软件，主要是用来讲图片转换为 epub 或者 mobi 格式的文件，方便墨水屏设备阅读。</p><p>项目地址：<a href="https://github.com/ciromattia/kcc">ciromattia/kcc: KCC (a.k.a. Kindle Comic Converter) is a comic and manga converter for ebook readers. (github.com)</a></p><p>最后的更新停留在 2019 年 10 月，最近我也是花了很多的时间在研究这款软件上。最终的成果是在自己的机器上，编译出了新的软件版本。</p><p>目前编译出的有</p><ul><li>Windows 64 位版（win10 和 win7 上都可以用）</li><li>Macos ARM 版（在 M1 芯片的 Mac mini 上可以使用，不需要转译）</li></ul><p><img src="/img/2021/Mac_M1_kcc.png" alt="Mac_M1_kcc"></p><blockquote><p>软件链接：</p><p>蓝奏云：<a href="https://pan.lanzou.com/b0bg5lrub">https://pan.lanzou.com/b0bg5lrub</a> 密码:2ebz</p><p>百度网盘：链接：<a href="https://pan.baidu.com/s/1NWci0kT5NN_XFfv3HETVJw">https://pan.baidu.com/s/1NWci0kT5NN_XFfv3HETVJw</a><br>提取码：psee</p><p>个人下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a> </p><p>在【Windows 应用】和【Mac 应用】文件夹中</p><p>阿里云盘分享不了压缩包，mac 的 dmg 安装包居然也不行。。。</p></blockquote><p><img src="/img/2021/profiles_kcc.png" alt="profiles_kcc"></p><p>并且我还对软件进行了汉化。并且添加多几个预设，如果你们的设备没有在列表里面，其实也没有关系的，选择同样分辨率的设备就行。例如里面的 Boox，我就只添加一个，因为我发现 7.8 英寸的 nova air 和 10.3 英寸的 note X 其实它们的分辨率是一样的，都是1404 * 1872，和 kobo auro ONE 其实也一样，本来是不需要添加进去的。</p><p>但是我发现如果预设选择 kobo 系列的，那么转换出来的文件，后缀是 kepub.epub，看着有点别扭，所以我就添加多一个预设进去了。这样转换出来的 epub 就不会带 kepub。</p><p><img src="/img/2021/kcc-other.jpg" alt="kcc-other"></p><p>如果自己的设备在里面没有相同分辨率的机器，那么可以选择 other，然后自己添加分辨率。</p><p>这里我也把里面的预设的分辨率放出来给大家参考</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;K1&#x27;: (<span class="string">&quot;Kindle 1&quot;</span>, (<span class="number">600</span>, <span class="number">670</span>), Palette4, <span class="number">1.8</span>),</span><br><span class="line">&#x27;K2&#x27;: (<span class="string">&quot;Kindle 2&quot;</span>, (<span class="number">600</span>, <span class="number">670</span>), Palette15, <span class="number">1.8</span>),</span><br><span class="line">&#x27;K34&#x27;: (<span class="string">&quot;Kindle Keyboard/Touch&quot;</span>, (<span class="number">600</span>, <span class="number">800</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;K578&#x27;: (<span class="string">&quot;Kindle&quot;</span>, (<span class="number">600</span>, <span class="number">800</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KDX&#x27;: (<span class="string">&quot;Kindle DX/DXG&quot;</span>, (<span class="number">824</span>, <span class="number">1000</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KPW&#x27;: (<span class="string">&quot;Kindle Paperwhite 1/2&quot;</span>, (<span class="number">758</span>, <span class="number">1024</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KV&#x27;: (<span class="string">&quot;Kindle Paperwhite 3/4/Voyage/Oasis&quot;</span>, (<span class="number">1072</span>, <span class="number">1448</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KPW5&#x27;: (<span class="string">&quot;Kindle Paperwhite 5/Signature Edition&quot;</span>, (<span class="number">1236</span>, <span class="number">1648</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KO&#x27;: (<span class="string">&quot;Kindle Oasis 2/3&quot;</span>, (<span class="number">1264</span>, <span class="number">1680</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;MIX7&#x27;: (<span class="string">&quot;Kindle Oasis 2/3&quot;</span>, (<span class="number">1264</span>, <span class="number">1680</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoMT&#x27;: (<span class="string">&quot;Kobo Mini/Touch&quot;</span>, (<span class="number">600</span>, <span class="number">800</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoG&#x27;: (<span class="string">&quot;Kobo Glo&quot;</span>, (<span class="number">768</span>, <span class="number">1024</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoGHD&#x27;: (<span class="string">&quot;Kobo Glo HD&quot;</span>, (<span class="number">1072</span>, <span class="number">1448</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoA&#x27;: (<span class="string">&quot;Kobo Aura&quot;</span>, (<span class="number">758</span>, <span class="number">1024</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoAHD&#x27;: (<span class="string">&quot;Kobo Aura HD&quot;</span>, (<span class="number">1080</span>, <span class="number">1440</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoAH2O&#x27;: (<span class="string">&quot;Kobo Aura H2O&quot;</span>, (<span class="number">1080</span>, <span class="number">1430</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoAO&#x27;: (<span class="string">&quot;Kobo Aura ONE&quot;</span>, (<span class="number">1404</span>, <span class="number">1872</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;BOOX&#x27;: (<span class="string">&quot;BOOX nova air / note X&quot;</span>, (<span class="number">1404</span>, <span class="number">1872</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoC&#x27;: (<span class="string">&quot;Kobo Clara HD&quot;</span>, (<span class="number">1072</span>, <span class="number">1448</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoL&#x27;: (<span class="string">&quot;Kobo Libra H2O&quot;</span>, (<span class="number">1264</span>, <span class="number">1680</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;KoF&#x27;: (<span class="string">&quot;Kobo Forma&quot;</span>, (<span class="number">1440</span>, <span class="number">1920</span>), Palette16, <span class="number">1.8</span>),</span><br><span class="line">&#x27;OTHER&#x27;: (<span class="string">&quot;Other&quot;</span>, (<span class="number">0</span>, <span class="number">0</span>), Palette16, <span class="number">1.8</span>),</span><br></pre></td></tr></table></figure><p>其实选择不同的预设，只是转换出来的图片分辨率不用而已，但是，好像都是可以正常全屏阅读的，例如我同一本漫画，转为为 ko2 和 kindle（也就是上面的 K578，分辨率为 600 X 800），那么结果在我的 kindle 499 上面都是可以正常阅读，而且明显用 ko2 预设转换出来的漫画，分辨率更高，在 kindle 499 上面看也比较清晰一些。因为选 ko2 转换出来的 mobi 文档，里面的图片分辨率是 1680 X 1264 ，而选择 kindle 转换出来的分辨率则为 600 X 800，所以不管在那台设备，都是高分辨率的图片看起来清晰。</p><p>所以个人感觉，如果可以，尽可能的使用较高分辨率的预设，这样转换出来的图片分辨率比较高，画质更好更清晰，而且可能以后的设备也可以阅读（例如现在有时从网上下载的 kindle 漫画，有些是比较旧的，是当年网友制作给 600 X 800 的设备阅读的，放到 ko2 这个分辨率为 1680 X 1264 的设备看就挺模糊的）。</p><p>当然也不是说分辨率调高就好，现在比较高清的日本漫画资源，分辨率高度方面好像就 2000 多而已，你调个 3、4000 肯定也没用。</p><p><img src="/img/2021/tieba-img-download.jpg" alt="tieba-img-download"></p><p>然后我发现贴吧还是可以下载到挺多漫画图片的，所以我也写了个程序来下载贴吧的高清图片，用着也还不错，图片会按照顺序重命名，所以下载完后，直接把文件夹拖到 kcc 里面就可以转换为 epub 或者 mobi 了，两者可以配合使用。</p><p>对了，kcc 这个软件也是可以将 PDF 漫画，转换为 epub 或者 mobi 的，我之前就有尝试过，将 700 多 M 的 PDF 漫画，拖进去，转换为 mobi 漫画，放到 kindle 上面来阅读。结果会变成两个文件，因为这个软件限制 mobi 格式的文档，最大只能 400M，据说是太大了 kindle 用起来会卡。（作者在论坛说的）</p><p>EPUB 就没有这方面的限制，所以我尝试过把整本漫画转换为 epub，结果生成了一个 1G 多的文档，放到墨案 mix7 上面阅读还挺流畅的。</p><h3 id="12-21-版"><a href="#12-21-版" class="headerlink" title="12.21 版"></a>12.21 版</h3><p><img src="/img/2021/kcc-2021-12-21.jpg" alt="kcc-2021-12-21"></p><p>添加了两个选择框</p><ul><li>禁删 epub</li><li>保持原图</li></ul><p>当我们制作 mobi 漫画时，其实软件是先将图片制作为 epub，然后再使用 kindlegen 将 epub 转换为 mobi，转换完成就把 epub 删除掉。</p><p>如果我们制作的漫画是想要放到网上进行分享的，那么两种格式都保存可能比较好，这样受众会更多一些。所以我添加了一个选项，勾选上就不会删除 epub 了。</p><p>保持原图，就是不对图片进行处理，仅仅是把图片放到 epub 或者 mobi 里面而已，所以不管你的图片是双页，还是留有巨大的白边，它都不管了，直接放进去就行。一些高分辨率图片也可以使用这个功能。</p><h3 id="另类的用法——将-PPT-课件转为-mobi"><a href="#另类的用法——将-PPT-课件转为-mobi" class="headerlink" title="另类的用法——将 PPT 课件转为 mobi"></a>另类的用法——将 PPT 课件转为 mobi</h3><p>这个是网友 @<a href="https://space.bilibili.com/11372531">芊里阿</a>  分享的方法</p><blockquote><p>之前用kindle把ppt转成pdf看，又卡，每一页还显示不全。 用up分享的软件，先把ppt转成图片，然后再转mobi格式的就方便多了（要点那个旋转不切割，不缩放）大家有需要的也可以试试 </p></blockquote><p>如果是直接将 PPT 导出为 PDF，放到 kindle 上面也可以看，但是不能横屏吧。而且 PDF 在 kindle 上面观看，应该是每一页都会全刷，屏闪非常严重。用 mobi 就不会，而且用这个软件可以让图片进行旋转，也就可以全屏观看了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Kindle Comic Converter 是漫画制作软件，主要是用来讲图片转换为 epub 或者 mobi 格式的文件，方便墨水屏设备阅读。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/ciromattia/kcc&quot;&gt;ciromatt
      
    
    </summary>
    
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
      <category term="kindle" scheme="https://powersee.github.io/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>关于 radxa-zero</title>
    <link href="https://powersee.github.io/2021/09/radxa-zero/"/>
    <id>https://powersee.github.io/2021/09/radxa-zero/</id>
    <published>2021-09-17T13:40:18.000Z</published>
    <updated>2022-01-12T08:34:59.833Z</updated>
    
    <content type="html"><![CDATA[<p>最近搞来了一台 radxa zero</p><p><img src="/img/2021/radxa-zero-1.jpg" alt="radxa-zero-1"></p><p>产品信息：<a href="https://forum.radxa.com/t/introduce-the-radxa-zero/6550/">https://forum.radxa.com/t/introduce-the-radxa-zero/6550/</a></p><p>从论坛可以了解到，目前可以在这台机器上运行 TwisterOS、emuelec、coreelec、Android 9、MiniMyth2、Manjaro</p><p>机器到手时，emmc 自带的是 Android 9，之后我开始尝试运行其它的系统。使用 sd 卡成功运行了 TwisterOS 和 EmuELEC，其它的没有启动成功。</p><p>看论坛有人说需要把 emmc 的内容擦除掉，这样机器启动时就会自动加载 sd 卡的系统。那么我也尝试了，没有效果。</p><p>之后又看到有人说要把 uboot 写入烧录了镜像的 sd 中，我也尝试了，还是没法启动。</p><p>那就算了，我还是刷回 Android 9 吧，不然现在 emmc 浪费着有点可惜。</p><p>但是这时我发现，这机器并不能像以往的晶晨机器那样，使用 usb burning tool 来将安卓固件烧录到 emmc 里面。</p><p>然后我又耗费了很多时间去折腾，中间也联系了 radxa 的工作人员，最终发现，只能使用 Ubuntu 物理机才行。</p><p>教程在官方的 wiki 这里：<a href="https://wiki.radxa.com/Zero/install/eMMC_aml_tool">https://wiki.radxa.com/Zero/install/eMMC_aml_tool</a></p><p>在 Ubuntu 上面没有像 Windows 一样的 gui 烧录程序，只能通过脚本来烧录。我一开始在 win10 上面通过虚拟机，执行脚本，将镜像烧录进机器，却一直报错。即使已经设置了 usb 默认连接到虚拟机里面，也不行。尝试了 virtual box 和 VMware，都没有成功。</p><p>后来 radxa 这边的大哥告诉我，他烧录成功是在物理机上面执行的。那么我就抱着最后的希望，我用 t48e 这台小主机，装了一个 ubuntu 20.04 server 版，之后在 win10 上通过 ssh 控制它。</p><p>安装 lrzsz 后将固件传入机器，下载和安装刷机工具。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone flash tool</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/radxa/</span>aml-flash-tool.git</span><br><span class="line"><span class="comment"># install dependency</span></span><br><span class="line">cd aml-flash-tool</span><br><span class="line">./INSTALL</span><br></pre></td></tr></table></figure><p>传入固件后，解压（如果电脑没下载固件的话，也可以在 Ubuntu 里面下载）</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载，看情况</span></span><br><span class="line">wget https:<span class="regexp">//</span>dl.radxa.com<span class="regexp">/zero/im</span>ages<span class="regexp">/android/</span>radxa_zero_android_9_20210708-amlupdate.img.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf radxa_zero_android_9_20210708-amlupdate.img.gz</span><br></pre></td></tr></table></figure><p><img src="/img/2021/radxa-zero-2.jpg" alt="radxa-zero-2"></p><p>之后按住机器背后的按键，使用数据线连接运行着 Ubuntu 的电脑，通过 <code>lsusb</code> 查看是否有识别到名字带 Amlogic 的设备。</p><p>有的话可以进行下一步，执行刷机命令，由于此时固件和脚本放在同一个目录下，所以可以这样执行</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">./aml-flash-tool.sh radx<span class="built_in">a_zero</span>_android_9_20210708-amlupdate.img</span><br></pre></td></tr></table></figure><p>我的执行过程是这样的</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">ver@t48e:~/aml-flash-tool$ ./aml-flash-tool.<span class="keyword">sh</span> radxa_zero_android_9_20210717-amlupdate.img</span><br><span class="line">Unpacking image [OK]</span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">awk: cmd. <span class="built_in">line</span>:<span class="number">1</span>: warnin<span class="variable">g:</span> regexp <span class="built_in">escape</span> sequence `\<span class="comment">&quot;&#x27; is not a known regexp operator</span></span><br><span class="line">Initializing ddr ........[OK]</span><br><span class="line">Running <span class="keyword">u</span>-boot ........[OK]</span><br><span class="line">Create partitions [OK]</span><br><span class="line">Writing device tree [OK]</span><br><span class="line">Writing bootloader [OK]</span><br><span class="line">Wiping  data partition [OK]</span><br><span class="line">Wiping  cache partition [OK]</span><br><span class="line">Writing boot partition [OK]</span><br><span class="line">Writing dtbo partition [OK]</span><br><span class="line">Writing logo partition [OK]</span><br><span class="line">Writing odm partition [OK]</span><br><span class="line">Writing product partition [OK]</span><br><span class="line">Writing recovery partition [OK]</span><br><span class="line">Writing <span class="built_in">system</span> partition [OK]</span><br><span class="line">Writing vbmeta partition [OK]</span><br><span class="line">Writing vendor partition [OK]</span><br><span class="line">Resetting board [OK]</span><br><span class="line">ver@t48e:~/aml-flash-tool$</span><br></pre></td></tr></table></figure><p>那么就成功刷好了，之后重启机器就进入 Android 9 了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近搞来了一台 radxa zero&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2021/radxa-zero-1.jpg&quot; alt=&quot;radxa-zero-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;产品信息：&lt;a href=&quot;https://forum.radxa.com/t/introd
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>中兴e8820s路由器</title>
    <link href="https://powersee.github.io/2021/07/zte-e8820s/"/>
    <id>https://powersee.github.io/2021/07/zte-e8820s/</id>
    <published>2021-07-25T07:11:50.000Z</published>
    <updated>2022-01-12T08:34:59.833Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2021/zte-e8820s.jpg" alt="zte-e8820s"></p><p>参考帖子：<a href="https://www.right.com.cn/forum/thread-4046951-1-1.html">中兴8820S与8820V2比较及TTL刷机</a></p><p>相关文件：</p><p>网盘：<a href="http://veger.ys168.com/">http://veger.ys168.com/</a><br>个人下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top</a></p><p>padavan 固件下载：<a href="https://opt.cn2qq.com/padavan">https://opt.cn2qq.com/padavan</a></p><p>选择 ZTE_E8820S 开头的</p><p>这台路由器想刷机的话，需要自己焊接针脚。</p><p><img src="/img/2021/e8820s-ttl.jpg" alt="e8820s-ttl"></p><p>我使用的模块是 CH340</p><p><img src="/img/2021/e8820s-ttl2.jpg" alt="e8820s-ttl2"></p><p>软件的选择有很多，可以用 putty，也可以用 xshell。</p><ul><li>连接上之后，使用账号密码进行登录。</li><li>之后将 breed 放在 U 盘中，插入路由器</li><li>路由器进入 U 盘所在目录</li><li>备份原系统</li><li>写入 breed</li><li>重启</li></ul><p><img src="/img/2021/command-zte.png" alt="14.command-zte"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/2021/zte-e8820s.jpg&quot; alt=&quot;zte-e8820s&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考帖子：&lt;a href=&quot;https://www.right.com.cn/forum/thread-4046951-1-1.html&quot;&gt;中兴8820
      
    
    </summary>
    
    
      <category term="路由器" scheme="https://powersee.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>vscode 修改默认终端</title>
    <link href="https://powersee.github.io/2021/07/vscode-change-default-terminal/"/>
    <id>https://powersee.github.io/2021/07/vscode-change-default-terminal/</id>
    <published>2021-07-18T13:37:21.000Z</published>
    <updated>2022-01-12T08:34:59.833Z</updated>
    
    <content type="html"><![CDATA[<p>vscode 默认新建终端的话，开启的是一个 cmd 的 shell，如何将它改为其它的呢？例如 powershell。</p><p>首先点击左下角的进入设置，也可以用快捷键 <code>ctrl + ,</code> </p><p>点击【功能】，【终端】，修改如下图两个地方即可。</p><p><img src="/img/2021/vscode-settings.jpg" alt="vscode-settings"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vscode 默认新建终端的话，开启的是一个 cmd 的 shell，如何将它改为其它的呢？例如 powershell。&lt;/p&gt;
&lt;p&gt;首先点击左下角的进入设置，也可以用快捷键 &lt;code&gt;ctrl + ,&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;点击【功能】，【终端】，修改如下图两
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>路由器和软路由速度记录</title>
    <link href="https://powersee.github.io/2021/07/router-speed/"/>
    <id>https://powersee.github.io/2021/07/router-speed/</id>
    <published>2021-07-05T01:25:59.000Z</published>
    <updated>2022-01-12T02:42:43.025Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录测试过的路由器和软路由设备，它们的出国速度表现。</p><p>由于家里的移动宽带，目前最高只能跑到 440-450 mbps 左右，所以有些性能较强的设备，目前没有条件测出它的极限，见谅。</p><table><thead><tr><th align="left">设备型号</th><th>出国速度（Mbps）</th></tr></thead><tbody><tr><td align="left">章鱼星球 S912</td><td>440（已达到宽带极限，未知上限）</td></tr><tr><td align="left">小米 CR6608 （mt7621）</td><td>80</td></tr><tr><td align="left">JCG Q20</td><td>80</td></tr><tr><td align="left">我家云 rk3328</td><td>300</td></tr><tr><td align="left">D2550</td><td>210（ssr 可以到 390）</td></tr><tr><td align="left">k2p</td><td>80</td></tr><tr><td align="left">树莓派4B</td><td>415</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录测试过的路由器和软路由设备，它们的出国速度表现。&lt;/p&gt;
&lt;p&gt;由于家里的移动宽带，目前最高只能跑到 440-450 mbps 左右，所以有些性能较强的设备，目前没有条件测出它的极限，见谅。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;l
      
    
    </summary>
    
    
      <category term="路由器" scheme="https://powersee.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="openwrt" scheme="https://powersee.github.io/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>小米WiFi6路由器--cr660x</title>
    <link href="https://powersee.github.io/2021/06/xiaomi-cr660x/"/>
    <id>https://powersee.github.io/2021/06/xiaomi-cr660x/</id>
    <published>2021-06-22T03:07:40.000Z</published>
    <updated>2022-01-12T08:34:59.925Z</updated>
    
    <content type="html"><![CDATA[<ul><li>6606 — 联通</li><li>6608 — 移动</li><li>6609 — 电信</li></ul><p>配置</p><blockquote><p>soc mt7621 双核 880mhz</p><p>rom 128M</p><p>ram 256M</p><p>全千兆 1 WAN   3 LAN</p><p>支持 WiFi6、mesh</p></blockquote><p>刷机的难点在于解锁 ssh ，不同于其它的小米路由器，这台解锁需要用到一台 openwrt 路由器来辅助，比较麻烦点。</p><p>xqsystem.lua</p><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">module(<span class="string">&quot;luci.controller.admin.xqsystem&quot;</span>, package.seeall)</span><br><span class="line"></span><br><span class="line">function<span class="meta"> index(</span>)</span><br><span class="line">    local <span class="meta">page</span>   = node(<span class="string">&quot;api&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.target  = firstchild()</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">title</span>   = (<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">order</span>   = 100</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">index</span> = true</span><br><span class="line">    <span class="meta">page</span>   = node(<span class="string">&quot;api&quot;</span>,<span class="string">&quot;xqsystem&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.target  = firstchild()</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">title</span>   = (<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">order</span>   = 100</span><br><span class="line">    <span class="meta">page</span>.<span class="meta">index</span> = true</span><br><span class="line">    entry(&#123;<span class="string">&quot;api&quot;</span>, <span class="string">&quot;xqsystem&quot;</span>, <span class="string">&quot;token&quot;</span>&#125;, <span class="meta">call</span>(<span class="string">&quot;getToken&quot;</span>), (<span class="string">&quot;&quot;</span>), 103, 0x08)</span><br><span class="line"><span class="meta">end</span></span><br><span class="line"></span><br><span class="line">local LuciHttp = require(<span class="string">&quot;luci.http&quot;</span>)</span><br><span class="line"></span><br><span class="line">function getTok<span class="meta">en(</span>)</span><br><span class="line">    local result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&quot;code&quot;</span>] = 0</span><br><span class="line">    result[<span class="string">&quot;token&quot;</span>] = <span class="string">&quot;; nvram set ssh_en=1; nvram commit; sed -i &#x27;s/channel=.*/channel=\&quot;debug\&quot;/g&#x27; /etc/init.d/dropbear; /etc/init.d/dropbear start;&quot;</span></span><br><span class="line">    LuciHttp.write_js<span class="meta">on(</span>result)</span><br><span class="line"><span class="meta">end</span></span><br></pre></td></tr></table></figure><p>如果会用 vi 的话，自己 ssh 进去之后，创建文件，将内容粘贴进去即可。</p><p>不会的话，可以使用 winscp 连接旧路由器，将 <code>xqsystem.lua</code> 文件拖进去，放在这个目录里</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/lua/</span>luci<span class="regexp">/controller/</span>admin/</span><br></pre></td></tr></table></figure><p>之后修改修改旧路由器的 ip 地址为 <code>169.254.31.1</code> ，并且把 dhcp 关闭</p><p>用浏览器访问：<a href="http://169.254.31.1/cgi-bin/luci/api/xqsystem/token">http://169.254.31.1/cgi-bin/luci/api/xqsystem/token</a></p><script type="text/javascript">    function mergeText()    {        document.getElementById('link1').innerText =         'http://192.168.10.1/cgi-bin/luci/;stok=' +            document.getElementById('stok').value +             '/api/misystem/extendwifi_connect?ssid='+            document.getElementById('ssid').value +            '&password='+            document.getElementById('passwd').value;         document.getElementById('link2').innerText =         'http://192.168.10.1/cgi-bin/luci/;stok=' +        document.getElementById('stok').value +         '/api/xqsystem/oneclick_get_remote_token?username=xxx&password=xxx&nonce=xxx';    }</script>你的 stok         <input type="text" id="stok" onkeyup="mergeText()" /><br/>你的 wifi 名     <input type="text" id="ssid" onkeyup="mergeText()" /><br/>你的 wifi 密码 <input type="text" id="passwd" onkeyup="mergeText()" /><br/><pre id="link1">填好自动生成链接</pre>第二个链接<pre id="link2">填好自动生成链接</pre><p>之后使用 winscp 连接小米路由器，将 <code>pb-boot.img</code> 放到 <code>tmp</code> 目录中，接着使用命令将它写入 Bootloader</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">mtd <span class="keyword">write</span> <span class="regexp">/tmp/</span>pb-boot.img Bootloader</span><br></pre></td></tr></table></figure><p>到此路由器的原系统就没了，现在断电重启，机器会自动进入 pb-boot ，在浏览器访问 192.168.1.1，可以进入刷机界面，如果要刷 openwrt 的话，需要先刷入 factory.bin 结尾的固件。</p><p><img src="/img/2021/cr6608.jpg" alt="cr6608"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;6606 — 联通&lt;/li&gt;
&lt;li&gt;6608 — 移动&lt;/li&gt;
&lt;li&gt;6609 — 电信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;soc mt7621 双核 880mhz&lt;/p&gt;
&lt;p&gt;rom 128M&lt;/p&gt;
&lt;p&gt;ra
      
    
    </summary>
    
    
      <category term="路由器" scheme="https://powersee.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="openwrt" scheme="https://powersee.github.io/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>github 拉取项目出错</title>
    <link href="https://powersee.github.io/2021/06/github-clone-error/"/>
    <id>https://powersee.github.io/2021/06/github-clone-error/</id>
    <published>2021-06-07T08:19:09.000Z</published>
    <updated>2022-01-12T02:42:43.023Z</updated>
    
    <content type="html"><![CDATA[<p>今天拉取 GitHub 上面的项目时，发现一直出错。</p><figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="symbol">&#x27;https</span>://github.com/xxxx/xxxxx/&#x27;: gnutls_handshake() failed: <span class="literal">Error</span> <span class="keyword">in</span> the pull <span class="keyword">function</span>.</span><br></pre></td></tr></table></figure><p>最终发现，开代理就行，唉</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//192.168.123.69:7890</span></span><br><span class="line">alias pon=<span class="string">&#x27;export http_proxy=<span class="subst">$url</span>; export https_proxy=<span class="subst">$url</span>&#x27;</span></span><br><span class="line">pon</span><br></pre></td></tr></table></figure><p>我电脑的 ip 是 192.168.123.69 ，使用的代理软件是 clash ，把 allow lan 的开关打开后，局域网的其它设备就能使用电脑的代理。7890 是 clash 默认的端口，如果使用 ssr 默认是 1080。</p><p>另外一种方法</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> http<span class="variable">.proxy</span> http:<span class="comment">//127.0.0.1:10809</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> https<span class="variable">.proxy</span> https:<span class="comment">//127.0.0.1:10809</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天拉取 GitHub 上面的项目时，发现一直出错。&lt;/p&gt;
&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fatal: unable &lt;span cla
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用 telethon 来定时发送消息</title>
    <link href="https://powersee.github.io/2021/06/telethon-auto-reply/"/>
    <id>https://powersee.github.io/2021/06/telethon-auto-reply/</id>
    <published>2021-06-02T13:49:39.000Z</published>
    <updated>2022-01-12T08:34:59.925Z</updated>
    
    <content type="html"><![CDATA[<p>今天介绍一个 python 库 —— telethon，使用它我们可以在 Linux 服务器上登录 telegram，可以获取群消息、联系人，以及今天要重点介绍的自动发送消息。</p><p>更多的内容可以查看官方文档：<a href="https://docs.telethon.dev/en/latest/">https://docs.telethon.dev/en/latest/</a></p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>首先需要有 python 环境，我这里在 Ubuntu 服务器上面演示的，我用的是 python3</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> telethon</span><br></pre></td></tr></table></figure><p>安装成功后可以通过执行下面这个来检查</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">pytho<span class="symbol">n3</span> -c <span class="string">&quot;import telethon; print(telethon.__version__)&quot;</span></span><br></pre></td></tr></table></figure><p>我目前装的版本是 <code>1.21.1</code></p><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><p>之后来到浏览器，需要申请 API</p><p><a href="https://my.telegram.org/auth?to=apps">https://my.telegram.org/auth?to=apps</a></p><p><img src="/img/2021/2021-06-02_22-00-41.jpg" alt="2021-06-02_22-00-41"></p><p>填写自己的手机号，前面的 <code>+</code> 我是有填的，不知道不填行不行。点击 next 按钮后我们的 telegram 客户端就会收到一条验证消息，验证码是英文字母，还挺长的。</p><p>之后需要创建一个 application ，要填的就是 App title 和 Short name 这两个而已，主要只能 <code>英文字母和数字</code> ，不可以用下划线，并且要在 5-32 个字符之间。可以参考这么填。</p><blockquote><p>App title: firstApp<br>Short name: 12345</p></blockquote><p>完成后可以看到 <code>api_id、api_hash</code> 这两个，把它们保存下来。需要将它们填写到下面的脚本里。</p><h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> telethon <span class="keyword">import</span> TelegramClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use your own values from my.telegram.org</span></span><br><span class="line">api_id = <span class="number">12345</span></span><br><span class="line">api_hash = <span class="string">&#x27;0123456789abcdef0123456789abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The first parameter is the .session file name (absolute paths allowed)</span></span><br><span class="line"><span class="keyword">with</span> TelegramClient(<span class="string">&#x27;anon&#x27;</span>, api_id, api_hash) <span class="keyword">as</span> client:</span><br><span class="line">    client.loop.run_until_complete(client.send_message(<span class="string">&#x27;me&#x27;</span>, <span class="string">&#x27;Hello, myself!&#x27;</span>))</span><br></pre></td></tr></table></figure><p>完成后保存，例如我这里保存为 tele-test.py ，然后通过 <code>python3 tele-test.py</code> 来执行这个脚本。它会让我们输入手机号码，因为这是我们第一次在陌生的设备上登录，之后在 telegram 客户端里我们会收到一个验证码，输入后就可以登录了。（此处手机号前面的 + 我就没填了）</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Please enter your phone (<span class="keyword">or</span> bot <span class="keyword">token</span>): <span class="number">123456789</span></span><br><span class="line">Please enter <span class="keyword">the</span> code you received: <span class="number">11631</span></span><br><span class="line">Signed <span class="keyword">in</span> successfully <span class="keyword">as</span> powersee</span><br></pre></td></tr></table></figure><p>那么这样我们在服务器上面登录了，并且此时也已经成功地发送了一条消息。就是给 <code>me</code> 这个用户发送 <code>Hello, myself!</code> 这条消息。其实就是将这句话，保存到 “保存的消息”里面而已。如果你想发送给其他人，以及修改内容，就修改一下脚本的内容就行。</p><p>里面的 anon 是缓存的密钥，第一次执行脚本后，我们输出手机号和验证码，完成后脚本所在文件夹就会出现一个 <code>anon.session</code> 文件，下次再执行这个脚本就不用输入手机号验证了。你可以将它移动到其它地方，但是记得也修改一下脚本里的内容，如将 acon 改为 <code>/opt/acon</code> 。</p><h3 id="4、"><a href="#4、" class="headerlink" title="4、"></a>4、</h3><p>然后想要实现定时执行的话，需要用到 crontab ，可以轻松实现每天定时发送消息给某个用户。</p><p>如果想让发送时间有些变化的话，可以在 python 里面加入 time 和 random</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">time.sleep(random.randint(<span class="number">5</span>,<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p>这样会随机暂停 5 到 200 秒，因此每次发送消息的时间就不同了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天介绍一个 python 库 —— telethon，使用它我们可以在 Linux 服务器上登录 telegram，可以获取群消息、联系人，以及今天要重点介绍的自动发送消息。&lt;/p&gt;
&lt;p&gt;更多的内容可以查看官方文档：&lt;a href=&quot;https://docs.telet
      
    
    </summary>
    
    
      <category term="python" scheme="https://powersee.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 将服务器打造成全能下载机</title>
    <link href="https://powersee.github.io/2021/05/docker-download-server/"/>
    <id>https://powersee.github.io/2021/05/docker-download-server/</id>
    <published>2021-05-16T00:41:53.000Z</published>
    <updated>2022-01-12T02:42:43.023Z</updated>
    
    <content type="html"><![CDATA[<p>本文建议搭配视频观看：</p><p><a href="https://www.bilibili.com/video/BV1xv411573B/">https://www.bilibili.com/video/BV1xv411573B/</a></p><p>两个 Docker 容器的搭建</p><p>transmission</p><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">docker run <span class="string">\</span></span><br><span class="line">    -d <span class="string">\</span></span><br><span class="line">    --name transmission <span class="string">\</span></span><br><span class="line">    -p <span class="number">9091</span>:<span class="number">9091</span> <span class="string">\</span></span><br><span class="line">    -p <span class="number">51413</span>:<span class="number">51413</span> <span class="string">\</span></span><br><span class="line">    -v /mnt/tr_data:/data <span class="string">\</span></span><br><span class="line">    -e USERNAME=admin <span class="string">\</span></span><br><span class="line">    -e PASSWORD=admin <span class="string">\</span></span><br><span class="line">    gists/transmission</span><br></pre></td></tr></table></figure><p>aria2</p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -<span class="ruby">-name aria2-pro \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-restart <span class="keyword">unless</span>-stopped \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">-network host \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e PUID=<span class="variable">$UID</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e PGID=<span class="variable">$GID</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e RPC_SECRET=<span class="number">12345</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e RPC_PORT=<span class="number">6800</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e LISTEN_PORT=<span class="number">6888</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">v ~<span class="regexp">/aria2-config:/config</span> \</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">v /mnt/<span class="symbol">aria2:</span>/downloads \</span></span><br><span class="line"><span class="ruby"></span>    p3terx/aria2-pro</span><br></pre></td></tr></table></figure><p>使用 python 开启一个简单的文件分享服务</p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">python3 -m http.<span class="keyword">server</span></span><br></pre></td></tr></table></figure><p>此时默认使用 8000 端口</p><p>更好的文件展示服务—— h5ai</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">5555</span>:<span class="number">80</span> -v /mnt:/h<span class="number">5</span>ai --name h<span class="number">5</span>ai ilemonrain/h<span class="number">5</span>ai:full</span><br></pre></td></tr></table></figure><p>最后记得防火墙放行。</p><p>如果你有购买腾讯云轻量服务器的需求，可以点击我的链接进行购买</p><p><a href="https://curl.qcloud.com/i4FBqtLH">https://curl.qcloud.com/i4FBqtLH</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文建议搭配视频观看：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1xv411573B/&quot;&gt;https://www.bilibili.com/video/BV1xv411573B/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两个 Dock
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>乐橙 sn1 刷机经验分享</title>
    <link href="https://powersee.github.io/2021/03/sn1-flash/"/>
    <id>https://powersee.github.io/2021/03/sn1-flash/</id>
    <published>2021-03-27T09:00:06.000Z</published>
    <updated>2022-04-09T13:48:39.390Z</updated>
    
    <content type="html"><![CDATA[<p>刷机关键点，绿联读卡器，<a href="https://detail.tmall.com/item.htm?id=595545521913&skuId=4539873880456">淘宝购买链接</a></p><p>@<strong>88841807849_bili</strong> 这位老哥告诉我的，他说他使用这款读卡器成功刷机了，于是我也就去买来试试看。果然是这样，用其它的读卡器和 U 盘一直不行，用了这款读卡器一下子就成功了。</p><p>另外还要买两样东西：</p><p><a href="https://item.taobao.com/item.htm?id=565486361121&_u=rod6isk7e40">单头电子线 端子线</a></p><p>要选择 4P 的</p><p>usb 转 ttl，我是在拼多多买的，CH340G普通版，价格 6.3 包邮。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>建议还是先备份一下源系统比较好，可以先使用 <code>df -h</code> 看一下硬盘的挂载情况，然后再使用 dd 命令把 emmc 备份出来</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/mmcblk0 <span class="attribute">of</span>=你的硬盘或U盘路径/lecheng.img</span><br></pre></td></tr></table></figure><h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>固件可以到 GitHub 上面下载，<a href="https://github.com/hanwckf/build-imou-sn1/releases">https://github.com/hanwckf/build-imou-sn1/releases</a></p><p>为了方便访问不了 GitHub 的朋友，我也把它们备份到网盘里。</p><p>链接：<a href="https://pan.baidu.com/s/1XncryNlALVXAO4rsVaqP3w">https://pan.baidu.com/s/1XncryNlALVXAO4rsVaqP3w</a><br>提取码：psee</p><p>7z b 分数</p><p><img src="/img/2021/%E4%B9%90%E6%A9%99_sn1_7z_b.jpg" alt="乐橙_sn1_7z_b"></p><p>总分 4283</p><p>参考另外两台设备</p><blockquote><p>N1 3556</p><p>我家云 3457</p></blockquote><p>之后如果想刷回安卓系统，可以进入 U 盘中的 alpine 恢复系统，先用 mount 命令挂载硬盘或者U盘，然后使用 dd 命令讲安卓系统恢复到 mmcblk0</p><p>例如我是这样的</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mount <span class="regexp">/dev/</span>sda1 /mnt</span><br><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/mnt/</span>lecheng.img of=<span class="regexp">/dev/mm</span>cblk0</span><br></pre></td></tr></table></figure><p>刷机教程文章：<a href="https://www.jianshu.com/p/695fa3b0dab5">https://www.jianshu.com/p/695fa3b0dab5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刷机关键点，绿联读卡器，&lt;a href=&quot;https://detail.tmall.com/item.htm?id=595545521913&amp;skuId=4539873880456&quot;&gt;淘宝购买链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;@&lt;strong&gt;88841807849_bili&lt;/
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于乐橙 SN1 一些记录</title>
    <link href="https://powersee.github.io/2021/03/about-sn1/"/>
    <id>https://powersee.github.io/2021/03/about-sn1/</id>
    <published>2021-03-16T05:27:52.000Z</published>
    <updated>2022-01-12T02:42:43.021Z</updated>
    
    <content type="html"><![CDATA[<p>简书刷机教程</p><p><a href="https://www.jianshu.com/p/695fa3b0dab5">https://www.jianshu.com/p/695fa3b0dab5</a></p><p>拆解与介绍</p><p><a href="https://www.mydigit.cn/forum.php?mod=viewthread&amp;tid=139874">https://www.mydigit.cn/forum.php?mod=viewthread&amp;tid=139874</a></p><p>扩展玩法</p><p><a href="https://www.right.com.cn/forum/thread-3773109-1-1.html">乐橙SN1破解补丁包-机顶盒桌面-去限制-开ADB-ROOT-安装未知来源软件</a></p><p><a href="https://post.smzdm.com/p/aoo8oqzn/">乐橙SN1 扩展 Transmission插件， 内置硬盘充分利用 PT必备</a></p><p>由于我依然还是无法刷机，所以只能改为研究怎么折腾原生系统了。</p><h4 id="自带的远程下载软件"><a href="#自带的远程下载软件" class="headerlink" title="自带的远程下载软件"></a>自带的远程下载软件</h4><p>与其它 bt 软件连接的端口，似乎每次都变化。我通过在电脑使用 qb 做种，然后 sn1 下载这个种子资源，了解到 sn1 在 qb 中显示的 客户端 信息为 client_test/1.1.1.0，估计是他们自己搞的一个 BT 软件吧。</p><h4 id="硬盘的路径"><a href="#硬盘的路径" class="headerlink" title="硬盘的路径"></a>硬盘的路径</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/linux/m</span>nt<span class="regexp">/lv/</span></span><br></pre></td></tr></table></figure><h4 id="web-网页的路径"><a href="#web-网页的路径" class="headerlink" title="web 网页的路径"></a>web 网页的路径</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/linux/m</span>nt/web</span><br></pre></td></tr></table></figure><p>我是先 root ，然后通过 ttl 备份原本的系统。再来折腾其它的，建议大家也这么做，这个非常重要，因为这机器现在是没有线刷包的，要是自己搞坏了系统，估计就变砖了。</p><p>root 后是可以恢复出厂设置的，不用担心，而且恢复之后功能都还能用，远程访问、下载这些都在，并且 root 权限依旧，不会因为恢复出厂而丢失。</p><p>折腾主要就是安装 entware ，他人已经写好教程了，大家可以根据超链接跳转过去学习，建议有科学上网环境再来折腾这个，不然很可能安装失败。</p><p><a href="https://post.smzdm.com/p/aoo8oqzn/">乐橙SN1 扩展 Transmission插件， 内置硬盘充分利用 PT必备</a></p><p>这个过程中，需要安装 <strong>busybox</strong> ，我这里安装的是 1.20.2，使用这个版本才可以用 wget 。安装包我上传到网盘里 <a href="http://veger.ys168.com/">http://veger.ys168.com/</a> 在 【手机软件】里面。</p><p>代理可以参考这样</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//192.168.123.69:7890</span></span><br><span class="line">alias pon=<span class="string">&#x27;export http_proxy=<span class="subst">$url</span>; export https_proxy=<span class="subst">$url</span>&#x27;</span></span><br><span class="line">pon</span><br></pre></td></tr></table></figure><p>192.168.123.69 是我电脑的 ip ，不细讲了。</p><p>配置好 entware 之后，还可以装 qb</p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">opkg <span class="keyword">install</span> qbittorrent</span><br></pre></td></tr></table></figure><p>安装完成应用在 /opt/bin 里面，可以通过 /opt/bin/qbittorrent-nox 来运行。</p><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">/opt/bin # qbittorrent-nox </span><br><span class="line">QtSingleCoreApplication: listen <span class="keyword">on</span> <span class="keyword">local</span> socket failed, QLocalServer::listen: <span class="keyword">Name</span> error</span><br><span class="line"></span><br><span class="line">*** Legal Notice ***</span><br><span class="line">qBittorrent <span class="keyword">is</span> a <span class="keyword">file</span> sharing <span class="keyword">program</span>. When you run a torrent, its data will be made available <span class="keyword">to</span> others by means <span class="keyword">of</span> upload. Any content you share <span class="keyword">is</span> your sole responsibility.</span><br><span class="line"></span><br><span class="line">No further notices will be issued.</span><br><span class="line"></span><br><span class="line">Press <span class="string">&#x27;y&#x27;</span> key <span class="keyword">to</span> accept <span class="keyword">and</span> <span class="keyword">continue</span>...</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">******** Information ********</span><br><span class="line"><span class="keyword">To</span> control qBittorrent, access the Web UI at http:<span class="comment">//localhost:8080</span></span><br><span class="line">The Web UI administrator username <span class="keyword">is</span>: admin</span><br><span class="line">The Web UI administrator password <span class="keyword">is</span> still the <span class="keyword">default</span> one: adminadmin</span><br><span class="line">This <span class="keyword">is</span> a security risk, please consider changing your password from <span class="keyword">program</span> preferences.</span><br></pre></td></tr></table></figure><p>第一次运行需要按 y 同意一下。</p><p>想知道能装什么，可以浏览器访问 <a href="http://bin.entware.net/armv7sf-k3.2/">http://bin.entware.net/armv7sf-k3.2/</a></p><p>然后通过查找来查询自己想装的应用。</p><p>不过装好这些应用后，机器重启，自身的 launcher 就打不开了。也就是自身的 nas 功能丢失了。估计是哪里冲突了，暂时还没找到原因。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简书刷机教程&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/695fa3b0dab5&quot;&gt;https://www.jianshu.com/p/695fa3b0dab5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;拆解与介绍&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
      
    
    </summary>
    
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
  <entry>
    <title>关于迅雷赚钱宝二代一些小记录</title>
    <link href="https://powersee.github.io/2021/03/about-zhuanqianbao2/"/>
    <id>https://powersee.github.io/2021/03/about-zhuanqianbao2/</id>
    <published>2021-03-01T12:59:41.000Z</published>
    <updated>2022-01-12T08:34:59.833Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了台 赚钱宝2代，闲鱼买的，30块包邮，有包装，电源适配器，网线。</p><p><img src="/img/2021/2021-03-01_21-01-42.jpg" alt="2021-03-01_21-01-42"></p><p>买这个干什么呢？拿它来赚钱吗？并不是，现在这个好像赚不了钱了吧，不然别人也不会卖。主要是看到恩山上面有刷机的帖子，想买来刷机玩玩。</p><p>论坛帖子：<a href="https://www.right.com.cn/forum/thread-4063295-1-1.html">https://www.right.com.cn/forum/thread-4063295-1-1.html</a></p><p>刷机很简单，下载镜像——<strong>二代线刷无需算号只需改mac后插盘就用.img</strong></p><p>然后使用 usb burning tool 导入，赚钱宝先用双公头 usb 线连接电脑，然后用卡针或者牙签，捅住复位键，再插电源。软件应该就能识别到了，然后就可以点【开始】刷机</p><p><img src="/img/2021/2021-03-01_23-17-35.jpg" alt="2021-03-01_23-17-35"></p><p>完成后拔电源、双公头 usb，再插上网线、电源开机。等待路由器出现 IP，然后就可以通过 ssh 连接上去。</p><p><img src="/img/2021/2021-03-01_21-05-16.jpg" alt="2021-03-01_21-05-16"></p><p>原本以为是 armbian ，刷完才发现，原来是 openwrt，而且精简得不能再精简的，很多命令行工具都没有。里面自带有甜糖，一开机就跑，有兴趣可以去原帖看看。</p><p>我对这个是没什么兴趣，那就把它拆开看看吧。网上一搜好像没有拆机的文章，那只能自己研究了。耗费很长很长的时间，终于把机器拆开了，也拆坏了。</p><p><img src="/img/2021/2021-03-01_23-23-40.jpg" alt="2021-03-01_23-23-40"></p><p>通过这伤痕累累的外壳，也可以想象我拆得好辛苦。</p><p><img src="/img/2021/2021-03-01_23-24-19.jpg" alt="2021-03-01_23-24-19"></p><p>而且主板上的一颗电容也被我弄掉下来了，现在机器无法开机了。</p><p><img src="/img/2021/2021-03-01_23-24-24.jpg" alt="2021-03-01_23-24-24"></p><p>背面长这样，可以焊接排针，用于 ttl 。</p><p><img src="/img/2021/2021-03-01_23-24-31.jpg" alt="2021-03-01_23-24-31"></p><p>正确的拆法应该是，用吹风筒吹机器的正面加热，然后取下上面比较薄的一层壳，应该就能看到 4 颗螺丝，拧开才能取下外壳。而我这种拆法是直接大力出奇迹，在 4 颗螺丝拧紧的情况下，强行将外壳掰开。</p><p>希望后人引以为戒。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近买了台 赚钱宝2代，闲鱼买的，30块包邮，有包装，电源适配器，网线。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2021/2021-03-01_21-01-42.jpg&quot; alt=&quot;2021-03-01_21-01-42&quot;&gt;&lt;/p&gt;
&lt;p&gt;买这个干什么呢？拿它来赚钱吗
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="设备" scheme="https://powersee.github.io/tags/%E8%AE%BE%E5%A4%87/"/>
    
  </entry>
  
</feed>
