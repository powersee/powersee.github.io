<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="https://powersee.github.io/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2023-04-22T16:11:59.036Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令行中的文件管理器 ranger</title>
    <link href="https://powersee.github.io/2023/04/ranger/"/>
    <id>https://powersee.github.io/2023/04/ranger/</id>
    <published>2023-04-22T16:10:57.000Z</published>
    <updated>2023-04-22T16:11:59.036Z</updated>
    
    <content type="html"><![CDATA[<p>ranger 一个开源的文件管理器，目前（2023年04月22日）在 <a href="https://github.com/ranger/ranger">GitHub</a> 上面有 13.2k 颗星。它特别的地方在于，它是在终端里面使用的文件管理器。</p><p>我们可以通过 pip 来安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install ranger-fm</span><br></pre></td></tr></table></figure><p>安装好后，输入 ranger 就可以打开它。</p><p><a href="https://github.com/ranger/ranger/wiki/Official-user-guide">官方用户指导</a></p><p>打开之后默认是分成两栏或者三栏的，我们可以使用方向键来移动。</p><p>其实和 vim 的使用方法很像的，例如输入冒号 : 之后，可以用 set 来开关各种功能。</p><p><img src="/img/2023/ranger-set-command.webp" alt="ranger-set-command"></p><p>我这里输入 <code>:set draw_borders both</code> 来打开边框。敲下回车键之后，边框就出来了。个人感觉这样比较好看，而且区别清晰，更直观。</p><p><img src="/img/2023/ranger-border.webp" alt="ranger-border"></p><p>其实从顶部和底部，我们还可以获取到很多信息。顶部就是当前的路径，和在 Windows 里使用「资源管理器」很像。</p><p>底部可以看到文件的修改时间。右边可以看到磁盘的剩余空间。</p><p>按下键盘上的 g 会弹出快捷指令。此时再按一下 h，就可以跳转到用户目录下。就是 go home。我经常使用它来切换路径。</p><p><img src="/img/2023/ranger-g.webp" alt="ranger-g"></p><p>按下 z 也会弹出指令，主要是更改一些设置</p><p><img src="/img/2023/ranger-z.webp" alt="ranger-z"></p><p>例如按 h 就可以显示隐藏文件。（除了使用 zh 之外，也可以使用退格键Backspace）</p><p>举一个例子，比如说我想查看 postgresql 的配置文件。那么以前我得这么做</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/postgresql</span><br><span class="line">ls</span><br><span class="line">cd 14</span><br><span class="line">ls</span><br><span class="line">cd main</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>不断地使用 cd 和 ls</p><p>但是我现在使用 ranger 的话，效率就提高很多了</p><p>先按 <code>ge</code> 就可以切换到 &#x2F;etc 里面，然后我可以再按 <code>zz</code> 调出过滤器，输入 post，它就会筛选出带 post 的文件或者文件夹。（比 search 好用，search 还得输入文字之后按回车键，filter 是实时的）</p><p><img src="/img/2023/ranger-filter.webp" alt="ranger-filter"></p><p>之后我只需要一直按方向键右 → 来进入文件夹，还可以预览文件的内容。</p><p><img src="/img/2023/ranger-pg-config.webp" alt="ranger-pg-config"></p><p>再说说一些基本操作</p><p>ranger 默认情况下，是使用 vim 来打开文本文件的，例如上面的 conf 或者 py 等等。如果我想使用 nano 来打开，那可以先按 <code>r</code> 再输入 nano 回车。</p><p>删除文件可以用 F8</p><p>复制粘贴，先复制 yy 再粘贴 pp</p><p>剪切粘贴 dd pp</p><p>不过这样只是对单个文件的操作，如果要操作多个，可以先用空格键标记文件，此时文件名会高亮，并且缩进一个字符。</p><p><img src="/img/2023/ranger-space-Mark.jpg" alt="ranger-space-Mark"></p><p>再按一次空格键可以取消标记。</p><p>重命名文件 cw</p><p>我自己给 ranger 设置了别名 rr</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias rr=&#x27;ranger&#x27;</span><br></pre></td></tr></table></figure><p>这样可以更快速地打开它。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>按 g 的时候会弹出很多路径让我们快捷切换。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key          command</span><br><span class="line"> L           cd -r %f</span><br><span class="line"> l           cd -r .</span><br><span class="line"> /           cd /</span><br><span class="line"> r           cd /</span><br><span class="line"> d           cd /dev</span><br><span class="line"> e           cd /etc</span><br><span class="line"> m           cd /media</span><br><span class="line"> M           cd /mnt</span><br><span class="line"> o           cd /opt</span><br><span class="line"> s           cd /srv</span><br><span class="line"> p           cd /tmp</span><br><span class="line"> u           cd /usr</span><br><span class="line"> ?           cd /usr/share/doc/ranger</span><br><span class="line"> v           cd /var</span><br><span class="line"> h           cd ~</span><br><span class="line"> i           eval fm.cd(&#x27;/run/media/&#x27; + os.getenv(&#x27;USER&#x27;))</span><br><span class="line"> R           eval fm.cd(ranger.RANGERDIR)</span><br><span class="line"> g           move to=0</span><br><span class="line"> c           tab_close</span><br><span class="line"> T           tab_move -1</span><br><span class="line"> t           tab_move 1</span><br><span class="line"> n           tab_new</span><br></pre></td></tr></table></figure><p>我们其实是可以自定义这些路径的。我们在终端执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ranger --copy-config=rc.conf</span><br></pre></td></tr></table></figure><p>然后到 ~&#x2F;.config&#x2F;ranger 里面找到这个文件，一共有 700 多行。到 450 行可以看到这些</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">450 map gh cd ~</span><br><span class="line">451 map ge cd /etc</span><br><span class="line">452 map gu cd /usr</span><br><span class="line">453 map gd cd /dev</span><br><span class="line">454 map gl cd -r .</span><br><span class="line">455 map gL cd -r %f</span><br><span class="line">456 map go cd /opt</span><br><span class="line">457 map gv cd /var/log/</span><br></pre></td></tr></table></figure><p>我们可以修改，或者添加都行，例如我添加多一行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map g1 cd /etc/postgresql/14/main/</span><br></pre></td></tr></table></figure><p>那么我只要按 <code>g1</code> 就可以切换到 <code>/etc/postgresql/14/main/</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ranger 一个开源的文件管理器，目前（2023年04月22日）在 &lt;a href=&quot;https://github.com/ranger/ranger&quot;&gt;GitHub&lt;/a&gt; 上面有 13.2k 颗星。它特别的地方在于，它是在终端里面使用的文件管理器。&lt;/p&gt;
&lt;p&gt;我们</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>自建 GitHub 代理服务</title>
    <link href="https://powersee.github.io/2023/04/github-proxy/"/>
    <id>https://powersee.github.io/2023/04/github-proxy/</id>
    <published>2023-04-21T16:08:43.000Z</published>
    <updated>2023-04-21T16:28:09.499Z</updated>
    
    <content type="html"><![CDATA[<p>我的浏览器有装一个<a href="https://github.com/RC1844/FastGithub">油猴脚本</a></p><p>这样我在访问 GitHub 的时候，有一些代理选项。</p><p><img src="/img/2023/image-20230420172817331.webp" alt="image-20230420172817331"></p><p>因为大多数时候，我如果不用梯子，直接点击原链接，是没法下载成功的。</p><p>但是后面的代理链接，有时候也不是很好用，像这种套 cloudflare 的，一天 10 万次居然都能被用完。看来苦逼的国内用户需求还是挺大的。</p><p>它的原理其实也不难。</p><p>原链接：<a href="https://github.com/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_arm64.tar.gz">https://github.com/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_arm64.tar.gz</a></p><p>代理链接：<a href="https://github.rc1844.workers.dev/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_amd64.tar.gz">https://github.rc1844.workers.dev/usefathom/fathom/releases/download/v1.3.1/fathom_1.3.1_linux_amd64.tar.gz</a></p><p>也就是把 <a href="https://github.com/">https://github.com</a> 换成 <a href="https://github.rc1844.workers.dev/">https://github.rc1844.workers.dev</a></p><p>workers.dev 是 cloudflare 的域名，我们也可以自建自己的 worker 来代理 GitHub。需要使用开源项目：<a href="https://github.com/hunshcn/gh-proxy">https://github.com/hunshcn/gh-proxy</a></p><p>项目的 readme 里面也有写怎么自建 worker 代理。网上也有挺多人写教程的，我自己搭建了一个，结果发现，我的网络好像连访问 cf 都不流畅……</p><p>后来了解到，原来是 workers.dev 已经被墙了……</p><p>解决方法是绑定自己的域名，不过它要求域名的 DNS 解析，得是托管在 cloudflare 才行。</p><p>接着我想研究看看搭建在自己的服务器上，反正服务器的流量一般也用不完。</p><p>使用 docker 的话，很快，一行命令就行，没什么难度。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name=&quot;gh-proxy-py&quot; \</span><br><span class="line">  -p 0.0.0.0:80:80 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  hunsh/gh-proxy-py:latest</span><br></pre></td></tr></table></figure><p>不过这镜像有点大，居然要 910MB ……</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hunsh/gh-proxy-py        latest    745d6b4639c3   23 months ago   910MB</span><br></pre></td></tr></table></figure><p>体验一下看到有效果，赶紧把它删了，我这小小的服务器空间宝贵，舍不得。</p><p>我打算部署 python 版本，因为相比之下占用空间就小很多了。</p><p>先把项目克隆到服务器上，然后修改 <code>main.py</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hunshcn/gh-proxy</span><br></pre></td></tr></table></figure><p>需要安装依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install flask requests</span><br></pre></td></tr></table></figure><p>运行起来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 app/main.py</span><br></pre></td></tr></table></figure><p>也是很简单就可以运行起来，看到可以正常访问之后，我再次把 ip 改为 127.0.0.1 端口就随便设置一个，之后再使用反向代理。</p><p>目前我就使用 screen 让它在后台运行着，比较好的处理方式应该是用 systemd。</p><p>观察了下，感觉还行，占用的系统资源并不多。</p><p>我在自己的服务器上搭建了一个，在 cloudflare 的 workers 也搭建一个。之后可以将自己的链接添加到油猴脚本里面。</p><p><img src="/img/2023/my-github-proxy-shadow.webp" alt="my-github-proxy-shadow"></p><p>就是替换掉脚本中原来的，这样我可以在 GitHub 上面点击那个属于自己的按钮。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我的浏览器有装一个&lt;a href=&quot;https://github.com/RC1844/FastGithub&quot;&gt;油猴脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样我在访问 GitHub 的时候，有一些代理选项。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/image-20230</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>自建网站访问统计服务 fathom</title>
    <link href="https://powersee.github.io/2023/04/fathom/"/>
    <id>https://powersee.github.io/2023/04/fathom/</id>
    <published>2023-04-20T16:07:27.000Z</published>
    <updated>2023-04-20T16:08:24.216Z</updated>
    
    <content type="html"><![CDATA[<p>最近给我的博客网站添加上网站统计服务，可以用来记录网站的访问情况。</p><p><img src="/img/2023/fathom-one-week-shadow.webp" alt="fathom-one-week-shadow"></p><p>这是一周的统计情况，比我预期的多。主要来源是：必应、百度、谷歌和 YouTube。访问最多的文章是<a href="/2023/03/tampermonkey-auto-signin/">油猴自动签到</a></p><p>我使用的是 fathom，是一个开源项目，在 <a href="https://github.com/usefathom/fathom">GitHub</a> 上面有 7 千多 star。</p><p>官方有提供一个预编译的 docker 镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 usefathom/fathom:latest</span><br></pre></td></tr></table></figure><p>我观察了下，日常占用内存只有 15MiB，非常轻量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPU %     MEM USAGE / LIMIT     MEM %     NET I/O</span><br><span class="line">0.04%     15.09MiB / 969.6MiB   1.56%     49MB / 33.1MB</span><br></pre></td></tr></table></figure><p>docker 镜像也只有 31.2MB</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usefathom/fathom         latest    51cf88568278   3 years ago     31.2MB</span><br></pre></td></tr></table></figure><p>居然是 3 年前的镜像……</p><p>那么把代码克隆到本地，自己构建新的镜像吧。</p><p>结果失败了，看来是网络问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install: github.com/gobuffalo/packr/v2/packr2@latest: module github.com/gobuffalo/packr/v2/packr2: Get &quot;https://proxy.golang.org/github.com/gobuffalo/packr/v2/packr2/@v/list&quot;: dial tcp 142.251.43.17:443: i/o timeout</span><br><span class="line">The command &#x27;/bin/sh -c go install github.com/gobuffalo/packr/v2/packr2@latest&#x27; returned a non-zero code: 1</span><br></pre></td></tr></table></figure><p>在 vps 上构建就没问题。不过我也不知道更新了那些内容，从网页上看，好像没有任何变化。</p><p>运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 fathom</span><br></pre></td></tr></table></figure><p>如果不是自己构建的，那么用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 usefathom/fathom:latest</span><br></pre></td></tr></table></figure><p>之后我使用反向代理，将 fathom.powersee.top 转发到 8080 端口。</p><p>于是我这样使用了一个星期，好像也没出现什么问题。通过上面的网址，可以访问到 fathom 的 web 界面。</p><p>第一次访问需要设置网站的域名，于是我填了我博客的域名 </p><blockquote><p>powersee.github.io</p></blockquote><p>之后它会给一段 js 代码，把它加入到博客网站的里面就行了。</p><p>我之所以选择它，主要是因为它用的数据库是 sqlite，很轻量，哪怕用 docker 容器运行，镜像大小也只有 30 多 MB。而其它的网站统计服务，很多都是需要使用 MySQL 或者 postgresql，容器很大，太占用服务器空间了。</p><p>相比之下，fathom 可以说是非常轻量小巧。</p><p>如果我们进入容器内，会发现在 &#x2F;app 目录下，就两个文件而已。一个 fathom 可以执行文件，以及 fathom.db 的 sqlite 数据库。</p><p>那看来如果要迁移的话，复制数据库应该就行了。</p><p>其实直接运行 docker 容器应该只是测试用用而已。官方有<a href="https://github.com/usefathom/fathom/blob/master/docs/Installation%20instructions.md">说明文档</a>：建议的用法是下载 release 中的可执行文件，放到 &#x2F;usr&#x2F;local&#x2F;bin，然后写配置文件 <code>.env</code> 设置 NGINX 方向代理、创建 systemd 服务……</p><p>步骤是有点多，但是按照说明一步一步来，也不难。</p><p>不过我目前犹豫是否继续用下去。因为它开源的是 lite 版，很多功能得 Pro 版本才有。例如统计浏览器型号、用户操作系统这些。</p><p>我点进去看它 Pro 版本的收费情况，好家伙，最低一个月 14 刀。</p><p>我打算换其它的统计服务了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近给我的博客网站添加上网站统计服务，可以用来记录网站的访问情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/fathom-one-week-shadow.webp&quot; alt=&quot;fathom-one-week-shadow&quot;&gt;&lt;/p&gt;
&lt;p&gt;这是一周的统计情况，</summary>
      
    
    
    
    
    <category term="web" scheme="https://powersee.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Mac 提取图片中的文字，断网也能用</title>
    <link href="https://powersee.github.io/2023/04/mac-image-to-text/"/>
    <id>https://powersee.github.io/2023/04/mac-image-to-text/</id>
    <published>2023-04-19T16:01:02.000Z</published>
    <updated>2023-04-19T16:05:55.751Z</updated>
    
    <content type="html"><![CDATA[<p>我之前一直以为这个功能是 iOS 才能用的，因为以前有看到 iOS 相关的介绍。</p><p>没想到 Mac 其实也可以使用。方法是：选中一张图片，按空格键预览，之后按 command + A 这两颗按键，也就是全选嘛，图片中的文字就会高亮。然后再按 command + C  复制即可。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/preview-cmd-a.webp" alt="preview-cmd-a"></p><p>了解了一下，原来是 macOS Monterey 12 才有的功能。我之前的系统一直保留在 Big Sur 11，所以没见过这样的功能。</p><p>然后我测试了一下，断网也可以使用的。而且也可以不用按 command + A，点击右下角的图标就行了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/preview-button-text.webp" alt="preview-button-text"></p><p>或者直接用鼠标按住左键来选中文字即可。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/preview-select-text.webp" alt="preview-select-text"></p><p>官方介绍：<a href="https://support.apple.com/zh-cn/guide/preview/prvw625a5b2c/mac">在 Mac 上的“预览”中使用“实况文本”与照片中的文本交互 - 官方 Apple 支持 (中国)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我之前一直以为这个功能是 iOS 才能用的，因为以前有看到 iOS 相关的介绍。&lt;/p&gt;
&lt;p&gt;没想到 Mac 其实也可以使用。方法是：选中一张图片，按空格键预览，之后按 command + A 这两颗按键，也就是全选嘛，图片中的文字就会高亮。然后再按 command + </summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>对象存储到底是什么东西？为何能轻松掏空我们的钱包？</title>
    <link href="https://powersee.github.io/2023/04/about-oss/"/>
    <id>https://powersee.github.io/2023/04/about-oss/</id>
    <published>2023-04-18T16:02:17.000Z</published>
    <updated>2023-04-22T15:29:57.822Z</updated>
    
    <content type="html"><![CDATA[<p>在网上闲逛看到对象存储，我之前以为这东西应该是企业什么的才需要用的吧，对于我们普通个人来说，应该不太会用到。</p><p>但是我对于它还是有些好奇的，然后最近一直在写博客，那我想着，要不把我博客上的图片，放到对象存储上，这样访问起来会快很多。</p><p>腾讯云好像没有免费空间，我的账号点进去没有，看别人好像有。</p><p>之后我看到这篇博文：<a href="https://www.cnblogs.com/Sky-seeker/p/15855538.html">国内外免费对象存储和CDN加速额度 - 梦幻之心星 - 博客园</a></p><p>里面讲到腾讯云可以花 1 块钱买一年 50G 的，于是我就买了一个。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/one-yuan-cos.webp" alt="one-yuan-cos"></p><p>但是还不知怎么使用，以及它的规则是怎么样的，流量超出了是不是会欠费？那么搜索看看别人是怎么用腾讯云 cos 来存博客图片的吧。</p><p>我找到了这篇文章，而且里面还讲了如何为博客的图片设置 CDN。</p><p><a href="https://jdhao.github.io/2020/03/16/tencent_cos_cdn_setup/">腾讯云对象存储博客图床开启 CDN 加速(不需要购买额外域名) - jdhao’s digital space</a></p><p>不过文章是 2020 年写的，到现在已经三年了。目前想要 cdn 只能使用自己已备案的域名才行，看来 cdn 部分难搞，估计只能使用 cos 了。</p><p>看来也挺容易理解，就是把图片放到腾讯云 cos，有点像我们把图片放到网盘里。但是对象存储，它会给我们一个链接，我们可以通过链接来访问放在对象存储中的文件，不需要登录或者输验证码什么的。</p><p>那我这一块钱买的套餐，有 50GB 的存储空间，可以放很多东西嘛。</p><p>可是收费方面我还是没明白。看了腾讯云的免费额度说明</p><blockquote><p>免费额度资源包不可抵扣 <strong>非标准存储容量</strong> 计费项，例如低频存储容量、归档存储容量、请求次数、流量等。</p></blockquote><p>估计就是说，我存 50G 在里面，这个可以免费，但是如果我要访问的话，就需要收费的。</p><p>主要就是——<strong>请求次数、流量</strong></p><p>我昨晚把博客里的 2023 年的图片，全部替换为 cos 的链接，自己测试了博客的速度，还是比较满意的。今天进入控制台看一下数据</p><p>显示外网流量 12.33 MB，请求次数 297。</p><p>腾讯云已经被扣钱了，看来很危险。</p><blockquote><p>【腾讯云】尊敬的腾讯云用户，您好。截至2023-04-13 08:30:24，您的账号（创建者账号ID：100xxx，昵称：powersee）已欠费0.05元，最新一笔扣费为COS 对象存储 结算扣费，扣费金额0.05元；轻量应用服务器-自定义镜像，对象存储，云函数SCF即将停服；轻量应用服务器-自定义镜像，对象存储停服后会继续对部分功能扣费，直至资源销毁。 您可前往“腾讯云助手”小程序查询扣费明细并快速充值，以免影响资源正常使用</p></blockquote><p>因为我的腾讯云账号里面没有余额，所以直接欠费了。欠费之后，连服务器都要给我停掉，明明我的服务器已经预付款了……</p><p>📝记录一下每天的扣费情况，注意⚠️是根据前一天的流量使用情况来扣费的。</p><table><thead><tr><th>日期</th><th>费用</th></tr></thead><tbody><tr><td>4.13</td><td>0.05</td></tr><tr><td>4.14</td><td>0.07</td></tr><tr><td>4.15</td><td>0.06</td></tr><tr><td>4.16</td><td>0.06</td></tr><tr><td>4.17</td><td>0.05</td></tr></tbody></table><p>根据后台的数据，每天的流量是 120MB 左右，每天的费用是 6 分钱左右，感觉还行，我充了一块钱进去，还能用挺多天的。如果一直保持这样，那一个月就 1.8 元。</p><p>想到既然需要按照流量以及访问次数收钱，那我还是开启防盗链吧。里面默认使用的是白名单，所以我填入这三行进去。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powersee.github.io</span><br><span class="line">blog.powersee.top</span><br><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure><p>这样我的博客、备份博客、本地调试都可以正常查看图片，如果别人搬运我的内容，或者通过 rss 订阅，就没法加载图片了。</p><p>后来想想，感觉不太好，又把防盗链给关了。</p><p><strong>试试其它的云</strong></p><p>之后我想着试试「阿里云」、「七牛云」，因为之前也有看到别人使用它们当博客图床。</p><p>但是我了解后感觉不好用。</p><p>阿里云我的账号没有免费试用的资格，甚至连像腾讯这种一块钱的体验套餐都没有，一上来就得花钱买……那既然都要花钱，我何必从腾讯云换到阿里云呢？</p><p>七牛云看着是挺好的，每个月有 10G 存储空间，给 10 万次 get 请求。所以一般个人博客使用是足够的。然而它给的链接是 HTTP 的，然后它好像提示，给的域名只有一个月而已。难道意味着如果想白嫖的话，就得每个月自己去更新一下图片域名？所以是在逼我们绑定自己的域名咯，但是域名又必须用备案的……</p><p>之后我搜到这篇文章：<a href="https://kuizuo.cn/why-i-dont-use-qiniu-cloud/">为什么我不用七牛云 - 愧怍的小站</a></p><p>作者讲到使用 HTTP 的图片在 chrome 会有问题，看来还是不要用七牛。</p><p>这里也吐槽一下，注册七年云，需要填写姓名和身份证号，注册完成后，还需要用微信小程序，人脸识别，才可以使用它的对象存储……当我做完这一切，才知道它只给 http 链接，并且域名只能用 30 天……</p><blockquote><p>七牛测试域名，每个域名每日限总流量 10GB，每个测试域名自创建起 30 个自然日后系统会自动回收，仅供测试使用</p></blockquote><p>而且我注册账号后一两个小时吧，七牛那边就打电话过来了，估计是想推广之类的，不过我说我只想拿来当博客图床，后面再敷衍几句就挂了。</p><p>然后我想着既然用不上，我把账号注销了吧，结果发现，整个网站找不到地方注销账号……总之体验很不好。</p><hr><p>目前还是继续用腾讯云 cos，先不搞， 看看腾讯云一块钱能用多久。实在不行就把图片放 vps 上，或者重新改回 GitHub pages。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网上闲逛看到对象存储，我之前以为这东西应该是企业什么的才需要用的吧，对于我们普通个人来说，应该不太会用到。&lt;/p&gt;
&lt;p&gt;但是我对于它还是有些好奇的，然后最近一直在写博客，那我想着，要不把我博客上的图片，放到对象存储上，这样访问起来会快很多。&lt;/p&gt;
&lt;p&gt;腾讯云好像没有</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用 imagemagick 给图片添加阴影</title>
    <link href="https://powersee.github.io/2023/04/imagemagick-shadow/"/>
    <id>https://powersee.github.io/2023/04/imagemagick-shadow/</id>
    <published>2023-04-17T16:09:42.000Z</published>
    <updated>2023-04-17T16:18:13.236Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档：<a href="https://legacy.imagemagick.org/Usage/blur/#shadow">Bluring and Sharpening – IM v6 Examples (imagemagick.org)</a></p><p>我有一张图片，名为 <code>test.jpg</code> 直接放到博客文章里面，效果是这样的</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/shadow-test.jpg" alt="shadow-test"></p><p>如果加上阴影后，效果是这样的。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/convert-add-shadow.png" alt="convert-add-shadow"></p><p>看起来效果会好很多，特别是当网页背景是白色，图片背景也是白色时，加了阴影可以让图片更为突出。我使用的是这样一条命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert test.jpg \( +clone -background black -shadow 50x20+0+0 \) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure><p><code>-shadow</code> 后面的 <code>50x20+0+0</code> 指的是：</p><p>50：阴影的不透明度</p><p>20：阴影模糊度</p><p>第一个 +0：代表阴影左右偏移</p><p>第二个 +0：代表阴影上下偏移</p><p>假如我改为 <code>50x20+10+10</code>，那么得到的图片是这样的</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/shadow-add10-add10.png" alt="shadow-add10-add10"></p><p>也就是阴影会往右下方偏移。</p><p>现在 <code>-background</code> 用的是 black，也可以改为其它颜色的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert shadow-test.jpg \( +clone -background red -shadow 50x20+10+10 \) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/shadow-red.webp" alt="shadow-red"></p><p>个人感觉用 grey 会比较合适，而且我不喜欢偏移，所以这是我使用的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert shadow-test.jpg \( +clone -background grey -shadow 70x20+0+0 \) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/shadow-grey-70.png" alt="shadow-grey-70"></p><p>在 Mac 上用 zsh 必须得加 \ 转义才行，在 Windows 上面就可以不用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">convert shadow-test.jpg ( +clone -background grey -shadow 70x20+0+0 ) +swap -background none -layers merge +repage shadow.png</span><br></pre></td></tr></table></figure><p>我可以把它封装为一个函数，但是输出名字要怎么设置呢？直接在后面加 <code>.png</code> 吗？</p><p>也就是 <code>test.jpg</code> 变 <code>test.jpg.png</code>，这样一般是没问题，不过这样的命名不太好。</p><p>另一种思路，在名字后面加 <code>-shadow</code>，也就是变 <code>test-shadow.png</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">shadow</span></span>() &#123;</span><br><span class="line">convert <span class="variable">$1</span><span class="string">&quot; /( +clone -background grey -shadow 70x20+0+0 /) +swap -background none -layers merge +repage &quot;</span><span class="variable">$&#123;1%.*&#125;</span><span class="string">&quot;-shadow.png</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>此时将它封装为一个函数，那么之后如果要给图片加阴影，我可以这样来使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shadow powersee-test.jpg</span><br></pre></td></tr></table></figure><p>就可以得到一张名为 <code>powersee-test-shadow.png</code> 的带阴影图片。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方文档：&lt;a href=&quot;https://legacy.imagemagick.org/Usage/blur/#shadow&quot;&gt;Bluring and Sharpening – IM v6 Examples (imagemagick.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我有一</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>解决 crontab 中执行 rsync 没有权限问题</title>
    <link href="https://powersee.github.io/2023/04/macos-crontab-not-permitted/"/>
    <id>https://powersee.github.io/2023/04/macos-crontab-not-permitted/</id>
    <published>2023-04-16T16:06:15.000Z</published>
    <updated>2023-04-17T16:16:04.039Z</updated>
    
    <content type="html"><![CDATA[<p>我在使用 rsync 备份文件到 nas 里。如果我手动在终端里执行的话，一切正常，可以把文件同步到 nas 里面。</p><p>但是，当我把同样的命令，添加到 crontab 中，却报错了。</p><p>问题其实是 cron 无法读取到 ~&#x2F;Documents&#x2F;screenshot-backup 里面的内容。因为现在 Mac 收紧了权限，其实我们平时使用一些 APP 的时候，如果要访问桌面或者下载文件夹，就会出现弹窗。</p><blockquote><p>在 macOS 中，某些应用程序在尝试读取或写入桌面、下载文件夹等敏感位置时，会触发系统的安全权限机制，导致弹出权限提示窗口。这是因为自 macOS 10.14 (Mojave) 版本开始，Apple 引入了更加严格的安全控制措施，以保护用户的隐私和数据安全。</p></blockquote><blockquote><p>除了桌面和下载文件夹之外，还有其他一些敏感位置，例如文稿、图片、文档、音乐、视频等文件夹。这些文件夹中的内容通常包含用户的个人数据和隐私信息。因此，当应用程序尝试访问这些敏感位置时，同样会触发权限提示窗口。</p></blockquote><p>那么回到我的问题，现在 cron 执行任务的时候，它可不会弹窗呀，而它又没有访问权限，所以任务就执行失败了。</p><p>方法一</p><p>不使用这个默认用户文件夹即可。例如我用户目录下有个 autosave 的文件夹，同样在 crontab 中用 rsync 备份，可以正常完成任务。</p><p>方法二</p><p>给 cron 完全磁盘权限</p><p>cron 的路径是 <code>/usr/sbin/cron</code>，我们可以在访达 Finder 里面，点击顶部菜单的「前往」「前往文件夹」，然后输入 <code>/usr/sbin</code> 来找到它。</p><p>如果想像我这样，显示隐藏文件夹，可以按快捷键 <code>command + shift + .</code>，就是 <code>&gt;</code> 这颗按键。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/cron-location-shadow.webp" alt="cron-location"></p><p>现在我们可以把 sbin 这个文件夹，拖到左侧的个人收藏那里。</p><p>然后打开「系统设置」，我的是 13.3 系统版本，以前叫「系统偏好设置」</p><p>找到 「隐私与安全性」里面的「完全磁盘访问权限」，点击下方的 + 来添加一个新的程序进去。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/full-disk-access.webp" alt="full-disk-access"></p><p>由于刚才我把 sbin 放到左侧的个人收藏了，所以现在找到 cron 很简单。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/Finder-cron.webp" alt="Finder-cron"></p><p>这样操作之后，使用 cron 来执行 rsync 命令备份Documents&#x2F;screenshot-backup 就没问题了，其它命令如果是需要访问文稿、桌面、下载这些文件夹，应该也是通过这样来解决问题的。</p><p>参考：<a href="https://apple.stackexchange.com/questions/378553/crontab-operation-not-permitted">macos - Crontab Operation not permitted - Ask Different (stackexchange.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在使用 rsync 备份文件到 nas 里。如果我手动在终端里执行的话，一切正常，可以把文件同步到 nas 里面。&lt;/p&gt;
&lt;p&gt;但是，当我把同样的命令，添加到 crontab 中，却报错了。&lt;/p&gt;
&lt;p&gt;问题其实是 cron 无法读取到 ~&amp;#x2F;Document</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>tbz 如何解压</title>
    <link href="https://powersee.github.io/2023/04/tbz/"/>
    <id>https://powersee.github.io/2023/04/tbz/</id>
    <published>2023-04-15T16:06:52.000Z</published>
    <updated>2023-04-15T16:07:32.196Z</updated>
    
    <content type="html"><![CDATA[<p>可以使用 bzip2 来解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bzip2 -d filename.tbz</span><br></pre></td></tr></table></figure><p>然后应该会得到一个 tar 压缩包，需要再使用 tar 解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xf filename.tar</span><br></pre></td></tr></table></figure><p>其实也可以直接一步到位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xf filename.tbz</span><br></pre></td></tr></table></figure><p>抄来一份定义</p><blockquote><p>tbz 格式是一种压缩文件格式，也称为 tarball。它是将 tar 和 bzip2 两种工具结合起来使用得到的一种格式，使用 bzip2 进行数据压缩，再使用 tar 把多个文件和目录打包在一起，最终形成一个 tbz 后缀的压缩包。</p><p>相比其他压缩格式，tbz 压缩率较高，压缩效果较优，扩展名为 .tbz 或 .tbz2，可在 Linux 和 macOS 等操作系统上使用 tar 和 bunzip2 命令对其进行解压缩。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可以使用 bzip2 来解压&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bzip2 -d filename.tbz&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 如何复制和移动文件</title>
    <link href="https://powersee.github.io/2023/04/nodejs-copy-and-move/"/>
    <id>https://powersee.github.io/2023/04/nodejs-copy-and-move/</id>
    <published>2023-04-14T17:19:23.000Z</published>
    <updated>2023-04-14T17:23:44.608Z</updated>
    
    <content type="html"><![CDATA[<p>建议在 nodejs 的交互环境中测试，直接在终端执行 node 就可以进入。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/node-RELP.gif" alt="node-RELP"></p><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><p>需要用到 fs</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">copyFileSync</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;b.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>把当前目录下的 a.txt 复制为 b.txt</p><p>查询文件是否存在</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">existsSync</span>(<span class="string">&#x27;b.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h2><p>使用 renameSync</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;b/a.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如上，将 a.txt 移动到 b 目录下。</p><p>或者使用 rename</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将 one 重命名为 two</p><p>第三个参数是一个函数，这个不能缺，不像带 Sync 的，只需要两个参数就行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;建议在 nodejs 的交互环境中测试，直接在终端执行 node 就可以进入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/node-RELP.gif</summary>
      
    
    
    
    
    <category term="node" scheme="https://powersee.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>如何升级 macOS 到特定版本</title>
    <link href="https://powersee.github.io/2023/04/macos-update-to-specific-version/"/>
    <id>https://powersee.github.io/2023/04/macos-update-to-specific-version/</id>
    <published>2023-04-13T16:03:06.000Z</published>
    <updated>2023-04-13T16:56:02.333Z</updated>
    
    <content type="html"><![CDATA[<p>直接在系统偏好设置里，点击「软件更新」的话，会检查当前最新的系统版本。例如我现在显示的是 Ventura。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/macOS-Monterey-Software-Update.webp" alt="macOS-Monterey-Software-Update"></p><p>而我现在的系统版本还是 Big Sur。</p><p>我其实不想更新的，所以我之前，是把「高级」里面的所有勾都取消掉，这样才可以保持这一年多来，没有任何系统升级提示。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/uncheck-macos-update.webp" alt="uncheck-macos-update"></p><p>但是刚才我点击进来了，它就自动检查更新，所以现在不更新的话，会有一个红色数字 1 在图标上。噢，不把它弄掉的话，我会相当别扭的。</p><p>我尝试着升级到 11 Big Sur 的最新版，11.7.5，看看会怎么样。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/macOS-Big-Sur-11.7.5.jpg" alt="macOS-Big-Sur-11.7.5"></p><p>升级是成功了，但是更新提示依然还在。</p><p>这时我了解到 13 版本，它的系统设置，变得和 iPad 上一样了，感觉不怎么喜欢，不知道我能否选择，只升级到 12 就行？</p><p>于是我查找看看 Mac 能否升级到特定版本。</p><p><a href="https://support.apple.com/zh-cn/HT211683">如何下载 macOS - 官方 Apple 支持 (中国)</a></p><p>直接到苹果官网，可以看到各个版本的系统，点击后跳转到 APP store。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/macOS-Monterey-app-store.webp" alt="macOS-Monterey-app-store"></p><p>商店里能下载的版本还挺多的。</p><p><a href="macappstores://apps.apple.com/app/macos-ventura/id1638787999?mt=12">Ventura 13</a></p><p><a href="macappstores://apps.apple.com/app/macos-monterey/id1576738294?mt=12">Monterey 12</a></p><p><a href="macappstores://apps.apple.com/app/macos-big-sur/id1526878132?mt=12">Big Sur 11</a></p><p><a href="macappstores://apps.apple.com/app/macos-catalina/id1466841314?mt=12">Catalina 10.15</a></p><p><a href="macappstores://apps.apple.com/app/macos-mojave/id1398502828?mt=12">Mojave 10.14</a></p><p><a href="macappstores://apps.apple.com/app/macos-high-sierra/id1246284741?mt=12">High Sierra 10.13</a></p><p>虽然知道怎么选择特定版本了，但是我在软件更新里面，已经下载好 Ventura 了。唉，那就升级看看吧，希望一切顺利。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/download-Ventura.webp" alt="download-Ventura"></p><p>等待了一段时间，升级成功了。升级后自动换了张默认壁纸，「系统偏好设置」也改名为「系统设置」了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/system-setting.webp" alt="system-setting"></p><p>升级到 Ventura 13 居然比我刚才从 Big Sur 11.6 升级到 11.7.5 速度还快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直接在系统偏好设置里，点击「软件更新」的话，会检查当前最新的系统版本。例如我现在显示的是 Ventura。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>如何去掉 iPhone iPad 上的越狱文件？</title>
    <link href="https://powersee.github.io/2023/04/iphone-ipad-remove-jailbreak/"/>
    <id>https://powersee.github.io/2023/04/iphone-ipad-remove-jailbreak/</id>
    <published>2023-04-12T16:05:27.000Z</published>
    <updated>2023-04-13T17:10:13.700Z</updated>
    
    <content type="html"><![CDATA[<p>我有一台 iPad，几年前就将它越狱了。由于越狱之后，就没法直接更新系统，所以目前还停留在 13.6.1</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iPad-13.6.1.jpg" alt="iPad-13.6.1"></p><p>现在提示可以更新的是 iPadOS 16.4.1，如果我直接点击升级，很可能待会就变砖了。</p><p>所以我开始了解怎么才能升级这台，已经越狱了的 iPad。我猜可能得进入 DFU 模式，然后重新刷一个干净的系统进去。</p><p>不过了解后发现，并不用这么麻烦，只需要先把系统的越狱去掉就行。</p><p>先在电脑上使用 checkra1n 让机器处于越狱状态，因为我们需要在设备里打开 checkra1n 这个 app。</p><p>官网：<a href="https://checkra.in/">checkra1n</a></p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/checkra1n-v-0.12.4.webp" alt="checkra1n-v-0.12.4"></p><p>还是熟悉的操作，按照说明进入 DUF 模式，之后机器重启，然后点击桌面的 checkra1n 这个 app，再点击红色的「Restore System」来恢复系统即可。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iPad-checkra1n.png" alt="iPad-checkra1n"></p><p>然后机器会重启，并且删除越狱相关的文件。例如重启后桌面就没有 Cydia 了。</p><p>此时就可以到系统里面升级了，经过漫长地等待，我把 iPad 升级到了 16.4.1</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iPad-16.4.1.jpg" alt="iPad-16.4.1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我有一台 iPad，几年前就将它越狱了。由于越狱之后，就没法直接更新系统，所以目前还停留在 13.6.1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/</summary>
      
    
    
    
    
    <category term="iOS" scheme="https://powersee.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>自动操作 automator 出现输入框后再运行脚本</title>
    <link href="https://powersee.github.io/2023/04/automator-input-box/"/>
    <id>https://powersee.github.io/2023/04/automator-input-box/</id>
    <published>2023-04-11T16:13:21.000Z</published>
    <updated>2023-04-11T17:30:48.926Z</updated>
    
    <content type="html"><![CDATA[<p>由于我每天都写一篇博客文章，每次都需要我打开 vscode，然后在终端里面输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post title...</span><br></pre></td></tr></table></figure><p>我在想，能否使用 automator 让我这个过程变得更加流畅一些。</p><p>我的想法是，在 Mac 右上角，放一个图标，我点击图标后，弹出一个文本框，然后我输入文章名字，例如今天这篇的名字是 <code>automator-input-box</code></p><p>输入完成之后，后台就自动执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post automator-input-box</span><br></pre></td></tr></table></figure><p>感觉还是挺简单的，应该是可以实现的。</p><p>一番研究之后，终于实现了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-hexo-post.webp" alt="automator-hexo-post"></p><p>脚本内容</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.zshrc</span><br><span class="line"><span class="comment">#echo $PATH</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/hexobackup &amp;&amp; <span class="built_in">pwd</span></span><br><span class="line">hexo new post <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>首先放一个 「获得指定的文本」在最上面，然后下面是「运行Shell脚本」</p><p>第一行加载 <code>zsh</code> 的配置，是为了获取到 <code>node</code> 和 <code>hexo</code> 的环境变量，如果不加这一行，那么脚本运行的时候，它是找不到 <code>hexo</code> 的。当然我们也可以写出 <code>hexo</code> 的完整路径，例如 <code>/opt/homebrew/.../hexo</code> 之类，但是我发现这样会提示找不到 <code>node</code>，又得加 <code>node</code> 的环境变量。所以还是直接加载 <code>zsh</code> 的配置文件比较方便。</p><p>之后进入 <code>hexo</code> 博客所在的位置，我的是放在用户目录下的 <code>hexobackup</code> 中，所以可以写成 <code>$HOME/hexobackup</code></p><p>进入到博客目录之后，再执行命令创建文章。</p><p>本来到这里就结束了的，不过我后面还是加了些内容，让结果可以通过通知显示出来。</p><p>这里的关键点是设置一个变量，来接收输出结果，然后在显示通知里面，使用这个变量。</p><p>我创建的是「应用程序」，所以可以选择把它保存到自己想放置的地方。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-APP.webp" alt="automator-APP"></p><p>之后我把这个 APP 拖到 Dock 栏上面，可以非常快速地打开它。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/hexo-post-dock.webp" alt="hexo-post-dock"></p><p>点击它之后，就会出现一个文本框，在这里我可以输入博客文章的文件名。不过它这里不能粘贴，只能手动输入。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-input-box-getText.webp" alt="automator-input-box-getText"></p><p>当我输入完成后，点击「继续」按钮，就会去执行 shell 脚本。完成之后，会弹出一条通知。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/hexo-post-notification.webp" alt="hexo-post-notification"></p><p>感觉比较遗憾的地方是，不能粘贴，以及只能按「继续」按钮，而不能用按回车键来代替。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于我每天都写一篇博客文章，每次都需要我打开 vscode，然后在终端里面输入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo </summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>自动操作 automator 快速将图片转为 webp</title>
    <link href="https://powersee.github.io/2023/04/automator-quick-webp/"/>
    <id>https://powersee.github.io/2023/04/automator-quick-webp/</id>
    <published>2023-04-10T16:16:29.000Z</published>
    <updated>2023-04-11T17:30:48.925Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 Mac 上面的自动操作 automator 怎么使用。</p><p>bilibili 上面有一个非常好的教程视频：<a href="https://www.bilibili.com/video/BV1ps411J7gW">https://www.bilibili.com/video/BV1ps411J7gW</a></p><p>是 2018 年录制的，不过讲得挺好的，我可以学习学习他的教学方式。</p><p>不过他的视频中，没讲到我想了解的，执行 shell 命令。</p><p>我有这样的需求，需要经常把图片转换为 WebP 格式。然后我了解到用 automator 可以更快地做到，因此打算来研究看看。</p><p>一番折腾之后，终于弄好了，现在可以使用右键来将图片转为 WebP 格式了。</p><p>过程如下：</p><p>打开 Mac 自带的应用「自动操作」英文名是 automator，选择第三个「快速操作」。然后在左边的「实用工具」里面，找到「运行 Shell 脚本」，将它拖到右边。</p><p>右边我们有很多地方需要调整，可以参考我的设置↓</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-webp.webp" alt="automator-webp"></p><p>这是脚本内容</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">/opt/homebrew/bin/cwebp <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.webp&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>虽然它使用了 for，但是我测试过，选中两张图片的时候，只有第一张能否转为 WebP，第二张不会。</p><p>完成之后保存一下即可，接着来到访达里面。</p><p>使用过程如下：</p><p>选中图片，右键「快速操作」，「转换为 WebP」这个名字是我们自己起的。然后旁边就多出一张 webp 格式的图片了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-quick-webp.gif" alt="automator-quick-webp"></p><p>然后根据我的了解，从 macOS 10.15（Catalina）开始，Apple 更改了 Automator 创建的服务的默认位置，将其移动到了右键菜单的「快速操作」下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学习 Mac 上面的自动操作 automator 怎么使用。&lt;/p&gt;
&lt;p&gt;bilibili 上面有一个非常好的教程视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1ps411J7gW&quot;&gt;https://www.bilibil</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>升级 Calibre 到 6.15.1</title>
    <link href="https://powersee.github.io/2023/04/calibre-6-15-1-ebook-viewer/"/>
    <id>https://powersee.github.io/2023/04/calibre-6-15-1-ebook-viewer/</id>
    <published>2023-04-09T16:08:59.000Z</published>
    <updated>2023-04-11T17:30:48.926Z</updated>
    
    <content type="html"><![CDATA[<p>我一直使用 calibre 来打开 epub 和 mobi 文件，我不喜欢 Mac 自带的「图书」APP。</p><p>目前电脑里装的是很久之前的版本了，一直没升级。这次把电脑系统升级到 13.3 之后，发现没法直接用 ebook-viewer 来打开 epub 文件了，选择 calibre 的话，是把书籍导入到 calibre 里面。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/epub-open-method.webp" alt="epub-open-method"></p><p>于是我打算升级一下，到官网下载时发现，2022 年的时候才支持苹果自研芯片的：<a href="https://calibre-ebook.com/whats-new">https://calibre-ebook.com/whats-new</a></p><blockquote><p>Release: 6.0 [11 Jul, 2022]</p><ul><li><strong>Support for new CPU architectures: Apple Silicon and ARM64 on Linux. Support for 32bit CPUs has been dropped because Qt 6 does not support them</strong></li></ul></blockquote><p>我现在用的是 5.31.1 的版本。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/calibre-5.31.1.webp" alt="calibre-5.31.1"></p><p>于是到官网下载新的安装包，直接替换就行。这个应用居然要占用接近 800M……</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/calibre-6.15.1-need-800MB.jpg" alt="calibre-6.15.1-need-800MB"></p><p>之后在「活动监视器」里也可以看到它的种类显示为 Apple 了。之前是显示 Intel 的。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/calibre-Apple.webp" alt="calibre-Apple"></p><p>而且现在 epub 也默认改为用 ebook-viewer 来打开了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ebook-viewer.webp" alt="ebook-viewer"></p><p>不错，问题解决了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我一直使用 calibre 来打开 epub 和 mobi 文件，我不喜欢 Mac 自带的「图书」APP。&lt;/p&gt;
&lt;p&gt;目前电脑里装的是很久之前的版本了，一直没升级。这次把电脑系统升级到 13.3 之后，发现没法直接用 ebook-viewer 来打开 epub 文件了，</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>macOS 设置允许「任何来源」</title>
    <link href="https://powersee.github.io/2023/04/mac-allow-apps-anywhere/"/>
    <id>https://powersee.github.io/2023/04/mac-allow-apps-anywhere/</id>
    <published>2023-04-08T16:56:57.000Z</published>
    <updated>2023-04-11T17:30:48.927Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于更新系统到 Ventura 13.3，我发现安全性里的「任何来源」又不见了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/APP-allow1.webp" alt="APP-allow1"></p><p>于是又得去网上搜开启的命令，这里也顺便记录一下📝</p><p>考虑到以后也许有萌新搜到我这篇文章，这里写详细一点。</p><p>首先点击「启动台」，在顶部的搜索框里面输入「终端」，可以找到一个图标上面写 <code>&gt;_</code> 的 APP</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/Mac-terminal.webp" alt="Mac-terminal"></p><p>点击打开它，然后复制下面这条命令，粘贴进去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-spctl.webp" alt="terminal-spctl"></p><p>然后按一下回车键，这时出现 Password:🔑，需要输入自己的用户密码，也就是开机后要进入桌面时的那个密码。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-spctl-Password.webp" alt="terminal-spctl-Password"></p><p>注意输入密码的时候，屏幕上不会显示任何内容的，既不会直接显示你的密码，也不会出现 <code>***</code> 或者 <code>···</code>，只管输入就行，完成后就再按一下回车键。</p><p>然后应该就可以看到出现「任何来源」了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/APP-allow2.webp" alt="APP-allow2"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近由于更新系统到 Ventura 13.3，我发现安全性里的「任何来源」又不见了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/APP-allow1</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Nu shell 升级到 0.78.0，一堆麻烦</title>
    <link href="https://powersee.github.io/2023/04/nushell-0-78-0/"/>
    <id>https://powersee.github.io/2023/04/nushell-0-78-0/</id>
    <published>2023-04-07T16:13:24.000Z</published>
    <updated>2023-04-07T16:15:27.795Z</updated>
    
    <content type="html"><![CDATA[<p>这一次的升级挺恼火的。</p><p>看到 nu shell 发布新版本了，看更新日志好像挺不错。于是我下载压缩包，解压，到「终端」改一下设置，就可以使用新版本了。</p><p>但是一上来就报错，真心看不懂，使用 0.78 加载以前的配置文件会报错，说要加 <code>||</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">42 │ # Use nushell functions to define your right and left prompt</span><br><span class="line">43 │ let-env PROMPT_COMMAND = &#123; create_left_prompt &#125;</span><br><span class="line">   ·                          ───────────┬──────────</span><br><span class="line">   ·                                     ╰── Parsing as a closure, but || is missing</span><br><span class="line">44 │ let-env PROMPT_COMMAND_RIGHT = &#123; create_right_prompt &#125;</span><br><span class="line">   ╰────</span><br><span class="line"> help: Try add || to the beginning of closure</span><br></pre></td></tr></table></figure><p>查看一下 GitHub issues ：<a href="https://github.com/nushell/nushell/issues/8767">Error: nu::parser::closure_missing_pipe (nushell v0.78.0) · Issue #8767 · nushell&#x2F;nushell (github.com)</a></p><p>means that it should be</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let-env PROMPT_COMMAND = &#123;|| create_left_prompt &#125;</span><br></pre></td></tr></table></figure><p>如果只是一行需要修改，那倒是无所谓，问题是很多地方需要改，那么一个一个加也不是办法呀，还是让它重新生成配置文件吧。</p><p>于是我把 <code>env.nu</code> 和 <code>config.nu</code> 改个名字，再新开一个 tab，就会提示是否新建配置文件。</p><p>使用新的配置文件之后，可以不报错了，但是，ohmyposh这边又有问题了。</p><p>修改 <code>env.nu</code> 和 <code>config.nu</code> 这两个文件，让 nu 启动时加载 ohmyposh，结果出现这样的报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: nu::parser::closure_missing_pipe</span><br><span class="line"></span><br><span class="line">  × Missing || inside closure</span><br><span class="line">    ╭─[.oh-my-posh.nu:8:1]</span><br><span class="line">  8 │     # making the behavior different compared to other shells</span><br><span class="line">  9 │     let-env PROMPT_COMMAND_RIGHT = &#123;&#x27;&#x27;&#125;</span><br><span class="line">    ·                                    ──┬─</span><br><span class="line">    ·                                      ╰── Parsing as a closure, but || is missing</span><br><span class="line"> 10 │     let-env POSH_SHELL_VERSION = (version | get version)</span><br><span class="line">    ╰────</span><br><span class="line">  help: Try add || to the beginning of closure</span><br></pre></td></tr></table></figure><p>也就是说，现在 <code>.oh-my-posh.nu</code> 里面的语法也是错误的了。</p><p>于是我到 <a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases/">https://github.com/JanDeDobbeleer/oh-my-posh/releases/</a> 查看一下。果然，它也刚刚更新了。</p><blockquote><h3 id="Bug-Fixes"><a href="#Bug-Fixes" class="headerlink" title="Bug Fixes"></a>Bug Fixes</h3><ul><li><strong>nushell:</strong> update syntax to for v0.78.0 (<a href="https://github.com/JanDeDobbeleer/oh-my-posh/commit/7e04bdc9f7a2c5541191a26e3e2f09a6dc278626">7e04bdc</a>)</li></ul></blockquote><p>于是我更新 oh-my-posh 到最新的版本，就解决问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一次的升级挺恼火的。&lt;/p&gt;
&lt;p&gt;看到 nu shell 发布新版本了，看更新日志好像挺不错。于是我下载压缩包，解压，到「终端」改一下设置，就可以使用新版本了。&lt;/p&gt;
&lt;p&gt;但是一上来就报错，真心看不懂，使用 0.78 加载以前的配置文件会报错，说要加 &lt;code&gt;|</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
    <category term="shell" scheme="https://powersee.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Nu shell Oh My Posh</title>
    <link href="https://powersee.github.io/2023/04/nushell-ohmyposh/"/>
    <id>https://powersee.github.io/2023/04/nushell-ohmyposh/</id>
    <published>2023-04-06T17:42:53.000Z</published>
    <updated>2023-04-11T17:30:48.965Z</updated>
    
    <content type="html"><![CDATA[<p>给 Nu shell 配置上 Oh My Posh，完成后效果如下。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nu-ohmyposh.webp" alt="nu-ohmyposh"></p><p>之前我已经给 powershell 配置好 ohmyposh 了，现在感觉还是 nu shell 比较好用，所以也来折腾一下。</p><p>官方文档：<a href="https://ohmyposh.dev/docs/installation/prompt">Change your prompt | Oh My Posh</a></p><p>有这些 shell 可以选择：</p><ul><li>bash</li><li>cmd</li><li>elvish</li><li>fish</li><li><code>nu</code></li><li>powershell</li><li>tcsh</li><li>xonsh</li><li>zsh</li></ul><p>点击中间的 nu 可以看到说明。</p><p>简单来说，就是修改 nushell 的两个配置文件就好。它们在 <code>~\AppData\Roaming\nushell</code> 里面。</p><p>添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oh-my-posh init nu</span><br></pre></td></tr></table></figure><p>到 <code>env.nu</code> 里面，我直接写在第四行的位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Nushell Environment Config File</span><br><span class="line">alias ll = ls -l</span><br><span class="line"></span><br><span class="line">oh-my-posh init nu</span><br></pre></td></tr></table></figure><p>然后再到 <code>config.nu</code> 的最后，添加这一行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.oh-my-posh.nu</span><br></pre></td></tr></table></figure><p>它会生成 <code>~/.oh-my-posh.nu</code> ，也就是在用户目录下。打开后里面是这些内容。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">export-env &#123;</span><br><span class="line">    let-env POWERLINE_COMMAND = <span class="string">&#x27;oh-my-posh&#x27;</span></span><br><span class="line">    let-env POSH_THEME = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    let-env PROMPT_INDICATOR = <span class="string">&quot;&quot;</span></span><br><span class="line">    let-env POSH_PID = (random uuid)</span><br><span class="line">    <span class="comment"># By default displays the right prompt on the first line</span></span><br><span class="line">    <span class="comment"># making it annoying when you have a multiline prompt</span></span><br><span class="line">    <span class="comment"># making the behavior different compared to other shells</span></span><br><span class="line">    let-env PROMPT_COMMAND_RIGHT = &#123;<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    let-env POSH_SHELL_VERSION = (version | get version)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PROMPTS</span></span><br><span class="line">    let-env PROMPT_MULTILINE_INDICATOR = (^<span class="string">&quot;C:/Users/nucx/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe&quot;</span> <span class="built_in">print</span> secondary $<span class="string">&quot;--config=(<span class="variable">$env</span>.POSH_THEME)&quot;</span> --shell=nu $<span class="string">&quot;--shell-version=(<span class="variable">$env</span>.POSH_SHELL_VERSION)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    let-env PROMPT_COMMAND = &#123;</span><br><span class="line">        <span class="comment"># We have to do this because the initial value of `$env.CMD_DURATION_MS` is always `0823`,</span></span><br><span class="line">        <span class="comment"># which is an official setting.</span></span><br><span class="line">        <span class="comment"># See https://github.com/nushell/nushell/discussions/6402#discussioncomment-3466687.</span></span><br><span class="line">        <span class="built_in">let</span> cmd_duration = <span class="keyword">if</span> <span class="variable">$env</span>.CMD_DURATION_MS == <span class="string">&quot;0823&quot;</span> &#123; 0 &#125; <span class="keyword">else</span> &#123; <span class="variable">$env</span>.CMD_DURATION_MS &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hack to set the cursor line to 1 when the user clears the screen</span></span><br><span class="line">        <span class="comment"># this obviously isn&#x27;t bulletproof, but it&#x27;s a start</span></span><br><span class="line">        <span class="built_in">let</span> clear = (<span class="built_in">history</span> | last 1 | get 0.<span class="built_in">command</span>) == <span class="string">&quot;clear&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> width = ((term size).columns | into string)</span><br><span class="line">        ^&quot;C:/Users/nucx/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe&quot; print primary $&quot;--config=(<span class="variable">$env</span>.POSH_THEME)&quot; --shell=nu $&quot;--shell-version=(<span class="variable">$env</span>.POSH_SHELL_VERSION)&quot; $&quot;--execution-time=(<span class="variable">$cmd_duration</span>)&quot; $&quot;--error=(<span class="variable">$env</span>.LAST_EXIT_CODE)&quot; $&quot;--terminal-width=(<span class="variable">$width</span>)&quot; $&quot;--cleared=(<span class="variable">$clear</span>)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if &quot;false&quot; == &quot;true&quot; &#123;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给 Nu shell 配置上 Oh My Posh，完成后效果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nu-ohmyposh.webp&quot; </summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
    <category term="shell" scheme="https://powersee.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Windows 安装 Nu shell 与配置</title>
    <link href="https://powersee.github.io/2023/04/windows-install-nushell-and-config/"/>
    <id>https://powersee.github.io/2023/04/windows-install-nushell-and-config/</id>
    <published>2023-04-05T16:07:13.000Z</published>
    <updated>2023-04-11T17:30:48.968Z</updated>
    
    <content type="html"><![CDATA[<p>使用 nu shell 已经有一段时间，感觉还不错。它最为吸引我的就是，自带历史记录提示，就像 zsh 的 zsh-autosuggestions 插件。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nushell-autosuggestions.png" alt="nushell-autosuggestions"></p><p>它的一条普通的 ls 命令，结果也和其它 shell 很不一样。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nushell-ls.png" alt="nushell-ls"></p><p>输出的是一个表格。</p><p>安装可以查看官方文档：<a href="https://www.nushell.sh/zh-CN/book/installation.html">安装 Nu | Nushell</a></p><p>文档一共 6 种语言，中文就是其中一种。</p><p>我是到  <a href="https://github.com/nushell/nushell/releases">GitHub 的 Release 页</a> 下载并解压二进制文件，然后放到 <code>C:\bin\</code> 里面的。接着在「终端」里面添加 nushell。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-add-nushell.png" alt="terminal-add-nushell"></p><p>如果想让 nushell 作为默认的 shell，可以到「启动」，「默认配置文件」进行更改。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-default-shell.png" alt="terminal-default-shell"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 nu shell 已经有一段时间，感觉还不错。它最为吸引我的就是，自带历史记录提示，就像 zsh 的 zsh-autosuggestions 插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzh</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
    <category term="shell" scheme="https://powersee.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>更改 Mac 截图快捷键、文件名、文件格式</title>
    <link href="https://powersee.github.io/2023/04/mac-screenshot2/"/>
    <id>https://powersee.github.io/2023/04/mac-screenshot2/</id>
    <published>2023-04-04T17:38:02.000Z</published>
    <updated>2023-04-11T17:30:48.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更改截图默认快捷键"><a href="#更改截图默认快捷键" class="headerlink" title="更改截图默认快捷键"></a>更改截图默认快捷键</h3><p>Mac 默认的截图快捷键是 cmd+shift+3 全屏截图，cmd+shift+4 区域截图。按 3 颗按键还是有些不方便，对于我这种经常截图的人来说。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/screenshot-hotkey.webp" alt="screenshot-hotkey"></p><p>我们可以到「系统偏好设置」「键盘」「快捷键」「截屏」中，更改为自己喜欢的按键，我这边直接把区域截图改为<code>F9</code>。</p><h3 id="更改截图默认文件名"><a href="#更改截图默认文件名" class="headerlink" title="更改截图默认文件名"></a>更改截图默认文件名</h3><p>默认截图后得到的图片名称是这样的 <code>截屏2023-04-02 上午10.58.54.png</code>，如果在「语言与地区」里有勾选 ☑️ 24 小时制，那么是这样的 <code>截屏2023-04-02 11.08.06.png</code></p><p>在英文状态下是 <code>Screen Shot [date] at [time].png</code></p><p>我们能修改的，只有日期前面的文字而已，例如我不想要「截图」这两个字。</p><p>打开「终端」这个 APP，粘贴下面的命令，按回车键执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;&quot;</span><br></pre></td></tr></table></figure><p>之后截图得到的文件名会变成这样的 <code>2023-04-02 11.08.06.png</code></p><p>我们也可以改为自己的想设置的文字，例如我想在前面加上 <code>powersee-</code>，我可以这样做</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;powersee-&quot;</span><br></pre></td></tr></table></figure><p>之后截图得到的文件名会变成这样的 <code>powersee-2023-04-02 11.08.06.png</code></p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/change-screencapture-name.webp" alt="change-screencapture-name"></p><p>如果想改回原来的默认名称，可以用这条命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 1; killall SystemUIServer</span><br></pre></td></tr></table></figure><h3 id="更改截图默认文件格式"><a href="#更改截图默认文件格式" class="headerlink" title="更改截图默认文件格式"></a>更改截图默认文件格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type</span><br></pre></td></tr></table></figure><p>后面可以加 JPG, TIFF, GIF, PDF, PNG 这些，我没有改，还是用它默认的 png 就好。</p><h3 id="截图不要阴影"><a href="#截图不要阴影" class="headerlink" title="截图不要阴影"></a>截图不要阴影</h3><p>按 cmd shift 4 后，按空格键，此时按住 alt 键再点击窗口的话，保存下来的图片就是没有阴影的，图片体积会小很多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;更改截图默认快捷键&quot;&gt;&lt;a href=&quot;#更改截图默认快捷键&quot; class=&quot;headerlink&quot; title=&quot;更改截图默认快捷键&quot;&gt;&lt;/a&gt;更改截图默认快捷键&lt;/h3&gt;&lt;p&gt;Mac 默认的截图快捷键是 cmd+shift+3 全屏截图，cmd+shift+4</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Windows 上 where 命令</title>
    <link href="https://powersee.github.io/2023/04/windows-where/"/>
    <id>https://powersee.github.io/2023/04/windows-where/</id>
    <published>2023-04-04T03:52:13.000Z</published>
    <updated>2023-04-04T03:52:54.646Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac 和 Linux 我们可以使用 which 命令，来查看某个命令的绝对路径，例如：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">which</span> go</span><br><span class="line">/usr/local/go/bin/go</span><br></pre></td></tr></table></figure><p>在 Windows 上我们可以使用 where</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">where</span> node</span><br><span class="line">C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure><p>我测试了下，发现只有 cmd 支持，我用 powershell 和 nu shell 都不支持。</p><p>解决方法是，使用 <code>where.exe</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; where.exe node</span><br><span class="line">C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure><p>或者使用 <code>gcm</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; gcm node</span><br><span class="line"></span><br><span class="line">CommandType     Name        Version    Source</span><br><span class="line">-----------     ----        -------    ------</span><br><span class="line">Application     node.exe    19.8.1.0   C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Mac 和 Linux 我们可以使用 which 命令，来查看某个命令的绝对路径，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;❯ &lt;sp</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
  </entry>
  
</feed>
