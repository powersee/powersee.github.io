<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="https://powersee.github.io/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2023-09-25T14:10:31.624Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无法拉取 Docker 镜像的另一种解决方案</title>
    <link href="https://powersee.github.io/2023/09/docker-pull-save-load/"/>
    <id>https://powersee.github.io/2023/09/docker-pull-save-load/</id>
    <published>2023-09-25T14:09:18.000Z</published>
    <updated>2023-09-25T14:10:31.624Z</updated>
    
    <content type="html"><![CDATA[<p>目前我拉取不了 docker 镜像，不管是 docker hub 的，还是 GitHub 的 ghcr.io 的。</p><p>我的解决方案，使用境外的 VPS 拉取镜像，然后通过 docker save 保存为 tar 归档包。接着把这个 tar 下载到本地，再使用 docker load 来加载。</p><p>我这里拉取的镜像是 memos</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ghcr.io/usememos/memos:latest</span><br></pre></td></tr></table></figure><p>目前最新的版本是 0.15.2，所以拉取完成之后，我使用这条命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o memos-15.2.tar ghcr.io/usememos/memos:latest</span><br></pre></td></tr></table></figure><p>此时我需要把文件从服务器下载到本地，可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>之类的来开启一个 http 服务</p><p>不过此时我是使用 root 身份，导致文件没法下载，所以我还得更改一下文件的权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 memos-15.2.tar</span><br></pre></td></tr></table></figure><p>本地我是需要把 docker 镜像放到 nas 里，所以我可以 ssh 连接到 nas，然后使用 wget 来下载。</p><p>之后使用 load 命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker load&lt;memos-15.2.tar </span><br><span class="line">09180e184944: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">d6149c35a41c: Loading layer [==================================================&gt;]  1.989MB/1.989MB</span><br><span class="line">41163094a155: Loading layer [==================================================&gt;]  59.53MB/59.53MB</span><br><span class="line">628f23364ad0: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">The image ghcr.io/usememos/memos:latest already exists, renaming the old one with ID sha256:f930acc56434c179480c15382a8d2ef1651b44bc7f299e1b0bdff6d0f8d1c7eb to empty string</span><br><span class="line">Loaded image: ghcr.io/usememos/memos:latest</span><br></pre></td></tr></table></figure><p>就成功把镜像拉取到本地了，唉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目前我拉取不了 docker 镜像，不管是 docker hub 的，还是 GitHub 的 ghcr.io 的。&lt;/p&gt;
&lt;p&gt;我的解决方案，使用境外的 VPS 拉取镜像，然后通过 docker save 保存为 tar 归档包。接着把这个 tar 下载到本地，再使用 d</summary>
      
    
    
    
    
    <category term="网络" scheme="https://powersee.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>如何制作透明表格图？</title>
    <link href="https://powersee.github.io/2023/09/excel-transparent-image/"/>
    <id>https://powersee.github.io/2023/09/excel-transparent-image/</id>
    <published>2023-09-24T15:39:50.000Z</published>
    <updated>2023-09-24T15:45:49.668Z</updated>
    
    <content type="html"><![CDATA[<p>如何制作一张透明的表格图片？</p><p>答：先用 excel 导出为 PDF，然后用将 PDF 拖入 Photoshop 里，再导出为 png 就行。</p><p>例如我这里有这样的表格数据。</p><table><thead><tr><th>姓名</th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>powersee</td><td>99</td><td>98</td><td>66</td></tr></tbody></table><p>我把它输入到 WPS 表格里面，然后添加所有边框，接着选择【文件】，【输出为 PDF 文件】，这样是可以生成 PDF 文件。但是，英语这一列会被放到第二页……</p><p><img src="/img/2023/wps-export-pdf.png" alt="image"></p><p>这时我选择【打印预览】，确认排版没问题，都是在同一页之后，再确认选择的是【Microsoft Print to PDF】，之后点击打印就能获得 PDF 文件。</p><p><img src="/img/2023/ps-excel-pdf.webp" alt="ps-excel-pdf">在 ps 里面创建文档，我新建了 4k 分辨率的文档，再将 PDF 拖进来，然后再把背景关掉，就可以获得透明表格图了。</p><p>不过这时边框和文字都是黑色的，如果想要变成白色，可以通过【图像】【调整】【反相】来实现，快捷键为 ctrl+i。</p><p>有需要的话可以在下方添加纯色图层或者渐变色，例如这样。</p><p><img src="/img/2023/excel-pdf-ps-final-img.webp" alt="excel-pdf-ps-final-img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何制作一张透明的表格图片？&lt;/p&gt;
&lt;p&gt;答：先用 excel 导出为 PDF，然后用将 PDF 拖入 Photoshop 里，再导出为 png 就行。&lt;/p&gt;
&lt;p&gt;例如我这里有这样的表格数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;姓名&lt;/th&gt;
</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>SwitchyOmega 备份与恢复</title>
    <link href="https://powersee.github.io/2023/09/SwitchyOmega-backup/"/>
    <id>https://powersee.github.io/2023/09/SwitchyOmega-backup/</id>
    <published>2023-09-23T06:21:02.000Z</published>
    <updated>2023-09-23T06:24:32.023Z</updated>
    
    <content type="html"><![CDATA[<p>SwitchyOmega 是我电脑浏览器上，一直在使用的代理管理工具。以前我的主力浏览器是 Chrome，现在已经切换为 Edge 很久了，不过这个扩展插件一直都在使用。</p><p>每次换电脑或者重装系统后，在浏览器登录微软账号，虽然可以自动将扩展插件装回来。但是，又得再一次配置 SwitchyOmega 里面的情景模式了。</p><p>但其实可以避免这个繁琐的步骤的，因为插件自带有备份恢复功能。</p><p>在浏览器点击插件，再点击「选项」，来进入设置页面。</p><p>然后点击「设定」下方的「导入&#x2F;导出」</p><p><img src="/img/2023/SwitchyOmega-settings-shadow.webp" alt="SwitchyOmega-settings"></p><p>点击「生成备份文件」之后，就可以获得一个名为 <code>OmegaOptions.bak</code> 的文件。我们只要把这个文件，传到其他的电脑，然后再点击「从备份文件恢复」，选择 <code>OmegaOptions.bak</code>，就可以将情景模式同步过去了。</p><p>而且它还支持在线恢复，那也许我们可以把备份文件放到自己的网站上。</p><p>最下方的同步，说是支持 Chrome 浏览器，不过我现在电脑都没装 Chrome，不清楚好不好用，Edge 不知道能不能同步？懒得去试了，现在用文件备份我觉得也挺不错的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SwitchyOmega 是我电脑浏览器上，一直在使用的代理管理工具。以前我的主力浏览器是 Chrome，现在已经切换为 Edge 很久了，不过这个扩展插件一直都在使用。&lt;/p&gt;
&lt;p&gt;每次换电脑或者重装系统后，在浏览器登录微软账号，虽然可以自动将扩展插件装回来。但是，又得</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>达芬奇 18.6 史诗级更新，增加文字外描边</title>
    <link href="https://powersee.github.io/2023/09/davinci-outline/"/>
    <id>https://powersee.github.io/2023/09/davinci-outline/</id>
    <published>2023-09-22T02:42:20.000Z</published>
    <updated>2023-09-22T02:43:03.442Z</updated>
    
    <content type="html"><![CDATA[<p>在 2023 年 9 月，知名剪辑、调色软件达芬奇 DaVinCi Resolve 更新到了 18.6 版本。</p><p>这个版本更新中，对我最有用的就是新增加的文本外描边功能。</p><p><img src="/img/2023/Snipaste_23-09-18_10-05-38.jpg" alt="Snipaste_23-09-18_10-05-38"></p><p>这里我弄了个对比，可以发现它原本的内描边，是观感最差的，会导致文字笔画变得非常的细，很难看。反正我使用达芬奇，作为主力剪辑工具已经两年了，应该还没在视频中使用过它这个内描边功能。</p><p><img src="/img/2023/Snipaste_23-09-18_10-03-05.jpg" alt="Snipaste_23-09-18_10-03-05"></p><p>最近的更新就是在描边选项中的下方，添加了一个「仅外部」的勾选框。勾选上之后就是外描边了，就可以和其它剪辑软件一样了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 2023 年 9 月，知名剪辑、调色软件达芬奇 DaVinCi Resolve 更新到了 18.6 版本。&lt;/p&gt;
&lt;p&gt;这个版本更新中，对我最有用的就是新增加的文本外描边功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/Snipaste_23-09-18_</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>剪映变得更好用了</title>
    <link href="https://powersee.github.io/2023/09/better-capcut/"/>
    <id>https://powersee.github.io/2023/09/better-capcut/</id>
    <published>2023-09-21T08:43:57.000Z</published>
    <updated>2023-09-21T08:51:06.232Z</updated>
    
    <content type="html"><![CDATA[<p>最近剪映的两个更新，让我感觉有些视频，真的可以只用剪映来制作了。</p><p>首先是添加了快捷键，向前和向后修剪。</p><p><img src="/img/2023/left-right-cut.webp" alt="left-right-cut"></p><p>快捷键是 Q 和 W，和 pr 的是一样的，我平时使用它们的频率非常高，所以当初我使用 final cut pro 和 davinci Resolve 时，我都是通过自定义快捷键，让这个功能做到跟在 pr 的使用体验一样。</p><p>另一个也许不是最近添加的，不过我是最近才发现的——自定义码率。</p><p><img src="/img/2023/%E5%89%AA%E6%98%A0-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A0%81%E7%8E%87.webp" alt="剪映-自定义码率"></p><p>以前它只有几个选项让我们选择而已，现在可以让我们自定义码率了，很好。</p><p>码率这方面，其实我以前很长一段时间，都是控制视频码率在 2800Kbps 左右，这样视频传 bilibili 就不会出现高码率的画质选项。</p><p>不过目前已经不这么做了，目前主要是设置 6800Kbps，B 站会出现高码率选项，有大会员的用户看起来会好一些。</p><p>所以以前剪映给的几个码率选项，我都是选择最低的，因为它的最低也比我原本用的高很多。</p><p>剪映最近添加这2个功能，都是我期待已久的，很棒，希望它能越做越好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近剪映的两个更新，让我感觉有些视频，真的可以只用剪映来制作了。&lt;/p&gt;
&lt;p&gt;首先是添加了快捷键，向前和向后修剪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/left-right-cut.webp&quot; alt=&quot;left-right-cut&quot;&gt;&lt;/p&gt;
&lt;p&gt;快</summary>
      
    
    
    
    
    <category term="视频" scheme="https://powersee.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>Mac 如何隐藏状态栏的日期和时间</title>
    <link href="https://powersee.github.io/2023/09/mac-hide-date/"/>
    <id>https://powersee.github.io/2023/09/mac-hide-date/</id>
    <published>2023-09-20T06:44:16.000Z</published>
    <updated>2023-09-20T06:45:47.723Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，Mac 会在屏幕右上角，显示日期和时间。</p><p><img src="/img/2023/Snipaste_23-09-19_07-59-14.jpg" alt="Snipaste_23-09-19_07-59-14"></p><p>目前好像没有什么办法，可以将它完全隐藏起来。</p><p>不过可以将它改为这样。</p><p><img src="/img/2023/Snipaste_23-09-19_08-01-15.jpg" alt="Snipaste_23-09-19_08-01-15"></p><p>也就是只剩一个模拟时钟来看时间，还是比较简洁的。</p><p>具体的做法是，到系统设置里面，（以前叫「系统偏好设置」）找到时钟，把「时间」从「数码」改为「模拟」就行。</p><p><img src="/img/2023/Mac-Time-Show.webp" alt="Mac-Time-Show"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;默认情况下，Mac 会在屏幕右上角，显示日期和时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/Snipaste_23-09-19_07-59-14.jpg&quot; alt=&quot;Snipaste_23-09-19_07-59-14&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前好像没有什么办法</summary>
      
    
    
    
    
    <category term="mac" scheme="https://powersee.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>如何下载离线版 AMD 显卡驱动，以及旧版本驱动</title>
    <link href="https://powersee.github.io/2023/09/download-amd-drive/"/>
    <id>https://powersee.github.io/2023/09/download-amd-drive/</id>
    <published>2023-09-09T06:48:30.000Z</published>
    <updated>2023-09-09T06:49:36.840Z</updated>
    
    <content type="html"><![CDATA[<p>在 AMD 的官网 <a href="https://www.amd.com/zh-hans/support">https://www.amd.com/zh-hans/support</a> 如果我们直接点击「下载 WINDOWS 驱动程序」，那么得到的是一个类似这样的 exe 文件</p><blockquote><p>amd-software-adrenalin-edition-23.9.1-minimalsetup-230905_web.exe</p></blockquote><p>文件大小只有几十 MB，而且使用它来安装驱动需要联网才行。</p><p>那要怎样才能下载得到，像 Nvidia 驱动那样的完整驱动呢？离线也能安装的那种。</p><p><img src="/img/2023/2023-09-08_14-10-18.png" alt="2023-09-08_14-10-18"></p><p>我们先在下方选择我们的显卡，点击「提交」。然后便能得到不同操作系统的驱动下载链接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows 11 - 64 位版本</span><br><span class="line">Windows 10 64 位版本</span><br><span class="line">Windows 7 64 位版本</span><br><span class="line">RHEL x86 64 位</span><br><span class="line">Ubuntu x86 64 位</span><br><span class="line">SLED/SLES 15</span><br></pre></td></tr></table></figure><p>展开之后可以看到有</p><ul><li><strong>Auto-Detect and Install</strong></li><li><strong>AMD Software: Adrenalin Edition</strong></li><li><strong>AMD Software: PRO Edition</strong></li></ul><p>我们玩游戏的话一般选择 Adrenalin 版本，这样就能得到可以离线安装的显卡驱动了。</p><p><img src="/img/2023/2023-09-08_14-15-44.png" alt="2023-09-08_14-15-44"></p><p>不过这样下载的是最新版的驱动，如果我们想下载旧版的，可以点击 「驱动程序详细信息」下的 Release Notes，例如我这里点击之后，浏览器上方的地址栏就变成了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-9-1</span><br></pre></td></tr></table></figure><p>我们只需要更改链接最后面的数字就行，例如改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-8-1</span><br><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-5-1</span><br><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-22-5-1</span><br></pre></td></tr></table></figure><p>之前看到有网友说 22.5.1 这个版本好像比较好，游戏帧数会比新版本的驱动高，适合给 RX580 这类显卡使用，不过我没试过。</p><p>下载旧版本驱动点击 following links: 下方的链接即可。</p><p><img src="/img/2023/2023-09-08_14-25-38.png" alt="2023-09-08_14-25-38"></p><p>通过这种方法下载驱动，我们准备多个驱动，然后对比看看哪个好，毕竟 amd 的驱动更新确实比较频繁。留有完整的驱动安装包，要回退会比较方便。</p><p>驱动安装好后，C 盘的 AMD 文件夹可以删除的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 AMD 的官网 &lt;a href=&quot;https://www.amd.com/zh-hans/support&quot;&gt;https://www.amd.com/zh-hans/support&lt;/a&gt; 如果我们直接点击「下载 WINDOWS 驱动程序」，那么得到的是一个类似这样的 e</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在 alpine docker 容器中开启 ssh</title>
    <link href="https://powersee.github.io/2023/08/alpine-docker-ssh/"/>
    <id>https://powersee.github.io/2023/08/alpine-docker-ssh/</id>
    <published>2023-08-01T13:10:19.000Z</published>
    <updated>2023-08-01T13:14:28.410Z</updated>
    
    <content type="html"><![CDATA[<p>由于目前绿联官方没有开启 ssh 的方法，这样导致我想通过 rsync 备份文件到 NAS 里就没法做到了。</p><p>于是我想通过在 docker 里运行一个 alpine 容器，在容器里开启 ssh，而我只要将特定的目录挂载到容器内，就可以实现用 rsync 备份文件到 NAS。</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>先搜索并下载 alpine 容器镜像</p><p><img src="/img/2023/download-alpine.webp" alt="download-alpine"></p><p>之后点击创建，起一个名字</p><p><img src="/img/2023/Create.webp" alt="Create"></p><p>把 -i 和 -t 选上</p><p><img src="/img/2023/alpine-it-shadow.webp" alt="alpine-it-shadow"></p><p>网络选择 host，这样就不用去设置端口</p><p><img src="/img/2023/network-host-shadow.webp" alt="network-host-shadow"></p><p>存储空间，把想要操作的文件夹挂载到容器里面，我选择放在 &#x2F;mnt，注意后面要改为「读写」</p><p><img src="/img/2023/storage.jpg" alt="storage"></p><p>那么要填写的内容就这些而已，可以点下一步，完成创建后再启动，也可以勾选下方的「创建后启动容器」这个选项。</p><h3 id="配置与开启-ssh"><a href="#配置与开启-ssh" class="headerlink" title="配置与开启 ssh"></a>配置与开启 ssh</h3><p>之后在「容器管理」中找到我们刚才创建的容器，在它启动的情况下，点击详情，然后到最后的终端这里。</p><p><img src="/img/2023/ssh-and-rc.webp" alt="ssh-and-rc"></p><p>使用 apk add 来安装应用，这样装上 openssh 和 openrc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add openssh</span><br><span class="line">apk add openrc</span><br></pre></td></tr></table></figure><blockquote><p>OpenRC 是一个用于 Linux 系统的初始化系统和服务管理器。它最初是为 Gentoo Linux 开发的，后来也被广泛地用于其他 Linux 发行版，特别是一些轻量级的发行版，如 Alpine Linux。OpenRC 的目标是提供一种简单而可靠的初始化和服务管理解决方案，它与传统的 sysvinit 和较新的 systemd 相比，更轻量级且易于配置。</p></blockquote><p>之后修改 ssh 的配置文件，使用 vi 来打开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到 #PermitRootLogin prohibit-password 把前面的 # 去掉，然后把 prohibit-password 改为 yes。再把 PasswordAuthentication yes 前面的 # 去掉。</p><p><img src="/img/2023/sshd-config.webp" alt="sshd-config"></p><p>让 sshd 在容器启动时自启动（可以理解为开机自启，把容器当成一台机器）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-update add sshd</span><br></pre></td></tr></table></figure><p>此时如果直接用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>来启动 sshd 应该启动不了，会报错。需要先执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /run/openrc/softlevel</span><br></pre></td></tr></table></figure><p>然后就可以启动了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>查看状态可以用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd status</span><br></pre></td></tr></table></figure><p><img src="/img/2023/rc-sshd-status.webp" alt="rc-sshd-status"></p><p>此时就可以使用 ssh 来连接了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ ssh root@192.168.68.197</span><br><span class="line">The authenticity of host &#x27;192.168.68.197 (192.168.68.197)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:0h5hViR5234yJ3VqbuATQApvu+RONcbhhOygThKadjk.</span><br><span class="line">This key is not known by any other names</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.68.197&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">root@192.168.68.197&#x27;s password:</span><br></pre></td></tr></table></figure><p>但是容器的密码是什么呢？</p><p>其实并没有密码，如果我们想要使用密码得自己设置一个，输入 passwd 就可以设置密码。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># passwd</span></span><br><span class="line">Changing password <span class="keyword">for</span> root</span><br><span class="line">New password: </span><br><span class="line">Bad password: too short</span><br><span class="line">Retype password: </span><br><span class="line">passwd: password <span class="keyword">for</span> root changed by root</span><br><span class="line">/ <span class="comment"># </span></span><br></pre></td></tr></table></figure><p>这样我们就可以使用 root 用户名，加上自己设置的密码，来 ssh 连接上 alpine 容器。由于之前将 NAS 的特定文件夹挂载到 &#x2F;mnt，可以使用 ls &#x2F;mnt 命令，看看是否能在容器中看到 NAS 中的文件，可以的话就没问题了。</p><p>参考文档：<a href="https://www.cnblogs.com/zpcdbky/p/15568702.html">Alpine容器安装运行ssh - 同勉共进 - 博客园</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于目前绿联官方没有开启 ssh 的方法，这样导致我想通过 rsync 备份文件到 NAS 里就没法做到了。&lt;/p&gt;
&lt;p&gt;于是我想通过在 docker 里运行一个 alpine 容器，在容器里开启 ssh，而我只要将特定的目录挂载到容器内，就可以实现用 rsync 备份文</summary>
      
    
    
    
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
    <category term="NAS" scheme="https://powersee.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Windows 快捷方式如何使用相对路径</title>
    <link href="https://powersee.github.io/2023/06/windows-quick-access-relative-paths/"/>
    <id>https://powersee.github.io/2023/06/windows-quick-access-relative-paths/</id>
    <published>2023-06-24T04:44:00.000Z</published>
    <updated>2023-06-24T04:47:50.963Z</updated>
    
    <content type="html"><![CDATA[<p>现在我的有一个 a.exe 的程序，放在 C:\bin 里面。</p><p>直接选中按右键，在菜单中选择「创建快捷方式」，那么我们可以得到一个名为<code>a.exe - 快捷方式</code>的文件。此时它的属性是这样的</p><p><img src="/img/2023/image-20230618212051614.png" alt="image-20230618212051614"></p><p>可以观察到「目标」和「起始位置」都写上了完整路径。因此我们把这个快捷方式，放到其它地方，也可以双击来打开程序。</p><p>偶然间注意到，还有个备注选项。我在上面填写上 hehe，那么当我的鼠标放到快捷方式上面时，就会出现备注信息。</p><p><img src="/img/2023/image-20230618212612322.png" alt="image-20230618212612322"></p><p>想要使用相对路径，需要先把「起始位置」的内容删了。然后在「目标」后面的框加上 explorer.exe （注意有一个空格），然后再加上「要执行的程序相对于快捷方式的位置」。填写好后点右下角的「应用」。会自动加上「C:\Windows\」，并且图标也变成资源管理器的了。</p><p>这样一个使用相对路径的快捷方式就创建好了，我的用途是放在移动硬盘中，方便我在不同的电脑使用。</p><p><img src="/img/2023/image-20230618213144445.png" alt="image-20230618213144445"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在我的有一个 a.exe 的程序，放在 C:\bin 里面。&lt;/p&gt;
&lt;p&gt;直接选中按右键，在菜单中选择「创建快捷方式」，那么我们可以得到一个名为&lt;code&gt;a.exe - 快捷方式&lt;/code&gt;的文件。此时它的属性是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 拼接百度网盘链接</title>
    <link href="https://powersee.github.io/2023/05/js-baidu-netdisk-link/"/>
    <id>https://powersee.github.io/2023/05/js-baidu-netdisk-link/</id>
    <published>2023-05-24T15:55:58.000Z</published>
    <updated>2023-05-27T07:36:20.778Z</updated>
    
    <content type="html"><![CDATA[<p>有时在网页中，看到别人分享百度网盘链接。一般情况下，我点击链接之后，还需要输入提取码，才可以看到别人分享的文件。</p><p>我觉得应该可以通过代码，来减少一些步骤。举个例子，例如现在有这样的链接和提取码</p><blockquote><p><a href="https://pan.baidu.com/s/powersee_xxxx">https://pan.baidu.com/s/powersee_xxxx</a></p><p>提取码: psee</p></blockquote><p>那么只需要把链接改为 <a href="https://pan.baidu.com/s/powersee_xxxx?pwd=psee">https://pan.baidu.com/s/powersee_xxxx?pwd=psee</a> 就不需要手动输出提取码了。就是在原本链接后面加上「?pwd&#x3D;提取码」。</p><p>使用这样的代码可以实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link_area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link_area&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d_link = link_area.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> link_key = link_area.<span class="property">innerText</span>.<span class="title function_">match</span>(<span class="string">&#x27;提取码: (....)&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">d_link.<span class="property">target</span>=<span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line">d_link.<span class="property">href</span> += <span class="string">&#x27;?pwd=&#x27;</span> + link_key</span><br></pre></td></tr></table></figure><p>不过这样只能处理第一个链接。怎么修改代码让它可以处理多个链接？</p><p>思路：先查找到所有链接，再查找所有 「提取码」 ，只有再使用 for 循环遍历处理链接。最终代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link_area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link_area&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d_link = link_area.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> link_key = link_area.<span class="property">innerText</span>.<span class="title function_">match</span>(<span class="regexp">/提取码: (....)/g</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; d_link.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  d_link[i].<span class="property">target</span>=<span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line">  d_link[i].<span class="property">href</span> += <span class="string">&#x27;?pwd=&#x27;</span> + link_key[i].<span class="title function_">replace</span>(<span class="string">&#x27;提取码: &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取提取码部分比较麻烦，最终采用 replace 去掉多余的文字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时在网页中，看到别人分享百度网盘链接。一般情况下，我点击链接之后，还需要输入提取码，才可以看到别人分享的文件。&lt;/p&gt;
&lt;p&gt;我觉得应该可以通过代码，来减少一些步骤。举个例子，例如现在有这样的链接和提取码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>达芬奇如何处理升格、高帧率视频？</title>
    <link href="https://powersee.github.io/2023/05/DaVinci-High-frame-rate/"/>
    <id>https://powersee.github.io/2023/05/DaVinci-High-frame-rate/</id>
    <published>2023-05-17T03:29:47.000Z</published>
    <updated>2023-05-17T03:31:57.405Z</updated>
    
    <content type="html"><![CDATA[<p>假如我拍摄了一段 50 帧的视频，时长为 30 秒。此时如果我将视频放入时间线，那么肯定是占用 30 秒的时长。</p><p>由于我的时间线是设置 25 帧的，所以这段 50 帧的视频，我其实是可以让它以 50% 的速度播放的，这样 30 秒的视频就可以变成 60 秒了。</p><p>但如果我直接在时间线上，选中素材右键选择「更改片段速度」，将速度改为 50%，那么会发现，变成 12.5 帧每秒了。</p><p><img src="/img/2023/change-speed.jpg" alt="change-speed"></p><p>此时播放视频我们也可以明显感受到卡顿。</p><p>其实正确的做法是，在「媒体池」选中素材，右键选择「片段属性」，在「视频」标签下更改「视频帧率」的值。例如我改为 25。</p><p><img src="/img/2023/clip-attributes.jpg" alt="clip-attributes"></p><p>之后只需要将视频素材从媒体池，拖到时间线上，就会发现原来 30 秒的视频现在变成 60 秒了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如我拍摄了一段 50 帧的视频，时长为 30 秒。此时如果我将视频放入时间线，那么肯定是占用 30 秒的时长。&lt;/p&gt;
&lt;p&gt;由于我的时间线是设置 25 帧的，所以这段 50 帧的视频，我其实是可以让它以 50% 的速度播放的，这样 30 秒的视频就可以变成 60 秒了。</summary>
      
    
    
    
    
    <category term="视频" scheme="https://powersee.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>威联通添加 crontab 任务正确的做法</title>
    <link href="https://powersee.github.io/2023/05/qnap-crontab2/"/>
    <id>https://powersee.github.io/2023/05/qnap-crontab2/</id>
    <published>2023-05-16T09:03:27.000Z</published>
    <updated>2023-05-16T09:07:59.236Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2023/05/qnap-crontab/">之前的文章</a> 我在威联通里面直接用 <code>crontab -e</code> 添加定时任务，机器重启之后就会被覆盖掉。看来这种方式添加的任务不能持久保存。</p><p>想要永久保存，需要编辑 &#x2F;etc&#x2F;config&#x2F;crontab，可以使用 vi 或者 nano。</p><p>添加好任务后，执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab /etc/config/crontab &amp;&amp; /etc/init.d/crond.sh restart</span><br></pre></td></tr></table></figure><p>来重启 cron 守护进程。</p><p>这样重启机器任务也依然还在。</p><p>参考官方文档：<a href="https://wiki.qnap.com/wiki/Add_items_to_crontab">Add items to crontab - QNAPedia</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/2023/05/qnap-crontab/&quot;&gt;之前的文章&lt;/a&gt; 我在威联通里面直接用 &lt;code&gt;crontab -e&lt;/code&gt; 添加定时任务，机器重启之后就会被覆盖掉。看来这种方式添加的任务不能持久保存。&lt;/p&gt;
&lt;p&gt;想要永久保存，需要编辑 &amp;</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的 some 方法</title>
    <link href="https://powersee.github.io/2023/05/javascript-some/"/>
    <id>https://powersee.github.io/2023/05/javascript-some/</id>
    <published>2023-05-15T02:30:49.000Z</published>
    <updated>2023-05-15T02:31:48.525Z</updated>
    
    <content type="html"><![CDATA[<p>假如我有一段字符串，我需要判断它是否以 one 开头的，可以这样写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.<span class="title function_">startsWith</span>(<span class="string">&#x27;one&#x27;</span>))</span><br></pre></td></tr></table></figure><p>假如我还需要判断是否以 two 开头：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.<span class="title function_">startsWith</span>(<span class="string">&#x27;one&#x27;</span>) || str.<span class="title function_">startsWith</span>(<span class="string">&#x27;two&#x27;</span>))</span><br></pre></td></tr></table></figure><p>如果后面还需要继续加，岂不是要写很多个 startsWith ？</p><p>更好的做法是使用 some() 方法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixes = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;three body&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (prefixes.<span class="title function_">some</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> str.<span class="title function_">startsWith</span>(prefix))) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处定义一个数组，用 some() 方法遍历数组中的每一个元素。如果存在任何一个前缀与字符串匹配，则返回 <code>true</code>，否则返回 <code>false</code>。</p><p>上面的代码，最后会打印出 str 的值，如果我还想获得 prefix 的值，此时是 three，可以这么写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixes = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;one three body&#x27;</span>;</span><br><span class="line"></span><br><span class="line">prefixes.<span class="title function_">some</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> &#123;</span><br><span class="line">    str.<span class="title function_">startsWith</span>(prefix) ? </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prefix&#125;</span> match ⭐️⭐️⭐️`</span>) : </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(prefix);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ? : 是 if else 的简短写法</span></span><br></pre></td></tr></table></figure><p>此时输出的结果是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">one match ⭐️⭐️⭐️</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure><p>可以发现，明明数组中第一个元素已经匹配到了，但是后面的元素还是继续判断。如果想要匹配到之后，后面的不判断，需要加一个 return。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> prefixes = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;one three body&#x27;</span>;</span><br><span class="line"></span><br><span class="line">prefixes.<span class="title function_">some</span>(<span class="function"><span class="params">prefix</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="title function_">startsWith</span>(prefix))&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prefix&#125;</span> match ⭐️⭐️⭐️`</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(prefix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试的时候我使用这个网站：<a href="https://rextester.com/l/nodejs_online_compiler">compile nodejs online (rextester.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如我有一段字符串，我需要判断它是否以 one 开头的，可以这样写&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keywo</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>威联通 qnap 使用 NFS 共享文件</title>
    <link href="https://powersee.github.io/2023/05/qnap-nfs/"/>
    <id>https://powersee.github.io/2023/05/qnap-nfs/</id>
    <published>2023-05-13T16:29:37.000Z</published>
    <updated>2023-05-14T02:45:03.158Z</updated>
    
    <content type="html"><![CDATA[<p>在威联通的控制台里面，提供4种文件共享方式：Win&#x2F;Mac&#x2F;NFS&#x2F;WebDAV</p><p>其中 Windows 的 smb 是最通用，我之前也是一直使用 smb 而已，毕竟 win 和 mac 都能用。</p><p>最近我想研究一下怎么开启 nfs 服务，让我的芝杜播放器可以访问威联通里的视频。</p><p>首先到控制台里面，「激活NFS v2&#x2F;v3服务」，「激活NFS v4服务」两个勾我都打上了。之后再点击一下底部的「应用」。</p><p><img src="/img/2023/qnap-nfs-enable.png.webp" alt="qnap-nfs-enable.png"></p><p>这么多版本，那它们的区别是什么呢？我到网上搜索一番。</p><p>之后找到了一篇文章：<a href="https://blog.csdn.net/qq_20332637/article/details/107796651">NFS各个版本之间的比较_nfsv3和nfsv4的区别</a></p><table><thead><tr><th>编号</th><th>版本</th><th>RFC</th><th>时间</th><th>页数</th></tr></thead><tbody><tr><td>1</td><td>NFSv2</td><td>rfc1094</td><td>1989年3月</td><td>27页</td></tr><tr><td>2</td><td>NFSv3</td><td>rfc1813</td><td>1995年6月</td><td>126页</td></tr><tr><td>3</td><td>NFSv4.0</td><td>rfc3530</td><td>2003年4月</td><td>275页</td></tr><tr><td>4</td><td>NFSv4.1</td><td>rfc5661</td><td>2010年1月</td><td>617页</td></tr></tbody></table><p>了解到的是：每个版本都在之前版本的基础上进行了改进，增加了新的功能和特性，提高了性能和安全性。</p><p>此时只是开启了 NFS 服务，还需要修改共享文件夹的权限。</p><p>到「控制台」「权限」「共享文件夹」里面，对想要共享的文件夹进行权限修改。例如我想改「Download」这个文件夹，需要点击右侧操作的第二个图标。然后按照下图这样修改。</p><p><img src="/img/2023/qnap-nfs-permission.png.webp" alt="qnap-nfs-permission.png"></p><p>IP 地址我填 <code>192.168.68.1/24</code> 也就是说我路由器里的所有设备都可以访问。因为 IP 地址是 32 位的，<code>/24</code> 就是说只要 IP 地址是 <code>192.168.68.</code> 开头的，都可以访问。</p><p>当然我们也可以设置只有一个 IP 可以访问，例如填写个 <code>192.168.68.123</code> 这样。</p><p>由于我只是想播放 nas 里面的视频而已，所以给只读权限就够了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在威联通的控制台里面，提供4种文件共享方式：Win&amp;#x2F;Mac&amp;#x2F;NFS&amp;#x2F;WebDAV&lt;/p&gt;
&lt;p&gt;其中 Windows 的 smb 是最通用，我之前也是一直使用 smb 而已，毕竟 win 和 mac 都能用。&lt;/p&gt;
&lt;p&gt;最近我想研究一下怎么</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Mac 如何将 jfif 图片转换为 jpg</title>
    <link href="https://powersee.github.io/2023/05/Mac-jfif/"/>
    <id>https://powersee.github.io/2023/05/Mac-jfif/</id>
    <published>2023-05-12T16:39:11.000Z</published>
    <updated>2023-05-14T01:18:45.248Z</updated>
    
    <content type="html"><![CDATA[<p>我发现 Mac 似乎无法直接预览 jfif 格式的图片，按空格键之后并不能显示图片内容。</p><p>不过 Mac 自带的「预览」APP 是可以直接打开 jfif 图片的。我们需要选中图片，右键「打开方式」「其他…」</p><p>之后在下方的「启用：」选择「所有应用程序」，再选「预览」就可以了。</p><p><img src="/img/2023/preview-jfif-shadow.webp" alt="preview-jfif"></p><p>此时我们就可以打开这样图片了，然后再通过「文件」「导出」就能保存为 jpg 或者 png 了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我发现 Mac 似乎无法直接预览 jfif 格式的图片，按空格键之后并不能显示图片内容。&lt;/p&gt;
&lt;p&gt;不过 Mac 自带的「预览」APP 是可以直接打开 jfif 图片的。我们需要选中图片，右键「打开方式」「其他…」&lt;/p&gt;
&lt;p&gt;之后在下方的「启用：」选择「所有应用程序</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>威联通 qnap 定时执行 Python 脚本</title>
    <link href="https://powersee.github.io/2023/05/qnap-crontab/"/>
    <id>https://powersee.github.io/2023/05/qnap-crontab/</id>
    <published>2023-05-11T16:01:33.000Z</published>
    <updated>2023-05-16T09:07:44.217Z</updated>
    
    <content type="html"><![CDATA[<p>在上期 <a href="/2023/05/qnap-python3">威联通 qnap 使用 Python3</a> 已经弄明白，怎么在 shell 里使用 Python3 了。但是我想要的是能够定时执行 Python3 脚本。</p><p>通过执行 <code>pip3 -V</code> 可以查找到它在哪个位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pip3 -V</span><br><span class="line">pip 22.0.4 from /opt/python3/lib/python3.10/site-packages/pip (python 3.10)</span><br><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # which python3</span><br><span class="line">/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/python3</span><br></pre></td></tr></table></figure><p>直接使用 <code>pip3 install xxx</code> 来安装模块的话，是安装到 <code>/opt/python3/lib/python3.10/site-packages/</code> 里面的。</p><p>而且它提示我更新 pip 版本给的命令是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/python3/bin/python3.10 -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>跟我预期的不一样，我还以为会使用 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/python3.10</code> 呢。</p><p>查询一下，发现 <code>/opt/python3/bin/python3.10</code> 并不是软链接。那为什么 <code>/opt/python3/bin/</code> 里面的内容和 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3/bin/</code> 一模一样呢？</p><p>后来我知道了，原来 <code>/opt/python3</code> 就是一个符号链接而已。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -alh /opt/python3</span><br><span class="line">lrwxrwxrwx 1 admin administrators 43 2023-05-04 07:15 /opt/python3 -&gt; /share/CACHEDEV1_DATA/.qpkg/Python3/python3/</span><br></pre></td></tr></table></figure><p>为了命令比较简短一些，我还是用 <code>/opt/python3/bin/python3</code></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>添加定时任务，例如我让它每天早上 7 点 18 分自动执行一个 Python 脚本。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18 7 * * * /opt/python3/bin/python3 /share/CACHEDEV1_DATA/Multimedia/powersee_script.py</span><br></pre></td></tr></table></figure><p>这样添加重启机器后任务就没了，详见 <a href="/2023/05/qnap-crontab/">威联通添加 crontab 任务正确的做法</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在上期 &lt;a href=&quot;/2023/05/qnap-python3&quot;&gt;威联通 qnap 使用 Python3&lt;/a&gt; 已经弄明白，怎么在 shell 里使用 Python3 了。但是我想要的是能够定时执行 Python3 脚本。&lt;/p&gt;
&lt;p&gt;通过执行 &lt;code&gt;pip</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>威联通 qnap 使用 Python3</title>
    <link href="https://powersee.github.io/2023/05/qnap-python3/"/>
    <id>https://powersee.github.io/2023/05/qnap-python3/</id>
    <published>2023-05-11T07:43:55.000Z</published>
    <updated>2023-05-11T07:49:46.133Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我发现在威联通上面使用 Python3 还挺麻烦的。即使我已经在 App Center 里面安装好了，但是当我通过 ssh 连接威联通 nas 时，却发现找不到 Python3，Python2 倒是可以找到。</p><p><img src="/img/2023/qnap-Python3.webp" alt="qnap-Python3"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[~] # python3</span><br><span class="line">-sh: python3: command not found</span><br><span class="line">[~] # python</span><br><span class="line">Python 2.7.13 (default, Mar 24 2022, 10:03:40)</span><br><span class="line">[GCC 4.9.2] on linux2</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>那问题来了。</p><h4 id="安装好的-Python3-在哪里呢？"><a href="#安装好的-Python3-在哪里呢？" class="headerlink" title="安装好的 Python3 在哪里呢？"></a>安装好的 Python3 在哪里呢？</h4><p>答：在 <code>/share/CACHEDEV1_DATA/.qpkg/Python3</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # ls</span><br><span class="line">python3/  python3.bashPython3.sh*  README.mdsrc/</span><br></pre></td></tr></table></figure><h4 id="那要如何使用它呢？"><a href="#那要如何使用它呢？" class="headerlink" title="那要如何使用它呢？"></a>那要如何使用它呢？</h4><p>通过查看 <code>README.md</code> 的内容，我们可以看到这些内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat README.md</span><br><span class="line">Run the following command to enter Python3 environment:</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">$ . /etc/profile.d/python3.bash</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>也就是说，我们需要在 shell 里执行一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. /etc/profile.d/python3.bash</span><br></pre></td></tr></table></figure><p>这条命令，才可以进入 Python3 环境（注意 <code>.</code> 之后有一个空格）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # . /etc/profile.d/python3.bash</span><br><span class="line">[/share/CACHEDEV1_DATA/.qpkg/Python3] # python3</span><br><span class="line">Python 3.10.4 (main, May  6 2022, 08:22:01) [GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="进阶了解"><a href="#进阶了解" class="headerlink" title="进阶了解"></a>进阶了解</h4><p>其实这里的 <code>.</code> 也可以换为 source，它们是等价的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[~] # python3</span><br><span class="line">-sh: python3: command not found</span><br><span class="line">[~] # source /etc/profile.d/python3.bash</span><br><span class="line">[~] # python3</span><br><span class="line">Python 3.10.4 (main, May  6 2022, 08:22:01) [GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>而且我们可以发现，<code>/etc/profile.d/python3.bash</code> 其实是 <code>/share/CACHEDEV1_DATA/.qpkg/Python3/python3.bash</code> 符号链接（Symbolic Link）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -alh /etc/profile.d/python3.bash</span><br><span class="line">lrwxrwxrwx 1 powersee administrators 48 2023-05-04 07:15 /etc/profile.d/python3.bash -&gt; /share/CACHEDEV1_DATA/.qpkg/Python3/python3.bash</span><br></pre></td></tr></table></figure><p>看看 python3.bash 里面的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat python3.bash</span><br><span class="line">_PYTHON3_QPKG_CONF=/etc/config/qpkg.conf</span><br><span class="line">_PYTHON3_QPKG_NAME=&quot;Python3&quot;</span><br><span class="line">_PYTHON3_QPKG_ROOT=$(/sbin/getcfg $_PYTHON3_QPKG_NAME Install_Path -f $&#123;_PYTHON3_QPKG_CONF&#125;)</span><br><span class="line">_PYTHON3_QPKG_BIN=&quot;$&#123;_PYTHON3_QPKG_ROOT&#125;/python3/bin&quot;</span><br><span class="line">echo &quot;$&#123;PATH&#125;&quot; | grep -q  $&#123;_PYTHON3_QPKG_BIN&#125; || export PATH=$&#123;_PYTHON3_QPKG_BIN&#125;:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>我尝试过将 <code>source /etc/profile.d/python3.bash</code> 这条命令，添加到 <code>.bash_profile</code> 里面，但是重新进行 ssh 连接，发现没有效果，并不能直接执行 python3 来进入交互界面。</p><p>之后我发现默认使用的是 <code>/bin/sh</code>，但是我执行 <code>bash</code> 之后，发现依然是 <code>/bin/sh</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[admin@qnap test]# echo $SHELL</span><br><span class="line">/bin/sh</span><br></pre></td></tr></table></figure><p>之后我发现，里面的 bash 其实 sh 的符号链接……</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ls -al /bin/bash</span><br><span class="line">lrwxrwxrwx 1 admin administrators 2 2023-05-04 15:09 /bin/bash -&gt; sh*</span><br></pre></td></tr></table></figure><p>所以我应该把命令添加到 <code>~/.profile</code> 里面才对。之后再次 ssh 就可以直接使用 Python3 了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我发现在威联通上面使用 Python3 还挺麻烦的。即使我已经在 App Center 里面安装好了，但是当我通过 ssh 连接威联通 na</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用自定义脚本，在渲染前检查图片链接</title>
    <link href="https://powersee.github.io/2023/05/hexo-img-before-render/"/>
    <id>https://powersee.github.io/2023/05/hexo-img-before-render/</id>
    <published>2023-05-07T15:57:32.000Z</published>
    <updated>2023-05-07T16:08:55.101Z</updated>
    
    <content type="html"><![CDATA[<p>前篇：<a href="/2023/05/hexo-custom-script">hexo 自定义 js 脚本</a></p><p>我平时都是在 typora 里面写好文章内容，完成之后，再到 hexo 新建文章，然后将之前写好的内容复制粘贴过来。</p><p>但是图片的链接会发生变化，例如原本的链接是 ‘img&#x2F;2023&#x2F;mac-shortcut-key.webp’，复制后就变成了 ‘..&#x2F;..&#x2F;..&#x2F;Nutstore Files&#x2F;markdown&#x2F;img&#x2F;2023&#x2F;mac-shortcut-key.webp’ 这样的链接。想要让 hexo 渲染后能正常显示，需要把它变成 ‘&#x2F;img&#x2F;2023&#x2F;mac-shortcut-key.webp’</p><p>所以我之前都是手动修改图片链接的。如果文章中就一两张图，我就使用鼠标滑动选中，再删除。如果图片比较多，那就查找替换，也就几秒能搞定。</p><p>但这种机械重复的操作，肯定还是用代码来处理比较好。</p><p>我猜想应该也有其他人，也有同样的困扰吧。之后我在插件中心 <a href="https://hexo.io/plugins/">Plugins | Hexo</a>，搜索一下 img，我找到了这个项目：<a href="https://github.com/cocowool/hexo-image-link">cocowool&#x2F;hexo-image-link: 当MD中引用本地文件时，处理生成的html中的图片链接</a></p><p>查看他的代码，我发现里面使用了 <code>before_post_render</code> 这个参数。</p><p>处理的过程就是在渲染之前，查找一下图片链接，再处理图片链接。</p><p>于是我参考他的代码，最后达到了我的目的。这样会在渲染时，检查文章中所有的图片链接，如果发现有 <code>../../../Nutstore Files/markdown</code>，就将这个前缀去掉，但是不会修改源文件。我们的 md 文件还是原来的样子。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> str = <span class="string">&#x27;../../../Nutstore Files/markdown&#x27;</span></span><br><span class="line"></span><br><span class="line">    data.<span class="property">content</span> = data.<span class="property">content</span>.<span class="title function_">replace</span>(<span class="regexp">/!\[(.*?)\]\((.*?)\)/gi</span>, <span class="keyword">function</span>(<span class="params">match, p1, p2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p2.<span class="title function_">includes</span>(str)) &#123;</span><br><span class="line">            <span class="comment">// 替换图片链接</span></span><br><span class="line">            p2 = p2.<span class="title function_">replace</span>(str, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成对应的 &lt;img&gt; 标签</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;p2&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;p1&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> match; <span class="comment">// 返回原始的 Markdown 图片语法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过后来由于坚果云自动升级，图片链接的前缀已经不是 <code>../../../Nutstore Files/markdown</code> 了，所以我需要修改一下脚本。可能其他人的链接也跟我不一样，只需要修改一下就行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前篇：&lt;a href=&quot;/2023/05/hexo-custom-script&quot;&gt;hexo 自定义 js 脚本&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我平时都是在 typora 里面写好文章内容，完成之后，再到 hexo 新建文章，然后将之前写好的内容复制粘贴过来。&lt;/p&gt;
&lt;p&gt;但是图片</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo 自定义 js 脚本</title>
    <link href="https://powersee.github.io/2023/05/hexo-custom-script/"/>
    <id>https://powersee.github.io/2023/05/hexo-custom-script/</id>
    <published>2023-05-06T07:53:23.000Z</published>
    <updated>2023-05-06T08:05:02.202Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 的官方文档，在插件部分有写</p><blockquote><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p></blockquote><p>那么我在博客根目录，新建 <code>scripts</code> 目录，然后里面放一个 <code>test.js</code> 的 JavaScript 文件，内容就写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;haha, powersee&#x27;</span>)</span><br></pre></td></tr></table></figure><p>之后我执行 <code>hexo s</code> 启动 hexo 服务器，终端就会输出我自定义的内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">haha, powersee</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>也就是说这个脚本成功执行了。</p><p>而且还可以建立多个 js 文件，例如 test2.js test3.js …</p><p>那我们可以通过建立脚本文件，来实现一些自动化操作。在 <a href="https://hexo.io/zh-cn/api/filter">过滤器（Filter） | Hexo</a> 里面有提供一些例子。用得比较多的应该是 before_post_render。</p><p>过滤器列表一共有这些：</p><ol><li><a href="https://hexo.io/zh-cn/api/filter#before-post-render">before_post_render</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-post-render">after_post_render</a></li><li><a href="https://hexo.io/zh-cn/api/filter#before-exit">before_exit</a></li><li><a href="https://hexo.io/zh-cn/api/filter#before-generate">before_generate</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-generate">after_generate</a></li><li><a href="https://hexo.io/zh-cn/api/filter#template-locals">template_locals</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-init">after_init</a></li><li><a href="https://hexo.io/zh-cn/api/filter#new-post-path">new_post_path</a></li><li><a href="https://hexo.io/zh-cn/api/filter#post-permalink">post_permalink</a></li><li><a href="https://hexo.io/zh-cn/api/filter#after-render">after_render</a></li><li><a href="https://hexo.io/zh-cn/api/filter#server-middleware">server_middleware</a></li></ol><p>前段时间我耗费了不少时间在研究这个，感觉还是挺有趣的。目前实现的功能有：检查文章中的图片链接、自动复制图片到 hexo 博客目录中。</p><p>后面整理整理再分享出来。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo 的官方文档，在插件部分有写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 &lt;code&gt;scripts&lt;/code&gt; 文件夹，在启动时就会自动载入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>贴吧图片批量下载器</title>
    <link href="https://powersee.github.io/2023/05/tieba-image-download/"/>
    <id>https://powersee.github.io/2023/05/tieba-image-download/</id>
    <published>2023-05-05T15:04:25.000Z</published>
    <updated>2023-05-05T15:05:50.209Z</updated>
    
    <content type="html"><![CDATA[<p>之前为了制作漫画，放到 kindle 上面来观看，我写了这个程序。可以用来批量下载贴吧的图片。</p><p><img src="/img/2023/tieba-download.png" alt="tieba-download"></p><p>使用方法也很简单，把贴吧的链接粘贴进来，再点击下面的「开始下载」就可以了。</p><p><img src="/img/2023/tieba-download2.png" alt="tieba-download2"></p><p>也可以只输入帖子的 id 就行，软件会先判断的，发现不是完整的链接，它会自动补全的。</p><p>下载后，会在软件的同级文件夹下，多出一个文件夹，里面就是我们下载好的图片，它会按照顺序排好重命名。</p><p><img src="/img/2023/tieba-onepiece.webp" alt="tieba-onepiece"></p><p>前段时间有网友跟我反馈不能使用了，所以我更新了一下代码，并且把我修改软件的日期写上去。</p><p>目前软件可以从我的下载站：<a href="https://pan.powersee.top/">https://pan.powersee.top/</a> 里面下载到，在「windows应用」里面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前为了制作漫画，放到 kindle 上面来观看，我写了这个程序。可以用来批量下载贴吧的图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/tieba-download.png&quot; alt=&quot;tieba-download&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用方法也很简单，把贴吧的</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
