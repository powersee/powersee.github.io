<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="https://powersee.github.io/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2023-10-12T08:46:51.223Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不错的通知方式——PushMe</title>
    <link href="https://powersee.github.io/2023/10/PushMe/"/>
    <id>https://powersee.github.io/2023/10/PushMe/</id>
    <published>2023-10-12T08:44:45.000Z</published>
    <updated>2023-10-12T08:46:51.223Z</updated>
    
    <content type="html"><![CDATA[<p>刚才没事看看青龙的更新日志，发现它从 7 月份开始，支持多一种通知方式 PushMe，了解了下，发现还挺不错的。</p><p>官网：<a href="https://push.i-i.me/">PushMe 一个简单轻量的Android消息客户端 (i-i.me)</a></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><hr><ul><li>简单：无需登录注册，安装后，在app上获取push_key，即可使用</li><li>轻量：android原生开发，无多余功能，安装包大小不到7M</li><li>可靠：支持离线消息</li><li>兼容：接口兼容企业微信&#x2F;钉钉&#x2F;飞书群机器人，直接替换即可</li><li>Markdown：消息内容支持markdown格式</li><li>数据小屏：方便查看数据消息 new</li></ul><p>它不同于我之前使用的 server 酱，爱语飞飞，Pushplus 这些需要使用微信公众号的。pushme 是一款安卓 APP，那么就只有安卓设备可以使用咯。</p><p>官网上提供的下载方式有 GitHub 和 Gitee，不过它并不是开源软件，只是把 apk 安装包放上去去。到 GitHub 上可以发现仓库只是放了图片和 apk 安装包而已。</p><p>这 APP 确实简洁，甚至连自己 APP 图标都没有。</p><p>我在 MIUI 上安装好后，需要自己去打开应用的通知权限。</p><p>第一次使用，需要在左侧获取一下 push_key。然后可以在 APP 内给自己发消息，也可以在<a href="https://push.i-i.me/">官网</a>，主要是测试能否收到消息。</p><p><img src="/img/2023/pushme-test-shadow.webp" alt="pushme-test-shadow"></p><p>目前也使用有 10 来天了，感觉还不错。目前一些青龙脚本我就是使用它，来发送通知到手机的。</p><p>如果是自己写的 Python 脚本，只需要在加入这样几行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> notify</span><br><span class="line"></span><br><span class="line">title = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">notify.send(title, result)</span><br></pre></td></tr></table></figure><p>就可以在脚本运行完成之后，通过 pushme 把内容发送到手机。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>不过我明明给这个 APP 自启动的权限，并且关闭了省电限制，也让它固定在后台，但是却发现依然不能收到通知，只能打开 APP 后刷新才能看到消息。</p><p>而且这 APP 一放到后台没多久，就会弹出一条通知「通道状态：Disconnected」</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>我发现直接把 APP 从后台划掉，这样就可以直接收到通知了。到「通知管理」里面，将 StateChannel 关掉，就不会收到通道状态的消息了。</p><h3 id="更新-notice"><a href="#更新-notice" class="headerlink" title="更新 notice"></a>更新 notice</h3><p>qinglong 需要更新 notice 文件，由于我只使用 Python 脚本，所以去 GitHub 下载新的 <a href="https://github.com/whyour/qinglong/blob/develop/sample/notify.py">qinglong&#x2F;sample&#x2F;notify.py at develop · whyour&#x2F;qinglong · GitHub</a></p><p>然后替换掉原来的就可以了。</p><p>通过观察 notify.py 文件，可以看到这样的内容</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pushme</span>(<span class="params">title: <span class="built_in">str</span>, content: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用 PushMe 推送消息。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> push_config.get(<span class="string">&quot;PUSHME_KEY&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PushMe 服务的 PUSHME_KEY 未设置!!\n取消推送&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;PushMe 服务启动&quot;</span>)</span><br><span class="line"></span><br><span class="line">    url = <span class="string">f&#x27;https://push.i-i.me/?push_key=<span class="subst">&#123;push_config.get(<span class="string">&quot;PUSHME_KEY&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: title,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: content,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span> <span class="keyword">and</span> response.text == <span class="string">&quot;success&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;PushMe 推送成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;PushMe 推送失败！<span class="subst">&#123;response.status_code&#125;</span> <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>虽然里面用的是 post，不过其实我们把它转换一下，然后用 get 也是可以发送通知的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://push.i-i.me/?push_key=KEY&amp;title=标题&amp;content=内容</span><br></pre></td></tr></table></figure><p>把这里的 KEY 换成自己的秘钥，然后把链接复制到浏览器访问一下，手机端就可以收到消息。</p><p><img src="/img/2023/pushme-msg.webp" alt="pushme-msg"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚才没事看看青龙的更新日志，发现它从 7 月份开始，支持多一种通知方式 PushMe，了解了下，发现还挺不错的。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://push.i-i.me/&quot;&gt;PushMe 一个简单轻量的Android消息客户端 (i-i.me)&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://powersee.github.io/tags/Python/"/>
    
    <category term="工具" scheme="https://powersee.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>caddy 添加身份验证 basicauth</title>
    <link href="https://powersee.github.io/2023/10/caddy-basicauth/"/>
    <id>https://powersee.github.io/2023/10/caddy-basicauth/</id>
    <published>2023-10-08T03:24:46.000Z</published>
    <updated>2023-10-08T03:26:33.720Z</updated>
    
    <content type="html"><![CDATA[<p>在 shell 里执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caddy hash-password</span><br></pre></td></tr></table></figure><p>然后输入两次密码，它会帮我们生成 hash-password 字符串。</p><p>这里我输入 powersee 作为密码，输入密码的过程中不会显示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># caddy hash-password</span><br><span class="line">Enter password:</span><br><span class="line">Confirm password:</span><br><span class="line">$2a$14$plaWtwb6sWHLMe/M6J9YqeOzbfabMeOaSm51gnHAegXpraaRyARLm</span><br></pre></td></tr></table></figure><p>然后就得到了这样的字符串：<code>$2a$14$plaWtwb6sWHLMe/M6J9YqeOzbfabMeOaSm51gnHAegXpraaRyARLm</code></p><p>这步的作用是通过哈希密码，来对密码进行加密。它的特点是「不可逆」，没法通过上面的字符串来反推我的密码。</p><p>而且，我再执行一次命令，依然使用 powersee 作为密码，得到的字符串和上次也不一样。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># caddy hash-password</span><br><span class="line">Enter password:</span><br><span class="line">Confirm password:</span><br><span class="line">$2a$14$DDZ.pSpoDCjSLU6t4VCofer8kV/GMFRAiwlFLKQy2GR46/M26pvvy</span><br></pre></td></tr></table></figure><p>获得这个加密的密码后，我们需要把它添加到 caddy 的配置文件 Caddyfile 里面。</p><p>我里面的内容原本是这样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:80 &#123;</span><br><span class="line">        root * /usr/share/caddy</span><br><span class="line">        file_server</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后变成这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:80 &#123;</span><br><span class="line">        basicauth * &#123;</span><br><span class="line">                admin       $2a$14$rwVbmOSeXDBg16KT3w2FtOPRmskImqGPWBmHhtAHFDjelpDANl8Zq</span><br><span class="line">        &#125;</span><br><span class="line">        root * /usr/share/caddy</span><br><span class="line">        file_server</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是多添加了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">basicauth * &#123;</span><br><span class="line">        admin       $2a$14$rwVbmOSeXDBg16KT3w2FtOPRmskImqGPWBmHhtAHFDjelpDANl8Zq</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时用户名是 admin，密码是后面的字符串，也就是之前的 powersee。</p><p>于是此时我通过 80 端口来访问这台服务器的话，会弹出一个窗口，然后输入用户名和密码，验证成功才能看到里面的内容。</p><p><img src="/img/2023/caddy-basicauth.webp" alt="caddy-basicauth"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 shell 里执行&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;caddy hash-password&lt;/span&gt;&lt;br&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="web" scheme="https://powersee.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Linux 使用 zip 创建加密压缩包</title>
    <link href="https://powersee.github.io/2023/10/linux-zip-password/"/>
    <id>https://powersee.github.io/2023/10/linux-zip-password/</id>
    <published>2023-10-06T17:30:39.000Z</published>
    <updated>2023-10-06T17:31:14.468Z</updated>
    
    <content type="html"><![CDATA[<p>在群晖和威联通上面都自带有 zip，可以在 shell 里执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -v</span><br></pre></td></tr></table></figure><p>来查看信息，这是在群晖 6.X 版本里的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># zip -v</span><br><span class="line">Copyright (c) 1990-2008 Info-ZIP - Type &#x27;zip &quot;-L&quot;&#x27; for software license.</span><br><span class="line">This is Zip 3.0 (July 5th 2008), by Info-ZIP.</span><br><span class="line">Currently maintained by E. Gordon.  Please send bug reports to</span><br><span class="line">the authors using the web page at www.info-zip.org; see README for details.</span><br><span class="line"></span><br><span class="line">Latest sources and executables are at ftp://ftp.info-zip.org/pub/infozip,</span><br><span class="line">as of above date; see http://www.info-zip.org/ for other sites.</span><br><span class="line"></span><br><span class="line">Compiled with gcc 4.9.3 20150311 (prerelease) for Unix (Linux ELF) on May 19 2018.</span><br></pre></td></tr></table></figure><p>这是在威联通 5.X 版本里的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Compiled with gcc 4.9.2 for Unix (Linux ELF) on Mar 24 2022.</span><br></pre></td></tr></table></figure><p>使用 zip 创建压缩包很简单</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip test.zip test.js</span><br></pre></td></tr></table></figure><p>使用这样的命令就可以将 <code>test.js</code> 添加到名为 <code>test.zip</code> 的压缩包里面。</p><blockquote><p>test.zip 是生成的压缩文件</p><p>test.js 是被压缩的文件</p></blockquote><p>如果被压缩的对象是文件夹，我们需要添加 <code>-r</code> 参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -r test.zip test</span><br></pre></td></tr></table></figure><p>如果需要加密，需要使用 <code>-P</code> 参数。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -rP powersee test.zip test</span><br></pre></td></tr></table></figure><p>此时压缩包的密码是 <code>powersee</code></p><p>解压我们可以使用 <code>unzip</code>，不过我发现群晖系统不带这个工具，威联通倒是有带。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在群晖和威联通上面都自带有 zip，可以在 shell 里执行&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zip -v&lt;/span&gt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vps 服务器自建 vaultwarden 密码管理器</title>
    <link href="https://powersee.github.io/2023/10/vps-vaultwarden/"/>
    <id>https://powersee.github.io/2023/10/vps-vaultwarden/</id>
    <published>2023-10-06T02:52:04.000Z</published>
    <updated>2023-10-06T17:32:23.523Z</updated>
    
    <content type="html"><![CDATA[<p>本次实验环境：Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.15.0-67-generic x86_64)</p><p>系统已安装好 Docker，先把容器运行起来。</p><p>项目地址：<a href="https://github.com/dani-garcia/vaultwarden">https://github.com/dani-garcia/vaultwarden</a></p><p>Docker 创建命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name vaultwarden -v /opt/bitwarden/:/data/ --restart unless-stopped -p 55555:80 vaultwarden/server:latest</span><br></pre></td></tr></table></figure><p>之后安装 caddy 来进行反向代理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https</span><br><span class="line">curl -1sLf &#x27;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&#x27; | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg</span><br><span class="line">curl -1sLf &#x27;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&#x27; | sudo tee /etc/apt/sources.list.d/caddy-stable.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install caddy</span><br></pre></td></tr></table></figure><p>caddy 反向代理参考</p><p>复制下面的内容，修改为自己的域名，把它添加到 <code>/etc/caddy/Caddyfile</code> 里面</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vaultwarden.powersee.top &#123;</span><br><span class="line">reverse_proxy 127.0.0.1:55555</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 caddy</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart caddy</span><br></pre></td></tr></table></figure><p>之后在浏览器访问域名应该就可以了，使用 caddy 的好处是会自己添加 SSL 证书，而且会自动将 http 跳转到 https，相比起 NGINX 方便很多。</p><p>如果你没有 VPS 服务器的话，可以尝试 <a href="https://www.vultr.com/?ref=8161953-4F">vultr</a>，这个平台我自己使用了好几年了，可以了解看看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次实验环境：Ubuntu 22.04.2 LTS (GNU&amp;#x2F;Linux 5.15.0-67-generic x86_64)&lt;/p&gt;
&lt;p&gt;系统已安装好 Docker，先把容器运行起来。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.co</summary>
      
    
    
    
    
    <category term="服务器" scheme="https://powersee.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>UAC白名单小工具</title>
    <link href="https://powersee.github.io/2023/10/UACWhitelistTool/"/>
    <id>https://powersee.github.io/2023/10/UACWhitelistTool/</id>
    <published>2023-10-01T15:35:17.000Z</published>
    <updated>2023-10-01T15:39:52.951Z</updated>
    
    <content type="html"><![CDATA[<p>我之前就有过这样的疑惑，为什么 Windows 没有 UAC 白名单之类的功能？</p><p>有些频繁打开的应用，每一次打开都需要弹窗确认真心烦。</p><p>例如像原神，我每天基本打开两次，这样才能保证里面的树脂不浪费。</p><p><img src="/img/2023/genshin-uac.png" alt="genshin-uac"></p><p>所以我每天至少得点 用户账号控制 里面的“是”两次。</p><p>而现在，我找到了解决方法，使用 GitHub 上的一个开源工具——<a href="https://github.com/XIU2/UACWhitelistTool">UAC白名单小工具</a></p><p>国人开发的工具，文档是中文的，下载可以在 GitHub 的 release 上，也可以到蓝奏云。</p><ul><li>蓝奏云 ：<a href="https://pan.lanzouj.com/b073m0dne">https://pan.lanzouj.com/b073m0dne</a></li><li>Github：<a href="https://github.com/XIU2/UACWhitelistTool/releases">https://github.com/XIU2/UACWhitelistTool/releases</a></li></ul><p>不用安装，把里面的 exe 解压出来，直接双击打开就行。</p><p>之后把我们信任的应用拖进去就行，例如我把原神图标拖进去。</p><p><img src="/img/2023/uacwhitelist-add-genshin.png" alt="uacwhitelist-add-genshin">再点一下“添加到 UAC 白名单”，就能在桌面生成一个新的图标。我这里是多一个名为 “noUAC.launcher”的快捷方式。</p><p>这个我们是可以改名或者移动到其它地方的。</p><p>以后我们只要双击它就不会有弹窗确认了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我之前就有过这样的疑惑，为什么 Windows 没有 UAC 白名单之类的功能？&lt;/p&gt;
&lt;p&gt;有些频繁打开的应用，每一次打开都需要弹窗确认真心烦。&lt;/p&gt;
&lt;p&gt;例如像原神，我每天基本打开两次，这样才能保证里面的树脂不浪费。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>GDU 开源的磁盘分析工具</title>
    <link href="https://powersee.github.io/2023/09/gdu-go/"/>
    <id>https://powersee.github.io/2023/09/gdu-go/</id>
    <published>2023-09-30T09:26:54.000Z</published>
    <updated>2023-09-30T09:30:47.737Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/dundee/gdu">dundee&#x2F;gdu: Fast disk usage analyzer with console interface written in Go (github.com)</a></p><p>一款命令行工具，看起来和以前使用的 ncdu 差不多。目前在 GitHub 的 star 数为 2.8k。</p><p><img src="/img/2023/gdu-go.webp" alt="gdu-go"></p><p>它支持的平台还挺多的，Linux、Mac、Windows 都可以，毕竟是使用 GO 写的，编译多平台很方便。</p><p>我在 Mac 上使用 brew install gdu 来安装，完成后需要使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdu-go</span><br></pre></td></tr></table></figure><p>来使用它。</p><p>看 GitHub 上的文档，官方是写要用</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew install -f gdu</span><br><span class="line">brew <span class="built_in">link</span> --overwrite gdu  <span class="comment"># if you have coreutils installed as well</span></span><br></pre></td></tr></table></figure><p>查询一下 brew -f 的作用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f, --force</span><br><span class="line">      Remove a previously cached version and re-fetch.</span><br></pre></td></tr></table></figure><hr><p>上下方向键就是切换不同目录，左右键可以前进和后退。</p><p><code>shift + ？</code> 可以呼出帮助菜单。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">r重新扫描当前目录</span><br><span class="line">/按名称搜索</span><br><span class="line">q退出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In interactive mode:</span><br><span class="line">  ↑ or k                              Move cursor up</span><br><span class="line">  ↓ or j                              Move cursor down</span><br><span class="line">  → or Enter                          Go to highlighted directory</span><br><span class="line">  ← or h                              Go to parent directory</span><br><span class="line">  d                                   Delete the selected file or directory</span><br><span class="line">  e                                   Empty the selected directory</span><br><span class="line">  n                                   Sort by name</span><br><span class="line">  s                                   Sort by size</span><br><span class="line">  c                                   Show number of items in directory</span><br></pre></td></tr></table></figure><p>其中的快捷键 e 我觉得还挺新鲜的，清空选择的目录，就是相比于 d 的删除，e 只是清空里面的，目录本身还是保留下来。</p><p>使用 v 可以预览文件内容，预览一些文本时还不错。</p><p>感觉有点像 ranger。</p><p>使用它我发现微信占用的空间挺多的，其中有一个微信群，居然有 1GB 的聊天数据，这群我现在也没怎么看了，于是我在微信里右键「删除」，整个群的聊天信息就没了，它存放在我电脑的图片、文件也跟着删除了。当然只是电脑端的，手机端不影响。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/dundee/gdu&quot;&gt;dundee&amp;#x2F;gdu: Fast disk usage analyzer with console interface written in Go (github.com)&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
    <category term="Linux" scheme="https://powersee.github.io/tags/Linux/"/>
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>如何关闭 Safari 下载完自动打开文件？</title>
    <link href="https://powersee.github.io/2023/09/safari-turnoff-auto-open-file/"/>
    <id>https://powersee.github.io/2023/09/safari-turnoff-auto-open-file/</id>
    <published>2023-09-28T06:33:11.000Z</published>
    <updated>2023-09-28T06:34:19.352Z</updated>
    
    <content type="html"><![CDATA[<p>我发现在 Mac 上使用 Safari 下载完 MP3 音频文件后，它会自动使用「音乐」这个 APP 打开文件并播放。</p><p>解决方法，进入 Safari 的设置，在「通用」选项的最下方，把「下载后打开“安全”文件」前面的勾去掉就行。</p><p><img src="/img/2023/Safari-download-open.webp" alt="Safari-download-open"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我发现在 Mac 上使用 Safari 下载完 MP3 音频文件后，它会自动使用「音乐」这个 APP 打开文件并播放。&lt;/p&gt;
&lt;p&gt;解决方法，进入 Safari 的设置，在「通用」选项的最下方，把「下载后打开“安全”文件」前面的勾去掉就行。&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>给威联通 NAS 添加多一块固态硬盘</title>
    <link href="https://powersee.github.io/2023/09/qnap-add-second-disk/"/>
    <id>https://powersee.github.io/2023/09/qnap-add-second-disk/</id>
    <published>2023-09-27T14:12:17.000Z</published>
    <updated>2023-09-27T14:13:38.480Z</updated>
    
    <content type="html"><![CDATA[<p>最近翻出来一块老硬盘,120G 的 SATA 固态硬盘。</p><p>我想着既然是闲置的，那就装到 NAS 上吧，用来放一些读写比较频繁的文件，这样机械硬盘使用频率下降，我也不用老是听它转盘的声音。</p><p>于是使用 3 颗螺丝，将这块 2.5 英寸的硬盘固定到硬盘架，装入 NAS。如果 NAS 识别到硬盘，会发出“滴”的声音。</p><p><img src="/img/2023/qnap-ssd-cache.webp" alt="qnap-ssd-cache"></p><p>固态硬盘可以作为高速缓存来加速，我以前用过，没感受到有什么提升。</p><p>这里我是打算使用它，新建一个存储池。</p><p><img src="/img/2023/less-than-144GB.webp" alt="less-than-144GB"></p><p>结果系统提示，容量太小，无法创建存储池。</p><p><img src="/img/2023/create-new-volume.jpg" alt="create-new-volume"></p><p>于是我只能创建「新卷」，创建好后，再到 file station 里面创建共享文件夹，就可以使用它了。</p><p>后面我测试了下，可以移除的，不影响原来的机械硬盘。</p><p><img src="/img/2023/qnap-static-volume.webp" alt="qnap-static-volume"></p><p>也就是说，我现在有一个存储池，里面有两个卷，机械硬盘作为一个卷，固态硬盘作为一个卷。</p><p>我这里移除固态这个卷后，是可以把固态硬盘拔出来的。但是插回去后，固态硬盘里的文件就没了，因为它的移除有点像格式化吧。</p><p>这里的移除，容易让人误解。以为是卸载，就像电脑上要拔出U盘前的推出。</p><p>但它并不是这个意思，贴吧上就有人被坑了，而且还不止一个人。<a href="https://tieba.baidu.com/p/7847763843#/">https://tieba.baidu.com/p/7847763843#/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近翻出来一块老硬盘,120G 的 SATA 固态硬盘。&lt;/p&gt;
&lt;p&gt;我想着既然是闲置的，那就装到 NAS 上吧，用来放一些读写比较频繁的文件，这样机械硬盘使用频率下降，我也不用老是听它转盘的声音。&lt;/p&gt;
&lt;p&gt;于是使用 3 颗螺丝，将这块 2.5 英寸的硬盘固定到硬盘</summary>
      
    
    
    
    
    <category term="NAS" scheme="https://powersee.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Docker build 失败后如何删除清理？</title>
    <link href="https://powersee.github.io/2023/09/docker-build-fail-delete/"/>
    <id>https://powersee.github.io/2023/09/docker-build-fail-delete/</id>
    <published>2023-09-26T08:42:16.000Z</published>
    <updated>2023-09-26T08:44:56.551Z</updated>
    
    <content type="html"><![CDATA[<p>docker build 即使失败了，也会生成镜像的，此时我们可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>来查找出所有的镜像，构建失败的镜像 REPOSITORY 和 TAG 都是 <code>&lt;none&gt;</code>，而且我们也可以通过时间来判断。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPOSITORY         TAG         IMAGE ID       CREATED         SIZE</span><br><span class="line">powersee/siyuan    latest      8664365030da   4 hours ago     202MB</span><br><span class="line">siyuan             2.10.6      94877dcb3823   5 hours ago     201MB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      bf5c2d0d522c   5 hours ago     3GB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      c26fddb8b7ed   5 hours ago     1.93GB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      4f76c8d24d52   6 hours ago     865MB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      601859a2537a   6 hours ago     1.93GB</span><br><span class="line">siyuan-ce          2.10.6      10ce4886f886   8 hours ago     202MB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      253c841913eb   8 hours ago     3.03GB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      5fbb7e469e64   8 hours ago     1.93GB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      6b3c0b42b275   15 hours ago    865MB</span><br><span class="line">&lt;none&gt;             &lt;none&gt;      493bc3f0c9b5   15 hours ago    1.93GB</span><br></pre></td></tr></table></figure><p>要删除的话使用 docker rmi 加上 <code>IMAGE ID</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi bf5c2d0d522c</span><br></pre></td></tr></table></figure><p>而且支持同时删除多个</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi c26fddb8b7ed 4f76c8d24d52 601859a2537a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker build 即使失败了，也会生成镜像的，此时我们可以使用&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker im</summary>
      
    
    
    
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>无法拉取 Docker 镜像的另一种解决方案</title>
    <link href="https://powersee.github.io/2023/09/docker-pull-save-load/"/>
    <id>https://powersee.github.io/2023/09/docker-pull-save-load/</id>
    <published>2023-09-25T14:09:18.000Z</published>
    <updated>2023-09-25T14:10:31.624Z</updated>
    
    <content type="html"><![CDATA[<p>目前我拉取不了 docker 镜像，不管是 docker hub 的，还是 GitHub 的 ghcr.io 的。</p><p>我的解决方案，使用境外的 VPS 拉取镜像，然后通过 docker save 保存为 tar 归档包。接着把这个 tar 下载到本地，再使用 docker load 来加载。</p><p>我这里拉取的镜像是 memos</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ghcr.io/usememos/memos:latest</span><br></pre></td></tr></table></figure><p>目前最新的版本是 0.15.2，所以拉取完成之后，我使用这条命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o memos-15.2.tar ghcr.io/usememos/memos:latest</span><br></pre></td></tr></table></figure><p>此时我需要把文件从服务器下载到本地，可以使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>之类的来开启一个 http 服务</p><p>不过此时我是使用 root 身份，导致文件没法下载，所以我还得更改一下文件的权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 memos-15.2.tar</span><br></pre></td></tr></table></figure><p>本地我是需要把 docker 镜像放到 nas 里，所以我可以 ssh 连接到 nas，然后使用 wget 来下载。</p><p>之后使用 load 命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker load&lt;memos-15.2.tar </span><br><span class="line">09180e184944: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">d6149c35a41c: Loading layer [==================================================&gt;]  1.989MB/1.989MB</span><br><span class="line">41163094a155: Loading layer [==================================================&gt;]  59.53MB/59.53MB</span><br><span class="line">628f23364ad0: Loading layer [==================================================&gt;]   2.56kB/2.56kB</span><br><span class="line">The image ghcr.io/usememos/memos:latest already exists, renaming the old one with ID sha256:f930acc56434c179480c15382a8d2ef1651b44bc7f299e1b0bdff6d0f8d1c7eb to empty string</span><br><span class="line">Loaded image: ghcr.io/usememos/memos:latest</span><br></pre></td></tr></table></figure><p>就成功把镜像拉取到本地了，唉。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目前我拉取不了 docker 镜像，不管是 docker hub 的，还是 GitHub 的 ghcr.io 的。&lt;/p&gt;
&lt;p&gt;我的解决方案，使用境外的 VPS 拉取镜像，然后通过 docker save 保存为 tar 归档包。接着把这个 tar 下载到本地，再使用 d</summary>
      
    
    
    
    
    <category term="网络" scheme="https://powersee.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>如何制作透明表格图？</title>
    <link href="https://powersee.github.io/2023/09/excel-transparent-image/"/>
    <id>https://powersee.github.io/2023/09/excel-transparent-image/</id>
    <published>2023-09-24T15:39:50.000Z</published>
    <updated>2023-09-24T15:45:49.668Z</updated>
    
    <content type="html"><![CDATA[<p>如何制作一张透明的表格图片？</p><p>答：先用 excel 导出为 PDF，然后用将 PDF 拖入 Photoshop 里，再导出为 png 就行。</p><p>例如我这里有这样的表格数据。</p><table><thead><tr><th>姓名</th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>powersee</td><td>99</td><td>98</td><td>66</td></tr></tbody></table><p>我把它输入到 WPS 表格里面，然后添加所有边框，接着选择【文件】，【输出为 PDF 文件】，这样是可以生成 PDF 文件。但是，英语这一列会被放到第二页……</p><p><img src="/img/2023/wps-export-pdf.png" alt="image"></p><p>这时我选择【打印预览】，确认排版没问题，都是在同一页之后，再确认选择的是【Microsoft Print to PDF】，之后点击打印就能获得 PDF 文件。</p><p><img src="/img/2023/ps-excel-pdf.webp" alt="ps-excel-pdf">在 ps 里面创建文档，我新建了 4k 分辨率的文档，再将 PDF 拖进来，然后再把背景关掉，就可以获得透明表格图了。</p><p>不过这时边框和文字都是黑色的，如果想要变成白色，可以通过【图像】【调整】【反相】来实现，快捷键为 ctrl+i。</p><p>有需要的话可以在下方添加纯色图层或者渐变色，例如这样。</p><p><img src="/img/2023/excel-pdf-ps-final-img.webp" alt="excel-pdf-ps-final-img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如何制作一张透明的表格图片？&lt;/p&gt;
&lt;p&gt;答：先用 excel 导出为 PDF，然后用将 PDF 拖入 Photoshop 里，再导出为 png 就行。&lt;/p&gt;
&lt;p&gt;例如我这里有这样的表格数据。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;姓名&lt;/th&gt;
</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>SwitchyOmega 备份与恢复</title>
    <link href="https://powersee.github.io/2023/09/SwitchyOmega-backup/"/>
    <id>https://powersee.github.io/2023/09/SwitchyOmega-backup/</id>
    <published>2023-09-23T06:21:02.000Z</published>
    <updated>2023-09-23T06:24:32.023Z</updated>
    
    <content type="html"><![CDATA[<p>SwitchyOmega 是我电脑浏览器上，一直在使用的代理管理工具。以前我的主力浏览器是 Chrome，现在已经切换为 Edge 很久了，不过这个扩展插件一直都在使用。</p><p>每次换电脑或者重装系统后，在浏览器登录微软账号，虽然可以自动将扩展插件装回来。但是，又得再一次配置 SwitchyOmega 里面的情景模式了。</p><p>但其实可以避免这个繁琐的步骤的，因为插件自带有备份恢复功能。</p><p>在浏览器点击插件，再点击「选项」，来进入设置页面。</p><p>然后点击「设定」下方的「导入&#x2F;导出」</p><p><img src="/img/2023/SwitchyOmega-settings-shadow.webp" alt="SwitchyOmega-settings"></p><p>点击「生成备份文件」之后，就可以获得一个名为 <code>OmegaOptions.bak</code> 的文件。我们只要把这个文件，传到其他的电脑，然后再点击「从备份文件恢复」，选择 <code>OmegaOptions.bak</code>，就可以将情景模式同步过去了。</p><p>而且它还支持在线恢复，那也许我们可以把备份文件放到自己的网站上。</p><p>最下方的同步，说是支持 Chrome 浏览器，不过我现在电脑都没装 Chrome，不清楚好不好用，Edge 不知道能不能同步？懒得去试了，现在用文件备份我觉得也挺不错的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SwitchyOmega 是我电脑浏览器上，一直在使用的代理管理工具。以前我的主力浏览器是 Chrome，现在已经切换为 Edge 很久了，不过这个扩展插件一直都在使用。&lt;/p&gt;
&lt;p&gt;每次换电脑或者重装系统后，在浏览器登录微软账号，虽然可以自动将扩展插件装回来。但是，又得</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>达芬奇 18.6 史诗级更新，增加文字外描边</title>
    <link href="https://powersee.github.io/2023/09/davinci-outline/"/>
    <id>https://powersee.github.io/2023/09/davinci-outline/</id>
    <published>2023-09-22T02:42:20.000Z</published>
    <updated>2023-09-22T02:43:03.442Z</updated>
    
    <content type="html"><![CDATA[<p>在 2023 年 9 月，知名剪辑、调色软件达芬奇 DaVinCi Resolve 更新到了 18.6 版本。</p><p>这个版本更新中，对我最有用的就是新增加的文本外描边功能。</p><p><img src="/img/2023/Snipaste_23-09-18_10-05-38.jpg" alt="Snipaste_23-09-18_10-05-38"></p><p>这里我弄了个对比，可以发现它原本的内描边，是观感最差的，会导致文字笔画变得非常的细，很难看。反正我使用达芬奇，作为主力剪辑工具已经两年了，应该还没在视频中使用过它这个内描边功能。</p><p><img src="/img/2023/Snipaste_23-09-18_10-03-05.jpg" alt="Snipaste_23-09-18_10-03-05"></p><p>最近的更新就是在描边选项中的下方，添加了一个「仅外部」的勾选框。勾选上之后就是外描边了，就可以和其它剪辑软件一样了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 2023 年 9 月，知名剪辑、调色软件达芬奇 DaVinCi Resolve 更新到了 18.6 版本。&lt;/p&gt;
&lt;p&gt;这个版本更新中，对我最有用的就是新增加的文本外描边功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/Snipaste_23-09-18_</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>剪映变得更好用了</title>
    <link href="https://powersee.github.io/2023/09/better-capcut/"/>
    <id>https://powersee.github.io/2023/09/better-capcut/</id>
    <published>2023-09-21T08:43:57.000Z</published>
    <updated>2023-09-21T08:51:06.232Z</updated>
    
    <content type="html"><![CDATA[<p>最近剪映的两个更新，让我感觉有些视频，真的可以只用剪映来制作了。</p><p>首先是添加了快捷键，向前和向后修剪。</p><p><img src="/img/2023/left-right-cut.webp" alt="left-right-cut"></p><p>快捷键是 Q 和 W，和 pr 的是一样的，我平时使用它们的频率非常高，所以当初我使用 final cut pro 和 davinci Resolve 时，我都是通过自定义快捷键，让这个功能做到跟在 pr 的使用体验一样。</p><p>另一个也许不是最近添加的，不过我是最近才发现的——自定义码率。</p><p><img src="/img/2023/%E5%89%AA%E6%98%A0-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%A0%81%E7%8E%87.webp" alt="剪映-自定义码率"></p><p>以前它只有几个选项让我们选择而已，现在可以让我们自定义码率了，很好。</p><p>码率这方面，其实我以前很长一段时间，都是控制视频码率在 2800Kbps 左右，这样视频传 bilibili 就不会出现高码率的画质选项。</p><p>不过目前已经不这么做了，目前主要是设置 6800Kbps，B 站会出现高码率选项，有大会员的用户看起来会好一些。</p><p>所以以前剪映给的几个码率选项，我都是选择最低的，因为它的最低也比我原本用的高很多。</p><p>剪映最近添加这2个功能，都是我期待已久的，很棒，希望它能越做越好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近剪映的两个更新，让我感觉有些视频，真的可以只用剪映来制作了。&lt;/p&gt;
&lt;p&gt;首先是添加了快捷键，向前和向后修剪。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/left-right-cut.webp&quot; alt=&quot;left-right-cut&quot;&gt;&lt;/p&gt;
&lt;p&gt;快</summary>
      
    
    
    
    
    <category term="视频" scheme="https://powersee.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>Mac 如何隐藏状态栏的日期和时间</title>
    <link href="https://powersee.github.io/2023/09/mac-hide-date/"/>
    <id>https://powersee.github.io/2023/09/mac-hide-date/</id>
    <published>2023-09-20T06:44:16.000Z</published>
    <updated>2023-09-20T06:45:47.723Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，Mac 会在屏幕右上角，显示日期和时间。</p><p><img src="/img/2023/Snipaste_23-09-19_07-59-14.jpg" alt="Snipaste_23-09-19_07-59-14"></p><p>目前好像没有什么办法，可以将它完全隐藏起来。</p><p>不过可以将它改为这样。</p><p><img src="/img/2023/Snipaste_23-09-19_08-01-15.jpg" alt="Snipaste_23-09-19_08-01-15"></p><p>也就是只剩一个模拟时钟来看时间，还是比较简洁的。</p><p>具体的做法是，到系统设置里面，（以前叫「系统偏好设置」）找到时钟，把「时间」从「数码」改为「模拟」就行。</p><p><img src="/img/2023/Mac-Time-Show.webp" alt="Mac-Time-Show"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;默认情况下，Mac 会在屏幕右上角，显示日期和时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/Snipaste_23-09-19_07-59-14.jpg&quot; alt=&quot;Snipaste_23-09-19_07-59-14&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前好像没有什么办法</summary>
      
    
    
    
    
    <category term="mac" scheme="https://powersee.github.io/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>如何下载离线版 AMD 显卡驱动，以及旧版本驱动</title>
    <link href="https://powersee.github.io/2023/09/download-amd-drive/"/>
    <id>https://powersee.github.io/2023/09/download-amd-drive/</id>
    <published>2023-09-09T06:48:30.000Z</published>
    <updated>2023-09-09T06:49:36.840Z</updated>
    
    <content type="html"><![CDATA[<p>在 AMD 的官网 <a href="https://www.amd.com/zh-hans/support">https://www.amd.com/zh-hans/support</a> 如果我们直接点击「下载 WINDOWS 驱动程序」，那么得到的是一个类似这样的 exe 文件</p><blockquote><p>amd-software-adrenalin-edition-23.9.1-minimalsetup-230905_web.exe</p></blockquote><p>文件大小只有几十 MB，而且使用它来安装驱动需要联网才行。</p><p>那要怎样才能下载得到，像 Nvidia 驱动那样的完整驱动呢？离线也能安装的那种。</p><p><img src="/img/2023/2023-09-08_14-10-18.png" alt="2023-09-08_14-10-18"></p><p>我们先在下方选择我们的显卡，点击「提交」。然后便能得到不同操作系统的驱动下载链接。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows 11 - 64 位版本</span><br><span class="line">Windows 10 64 位版本</span><br><span class="line">Windows 7 64 位版本</span><br><span class="line">RHEL x86 64 位</span><br><span class="line">Ubuntu x86 64 位</span><br><span class="line">SLED/SLES 15</span><br></pre></td></tr></table></figure><p>展开之后可以看到有</p><ul><li><strong>Auto-Detect and Install</strong></li><li><strong>AMD Software: Adrenalin Edition</strong></li><li><strong>AMD Software: PRO Edition</strong></li></ul><p>我们玩游戏的话一般选择 Adrenalin 版本，这样就能得到可以离线安装的显卡驱动了。</p><p><img src="/img/2023/2023-09-08_14-15-44.png" alt="2023-09-08_14-15-44"></p><p>不过这样下载的是最新版的驱动，如果我们想下载旧版的，可以点击 「驱动程序详细信息」下的 Release Notes，例如我这里点击之后，浏览器上方的地址栏就变成了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-9-1</span><br></pre></td></tr></table></figure><p>我们只需要更改链接最后面的数字就行，例如改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-8-1</span><br><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-23-5-1</span><br><span class="line">https://www.amd.com/en/support/kb/release-notes/rn-rad-win-22-5-1</span><br></pre></td></tr></table></figure><p>之前看到有网友说 22.5.1 这个版本好像比较好，游戏帧数会比新版本的驱动高，适合给 RX580 这类显卡使用，不过我没试过。</p><p>下载旧版本驱动点击 following links: 下方的链接即可。</p><p><img src="/img/2023/2023-09-08_14-25-38.png" alt="2023-09-08_14-25-38"></p><p>通过这种方法下载驱动，我们准备多个驱动，然后对比看看哪个好，毕竟 amd 的驱动更新确实比较频繁。留有完整的驱动安装包，要回退会比较方便。</p><p>驱动安装好后，C 盘的 AMD 文件夹可以删除的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 AMD 的官网 &lt;a href=&quot;https://www.amd.com/zh-hans/support&quot;&gt;https://www.amd.com/zh-hans/support&lt;/a&gt; 如果我们直接点击「下载 WINDOWS 驱动程序」，那么得到的是一个类似这样的 e</summary>
      
    
    
    
    
    <category term="电脑" scheme="https://powersee.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在 alpine docker 容器中开启 ssh</title>
    <link href="https://powersee.github.io/2023/08/alpine-docker-ssh/"/>
    <id>https://powersee.github.io/2023/08/alpine-docker-ssh/</id>
    <published>2023-08-01T13:10:19.000Z</published>
    <updated>2023-08-01T13:14:28.410Z</updated>
    
    <content type="html"><![CDATA[<p>由于目前绿联官方没有开启 ssh 的方法，这样导致我想通过 rsync 备份文件到 NAS 里就没法做到了。</p><p>于是我想通过在 docker 里运行一个 alpine 容器，在容器里开启 ssh，而我只要将特定的目录挂载到容器内，就可以实现用 rsync 备份文件到 NAS。</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>先搜索并下载 alpine 容器镜像</p><p><img src="/img/2023/download-alpine.webp" alt="download-alpine"></p><p>之后点击创建，起一个名字</p><p><img src="/img/2023/Create.webp" alt="Create"></p><p>把 -i 和 -t 选上</p><p><img src="/img/2023/alpine-it-shadow.webp" alt="alpine-it-shadow"></p><p>网络选择 host，这样就不用去设置端口</p><p><img src="/img/2023/network-host-shadow.webp" alt="network-host-shadow"></p><p>存储空间，把想要操作的文件夹挂载到容器里面，我选择放在 &#x2F;mnt，注意后面要改为「读写」</p><p><img src="/img/2023/storage.jpg" alt="storage"></p><p>那么要填写的内容就这些而已，可以点下一步，完成创建后再启动，也可以勾选下方的「创建后启动容器」这个选项。</p><h3 id="配置与开启-ssh"><a href="#配置与开启-ssh" class="headerlink" title="配置与开启 ssh"></a>配置与开启 ssh</h3><p>之后在「容器管理」中找到我们刚才创建的容器，在它启动的情况下，点击详情，然后到最后的终端这里。</p><p><img src="/img/2023/ssh-and-rc.webp" alt="ssh-and-rc"></p><p>使用 apk add 来安装应用，这样装上 openssh 和 openrc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add openssh</span><br><span class="line">apk add openrc</span><br></pre></td></tr></table></figure><blockquote><p>OpenRC 是一个用于 Linux 系统的初始化系统和服务管理器。它最初是为 Gentoo Linux 开发的，后来也被广泛地用于其他 Linux 发行版，特别是一些轻量级的发行版，如 Alpine Linux。OpenRC 的目标是提供一种简单而可靠的初始化和服务管理解决方案，它与传统的 sysvinit 和较新的 systemd 相比，更轻量级且易于配置。</p></blockquote><p>之后修改 ssh 的配置文件，使用 vi 来打开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到 #PermitRootLogin prohibit-password 把前面的 # 去掉，然后把 prohibit-password 改为 yes。再把 PasswordAuthentication yes 前面的 # 去掉。</p><p><img src="/img/2023/sshd-config.webp" alt="sshd-config"></p><p>让 sshd 在容器启动时自启动（可以理解为开机自启，把容器当成一台机器）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-update add sshd</span><br></pre></td></tr></table></figure><p>此时如果直接用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>来启动 sshd 应该启动不了，会报错。需要先执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /run/openrc/softlevel</span><br></pre></td></tr></table></figure><p>然后就可以启动了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd start</span><br></pre></td></tr></table></figure><p>查看状态可以用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-service sshd status</span><br></pre></td></tr></table></figure><p><img src="/img/2023/rc-sshd-status.webp" alt="rc-sshd-status"></p><p>此时就可以使用 ssh 来连接了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ ssh root@192.168.68.197</span><br><span class="line">The authenticity of host &#x27;192.168.68.197 (192.168.68.197)&#x27; can&#x27;t be established.</span><br><span class="line">ED25519 key fingerprint is SHA256:0h5hViR5234yJ3VqbuATQApvu+RONcbhhOygThKadjk.</span><br><span class="line">This key is not known by any other names</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.68.197&#x27; (ED25519) to the list of known hosts.</span><br><span class="line">root@192.168.68.197&#x27;s password:</span><br></pre></td></tr></table></figure><p>但是容器的密码是什么呢？</p><p>其实并没有密码，如果我们想要使用密码得自己设置一个，输入 passwd 就可以设置密码。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># passwd</span></span><br><span class="line">Changing password <span class="keyword">for</span> root</span><br><span class="line">New password: </span><br><span class="line">Bad password: too short</span><br><span class="line">Retype password: </span><br><span class="line">passwd: password <span class="keyword">for</span> root changed by root</span><br><span class="line">/ <span class="comment"># </span></span><br></pre></td></tr></table></figure><p>这样我们就可以使用 root 用户名，加上自己设置的密码，来 ssh 连接上 alpine 容器。由于之前将 NAS 的特定文件夹挂载到 &#x2F;mnt，可以使用 ls &#x2F;mnt 命令，看看是否能在容器中看到 NAS 中的文件，可以的话就没问题了。</p><p>参考文档：<a href="https://www.cnblogs.com/zpcdbky/p/15568702.html">Alpine容器安装运行ssh - 同勉共进 - 博客园</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于目前绿联官方没有开启 ssh 的方法，这样导致我想通过 rsync 备份文件到 NAS 里就没法做到了。&lt;/p&gt;
&lt;p&gt;于是我想通过在 docker 里运行一个 alpine 容器，在容器里开启 ssh，而我只要将特定的目录挂载到容器内，就可以实现用 rsync 备份文</summary>
      
    
    
    
    
    <category term="docker" scheme="https://powersee.github.io/tags/docker/"/>
    
    <category term="NAS" scheme="https://powersee.github.io/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>Windows 快捷方式如何使用相对路径</title>
    <link href="https://powersee.github.io/2023/06/windows-quick-access-relative-paths/"/>
    <id>https://powersee.github.io/2023/06/windows-quick-access-relative-paths/</id>
    <published>2023-06-24T04:44:00.000Z</published>
    <updated>2023-06-24T04:47:50.963Z</updated>
    
    <content type="html"><![CDATA[<p>现在我的有一个 a.exe 的程序，放在 C:\bin 里面。</p><p>直接选中按右键，在菜单中选择「创建快捷方式」，那么我们可以得到一个名为<code>a.exe - 快捷方式</code>的文件。此时它的属性是这样的</p><p><img src="/img/2023/image-20230618212051614.png" alt="image-20230618212051614"></p><p>可以观察到「目标」和「起始位置」都写上了完整路径。因此我们把这个快捷方式，放到其它地方，也可以双击来打开程序。</p><p>偶然间注意到，还有个备注选项。我在上面填写上 hehe，那么当我的鼠标放到快捷方式上面时，就会出现备注信息。</p><p><img src="/img/2023/image-20230618212612322.png" alt="image-20230618212612322"></p><p>想要使用相对路径，需要先把「起始位置」的内容删了。然后在「目标」后面的框加上 explorer.exe （注意有一个空格），然后再加上「要执行的程序相对于快捷方式的位置」。填写好后点右下角的「应用」。会自动加上「C:\Windows\」，并且图标也变成资源管理器的了。</p><p>这样一个使用相对路径的快捷方式就创建好了，我的用途是放在移动硬盘中，方便我在不同的电脑使用。</p><p><img src="/img/2023/image-20230618213144445.png" alt="image-20230618213144445"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在我的有一个 a.exe 的程序，放在 C:\bin 里面。&lt;/p&gt;
&lt;p&gt;直接选中按右键，在菜单中选择「创建快捷方式」，那么我们可以得到一个名为&lt;code&gt;a.exe - 快捷方式&lt;/code&gt;的文件。此时它的属性是这样的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 拼接百度网盘链接</title>
    <link href="https://powersee.github.io/2023/05/js-baidu-netdisk-link/"/>
    <id>https://powersee.github.io/2023/05/js-baidu-netdisk-link/</id>
    <published>2023-05-24T15:55:58.000Z</published>
    <updated>2023-05-27T07:36:20.778Z</updated>
    
    <content type="html"><![CDATA[<p>有时在网页中，看到别人分享百度网盘链接。一般情况下，我点击链接之后，还需要输入提取码，才可以看到别人分享的文件。</p><p>我觉得应该可以通过代码，来减少一些步骤。举个例子，例如现在有这样的链接和提取码</p><blockquote><p><a href="https://pan.baidu.com/s/powersee_xxxx">https://pan.baidu.com/s/powersee_xxxx</a></p><p>提取码: psee</p></blockquote><p>那么只需要把链接改为 <a href="https://pan.baidu.com/s/powersee_xxxx?pwd=psee">https://pan.baidu.com/s/powersee_xxxx?pwd=psee</a> 就不需要手动输出提取码了。就是在原本链接后面加上「?pwd&#x3D;提取码」。</p><p>使用这样的代码可以实现：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link_area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link_area&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d_link = link_area.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> link_key = link_area.<span class="property">innerText</span>.<span class="title function_">match</span>(<span class="string">&#x27;提取码: (....)&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">d_link.<span class="property">target</span>=<span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line">d_link.<span class="property">href</span> += <span class="string">&#x27;?pwd=&#x27;</span> + link_key</span><br></pre></td></tr></table></figure><p>不过这样只能处理第一个链接。怎么修改代码让它可以处理多个链接？</p><p>思路：先查找到所有链接，再查找所有 「提取码」 ，只有再使用 for 循环遍历处理链接。最终代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> link_area = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.link_area&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d_link = link_area.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> link_key = link_area.<span class="property">innerText</span>.<span class="title function_">match</span>(<span class="regexp">/提取码: (....)/g</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; d_link.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  d_link[i].<span class="property">target</span>=<span class="string">&#x27;_blank&#x27;</span>;</span><br><span class="line">  d_link[i].<span class="property">href</span> += <span class="string">&#x27;?pwd=&#x27;</span> + link_key[i].<span class="title function_">replace</span>(<span class="string">&#x27;提取码: &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取提取码部分比较麻烦，最终采用 replace 去掉多余的文字。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时在网页中，看到别人分享百度网盘链接。一般情况下，我点击链接之后，还需要输入提取码，才可以看到别人分享的文件。&lt;/p&gt;
&lt;p&gt;我觉得应该可以通过代码，来减少一些步骤。举个例子，例如现在有这样的链接和提取码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://powersee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>达芬奇如何处理升格、高帧率视频？</title>
    <link href="https://powersee.github.io/2023/05/DaVinci-High-frame-rate/"/>
    <id>https://powersee.github.io/2023/05/DaVinci-High-frame-rate/</id>
    <published>2023-05-17T03:29:47.000Z</published>
    <updated>2023-05-17T03:31:57.405Z</updated>
    
    <content type="html"><![CDATA[<p>假如我拍摄了一段 50 帧的视频，时长为 30 秒。此时如果我将视频放入时间线，那么肯定是占用 30 秒的时长。</p><p>由于我的时间线是设置 25 帧的，所以这段 50 帧的视频，我其实是可以让它以 50% 的速度播放的，这样 30 秒的视频就可以变成 60 秒了。</p><p>但如果我直接在时间线上，选中素材右键选择「更改片段速度」，将速度改为 50%，那么会发现，变成 12.5 帧每秒了。</p><p><img src="/img/2023/change-speed.jpg" alt="change-speed"></p><p>此时播放视频我们也可以明显感受到卡顿。</p><p>其实正确的做法是，在「媒体池」选中素材，右键选择「片段属性」，在「视频」标签下更改「视频帧率」的值。例如我改为 25。</p><p><img src="/img/2023/clip-attributes.jpg" alt="clip-attributes"></p><p>之后只需要将视频素材从媒体池，拖到时间线上，就会发现原来 30 秒的视频现在变成 60 秒了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如我拍摄了一段 50 帧的视频，时长为 30 秒。此时如果我将视频放入时间线，那么肯定是占用 30 秒的时长。&lt;/p&gt;
&lt;p&gt;由于我的时间线是设置 25 帧的，所以这段 50 帧的视频，我其实是可以让它以 50% 的速度播放的，这样 30 秒的视频就可以变成 60 秒了。</summary>
      
    
    
    
    
    <category term="视频" scheme="https://powersee.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
</feed>
