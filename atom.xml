<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Powersee的博客</title>
  
  
  <link href="https://powersee.github.io/atom.xml" rel="self"/>
  
  <link href="https://powersee.github.io/"/>
  <updated>2023-04-13T16:56:02.333Z</updated>
  <id>https://powersee.github.io/</id>
  
  <author>
    <name>powersee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何升级 macOS 到特定版本</title>
    <link href="https://powersee.github.io/2023/04/macos-update-to-specific-version/"/>
    <id>https://powersee.github.io/2023/04/macos-update-to-specific-version/</id>
    <published>2023-04-13T16:03:06.000Z</published>
    <updated>2023-04-13T16:56:02.333Z</updated>
    
    <content type="html"><![CDATA[<p>直接在系统偏好设置里，点击「软件更新」的话，会检查当前最新的系统版本。例如我现在显示的是 Ventura。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/macOS-Monterey-Software-Update.webp" alt="macOS-Monterey-Software-Update"></p><p>而我现在的系统版本还是 Big Sur。</p><p>我其实不想更新的，所以我之前，是把「高级」里面的所有勾都取消掉，这样才可以保持这一年多来，没有任何系统升级提示。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/uncheck-macos-update.webp" alt="uncheck-macos-update"></p><p>但是刚才我点击进来了，它就自动检查更新，所以现在不更新的话，会有一个红色数字 1 在图标上。噢，不把它弄掉的话，我会相当别扭的。</p><p>我尝试着升级到 11 Big Sur 的最新版，11.7.5，看看会怎么样。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/macOS-Big-Sur-11.7.5.jpg" alt="macOS-Big-Sur-11.7.5"></p><p>升级是成功了，但是更新提示依然还在。</p><p>这时我了解到 13 版本，它的系统设置，变得和 iPad 上一样了，感觉不怎么喜欢，不知道我能否选择，只升级到 12 就行？</p><p>于是我查找看看 Mac 能否升级到特定版本。</p><p><a href="https://support.apple.com/zh-cn/HT211683">如何下载 macOS - 官方 Apple 支持 (中国)</a></p><p>直接到苹果官网，可以看到各个版本的系统，点击后跳转到 APP store。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/macOS-Monterey-app-store.webp" alt="macOS-Monterey-app-store"></p><p>商店里能下载的版本还挺多的。</p><p><a href="macappstores://apps.apple.com/app/macos-ventura/id1638787999?mt=12">Ventura 13</a></p><p><a href="macappstores://apps.apple.com/app/macos-monterey/id1576738294?mt=12">Monterey 12</a></p><p><a href="macappstores://apps.apple.com/app/macos-big-sur/id1526878132?mt=12">Big Sur 11</a></p><p><a href="macappstores://apps.apple.com/app/macos-catalina/id1466841314?mt=12">Catalina 10.15</a></p><p><a href="macappstores://apps.apple.com/app/macos-mojave/id1398502828?mt=12">Mojave 10.14</a></p><p><a href="macappstores://apps.apple.com/app/macos-high-sierra/id1246284741?mt=12">High Sierra 10.13</a></p><p>虽然知道怎么选择特定版本了，但是我在软件更新里面，已经下载好 Ventura 了。唉，那就升级看看吧，希望一切顺利。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/download-Ventura.webp" alt="download-Ventura"></p><p>等待了一段时间，升级成功了。升级后自动换了张默认壁纸，「系统偏好设置」也改名为「系统设置」了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/system-setting.webp" alt="system-setting"></p><p>升级到 Ventura 13 居然比我刚才从 Big Sur 11.6 升级到 11.7.5 速度还快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直接在系统偏好设置里，点击「软件更新」的话，会检查当前最新的系统版本。例如我现在显示的是 Ventura。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>如何去掉 iPhone iPad 上的越狱文件？</title>
    <link href="https://powersee.github.io/2023/04/iphone-ipad-remove-jailbreak/"/>
    <id>https://powersee.github.io/2023/04/iphone-ipad-remove-jailbreak/</id>
    <published>2023-04-12T16:05:27.000Z</published>
    <updated>2023-04-12T16:06:20.348Z</updated>
    
    <content type="html"><![CDATA[<p>我有一台 iPad，几年前就将它越狱了。由于越狱之后，就没法直接更新系统，所以目前还停留在 13.6.1</p><p><img src="/img/2023/iPad-13.6.1.jpg" alt="iPad-13.6.1"></p><p>现在提示可以更新的是 iPadOS 16.4.1，如果我直接点击升级，很可能待会就变砖了。</p><p>所以我开始了解怎么才能升级这台，已经越狱了的 iPad。我猜可能得进入 DFU 模式，然后重新刷一个干净的系统进去。</p><p>不过了解后发现，并不用这么麻烦，只需要先把系统的越狱去掉就行。</p><p>先在电脑上使用 checkra1n 让机器处于越狱状态，因为我们需要在设备里打开 checkra1n 这个 app。</p><p>官网：<a href="https://checkra.in/">checkra1n</a></p><p><img src="/img/2023/checkra1n-v-0.12.4.webp" alt="checkra1n-v-0.12.4"></p><p>还是熟悉的操作，按照说明进入 DUF 模式，之后机器重启，然后点击桌面的 checkra1n 这个 app，再点击红色的「Restore System」来恢复系统即可。</p><p><img src="/img/2023/iPad-checkra1n.png" alt="iPad-checkra1n"></p><p>然后机器会重启，并且删除越狱相关的文件。例如重启后桌面就没有 Cydia 了。</p><p>此时就可以到系统里面升级了，经过漫长地等待，我把 iPad 升级到了 16.4.1</p><p><img src="/img/2023/iPad-16.4.1.jpg" alt="iPad-16.4.1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我有一台 iPad，几年前就将它越狱了。由于越狱之后，就没法直接更新系统，所以目前还停留在 13.6.1&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/2023/iPad-13.6.1.jpg&quot; alt=&quot;iPad-13.6.1&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在提示可以更新的是 iPa</summary>
      
    
    
    
    
    <category term="iOS" scheme="https://powersee.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>自动操作 automator 出现输入框后再运行脚本</title>
    <link href="https://powersee.github.io/2023/04/automator-input-box/"/>
    <id>https://powersee.github.io/2023/04/automator-input-box/</id>
    <published>2023-04-11T16:13:21.000Z</published>
    <updated>2023-04-11T17:30:48.926Z</updated>
    
    <content type="html"><![CDATA[<p>由于我每天都写一篇博客文章，每次都需要我打开 vscode，然后在终端里面输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post title...</span><br></pre></td></tr></table></figure><p>我在想，能否使用 automator 让我这个过程变得更加流畅一些。</p><p>我的想法是，在 Mac 右上角，放一个图标，我点击图标后，弹出一个文本框，然后我输入文章名字，例如今天这篇的名字是 <code>automator-input-box</code></p><p>输入完成之后，后台就自动执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post automator-input-box</span><br></pre></td></tr></table></figure><p>感觉还是挺简单的，应该是可以实现的。</p><p>一番研究之后，终于实现了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-hexo-post.webp" alt="automator-hexo-post"></p><p>脚本内容</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.zshrc</span><br><span class="line"><span class="comment">#echo $PATH</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/hexobackup &amp;&amp; <span class="built_in">pwd</span></span><br><span class="line">hexo new post <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>首先放一个 「获得指定的文本」在最上面，然后下面是「运行Shell脚本」</p><p>第一行加载 <code>zsh</code> 的配置，是为了获取到 <code>node</code> 和 <code>hexo</code> 的环境变量，如果不加这一行，那么脚本运行的时候，它是找不到 <code>hexo</code> 的。当然我们也可以写出 <code>hexo</code> 的完整路径，例如 <code>/opt/homebrew/.../hexo</code> 之类，但是我发现这样会提示找不到 <code>node</code>，又得加 <code>node</code> 的环境变量。所以还是直接加载 <code>zsh</code> 的配置文件比较方便。</p><p>之后进入 <code>hexo</code> 博客所在的位置，我的是放在用户目录下的 <code>hexobackup</code> 中，所以可以写成 <code>$HOME/hexobackup</code></p><p>进入到博客目录之后，再执行命令创建文章。</p><p>本来到这里就结束了的，不过我后面还是加了些内容，让结果可以通过通知显示出来。</p><p>这里的关键点是设置一个变量，来接收输出结果，然后在显示通知里面，使用这个变量。</p><p>我创建的是「应用程序」，所以可以选择把它保存到自己想放置的地方。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-APP.webp" alt="automator-APP"></p><p>之后我把这个 APP 拖到 Dock 栏上面，可以非常快速地打开它。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/hexo-post-dock.webp" alt="hexo-post-dock"></p><p>点击它之后，就会出现一个文本框，在这里我可以输入博客文章的文件名。不过它这里不能粘贴，只能手动输入。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-input-box-getText.webp" alt="automator-input-box-getText"></p><p>当我输入完成后，点击「继续」按钮，就会去执行 shell 脚本。完成之后，会弹出一条通知。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/hexo-post-notification.webp" alt="hexo-post-notification"></p><p>感觉比较遗憾的地方是，不能粘贴，以及只能按「继续」按钮，而不能用按回车键来代替。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于我每天都写一篇博客文章，每次都需要我打开 vscode，然后在终端里面输入&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo </summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>自动操作 automator 快速将图片转为 webp</title>
    <link href="https://powersee.github.io/2023/04/automator-quick-webp/"/>
    <id>https://powersee.github.io/2023/04/automator-quick-webp/</id>
    <published>2023-04-10T16:16:29.000Z</published>
    <updated>2023-04-11T17:30:48.925Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习 Mac 上面的自动操作 automator 怎么使用。</p><p>bilibili 上面有一个非常好的教程视频：<a href="https://www.bilibili.com/video/BV1ps411J7gW">https://www.bilibili.com/video/BV1ps411J7gW</a></p><p>是 2018 年录制的，不过讲得挺好的，我可以学习学习他的教学方式。</p><p>不过他的视频中，没讲到我想了解的，执行 shell 命令。</p><p>我有这样的需求，需要经常把图片转换为 WebP 格式。然后我了解到用 automator 可以更快地做到，因此打算来研究看看。</p><p>一番折腾之后，终于弄好了，现在可以使用右键来将图片转为 WebP 格式了。</p><p>过程如下：</p><p>打开 Mac 自带的应用「自动操作」英文名是 automator，选择第三个「快速操作」。然后在左边的「实用工具」里面，找到「运行 Shell 脚本」，将它拖到右边。</p><p>右边我们有很多地方需要调整，可以参考我的设置↓</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-webp.webp" alt="automator-webp"></p><p>这是脚本内容</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$f</span>&quot;</span></span><br><span class="line">/opt/homebrew/bin/cwebp <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.webp&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>虽然它使用了 for，但是我测试过，选中两张图片的时候，只有第一张能否转为 WebP，第二张不会。</p><p>完成之后保存一下即可，接着来到访达里面。</p><p>使用过程如下：</p><p>选中图片，右键「快速操作」，「转换为 WebP」这个名字是我们自己起的。然后旁边就多出一张 webp 格式的图片了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/automator-quick-webp.gif" alt="automator-quick-webp"></p><p>然后根据我的了解，从 macOS 10.15（Catalina）开始，Apple 更改了 Automator 创建的服务的默认位置，将其移动到了右键菜单的「快速操作」下。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学习 Mac 上面的自动操作 automator 怎么使用。&lt;/p&gt;
&lt;p&gt;bilibili 上面有一个非常好的教程视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1ps411J7gW&quot;&gt;https://www.bilibil</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>升级 Calibre 到 6.15.1</title>
    <link href="https://powersee.github.io/2023/04/calibre-6-15-1-ebook-viewer/"/>
    <id>https://powersee.github.io/2023/04/calibre-6-15-1-ebook-viewer/</id>
    <published>2023-04-09T16:08:59.000Z</published>
    <updated>2023-04-11T17:30:48.926Z</updated>
    
    <content type="html"><![CDATA[<p>我一直使用 calibre 来打开 epub 和 mobi 文件，我不喜欢 Mac 自带的「图书」APP。</p><p>目前电脑里装的是很久之前的版本了，一直没升级。这次把电脑系统升级到 13.3 之后，发现没法直接用 ebook-viewer 来打开 epub 文件了，选择 calibre 的话，是把书籍导入到 calibre 里面。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/epub-open-method.webp" alt="epub-open-method"></p><p>于是我打算升级一下，到官网下载时发现，2022 年的时候才支持苹果自研芯片的：<a href="https://calibre-ebook.com/whats-new">https://calibre-ebook.com/whats-new</a></p><blockquote><p>Release: 6.0 [11 Jul, 2022]</p><ul><li><strong>Support for new CPU architectures: Apple Silicon and ARM64 on Linux. Support for 32bit CPUs has been dropped because Qt 6 does not support them</strong></li></ul></blockquote><p>我现在用的是 5.31.1 的版本。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/calibre-5.31.1.webp" alt="calibre-5.31.1"></p><p>于是到官网下载新的安装包，直接替换就行。这个应用居然要占用接近 800M……</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/calibre-6.15.1-need-800MB.jpg" alt="calibre-6.15.1-need-800MB"></p><p>之后在「活动监视器」里也可以看到它的种类显示为 Apple 了。之前是显示 Intel 的。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/calibre-Apple.webp" alt="calibre-Apple"></p><p>而且现在 epub 也默认改为用 ebook-viewer 来打开了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ebook-viewer.webp" alt="ebook-viewer"></p><p>不错，问题解决了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我一直使用 calibre 来打开 epub 和 mobi 文件，我不喜欢 Mac 自带的「图书」APP。&lt;/p&gt;
&lt;p&gt;目前电脑里装的是很久之前的版本了，一直没升级。这次把电脑系统升级到 13.3 之后，发现没法直接用 ebook-viewer 来打开 epub 文件了，</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>macOS 设置允许「任何来源」</title>
    <link href="https://powersee.github.io/2023/04/mac-allow-apps-anywhere/"/>
    <id>https://powersee.github.io/2023/04/mac-allow-apps-anywhere/</id>
    <published>2023-04-08T16:56:57.000Z</published>
    <updated>2023-04-11T17:30:48.927Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于更新系统到 Ventura 13.3，我发现安全性里的「任何来源」又不见了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/APP-allow1.webp" alt="APP-allow1"></p><p>于是又得去网上搜开启的命令，这里也顺便记录一下📝</p><p>考虑到以后也许有萌新搜到我这篇文章，这里写详细一点。</p><p>首先点击「启动台」，在顶部的搜索框里面输入「终端」，可以找到一个图标上面写 <code>&gt;_</code> 的 APP</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/Mac-terminal.webp" alt="Mac-terminal"></p><p>点击打开它，然后复制下面这条命令，粘贴进去</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-spctl.webp" alt="terminal-spctl"></p><p>然后按一下回车键，这时出现 Password:🔑，需要输入自己的用户密码，也就是开机后要进入桌面时的那个密码。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-spctl-Password.webp" alt="terminal-spctl-Password"></p><p>注意输入密码的时候，屏幕上不会显示任何内容的，既不会直接显示你的密码，也不会出现 <code>***</code> 或者 <code>···</code>，只管输入就行，完成后就再按一下回车键。</p><p>然后应该就可以看到出现「任何来源」了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/APP-allow2.webp" alt="APP-allow2"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近由于更新系统到 Ventura 13.3，我发现安全性里的「任何来源」又不见了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/APP-allow1</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Nu shell 升级到 0.78.0，一堆麻烦</title>
    <link href="https://powersee.github.io/2023/04/nushell-0-78-0/"/>
    <id>https://powersee.github.io/2023/04/nushell-0-78-0/</id>
    <published>2023-04-07T16:13:24.000Z</published>
    <updated>2023-04-07T16:15:27.795Z</updated>
    
    <content type="html"><![CDATA[<p>这一次的升级挺恼火的。</p><p>看到 nu shell 发布新版本了，看更新日志好像挺不错。于是我下载压缩包，解压，到「终端」改一下设置，就可以使用新版本了。</p><p>但是一上来就报错，真心看不懂，使用 0.78 加载以前的配置文件会报错，说要加 <code>||</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">42 │ # Use nushell functions to define your right and left prompt</span><br><span class="line">43 │ let-env PROMPT_COMMAND = &#123; create_left_prompt &#125;</span><br><span class="line">   ·                          ───────────┬──────────</span><br><span class="line">   ·                                     ╰── Parsing as a closure, but || is missing</span><br><span class="line">44 │ let-env PROMPT_COMMAND_RIGHT = &#123; create_right_prompt &#125;</span><br><span class="line">   ╰────</span><br><span class="line"> help: Try add || to the beginning of closure</span><br></pre></td></tr></table></figure><p>查看一下 GitHub issues ：<a href="https://github.com/nushell/nushell/issues/8767">Error: nu::parser::closure_missing_pipe (nushell v0.78.0) · Issue #8767 · nushell&#x2F;nushell (github.com)</a></p><p>means that it should be</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let-env PROMPT_COMMAND = &#123;|| create_left_prompt &#125;</span><br></pre></td></tr></table></figure><p>如果只是一行需要修改，那倒是无所谓，问题是很多地方需要改，那么一个一个加也不是办法呀，还是让它重新生成配置文件吧。</p><p>于是我把 <code>env.nu</code> 和 <code>config.nu</code> 改个名字，再新开一个 tab，就会提示是否新建配置文件。</p><p>使用新的配置文件之后，可以不报错了，但是，ohmyposh这边又有问题了。</p><p>修改 <code>env.nu</code> 和 <code>config.nu</code> 这两个文件，让 nu 启动时加载 ohmyposh，结果出现这样的报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: nu::parser::closure_missing_pipe</span><br><span class="line"></span><br><span class="line">  × Missing || inside closure</span><br><span class="line">    ╭─[.oh-my-posh.nu:8:1]</span><br><span class="line">  8 │     # making the behavior different compared to other shells</span><br><span class="line">  9 │     let-env PROMPT_COMMAND_RIGHT = &#123;&#x27;&#x27;&#125;</span><br><span class="line">    ·                                    ──┬─</span><br><span class="line">    ·                                      ╰── Parsing as a closure, but || is missing</span><br><span class="line"> 10 │     let-env POSH_SHELL_VERSION = (version | get version)</span><br><span class="line">    ╰────</span><br><span class="line">  help: Try add || to the beginning of closure</span><br></pre></td></tr></table></figure><p>也就是说，现在 <code>.oh-my-posh.nu</code> 里面的语法也是错误的了。</p><p>于是我到 <a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases/">https://github.com/JanDeDobbeleer/oh-my-posh/releases/</a> 查看一下。果然，它也刚刚更新了。</p><blockquote><h3 id="Bug-Fixes"><a href="#Bug-Fixes" class="headerlink" title="Bug Fixes"></a>Bug Fixes</h3><ul><li><strong>nushell:</strong> update syntax to for v0.78.0 (<a href="https://github.com/JanDeDobbeleer/oh-my-posh/commit/7e04bdc9f7a2c5541191a26e3e2f09a6dc278626">7e04bdc</a>)</li></ul></blockquote><p>于是我更新 oh-my-posh 到最新的版本，就解决问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一次的升级挺恼火的。&lt;/p&gt;
&lt;p&gt;看到 nu shell 发布新版本了，看更新日志好像挺不错。于是我下载压缩包，解压，到「终端」改一下设置，就可以使用新版本了。&lt;/p&gt;
&lt;p&gt;但是一上来就报错，真心看不懂，使用 0.78 加载以前的配置文件会报错，说要加 &lt;code&gt;|</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
    <category term="shell" scheme="https://powersee.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Nu shell Oh My Posh</title>
    <link href="https://powersee.github.io/2023/04/nushell-ohmyposh/"/>
    <id>https://powersee.github.io/2023/04/nushell-ohmyposh/</id>
    <published>2023-04-06T17:42:53.000Z</published>
    <updated>2023-04-11T17:30:48.965Z</updated>
    
    <content type="html"><![CDATA[<p>给 Nu shell 配置上 Oh My Posh，完成后效果如下。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nu-ohmyposh.webp" alt="nu-ohmyposh"></p><p>之前我已经给 powershell 配置好 ohmyposh 了，现在感觉还是 nu shell 比较好用，所以也来折腾一下。</p><p>官方文档：<a href="https://ohmyposh.dev/docs/installation/prompt">Change your prompt | Oh My Posh</a></p><p>有这些 shell 可以选择：</p><ul><li>bash</li><li>cmd</li><li>elvish</li><li>fish</li><li><code>nu</code></li><li>powershell</li><li>tcsh</li><li>xonsh</li><li>zsh</li></ul><p>点击中间的 nu 可以看到说明。</p><p>简单来说，就是修改 nushell 的两个配置文件就好。它们在 <code>~\AppData\Roaming\nushell</code> 里面。</p><p>添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oh-my-posh init nu</span><br></pre></td></tr></table></figure><p>到 <code>env.nu</code> 里面，我直接写在第四行的位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Nushell Environment Config File</span><br><span class="line">alias ll = ls -l</span><br><span class="line"></span><br><span class="line">oh-my-posh init nu</span><br></pre></td></tr></table></figure><p>然后再到 <code>config.nu</code> 的最后，添加这一行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.oh-my-posh.nu</span><br></pre></td></tr></table></figure><p>它会生成 <code>~/.oh-my-posh.nu</code> ，也就是在用户目录下。打开后里面是这些内容。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">export-env &#123;</span><br><span class="line">    let-env POWERLINE_COMMAND = <span class="string">&#x27;oh-my-posh&#x27;</span></span><br><span class="line">    let-env POSH_THEME = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    let-env PROMPT_INDICATOR = <span class="string">&quot;&quot;</span></span><br><span class="line">    let-env POSH_PID = (random uuid)</span><br><span class="line">    <span class="comment"># By default displays the right prompt on the first line</span></span><br><span class="line">    <span class="comment"># making it annoying when you have a multiline prompt</span></span><br><span class="line">    <span class="comment"># making the behavior different compared to other shells</span></span><br><span class="line">    let-env PROMPT_COMMAND_RIGHT = &#123;<span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    let-env POSH_SHELL_VERSION = (version | get version)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PROMPTS</span></span><br><span class="line">    let-env PROMPT_MULTILINE_INDICATOR = (^<span class="string">&quot;C:/Users/nucx/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe&quot;</span> <span class="built_in">print</span> secondary $<span class="string">&quot;--config=(<span class="variable">$env</span>.POSH_THEME)&quot;</span> --shell=nu $<span class="string">&quot;--shell-version=(<span class="variable">$env</span>.POSH_SHELL_VERSION)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    let-env PROMPT_COMMAND = &#123;</span><br><span class="line">        <span class="comment"># We have to do this because the initial value of `$env.CMD_DURATION_MS` is always `0823`,</span></span><br><span class="line">        <span class="comment"># which is an official setting.</span></span><br><span class="line">        <span class="comment"># See https://github.com/nushell/nushell/discussions/6402#discussioncomment-3466687.</span></span><br><span class="line">        <span class="built_in">let</span> cmd_duration = <span class="keyword">if</span> <span class="variable">$env</span>.CMD_DURATION_MS == <span class="string">&quot;0823&quot;</span> &#123; 0 &#125; <span class="keyword">else</span> &#123; <span class="variable">$env</span>.CMD_DURATION_MS &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hack to set the cursor line to 1 when the user clears the screen</span></span><br><span class="line">        <span class="comment"># this obviously isn&#x27;t bulletproof, but it&#x27;s a start</span></span><br><span class="line">        <span class="built_in">let</span> clear = (<span class="built_in">history</span> | last 1 | get 0.<span class="built_in">command</span>) == <span class="string">&quot;clear&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> width = ((term size).columns | into string)</span><br><span class="line">        ^&quot;C:/Users/nucx/AppData/Local/Programs/oh-my-posh/bin/oh-my-posh.exe&quot; print primary $&quot;--config=(<span class="variable">$env</span>.POSH_THEME)&quot; --shell=nu $&quot;--shell-version=(<span class="variable">$env</span>.POSH_SHELL_VERSION)&quot; $&quot;--execution-time=(<span class="variable">$cmd_duration</span>)&quot; $&quot;--error=(<span class="variable">$env</span>.LAST_EXIT_CODE)&quot; $&quot;--terminal-width=(<span class="variable">$width</span>)&quot; $&quot;--cleared=(<span class="variable">$clear</span>)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if &quot;false&quot; == &quot;true&quot; &#123;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给 Nu shell 配置上 Oh My Posh，完成后效果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nu-ohmyposh.webp&quot; </summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
    <category term="shell" scheme="https://powersee.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Windows 安装 Nu shell 与配置</title>
    <link href="https://powersee.github.io/2023/04/windows-install-nushell-and-config/"/>
    <id>https://powersee.github.io/2023/04/windows-install-nushell-and-config/</id>
    <published>2023-04-05T16:07:13.000Z</published>
    <updated>2023-04-11T17:30:48.968Z</updated>
    
    <content type="html"><![CDATA[<p>使用 nu shell 已经有一段时间，感觉还不错。它最为吸引我的就是，自带历史记录提示，就像 zsh 的 zsh-autosuggestions 插件。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nushell-autosuggestions.png" alt="nushell-autosuggestions"></p><p>它的一条普通的 ls 命令，结果也和其它 shell 很不一样。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/nushell-ls.png" alt="nushell-ls"></p><p>输出的是一个表格。</p><p>安装可以查看官方文档：<a href="https://www.nushell.sh/zh-CN/book/installation.html">安装 Nu | Nushell</a></p><p>文档一共 6 种语言，中文就是其中一种。</p><p>我是到  <a href="https://github.com/nushell/nushell/releases">GitHub 的 Release 页</a> 下载并解压二进制文件，然后放到 <code>C:\bin\</code> 里面的。接着在「终端」里面添加 nushell。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-add-nushell.png" alt="terminal-add-nushell"></p><p>如果想让 nushell 作为默认的 shell，可以到「启动」，「默认配置文件」进行更改。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/terminal-default-shell.png" alt="terminal-default-shell"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 nu shell 已经有一段时间，感觉还不错。它最为吸引我的就是，自带历史记录提示，就像 zsh 的 zsh-autosuggestions 插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzh</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
    <category term="shell" scheme="https://powersee.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>更改 Mac 截图快捷键、文件名、文件格式</title>
    <link href="https://powersee.github.io/2023/04/mac-screenshot2/"/>
    <id>https://powersee.github.io/2023/04/mac-screenshot2/</id>
    <published>2023-04-04T17:38:02.000Z</published>
    <updated>2023-04-11T17:30:48.974Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更改截图默认快捷键"><a href="#更改截图默认快捷键" class="headerlink" title="更改截图默认快捷键"></a>更改截图默认快捷键</h3><p>Mac 默认的截图快捷键是 cmd+shift+3 全屏截图，cmd+shift+4 区域截图。按 3 颗按键还是有些不方便，对于我这种经常截图的人来说。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/screenshot-hotkey.webp" alt="screenshot-hotkey"></p><p>我们可以到「系统偏好设置」「键盘」「快捷键」「截屏」中，更改为自己喜欢的按键，我这边直接把区域截图改为<code>F9</code>。</p><h3 id="更改截图默认文件名"><a href="#更改截图默认文件名" class="headerlink" title="更改截图默认文件名"></a>更改截图默认文件名</h3><p>默认截图后得到的图片名称是这样的 <code>截屏2023-04-02 上午10.58.54.png</code>，如果在「语言与地区」里有勾选 ☑️ 24 小时制，那么是这样的 <code>截屏2023-04-02 11.08.06.png</code></p><p>在英文状态下是 <code>Screen Shot [date] at [time].png</code></p><p>我们能修改的，只有日期前面的文字而已，例如我不想要「截图」这两个字。</p><p>打开「终端」这个 APP，粘贴下面的命令，按回车键执行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;&quot;</span><br></pre></td></tr></table></figure><p>之后截图得到的文件名会变成这样的 <code>2023-04-02 11.08.06.png</code></p><p>我们也可以改为自己的想设置的文字，例如我想在前面加上 <code>powersee-</code>，我可以这样做</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;powersee-&quot;</span><br></pre></td></tr></table></figure><p>之后截图得到的文件名会变成这样的 <code>powersee-2023-04-02 11.08.06.png</code></p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/change-screencapture-name.webp" alt="change-screencapture-name"></p><p>如果想改回原来的默认名称，可以用这条命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 1; killall SystemUIServer</span><br></pre></td></tr></table></figure><h3 id="更改截图默认文件格式"><a href="#更改截图默认文件格式" class="headerlink" title="更改截图默认文件格式"></a>更改截图默认文件格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type</span><br></pre></td></tr></table></figure><p>后面可以加 JPG, TIFF, GIF, PDF, PNG 这些，我没有改，还是用它默认的 png 就好。</p><h3 id="截图不要阴影"><a href="#截图不要阴影" class="headerlink" title="截图不要阴影"></a>截图不要阴影</h3><p>按 cmd shift 4 后，按空格键，此时按住 alt 键再点击窗口的话，保存下来的图片就是没有阴影的，图片体积会小很多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;更改截图默认快捷键&quot;&gt;&lt;a href=&quot;#更改截图默认快捷键&quot; class=&quot;headerlink&quot; title=&quot;更改截图默认快捷键&quot;&gt;&lt;/a&gt;更改截图默认快捷键&lt;/h3&gt;&lt;p&gt;Mac 默认的截图快捷键是 cmd+shift+3 全屏截图，cmd+shift+4</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Windows 上 where 命令</title>
    <link href="https://powersee.github.io/2023/04/windows-where/"/>
    <id>https://powersee.github.io/2023/04/windows-where/</id>
    <published>2023-04-04T03:52:13.000Z</published>
    <updated>2023-04-04T03:52:54.646Z</updated>
    
    <content type="html"><![CDATA[<p>在 Mac 和 Linux 我们可以使用 which 命令，来查看某个命令的绝对路径，例如：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">which</span> go</span><br><span class="line">/usr/local/go/bin/go</span><br></pre></td></tr></table></figure><p>在 Windows 上我们可以使用 where</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">where</span> node</span><br><span class="line">C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure><p>我测试了下，发现只有 cmd 支持，我用 powershell 和 nu shell 都不支持。</p><p>解决方法是，使用 <code>where.exe</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; where.exe node</span><br><span class="line">C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure><p>或者使用 <code>gcm</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; gcm node</span><br><span class="line"></span><br><span class="line">CommandType     Name        Version    Source</span><br><span class="line">-----------     ----        -------    ------</span><br><span class="line">Application     node.exe    19.8.1.0   C:\bin\node-v19.8.1-win-x64\node.exe</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Mac 和 Linux 我们可以使用 which 命令，来查看某个命令的绝对路径，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;❯ &lt;sp</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>我的图片优化方案</title>
    <link href="https://powersee.github.io/2023/04/blog-image-optimize/"/>
    <id>https://powersee.github.io/2023/04/blog-image-optimize/</id>
    <published>2023-04-02T17:26:05.000Z</published>
    <updated>2023-04-11T17:30:48.965Z</updated>
    
    <content type="html"><![CDATA[<p>我现在的博客是用 hexo 生成的静态网页，部署在 GitHub pages。</p><p>而众所周知，国内访问 GitHub pages 一直不怎么好，所以优化非常重要。</p><p>我之前使用的博客主题，需要加载 font awesome 图标，导致网站打开后需要等很久才能看到图标。再加上用久了，有点审美疲劳，所以最近换了个主题，现在速度快了很多。</p><p>改完主题后，我又注意到另一个影响访问速度的因素——图片。</p><p>我博客的图片，都是放在 source&#x2F;img 目录中，按照年份建立目录。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/blog-source-img.jpg" alt="blog-source-img"></p><p>我可以通过按大小排序，来查出哪些图片占用的空间比较大。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/images-sort-by-size.webp" alt="images-sort-by-size"></p><p>现在看到的是我已经优化过的了，下面说说我的优化过程。</p><h3 id="Mac-自带「预览」"><a href="#Mac-自带「预览」" class="headerlink" title="Mac 自带「预览」"></a>Mac 自带「预览」</h3><p>在 Mac 上双击一张图片，会使用自带的「预览」来打开。可以点击「文件」「导出」，选择 JPEG 格式，可以更改它的质量来缩小图片体积。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/Mac-preview-export.webp" alt="Mac-preview-export"></p><h3 id="使用-Photoshop-或者-affinity-photo"><a href="#使用-Photoshop-或者-affinity-photo" class="headerlink" title="使用 Photoshop 或者 affinity photo"></a>使用 Photoshop 或者 affinity photo</h3><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/affinity-photo.webp" alt="affinity-photo"></p><p>专业的图片处理软件，除非要修改图片内容，不然一般不会选择用它们来压缩图片。</p><h3 id="ImageOptim"><a href="#ImageOptim" class="headerlink" title="ImageOptim"></a>ImageOptim</h3><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ImageOptim.webp" alt="ImageOptim"></p><p>一个开源的图片优化工具，直接把图片拖进来就行。它只有 <a href="https://imageoptim.com/mac">Mac 版本</a>，在 <a href="https://github.com/ImageOptim/ImageOptim">GitHub</a> 上面有 8.3K star。</p><p>上面我拖了一张图片进来，它处理后，图片大小变成原来的 65.1% 了。这是在我开启微量有损的情况，不开的话，压缩比并不高。</p><p>然后我觉得它有两个缺点：</p><ul><li>压缩后直接替换掉原文件</li><li>压缩时间太长</li></ul><p>所以我不怎么用它。</p><h3 id="使用-WebP-格式"><a href="#使用-WebP-格式" class="headerlink" title="使用 WebP 格式"></a>使用 WebP 格式</h3><p>之前的<a href="/2023/03/about-webp/">文章</a>我已经介绍过它了，我目前博客新添加的图片，如果体积比较大，我都尽量把它们转为 WebP 格式。它的压缩比超级强。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/vr.webp" alt="qiyu-vr"></p><p>你能想象这样一张分辨率为 5472×3080 的图片，它只有 87KB 吗？</p><p>它可以做到图片很小的情况下，还保持着不错的图片质量，真心不错。</p><p>由于经常转换格式，所以我后来将它弄成一个 APP，图片拖进去就会自动转换为 WebP 格式。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/webp-mac-app.webp" alt="webp-mac-app"></p><p>感兴趣的可以看<a href="/2023/03/create-mac-app-from-command-line-scripts/">之前的文章</a>。这么一番优化，我目前整个博客的图片，只有 34MB，我手机开数据的情况下访问我的博客，速度方面感觉也还不错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我现在的博客是用 hexo 生成的静态网页，部署在 GitHub pages。&lt;/p&gt;
&lt;p&gt;而众所周知，国内访问 GitHub pages 一直不怎么好，所以优化非常重要。&lt;/p&gt;
&lt;p&gt;我之前使用的博客主题，需要加载 font awesome 图标，导致网站打开后需要等</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>安装 ohmyposh 来美化 powershell</title>
    <link href="https://powersee.github.io/2023/04/powershell-ohmyposh/"/>
    <id>https://powersee.github.io/2023/04/powershell-ohmyposh/</id>
    <published>2023-04-02T07:09:34.000Z</published>
    <updated>2023-04-11T17:30:48.958Z</updated>
    
    <content type="html"><![CDATA[<p>通过安装 ohmyposh 来美化 powershell，最终效果如下。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ohmyposh.png" alt="ohmyposh"></p><p>安装 Oh My Posh</p><p>可以到 Microsoft Store 安装</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/oh-my-posh-app-store.png" alt="oh-my-posh-app-store"></p><p>或者通过命令行来安装，需要用管理员身份运行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh -s winget</span><br></pre></td></tr></table></figure><p>不过，极大的可能会因为网络问题安装失败</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; winget install JanDeDobbeleer.OhMyPosh -s winget</span><br><span class="line">已找到 Oh My Posh [JanDeDobbeleer.OhMyPosh] 版本 14.24.0</span><br><span class="line">此应用程序由其所有者授权给你。</span><br><span class="line">Microsoft 对第三方程序包概不负责，也不向第三方程序包授予任何许可证。</span><br><span class="line">正在下载 https://github.com/JanDeDobbeleer/oh-my-posh/releases/download/v14.24.0/install-amd64.exe</span><br><span class="line">执行此命令时发生意外错误：</span><br><span class="line">InternetOpenUrl() failed.</span><br><span class="line">0x80072efd : unknown error</span><br></pre></td></tr></table></figure><p>我是通过设置命令行走代理来解决的。</p><p>想要 <code>ls</code> 后显示的文件带图标，需要安装 <code>Terminal-Icons</code>（需要用管理员身份运行）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Install-Module -Name Terminal-Icons -Repository PSGallery</span><br></pre></td></tr></table></figure><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ohmyposh-powershell.png" alt="ohmyposh-powershell"></p><p>需要输入两次 y，大小写随便。</p><p>装好后可以尝试在终端执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module -Name Terminal-Icons</span><br></pre></td></tr></table></figure><p>如果像这样报错了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Import-Module -Name Terminal-Icons</span><br><span class="line"></span><br><span class="line">Import-Module : 无法加载文件 C:\Program Files\WindowsPowerShell\Modules\Terminal-Icons\0.10.0\Terminal-Icons.psm1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line"></span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line"></span><br><span class="line">+ Import-Module -Name Terminal-Icons</span><br><span class="line"></span><br><span class="line">+ ~~~~~~~~~~</span><br><span class="line"></span><br><span class="line">+ CategoryInfo : SecurityError: (:) [Import-Module]，PSSecurityException</span><br><span class="line"></span><br><span class="line">+ FullyQualifiedErrorId : UnauthorizedAccess,Microsoft.PowerShell.Commands.ImportModuleCommand</span><br></pre></td></tr></table></figure><p>需要更改执行策略，执行命令后输入 y 再按回车。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; set-executionpolicy remotesigned</span><br><span class="line"></span><br><span class="line">执行策略更改</span><br><span class="line"></span><br><span class="line">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170</span><br><span class="line"></span><br><span class="line">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class="line"></span><br><span class="line">[Y] 是(Y) [A] 全是(A) [N] 否(N) [L] 全否(L) [S] 暂停(S) [?] 帮助 (默认值为“N”): y</span><br></pre></td></tr></table></figure><p>打开 PowerShell profile，加入这两行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oh-my-posh --init --shell pwsh --config ~\Documents\WindowsPowerShell\ohmyposhv3-v2.json | Invoke-Expression</span><br><span class="line">Import-Module -Name Terminal-Icons</span><br></pre></td></tr></table></figure><p>json 配置文件下载：<a href="https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c?WT.mc_id=-blog-scottha">ohmyposhv3-v2 (github.com)</a></p><p>直链：<a href="https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c/raw/8e9c9a8736ff4e9e5a863c20833d614549ccbc32/ohmyposhv3-v2.json">https://gist.github.com/shanselman/1f69b28bfcc4f7716e49eb5bb34d7b2c/raw/8e9c9a8736ff4e9e5a863c20833d614549ccbc32/ohmyposhv3-v2.json</a></p><p>我也放一份到我的博客里面：<a href="/misc/ohmyposhv3-v2.json">ohmyposhv3-v2</a> 可以右键，「链接另存为…」来下载。</p><p>我是把这个文件直接放到 Documents\WindowsPowerShell 里面。</p><p>你也可以放在其它地方，只要改 <code>--config</code> 后面的路径就行。</p><p>这样修改之后，之后打开终端就自动加载 oh my posh 了。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ohmyposh-1806.png" alt="ohmyposh-1806"></p><p>这里显示 1806 毫秒，后面我再新开两个 tab，都是 800 毫秒左右。</p><p>然后还需要设置字体，不然这些图标加载不出来。可以到<a href="https://www.nerdfonts.com/">这里</a>下载字体，选择自己喜欢的，下载后是压缩包，解压出来，选中所有字体，右键安装即可。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/win-terminal-font.png" alt="win-terminal-font"></p><p>之后到「设置」「默认值」「外观」里面更改字体。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;通过安装 ohmyposh 来美化 powershell，最终效果如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/ohmyposh.png&quot; al</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://powersee.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Mac 打开 shell 之后，提示 You have new mail</title>
    <link href="https://powersee.github.io/2023/04/mac-shell-you-have-new-mail/"/>
    <id>https://powersee.github.io/2023/04/mac-shell-you-have-new-mail/</id>
    <published>2023-03-31T17:15:01.000Z</published>
    <updated>2023-04-11T17:30:48.968Z</updated>
    
    <content type="html"><![CDATA[<p>邮件？这里的邮件可不是指邮件 APP 里的邮件。而是指 <code>/var/mail</code> 里面的邮件，其实就 cron 计划任务的日志。</p><p>可以在 shell 里执行 <code>mail</code> 来查看。也可以把 <code>/var/mail</code> 里的文件，直接拉到文本编辑器来查看，例如我直接放到 vscode 来查看。</p><p>由于文件没有后缀名，（我的是我的账号名）所以 vscode 自动检测错，把它识别为 Python 文件。</p><p>可以点击底部来更改，改成 log。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/vscode-log.webp" alt="vscode-log"></p><p>看完之后，发现也没什么，可以直接把这个文件删除了，这样再打开 shell 就不会有提示了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;邮件？这里的邮件可不是指邮件 APP 里的邮件。而是指 &lt;code&gt;/var/mail&lt;/code&gt; 里面的邮件，其实就 cron 计划任务的日志。&lt;/p&gt;
&lt;p&gt;可以在 shell 里执行 &lt;code&gt;mail&lt;/code&gt; 来查看。也可以把 &lt;code&gt;/var/mai</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac 截图的相关了解</title>
    <link href="https://powersee.github.io/2023/03/mac-screenshot/"/>
    <id>https://powersee.github.io/2023/03/mac-screenshot/</id>
    <published>2023-03-31T02:31:09.000Z</published>
    <updated>2023-04-11T17:30:48.965Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么-Mac-截图后，图片在-Finder-里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的"><a href="#为什么-Mac-截图后，图片在-Finder-里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的" class="headerlink" title="为什么 Mac 截图后，图片在 Finder 里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的"></a>为什么 Mac 截图后，图片在 Finder 里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的</h3><p>在 Mac OS 中，如果一个文件或文件夹的名称是灰色的，这通常表示该文件或文件夹已被标记为“不可用”，这意味着它已被删除、移动或重命名。</p><p>但是，在截图之后，Finder 中显示的文件名虽然是灰色的，但文件本身并没有被标记为“不可用”。相反，灰色的名称在这种情况下表示该文件是新创建的，但尚未被编辑或重命名。当您对该文件进行任何编辑或更改文件名时，文件名将变为黑色。</p><p>因此，无需担心截图文件名灰色的问题，这只是 Mac OS 的一种普遍表现形式，并不意味着该文件已被标记为“不可用”。</p><h3 id="Mac-截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？"><a href="#Mac-截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？" class="headerlink" title="Mac 截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？"></a>Mac 截图之后，图片会在右下角停留几秒，才显示在桌面，如何设置它直接显示在桌面？</h3><p>可以通过输入以下命令来更改截图的保存行为，并直接在桌面上显示它们，而无需等待几秒钟：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture show-thumbnail -bool FALSE &amp;&amp; killall SystemUIServer</span><br></pre></td></tr></table></figure><p>这会禁用截图缩略图并立即使更改生效。现在，您在截图后将立即在桌面上看到它们，而不是在弹出的缩略图中等待数秒。</p><p>请注意，在此更改生效后，您将无法通过双击屏幕截图缩略图来打开它。您需要手动打开存储截图的文件夹，然后找到并打开它们。但是，这个行为可以通过运行以下命令来恢复：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture show-thumbnail -bool TRUE &amp;&amp; killall SystemUIServer</span><br></pre></td></tr></table></figure><p>这里的 <code>-bool</code> 选项允许您将参数值设置为 <code>TRUE</code> 或 <code>FALSE</code>，以启用或禁用缩略图。</p><h3 id="如何更改截图保存位置？"><a href="#如何更改截图保存位置？" class="headerlink" title="如何更改截图保存位置？"></a>如何更改截图保存位置？</h3><p>默认情况下是保存在「桌面」目录中</p><p>我们可以按快捷键 <code>cmd + shift + 5</code> 来唤出截图界面，在「选项」里可以更改保存位置。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/screenshot-option.jpg" alt="screenshot-option"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为什么-Mac-截图后，图片在-Finder-里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的&quot;&gt;&lt;a href=&quot;#为什么-Mac-截图后，图片在-Finder-里面，和其它的文件不一样，它的文件名是灰色的，不像其它文件是黑色的&quot; class=</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>让 iTerm2 命令执行完之后，弹出通知</title>
    <link href="https://powersee.github.io/2023/03/iterm2-notification/"/>
    <id>https://powersee.github.io/2023/03/iterm2-notification/</id>
    <published>2023-03-30T06:04:33.000Z</published>
    <updated>2023-04-11T17:30:48.965Z</updated>
    
    <content type="html"><![CDATA[<p>感觉这个功能超好用。</p><p>有些命令可能需要很久才能执行完，主要是安装之类的，例如 brew 或者 npm，按下回车之后，都不知道它要多久才能装好，我们可能需要时不时就回来看看。</p><p>而在 iTerm2 里面，我们可以设置命令执行完之后，弹出一条通知。这样一来，我们执行命令后，就可以去干其它事情了，等收到通知再回来就行。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iTerm2-notification.png" alt="iTerm2-notification"></p><p>想要实现这个功能，需要在顶部菜单里，先点击「iTerm2」，再点击「Install Shell Integration」，意思是安装 shell 集合。</p><p>它会执行这样一条命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash</span><br></pre></td></tr></table></figure><p>安装好后多出这些功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You will also have these commands:</span><br><span class="line">imgcat filename</span><br><span class="line">  Displays the image inline.</span><br><span class="line">imgls</span><br><span class="line">  Shows a directory listing with image thumbnails.</span><br><span class="line">it2api</span><br><span class="line">  Command-line utility to manipulate iTerm2.</span><br><span class="line">it2attention start|stop|fireworks</span><br><span class="line">  Gets your attention.</span><br><span class="line">it2check</span><br><span class="line">  Checks if the terminal is iTerm2.</span><br><span class="line">it2copy [filename]</span><br><span class="line">  Copies to the pasteboard.</span><br><span class="line">it2dl filename</span><br><span class="line">  Downloads the specified file, saving it in your Downloads folder.</span><br><span class="line">it2setcolor ...</span><br><span class="line">  Changes individual color settings or loads a color preset.</span><br><span class="line">it2setkeylabel ...</span><br><span class="line">  Changes Touch Bar function key labels.</span><br><span class="line">it2tip</span><br><span class="line">  iTerm2 usage tips</span><br><span class="line">it2ul</span><br><span class="line">  Uploads a file.</span><br><span class="line">it2universion</span><br><span class="line">  Sets the current unicode version.</span><br><span class="line">it2profile</span><br><span class="line">  Change iTerm2 session profile on the fly.</span><br></pre></td></tr></table></figure><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/shell-integration-install-complete.jpg" alt="shell-integration-install-complete"></p><p>然后我们新开一个窗口或者 tab，在菜单里面选择 Edit 、 Marks and Annotations 、 Alerts，打开 Alert on next mark</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/alert-no-next-Mark.webp" alt="alert-no-next-Mark"></p><p>开启之后，就可以在右上角看到一个眼睛👁的图标。也可以使用快捷键 <code>cmd + alt + A</code> 来开启。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iTerm2-marked.webp" alt="iTerm2-marked"></p><p>之后再执行命令，只要命令完成了，就会弹出一条通知。</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iTerm2-notification.png" alt="iTerm2-notification"></p><p>如果我们选择 「Show Modal Alert Box」，那么会出现这样一个提示窗口</p><p><img src="https://blog-img-1259157239.cos.ap-guangzhou.myqcloud.com/img/2023/iTerm2-alert.webp" alt="iTerm2-alert"></p><p>点击 Reveal 就会跳转到 iTerm2 里面。不过这个应该先执行命令，在设置 Mark 出现眼睛👁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉这个功能超好用。&lt;/p&gt;
&lt;p&gt;有些命令可能需要很久才能执行完，主要是安装之类的，例如 brew 或者 npm，按下回车之后，都不知道它要多久才能装好，我们可能需要时不时就回来看看。&lt;/p&gt;
&lt;p&gt;而在 iTerm2 里面，我们可以设置命令执行完之后，弹出一条通知。这样</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>给图片加时间戳水印</title>
    <link href="https://powersee.github.io/2023/03/add-timestamp-to-images/"/>
    <id>https://powersee.github.io/2023/03/add-timestamp-to-images/</id>
    <published>2023-03-29T00:12:33.000Z</published>
    <updated>2023-03-29T00:54:35.995Z</updated>
    
    <content type="html"><![CDATA[<p>在安装了 imageMagick 之后，可以使用命令来对图片进行修改。</p><p>例如，给图片加时间戳水印。需要使用到 <code>convert</code> 这个命令。</p><p>我在网上看到的教程，有教使用 <code>%[exif:datetime]</code>、<code>%[exif:dateTimeOriginal]</code>这些参数的。</p><p>但是我尝试之后都失败了。因为并不是所有的图片都有这些信息。</p><p>我们可以使用这个命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">identify -verbose your_image.jpg</span><br></pre></td></tr></table></figure><p>来查看图片有哪些元数据，这是我的一张图片，是使用命令行捕获摄像头画面保存下来的，信息比用相机拍的图片少很多。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Properties:</span><br><span class="line">  date:create: 2023-03-26T06:45:38+00:00</span><br><span class="line">  date:modify: 2023-03-26T06:45:38+00:00</span><br><span class="line">  date:timestamp: 2023-03-28T07:43:40+00:00</span><br><span class="line">  jpeg:colorspace: 2</span><br></pre></td></tr></table></figure><p>把 <code>2023-03-26T06:45:38+00:00</code> 这样的时间加到图片上，好像作用不大，因为我们这是 +08:00，弄个 0 时区的时间加上去……</p><p>另外还可以不用图片的日期，我想要将当前的时间，直接加到图片上，可以这么写</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">convert snapshot.jpg -gravity SouthEast -fill yellow -pointsize 20 -annotate +1+1  <span class="string">&quot;`date +&#x27;%Y-%m-%d %H:%M:%S&#x27;`&quot;</span> temp.jpg</span><br></pre></td></tr></table></figure><p>这样的命令可以把当前时间印在图片上。不过这么用的应该很少，按理说，一般应该使用图片的创建时间，也就是照片拍摄的时间。</p><p>如果使用相机、手机拍的照片，一般使用<code>DateTimeOriginal</code>会比较多。</p><p>这是一张使用索尼相机拍的照片，它有这些信息。可以发现</p><ul><li>DateTime</li><li>DateTimeDigitized</li><li>DateTimeOriginal</li></ul><p>的时间都是一样的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Properties:</span><br><span class="line">  date:create: 2022-11-23T09:29:46+00:00</span><br><span class="line">  date:modify: 2022-07-05T06:35:22+00:00</span><br><span class="line">  date:timestamp: 2023-03-28T13:22:40+00:00</span><br><span class="line">  exif:BrightnessValue: 13884/2560</span><br><span class="line">  exif:ColorSpace: 1</span><br><span class="line">  exif:ComponentsConfiguration: ...</span><br><span class="line">  exif:CompressedBitsPerPixel: 1/1</span><br><span class="line">  exif:Contrast: 0</span><br><span class="line">  exif:CustomRendered: 0</span><br><span class="line">  exif:DateTime: 2022:07:05 14:35:23</span><br><span class="line">  exif:DateTimeDigitized: 2022:07:05 14:35:23</span><br><span class="line">  exif:DateTimeOriginal: 2022:07:05 14:35:23</span><br><span class="line">  exif:DigitalZoomRatio: 16/16</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>如果我们要加时间戳，直接使用这样的时间就行了。因此我建议先查看一下，图片有哪些元数据可以用，再看看选择哪个比较好。</p><hr><p>记录我遇到的一个坑，使用下面的命令，在 zsh 里面都会报错。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ convert snapshot.jpg -gravity SouthEast -fill yellow -pointsize 20 -annotate +1+1  %[<span class="built_in">date</span>:create] temp.jpg</span><br><span class="line"></span><br><span class="line">zsh: no matches found: %[<span class="built_in">date</span>:create]</span><br></pre></td></tr></table></figure><p>这个错误是因为 zsh 默认开启了文件名通配符的功能，其中 <code>%[</code> 是 zsh 文件名通配符的一部分，所以它会认为 <code>%[</code> 是一个通配符，然后去尝试匹配文件名，但是找不到符合这个模式的文件，于是就报错了。</p><p>为了解决这个问题，需要把 <code>%[</code> 用引号引起来，例如：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">convert snapshot.jpg -gravity SouthEast -fill yellow -pointsize 20 -annotate +1+1 <span class="string">&quot;%[date:create]&quot;</span> temp.jpg</span><br></pre></td></tr></table></figure><p>这样，zsh 就不会把 <code>%[</code> 当成文件名通配符了，而是当成普通的字符串来处理，就不会报错了。</p><p>如果你使用的是 bash，就可以不用加。但即使在 bash 里面加了引号，也可以执行的。</p><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>这条命令使用 ImageMagick 的 convert 工具对一张名为 snapshot.jpg 的图片进行操作，并将结果保存为 temp.jpg。</p><p>具体的操作包括：</p><ol><li><code>-gravity SouthEast</code>：将文字水印放在东南方，也就是图片的右下角。</li><li><code>-fill yellow</code>：将文字水印的颜色设置为黄色。</li><li><code>-pointsize 20</code>：设置文字水印的字体大小为 20。</li><li><code>-annotate +1+1</code>：往左和上偏移 1 个像素。</li><li><code>&quot;%[date:create]&quot;</code>：将图片创建日期和时间作为文字水印的内容，这里使用了 ImageMagick 的内置变量 %[date:create]，它会从图片的元数据中读取日期和时间信息。</li><li><code>temp.jpg</code>：保存处理后的图片为 temp.jpg。</li></ol><p>因此，这条命令的作用是在图片的右下角添加一个黄色文字水印，内容为该图片的创建日期和时间。</p><p>我这条命令，是用在分辨率只有 640×480 的图片上的，如果是分辨率高的图片，得改改。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">convert DSC00097.JPG -gravity SouthEast -fill yellow -pointsize 200 -annotate +10+10  <span class="string">&quot;%[exif:DateTime]&quot;</span> temp.jpg</span><br></pre></td></tr></table></figure><p>我这张图片的分辨率是 5472 × 3080，所以我把字体大小改为 200，偏移改为 10 像素，最终的效果是这样的。</p><p><img src="/img/2023/vr-add-timestamp.webp" alt="vr-add-timestamp"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在安装了 imageMagick 之后，可以使用命令来对图片进行修改。&lt;/p&gt;
&lt;p&gt;例如，给图片加时间戳水印。需要使用到 &lt;code&gt;convert&lt;/code&gt; 这个命令。&lt;/p&gt;
&lt;p&gt;我在网上看到的教程，有教使用 &lt;code&gt;%[exif:datetime]&lt;/co</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用 ffmpeg 将图片合并为视频</title>
    <link href="https://powersee.github.io/2023/03/combine-pictures-into-a-video/"/>
    <id>https://powersee.github.io/2023/03/combine-pictures-into-a-video/</id>
    <published>2023-03-28T06:38:50.000Z</published>
    <updated>2023-03-28T07:12:26.752Z</updated>
    
    <content type="html"><![CDATA[<p>我需要合并图片为一个视频。我有很多张图片，像这样的命名：<code>2023-03-24-105322.jpg</code> <code>2023-03-24-105352.jpg</code> … 也就是(年-月-日-时分秒.jpg) 这样的来命名的。</p><p>我可以使用这样的命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -pattern_type glob -i <span class="string">&#x27;*.jpg&#x27;</span> output.mp4</span><br></pre></td></tr></table></figure><p>没有指定帧率，默认使用 25 帧。直接使用 * 会将当前目录中的所有 jpg 文件都匹配到。</p><p>如果我目录中还有其它图片，不想合并到视频里面，那么也可以这么写：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ffmpeg -pattern_type glob -i <span class="string">&#x27;????-??-??-??????.jpg&#x27;</span> output.mp4</span><br></pre></td></tr></table></figure><p><code>?</code>通配符表示匹配任意一个字符。</p><p>这样合并出来的视频，是一帧一张图片。这样太快了，一秒播放了 25 张图片。我想要它慢一点，可以通过调整帧率来实现。</p><p>此时需要使用 <code>-r</code> 参数，设置帧数为 10，这样一秒就只播放 10 张图片。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -r 10 -pattern_type glob -i &#x27;????-??-??-??????.jpg&#x27; output.mp4</span><br></pre></td></tr></table></figure><p>注意要放在 <code>-i</code> 前面。如果放在 <code>-i</code> 后面，会导致跳帧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我需要合并图片为一个视频。我有很多张图片，像这样的命名：&lt;code&gt;2023-03-24-105322.jpg&lt;/code&gt; &lt;code&gt;2023-03-24-105352.jpg&lt;/code&gt; … 也就是(年-月-日-时分秒.jpg) 这样的来命名的。&lt;/p&gt;
&lt;p&gt;我可</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>将 Mac 上的 shell 脚本，变成原生 Mac 图形应用</title>
    <link href="https://powersee.github.io/2023/03/create-mac-app-from-command-line-scripts/"/>
    <id>https://powersee.github.io/2023/03/create-mac-app-from-command-line-scripts/</id>
    <published>2023-03-27T04:09:13.000Z</published>
    <updated>2023-03-27T12:52:15.486Z</updated>
    
    <content type="html"><![CDATA[<p>之前讲到 <a href="/2023/03/about-webp/">WebP 图片格式</a>，目前我博客里一些比较大的图片，我都会转换为 WebP，这样图片的体积会缩小很多，访问的时候速度能提快一些。</p><p>不过，每次要将图片转换为 WebP，我都需要打开终端，在 shell 里用 cwebp 来转换。如果能够把它变为一个 APP，我打开 APP 后，将图片拖进去，它就自动转换就好了。</p><p>很快啊，我就实现这个目的了。</p><p><img src="/img/2023/webp-mac-app.webp" alt="webp-mac-app"></p><p>实现起来也很简单，使用一个开源应用：<a href="https://github.com/sveinbjornt/Platypus">sveinbjornt&#x2F;Platypus: Create native Mac applications from command line scripts. (github.com)</a></p><p>这个应用名字挺有趣的，叫「鸭嘴兽」，它的目的是把命令行脚本转换为 Mac 原生应用。在 GitHub 上面有非常详细的<a href="https://github.com/sveinbjornt/Platypus/blob/master/Documentation/Documentation.md">说明文档</a>。</p><p><img src="/img/2023/Platypus-webp.webp" alt="Platypus-webp"></p><p>我是直接点击「+New」让它新建一个脚本的，里面写这些内容。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/opt/homebrew/bin/cwebp <span class="string">&quot;<span class="variable">$1</span>&quot;</span> -o <span class="string">&quot;<span class="variable">$&#123;1%.*&#125;</span>.webp&quot;</span></span><br></pre></td></tr></table></figure><p>Interface 就选 Droplet，这样 APP 打开后就是一个让我们把文件拖进去的界面。</p><p><img src="/img/2023/Suffixes.webp" alt="Suffixes"></p><p>然后在 <code>Accept dropped items</code> 后面的 settings 中，我们需要勾选 Accept dropped files。</p><p>Suffixes 下面的框，就是设置支持的文件后缀。我是怎么将 jpeg 和 png 加进去的呢？它下面的 + - 都是没法点击的。因此我是直接拖一张 jpeg 图片，和一张 png 图片进来，后缀就加上去了。</p><p><img src="/img/2023/only-264KB.webp" alt="only-264KB"></p><p>如果不加 APP 图标的话，这样创建的应用只有 264KB。不过我还是加图标了，这样比较美观。</p><p><img src="/img/2023/Platypus-webp.webp" alt="Platypus-webp"></p><p>这个图标居然要 1.3MB，我是从 <a href="https://macosicons.com/">https://macosicons.com/</a> 下载的，这网站也挺好的，本打算点击图标查看详情，没想到它直接就下载了。不仅免费，而且连注册账号都不用。见惯了国内的网站难看的吃相，遇到这种反到有点不习惯了。</p><p>一切设置好后，点击一下「Create App」，选择保存在哪里，就生成了一个 Mac APP。</p><p>我们可以把它放到「应用程序」里面，这样就可以在「启动台」里面找到它。而且只有这样，APP 打开后再退出，才会留在「程序坞」里面。</p><p><img src="/img/2023/WebP-dock.jpg" alt="WebP-dock"></p><p>如果经常使用，我们可以将它长期固定在「程序坞」。像我这种用来处理图片的，可以在不打开 APP 的情况下，直接将图片拖到 APP 上面，就会打开 APP 自动处理，确实提高了效率，很不错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前讲到 &lt;a href=&quot;/2023/03/about-webp/&quot;&gt;WebP 图片格式&lt;/a&gt;，目前我博客里一些比较大的图片，我都会转换为 WebP，这样图片的体积会缩小很多，访问的时候速度能提快一些。&lt;/p&gt;
&lt;p&gt;不过，每次要将图片转换为 WebP，我都需要打开终端</summary>
      
    
    
    
    
    <category term="Mac" scheme="https://powersee.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>电脑无线网卡没有 WiFi 但是有蓝牙</title>
    <link href="https://powersee.github.io/2023/03/WLAN-driver/"/>
    <id>https://powersee.github.io/2023/03/WLAN-driver/</id>
    <published>2023-03-26T06:00:39.000Z</published>
    <updated>2023-03-26T06:04:52.334Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现，电脑没有 WiFi 选项了。右下角没有，进入设置里面也没有。难道是无线网卡坏了？</p><p>但是如果坏了，蓝牙应该也没法用才对。现在蓝牙是可以使用的。</p><p>于是我拔掉无线网卡，开机，蓝牙也没了。</p><p>再插上，蓝牙回来了，但是依然没有 WiFi。</p><p>打开设备管理器，发现网卡那里有个感叹号❕</p><p><img src="/../img/2023/2023-03-25_12-12-17.webp" alt="旧驱动"></p><p>看来是驱动问题，网卡驱动是一年前的了，可能需要升级。</p><p>刚好电脑里有装 360，那看看它能否帮忙升级驱动，结果并不能，而且 360 检测居然发现不了问题，说驱动一切正常……</p><p>没办法，只能到网上冲浪🏄🏻。然后在 B 站找到这篇文章：<a href="https://www.bilibili.com/read/cv15538455">https://www.bilibili.com/read/cv15538455</a></p><p>从这里下载了驱动，我下的是这个压缩包：MT792xDriver_20221118.zip</p><p>之后到设备管理器里面更新驱动，这样驱动版本就从 495 升级到了 713。</p><p><img src="/../img/2023/2023-03-25_12-12-58.png" alt="RZ608"></p><p>然后 WiFi 就可以用了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;突然发现，电脑没有 WiFi 选项了。右下角没有，进入设置里面也没有。难道是无线网卡坏了？&lt;/p&gt;
&lt;p&gt;但是如果坏了，蓝牙应该也没法用才对。现在蓝牙是可以使用的。&lt;/p&gt;
&lt;p&gt;于是我拔掉无线网卡，开机，蓝牙也没了。&lt;/p&gt;
&lt;p&gt;再插上，蓝牙回来了，但是依然没有 WiF</summary>
      
    
    
    
    
    <category term="随笔" scheme="https://powersee.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
